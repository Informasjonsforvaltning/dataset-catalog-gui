function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { Grid } from '../Grid';
import { getClassNames } from './Accordion.classNames';
import classnames from 'classnames';

/*
 * visibleName Accordion (Trekkspill)
 */
export const Accordion = props => {
  const {
    processList,
    stepId,
    className,
    children,
    ariaLabel,
    headingLevel
  } = props,
        htmlAttributes = _objectWithoutProperties(props, ["processList", "stepId", "className", "children", "ariaLabel", "headingLevel"]);

  const {
    accordion
  } = getClassNames();
  const validChildren = React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child));
  const totalSteps = React.Children.count(validChildren);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: classnames(accordion, className),
    "aria-label": ariaLabel
  }, htmlAttributes), /*#__PURE__*/React.createElement(Grid, {
    padding: "0px"
  }, React.Children.map(validChildren, (child, index) => {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.cloneElement(child, {
        stepNumber: index + 1,
        id: stepId && stepId + index + 1,
        totalSteps,
        processList,
        headingLevel: child.props.headingLevel ? child.props.headingLevel : headingLevel
      });
    }
  })));
};