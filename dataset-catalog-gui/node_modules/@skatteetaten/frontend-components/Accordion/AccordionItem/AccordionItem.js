function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import classnames from 'classnames';
import { Heading } from '../../utils';
import { Grid } from '../../Grid';
import { Icon } from '../../Icon';
import { getClassNames } from '../Accordion.classNames';

const ToggleContent = props => {
  const {
    toggleContent,
    isContentOpen,
    styles,
    toggleButtonText,
    onClick,
    subtitle,
    headingLevel,
    stepId,
    processList
  } = props;

  if (!toggleContent) {
    return null;
  }

  return /*#__PURE__*/React.createElement("button", {
    className: isContentOpen ? classnames.default(styles.toggleButton, styles.toggleButtonOpen) : styles.toggleButton,
    "aria-expanded": isContentOpen,
    onClick: onClick,
    "aria-describedby": processList ? 'StepId' + stepId : undefined
  }, /*#__PURE__*/React.createElement("span", {
    className: styles.toggleButtonContent
  }, /*#__PURE__*/React.createElement("span", null, headingLevel && toggleButtonText ? /*#__PURE__*/React.createElement(Heading, {
    text: toggleButtonText,
    level: headingLevel
  }) : /*#__PURE__*/React.createElement("span", null, toggleButtonText), subtitle && (typeof subtitle === 'object' ? /*#__PURE__*/React.createElement("span", {
    className: styles.subtitle
  }, subtitle) : /*#__PURE__*/React.createElement("span", {
    className: styles.subtitle,
    "aria-label": subtitle
  }, subtitle))), /*#__PURE__*/React.createElement(Icon, {
    iconName: 'ChevronDown'
  })));
};
/*
 * visibleName AccordionItem (Rad i trekkspill)
 */


export const AccordionItem = props => {
  const [isContentOpen, setContentOpen] = React.useState(props.isOpen || false);

  const toggleVisibility = () => {
    setContentOpen(!isContentOpen);
  };

  const {
    title,
    subtitle,
    toggleContent,
    toggleButtonText,
    stepNumber,
    className,
    icon,
    ariaLabel,
    children,
    totalSteps,
    stepId,
    processList,
    headingLevel,
    id,
    isOpen,
    onChange,
    onClick
  } = props,
        htmlAttributes = _objectWithoutProperties(props, ["title", "subtitle", "toggleContent", "toggleButtonText", "stepNumber", "className", "icon", "ariaLabel", "children", "totalSteps", "stepId", "processList", "headingLevel", "id", "isOpen", "onChange", "onClick"]);

  const clickHandler = () => {
    if (onChange) {
      onChange();
    }

    if (onClick && !isContentOpen) {
      onClick();
    }

    toggleVisibility();
  };

  const styles = getClassNames();
  return /*#__PURE__*/React.createElement("div", _extends({
    key: stepNumber,
    className: classnames(styles.wrapperStep, className)
  }, htmlAttributes), processList && stepNumber !== totalSteps && /*#__PURE__*/React.createElement("span", {
    className: styles.stepLine
  }), /*#__PURE__*/React.createElement(Grid.Row, {
    rowSpacing: Grid.SPACE_NONE
  }, /*#__PURE__*/React.createElement(Grid.Col, {
    noSpacing: true
  }, /*#__PURE__*/React.createElement(Grid.Row, {
    rowSpacing: Grid.SPACE_NONE
  }, processList && /*#__PURE__*/React.createElement(Grid.Col, {
    noSpacing: true,
    sm: 2,
    md: 1,
    xl: 1
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.stepNumber
  }, /*#__PURE__*/React.createElement("span", {
    id: 'StepId' + stepId,
    "aria-label": ariaLabel ? ariaLabel : 'Steg ' + stepNumber
  }, icon ? /*#__PURE__*/React.createElement(Icon, {
    iconName: icon
  }) : stepNumber))), /*#__PURE__*/React.createElement(Grid.Col, {
    noSpacing: true,
    sm: processList ? 9 : 12,
    md: processList ? 10 : 12,
    xl: processList ? 11 : 12
  }, /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement(ToggleContent, {
    styles: styles,
    toggleContent: toggleContent,
    toggleButtonText: toggleButtonText,
    stepId: stepId,
    isContentOpen: isContentOpen,
    subtitle: subtitle,
    onClick: clickHandler,
    headingLevel: headingLevel,
    processList: processList
  }), (isContentOpen || !toggleContent) && /*#__PURE__*/React.createElement("div", {
    className: styles.content,
    id: stepId
  }, headingLevel && title ? headingLevel <= 5 ? /*#__PURE__*/React.createElement(Heading, {
    text: title,
    level: headingLevel + 1
  }) : {
    title
  } : title ? /*#__PURE__*/React.createElement("h2", {
    className: styles.heading
  }, title) : '', children), stepNumber === totalSteps && /*#__PURE__*/React.createElement("hr", null))))));
};