function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import classnames from 'classnames';
import { getClassNames } from './LinkGroup.classNames';
import { Link as SkeLink } from '../Link';

/*
 * visibleName LinkGroup (Lenkegruppe)
 */
export const LinkGroup = props => {
  const styles = getClassNames();
  return /*#__PURE__*/React.createElement("ul", {
    className: classnames(styles.arrowLinkList)
  }, props.links && props.links.map((link, index) => {
    const {
      text,
      path,
      renderContent
    } = link,
          htmlAttributes = _objectWithoutProperties(link, ["text", "path", "renderContent"]);

    return /*#__PURE__*/React.createElement("li", {
      className: classnames(styles.arrowLink, props.className),
      key: index
    }, link.renderContent ? link.renderContent(link.path, link.text, classnames(), htmlAttributes) : /*#__PURE__*/React.createElement(SkeLink, {
      linkGroup: true,
      icon: "ArrowForward",
      placement: "before",
      text: text,
      path: path
    }));
  }));
};