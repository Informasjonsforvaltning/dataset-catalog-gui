"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = exports.getCalloutStyles = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _utils = require("../utils");

var _fontSizes = _interopRequireDefault(require("../utils/designtokens/_fontSizes.json"));

var _colors = _interopRequireDefault(require("../utils/designtokens/_colors.json"));

var _spacing = _interopRequireDefault(require("../utils/designtokens/_spacing.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const dropdownPaddingLarge = `0.375rem ${_spacing.default['ske-spacing-md']}`;

function getFieldTypeStyles(props) {
  if (props.inputSize === 'large') {
    return {
      '.ms-Dropdown-title': {
        borderWidth: _spacing.default['ske-spacing-xs'],
        padding: dropdownPaddingLarge,
        borderRadius: '0',
        fontSize: _fontSizes.default['ske-font-size-l'],
        height: _spacing.default['ske-spacing-xxxl'],
        lineHeight: _spacing.default['ske-spacing-xxl']
      },
      '& span.ms-Dropdown-caretDownWrapper': {
        top: _spacing.default['ske-spacing-md'],
        fontSize: _fontSizes.default['ske-font-size-icon-l'],
        color: _colors.default['ske-color-interactive']
      }
    };
  } else {
    return {
      '.ms-Dropdown-title': {
        fontSize: _fontSizes.default['ske-font-size-s']
      },
      '& span.ms-Dropdown-caretDownWrapper': {
        color: _colors.default['ske-color-interactive']
      }
    };
  }
}

const getClassNames = props => {
  const {
    errorMessage
  } = props;
  const inset = 0;
  const radius = '0';
  const errorIcon = "'" + _utils.SkeIcons.icons.Error + "'";
  return (0, _mergeStyles.mergeStyleSets)({
    main: {
      selectors: _objectSpread(_objectSpread({}, getFieldTypeStyles(props)), {}, {
        '& .ms-TextField-errorMessage': {
          fontSize: _fontSizes.default['ske-font-size-s']
        },
        '::-moz-focus-inner': {
          border: '0'
        },
        '& .ms-Dropdown-title': {
          borderColor: _colors.default['ske-color-black-100'],
          borderRadius: '0'
        },
        '& .ms-Dropdown-titleIsPlaceHolder': {
          borderColor: _colors.default['ske-color-black-100']
        },
        '& .ms-Dropdown-title.ms-Dropdown-title': errorMessage && {
          borderColor: errorMessage ? _colors.default['ske-color-status-error'] : _colors.default['ske-color-black-100'],
          borderWidth: _spacing.default['ske-spacing-xs']
        },
        '& .ms-Dropdown.is-required::before': {
          display: 'none'
        },
        // hack
        '&:focus .ms-Dropdown-title.ms-Dropdown-title': {
          border: `${_spacing.default['ske-spacing-xs']} solid ${_colors.default['ske-color-interactive']}`
        },
        '& .is-disabled .ms-Dropdown': {
          backgroundColor: _colors.default['ske-color-status-error']
        },
        '& .is-disabled .ms-Dropdown-title': {
          borderColor: _colors.default['ske-color-grey-50'],
          borderStyle: 'solid',
          borderWidth: 1,
          backgroundColor: _colors.default['ske-color-grey-5']
        },
        '& .is-disabled .ms-Dropdown-caretDownWrapper': {
          color: _colors.default['ske-color-grey-50']
        },
        '&:active .is-disabled .ms-Dropdown-title': {
          borderColor: _colors.default['ske-color-grey-50']
        },
        '&:hover .is-disabled .ms-Dropdown-title': {
          borderColor: _colors.default['ske-color-grey-50'],
          cursor: 'not-allowed'
        },
        '&:focus:after': !props.disabled && {
          content: '""',
          position: 'absolute',
          left: inset + 1,
          top: inset + 1,
          bottom: inset + 1,
          right: inset + 1,
          borderRadius: radius,
          outline: 'transparent',
          zIndex: 1
        },
        '& div[role=alert]': {
          fontWeight: _fontSizes.default['ske-font-weight-medium']
        },
        '& div[role=alert]::before': {
          fontFamily: _utils.SkeIcons.fontFace.fontFamily,
          fontSize: _fontSizes.default['ske-font-size-m'],
          content: errorIcon,
          marginRight: _spacing.default['ske-spacing-sm'],
          verticalAlign: 'text-bottom'
        }
      })
    },
    readOnly: {
      borderStyle: 'none',
      fontSize: _fontSizes.default['ske-font-size-m'],
      fontWeight: _fontSizes.default['ske-font-weight-bold'],
      display: 'block',
      padding: 0,
      marginLeft: 0,
      marginRight: 0,
      height: _spacing.default['ske-spacing-xxl']
    }
  });
};

exports.getClassNames = getClassNames;

const getCalloutStyles = () => {
  const inset = 0;
  const radius = '0';
  return {
    dropdownItem: {
      color: _colors.default['ske-color-black-100'],
      marginTop: _spacing.default['ske-spacing-sm'],
      marginBottom: _spacing.default['ske-spacing-sm'],
      selectors: {
        '&:hover': {
          background: `${_colors.default['ske-color-interactive-light']} !important`,
          textDecoration: 'underline'
        },
        '&:active': {
          background: _colors.default['ske-color-interactive-light'],
          textDecoration: 'none'
        },
        '&:focus': {
          background: _colors.default['ske-color-interactive-light'],
          textDecoration: 'underline'
        },
        '&:hover:after, &:focus:after': {
          content: '""',
          position: 'absolute',
          left: inset + 1,
          top: inset + 1,
          bottom: inset + 1,
          right: inset + 1,
          borderRadius: radius,
          outline: 'transparent',
          zIndex: 1,
          color: _colors.default['ske-color-black-100']
        }
      }
    },
    dropdownItemSelected: {
      color: _colors.default['ske-color-black-100'],
      background: `${_colors.default['ske-color-grey-5']} !important`
    },
    dropdownOptionText: {
      whiteSpace: 'normal !important'
    }
  };
};

exports.getCalloutStyles = getCalloutStyles;