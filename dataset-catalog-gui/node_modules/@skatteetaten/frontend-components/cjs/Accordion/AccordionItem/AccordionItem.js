"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccordionItem = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var _Grid = require("../../Grid");

var _Icon = require("../../Icon");

var _Accordion = require("../Accordion.classNames");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ToggleContent = props => {
  const {
    toggleContent,
    isContentOpen,
    styles,
    toggleButtonText,
    onClick,
    subtitle,
    headingLevel,
    stepId,
    processList
  } = props;

  if (!toggleContent) {
    return null;
  }

  return /*#__PURE__*/React.createElement("button", {
    className: isContentOpen ? _classnames.default.default(styles.toggleButton, styles.toggleButtonOpen) : styles.toggleButton,
    "aria-expanded": isContentOpen,
    onClick: onClick,
    "aria-describedby": processList ? 'StepId' + stepId : undefined
  }, /*#__PURE__*/React.createElement("span", {
    className: styles.toggleButtonContent
  }, /*#__PURE__*/React.createElement("span", null, headingLevel && toggleButtonText ? /*#__PURE__*/React.createElement(_utils.Heading, {
    text: toggleButtonText,
    level: headingLevel
  }) : /*#__PURE__*/React.createElement("span", null, toggleButtonText), subtitle && (typeof subtitle === 'object' ? /*#__PURE__*/React.createElement("span", {
    className: styles.subtitle
  }, subtitle) : /*#__PURE__*/React.createElement("span", {
    className: styles.subtitle,
    "aria-label": subtitle
  }, subtitle))), /*#__PURE__*/React.createElement(_Icon.Icon, {
    iconName: 'ChevronDown'
  })));
};
/*
 * visibleName AccordionItem (Rad i trekkspill)
 */


const AccordionItem = props => {
  const [isContentOpen, setContentOpen] = React.useState(props.isOpen || false);

  const toggleVisibility = () => {
    setContentOpen(!isContentOpen);
  };

  const {
    title,
    subtitle,
    toggleContent,
    toggleButtonText,
    stepNumber,
    className,
    icon,
    ariaLabel,
    children,
    totalSteps,
    stepId,
    processList,
    headingLevel,
    id,
    isOpen,
    onChange,
    onClick
  } = props,
        htmlAttributes = _objectWithoutProperties(props, ["title", "subtitle", "toggleContent", "toggleButtonText", "stepNumber", "className", "icon", "ariaLabel", "children", "totalSteps", "stepId", "processList", "headingLevel", "id", "isOpen", "onChange", "onClick"]);

  const clickHandler = () => {
    if (onChange) {
      onChange();
    }

    if (onClick && !isContentOpen) {
      onClick();
    }

    toggleVisibility();
  };

  const styles = (0, _Accordion.getClassNames)();
  return /*#__PURE__*/React.createElement("div", _extends({
    key: stepNumber,
    className: (0, _classnames.default)(styles.wrapperStep, className)
  }, htmlAttributes), processList && stepNumber !== totalSteps && /*#__PURE__*/React.createElement("span", {
    className: styles.stepLine
  }), /*#__PURE__*/React.createElement(_Grid.Grid.Row, {
    rowSpacing: _Grid.Grid.SPACE_NONE
  }, /*#__PURE__*/React.createElement(_Grid.Grid.Col, {
    noSpacing: true
  }, /*#__PURE__*/React.createElement(_Grid.Grid.Row, {
    rowSpacing: _Grid.Grid.SPACE_NONE
  }, processList && /*#__PURE__*/React.createElement(_Grid.Grid.Col, {
    noSpacing: true,
    sm: 2,
    md: 1,
    xl: 1
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.stepNumber
  }, /*#__PURE__*/React.createElement("span", {
    id: 'StepId' + stepId,
    "aria-label": ariaLabel ? ariaLabel : 'Steg ' + stepNumber
  }, icon ? /*#__PURE__*/React.createElement(_Icon.Icon, {
    iconName: icon
  }) : stepNumber))), /*#__PURE__*/React.createElement(_Grid.Grid.Col, {
    noSpacing: true,
    sm: processList ? 9 : 12,
    md: processList ? 10 : 12,
    xl: processList ? 11 : 12
  }, /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement(ToggleContent, {
    styles: styles,
    toggleContent: toggleContent,
    toggleButtonText: toggleButtonText,
    stepId: stepId,
    isContentOpen: isContentOpen,
    subtitle: subtitle,
    onClick: clickHandler,
    headingLevel: headingLevel,
    processList: processList
  }), (isContentOpen || !toggleContent) && /*#__PURE__*/React.createElement("div", {
    className: styles.content,
    id: stepId
  }, headingLevel && title ? headingLevel <= 5 ? /*#__PURE__*/React.createElement(_utils.Heading, {
    text: title,
    level: headingLevel + 1
  }) : {
    title
  } : title ? /*#__PURE__*/React.createElement("h2", {
    className: styles.heading
  }, title) : '', children), stepNumber === totalSteps && /*#__PURE__*/React.createElement("hr", null))))));
};

exports.AccordionItem = AccordionItem;