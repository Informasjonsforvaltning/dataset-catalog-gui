"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOptionsClassNames = exports.getLabelClassNames = exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _react = require("@fluentui/react");

var _utils = require("../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getFieldTypeStyles(props) {
  const {
    errorMessage
  } = props;
  const palette = (0, _react.getTheme)().palette;
  const color = errorMessage ? palette.skeColor.error : palette.skeColor.blackAlt;

  if (props.inputSize === 'large') {
    return {
      '& .ms-ComboBox': {
        borderWidth: '2px',
        borderRadius: '0px',
        height: '46px',
        padding: '5px 12px',
        borderColor: palette.skeColor.blackAlt
      },
      '& .ms-ComboBox:after': {
        borderRadius: '0px',
        borderWidth: '2px',
        borderColor: errorMessage && color
      },
      '& .ms-ComboBox:focus': {
        borderColor: `${palette.skeColor.blue} !important`
      },
      '& .ms-ComboBox-Input': {
        fontSize: _utils.FontSizes.large
      },
      'i.ms-Button-icon': {
        fontSize: _utils.IconFontSizes.large,
        paddingRight: '4px'
      },
      '& ::placeholder': {
        color: `${palette.skeColor.darkGrey} !important`
      }
    };
  } else {
    return {
      '& .ms-ComboBox-Input': {
        fontSize: _utils.FontSizes.medium
      }
    };
  }
}

const getClassNames = props => {
  const {
    errorMessage
  } = props;
  const palette = (0, _react.getTheme)().palette;
  const errorIcon = "'" + _utils.SkeIcons.icons.Error + "'";
  const color = errorMessage ? palette.skeColor.error : palette.skeColor.blackAlt;
  return (0, _mergeStyles.mergeStyleSets)({
    main: {
      selectors: _objectSpread({
        //@ts-ignore
        '& .ms-ComboBox': {
          borderRadius: '0px',
          height: '32px',
          padding: '0px 32px 1px 8px'
        },
        //@ts-ignore
        '& .ms-ComboBox:focus': {
          outline: `2px solid ${palette.skeColor.blue}`,
          borderColor: palette.skeColor.blue
        },
        //@ts-ignore
        '& .ms-ComboBox:after': {
          borderRadius: '0px',
          borderColor: errorMessage && color,
          borderWidth: errorMessage && '2px'
        },
        '& .ms-ComboBox-Input.is-disabled': {
          backgroundColor: palette.skeColor.whiteGrey
        },
        '& .is-disabled .ms-ComboBox-Input:hover': {
          cursor: 'not-allowed'
        },
        '& .ms-ComboBox.is-disabled': {
          border: `1px solid ${palette.skeColor.lightGrey}`
        },
        '& .ms-ComboBox.is-disabled button': {
          color: palette.skeColor.grey
        },
        '.ms-ComboBox-CaretDown-button': {
          // Negative positioning to account for the 2px border
          right: '0',
          top: '0',
          color: palette.skeColor.blue
        },
        '& div[role=alert]::before': {
          fontFamily: _utils.SkeIcons.fontFace.fontFamily,
          fontSize: 16,
          content: errorMessage && errorIcon,
          marginRight: '3px',
          verticalAlign: 'text-bottom'
        },
        '& div[role=alert]': {
          fontWeight: _utils.FontWeights.medium,
          fontSize: _utils.FontSizes.small
        }
      }, getFieldTypeStyles(props))
    },
    readOnly: {
      borderStyle: 'none',
      fontSize: _utils.FontSizes.medium,
      fontWeight: 700,
      display: 'block',
      padding: 0
    }
  });
};

exports.getClassNames = getClassNames;

const getOptionsClassNames = props => {
  const palette = (0, _react.getTheme)().palette;
  return (0, _mergeStyles.mergeStyles)({
    displayName: 'SkeComboBoxOptions',
    selectors: {
      '& .ms-ComboBox-option': {
        border: `2px solid ${palette.skeColor.transparent}`,
        selectors: {
          ':hover': {
            background: palette.skeColor.lightBlue,
            textDecoration: 'underline'
          }
        }
      },
      '& .ms-ComboBox-option.is-checked': {
        background: palette.skeColor.lightBlue,
        textDecoration: 'underline',
        outline: 'none',
        selectors: {
          ':active': {
            background: `${palette.skeColor.lightBlue} !important`,
            border: `2px solid ${palette.skeColor.blue}`,
            textDecoration: 'none'
          }
        }
      },
      '& .ms-ComboBox-option.is-checked:after': {
        border: 'none',
        outline: 'none'
      },
      '& .ms-ComboBox-optionText': {
        whiteSpace: 'normal !important'
      },
      'button.ms-ComboBox-option': {
        marginTop: '4px',
        marginBottom: '4px'
      }
    }
  });
};

exports.getOptionsClassNames = getOptionsClassNames;

const getLabelClassNames = props => {
  const palette = (0, _react.getTheme)().palette;
  return (0, _mergeStyles.mergeStyleSets)({
    labelArea: {
      display: 'flex',
      alignItems: 'center'
    },
    label: {//flexGrow: 1,
    },
    labelText: {
      fontSize: _utils.FontSizes.small,
      color: palette.skeColor.blackAlt,
      fontWeight: _utils.FontWeights.regular
    },
    labelIconArea: {
      height: '27px',
      marginTop: '-5px'
    },
    icon: {
      color: palette.skeColor.blue,
      selectors: {
        '& i': {
          fontSize: 'large'
        },
        '&:focus&:after': {
          border: `2px solid ${palette.skeColor.blue}`,
          outline: 'none'
        },
        '&:focus::after': {
          border: `2px solid ${palette.skeColor.blue}`,
          outline: 'none'
        },
        '&:hover': {
          border: palette.skeColor.blackAlt,
          outline: 'none',
          background: 'none'
        }
      }
    }
  });
};

exports.getLabelClassNames = getLabelClassNames;