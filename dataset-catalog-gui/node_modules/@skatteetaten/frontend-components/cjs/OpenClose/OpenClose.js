"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenClose = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = require("../Icon");

var _utils = require("../utils");

var _OpenClose = require("./OpenClose.classNames");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const OpenClose = props => {
  const {
    title,
    customClassNames,
    headingLevel,
    iconRight,
    onClick,
    isOnClickOnlyFiredOnOpen = true,
    children
  } = props;
  const [isContentOpen, setContentOpen] = React.useState(props.isOpen || false);

  const toggleVisibility = () => setContentOpen(!isContentOpen);

  const clickHandler = () => {
    if (onClick) {
      if (isOnClickOnlyFiredOnOpen) {
        if (!isContentOpen) {
          onClick();
        }
      } else {
        onClick();
      }
    }

    toggleVisibility();
  };

  const styles = (0, _OpenClose.getClassNames)(props);
  return /*#__PURE__*/React.createElement("div", {
    className: customClassNames?.wrapper
  }, /*#__PURE__*/React.createElement("button", {
    className: isContentOpen ? (0, _classnames.default)(styles.toggleButton, styles.toggleButtonOpen, customClassNames?.button) : (0, _classnames.default)(styles.toggleButton, customClassNames?.button),
    "aria-expanded": isContentOpen,
    onClick: clickHandler
  }, !iconRight && /*#__PURE__*/React.createElement(_Icon.Icon, {
    iconName: 'ChevronDown'
  }), /*#__PURE__*/React.createElement("span", {
    className: iconRight ? styles.toggleTitleSpan : (0, _classnames.default)(styles.toggleTitleSpan, styles.toggleTitleLeft)
  }, headingLevel && title ? /*#__PURE__*/React.createElement(_utils.Heading, {
    text: title,
    level: headingLevel,
    className: "styledHeading"
  }) : title), iconRight && /*#__PURE__*/React.createElement(_Icon.Icon, {
    iconName: 'ChevronDown'
  })), isContentOpen && /*#__PURE__*/React.createElement("div", {
    className: !iconRight ? (0, _classnames.default)(styles.content, customClassNames?.content) : (0, _classnames.default)(styles.contentWhenIconRight, customClassNames?.content)
  }, children));
};

exports.OpenClose = OpenClose;
OpenClose.defaultProps = {
  underline: false,
  iconRight: false
};