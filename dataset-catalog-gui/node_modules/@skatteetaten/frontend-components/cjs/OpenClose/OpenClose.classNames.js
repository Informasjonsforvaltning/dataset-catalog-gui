"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = getClassNames;

var _mergeStyles = require("@fluentui/merge-styles");

var _spacing = _interopRequireDefault(require("../utils/designtokens/_spacing.json"));

var _fontSizes = _interopRequireDefault(require("../utils/designtokens/_fontSizes.json"));

var _colors = _interopRequireDefault(require("../utils/designtokens/_colors.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getClassNames(props) {
  const {
    compact,
    iconRight,
    underline
  } = props;
  return (0, _mergeStyles.mergeStyleSets)({
    toggleButton: {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'flex-start',
      border: 'none',
      color: _colors.default['ske-color-interactive'],
      fontSize: compact ? _fontSizes.default['ske-font-size-s'] : _fontSizes.default['ske-font-size-l'],
      fontWeight: _fontSizes.default['ske-font-weight-bold'],
      padding: compact ? `${_spacing.default['ske-spacing-xs']} ${_spacing.default['ske-spacing-sm']}` : `${_spacing.default['ske-spacing-sm']} ${_spacing.default['ske-spacing-md']}`,
      background: 'none',
      marginLeft: `-${_spacing.default['ske-spacing-md']}`,
      paddingLeft: _spacing.default['ske-spacing-md'],
      marginRight: `-${_spacing.default['ske-spacing-md']}`,
      paddingRight: _spacing.default['ske-spacing-md'],
      cursor: 'pointer',
      borderBottom: `${_spacing.default['ske-spacing-xs']} solid transparent`,
      selectors: {
        '&:hover, &:focus': {
          background: _colors.default['ske-color-interactive-light'],
          borderBottom: `${_spacing.default['ske-spacing-xs']} solid ${_colors.default['ske-color-interactive']}`,
          span: {
            textDecoration: 'none'
          }
        },
        '&:focus': {
          outline: 'none'
        },
        '& h1.styledHeading, h2.styledHeading, h3.styledHeading, h4.styledHeading, h5.styledHeading, h6.styledHeading': {
          fontSize: compact ? _fontSizes.default['ske-font-size-s'] : _fontSizes.default['ske-font-size-l'],
          margin: '0'
        },
        '& i': {
          transition: '.2s',
          padding: compact ? `${_spacing.default['ske-spacing-xs']} 0 0` : '0',
          marginLeft: iconRight ? _spacing.default['ske-spacing-sm'] : '0',
          marginTop: compact ? '0' : _spacing.default['ske-spacing-xs'],
          fontSize: compact ? _fontSizes.default['ske-font-size-icon-l'] : _fontSizes.default['ske-font-size-icon-xl']
        }
      }
    },
    content: {
      padding: _spacing.default['ske-spacing-md'],
      marginLeft: compact ? _spacing.default['ske-spacing-lg'] : _spacing.default['ske-spacing-xl'],
      marginBottom: _spacing.default['ske-spacing-md']
    },
    contentWhenIconRight: {
      padding: `${_spacing.default['ske-spacing-md']} 0`,
      marginLeft: compact ? _spacing.default['ske-spacing-lg'] : _spacing.default['ske-spacing-xl'],
      marginBottom: _spacing.default['ske-spacing-md']
    },
    heading: {
      fontSize: compact ? _fontSizes.default['ske-font-size-s'] : _fontSizes.default['ske-font-size-l'],
      margin: '0'
    },
    toggleTitleSpan: {
      textDecoration: underline ? 'underline' : 'none',
      textDecorationColor: 'rgba(19, 98, 174, 0.4)',
      textUnderlineOffset: '0.3rem',
      textDecorationThickness: '0.125rem',
      lineHeight: _fontSizes.default['ske-line-height-l'],
      textAlign: 'left'
    },
    toggleTitleLeft: {
      paddingLeft: compact ? _spacing.default['ske-spacing-sm'] : _spacing.default['ske-spacing-md']
    },
    toggleButtonOpen: {
      selectors: {
        '& i': {
          transform: 'rotate(180deg)'
        }
      }
    }
  });
}