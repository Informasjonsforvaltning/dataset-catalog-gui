"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = getClassNames;

var _mergeStyles = require("@fluentui/merge-styles");

var _react = require("@fluentui/react");

var _utils = require("../utils");

var _separatorSKE = _interopRequireDefault(require("./assets/separatorSKE.svg"));

var _separatorLSO = _interopRequireDefault(require("./assets/separatorLSO.svg"));

var _separatorINK = _interopRequireDefault(require("./assets/separatorINK.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getClassNames(props, tag) {
  const {
    compact
  } = props;
  const palette = (0, _react.getTheme)().palette;
  let dekor;

  switch (tag) {
    case 'SKE':
      dekor = _separatorSKE.default;
      break;

    case 'INK':
      dekor = _separatorINK.default;
      break;

    case 'LSO':
      dekor = _separatorLSO.default;
      break;

    default:
      dekor = _separatorSKE.default;
      break;
  } // @ts-ignore TODO


  return (0, _mergeStyles.mergeStyleSets)({
    header: {
      selectors: {
        '&::after': {
          display: 'block',
          content: '""',
          width: '100%',
          height: compact ? '12px' : '20px',
          backgroundColor: '#fff',
          backgroundRepeat: 'no-repeat',
          backgroundPosition: 'center',
          backgroundSize: 'cover',
          backgroundImage: `url(${dekor})`
        }
      }
    },
    headerMain: {
      width: 'auto',
      marginRight: 'auto',
      marginLeft: 'auto',
      marginTop: 'auto',
      height: 'auto',
      padding: compact ? '8px' : '16px 16px 4px 16px',
      display: 'flex',
      background: palette.skeColor.white,
      maxWidth: '1100px',
      selectors: {
        '@media (min-width: 640px)': {
          width: 'auto',
          minWidth: compact ? 'auto' : '500px',
          flexDirection: 'row'
        }
      }
    },
    logo: {
      selectors: {
        'a:focus div': {
          boxShadow: `0 0 0 3px ${palette.skeColor.interactive}`
        }
      }
    },
    contentWrapper: {
      flexGrow: 3,
      flexDirection: 'colum',
      textAlign: 'left',
      width: '100%',
      paddingLeft: '16px',
      selectors: {
        '@media (min-width: 480px)': {
          paddingLeft: '32px'
        }
      }
    },
    title: {
      marginTop: compact ? '12px' : '4px',
      fontSize: `${_utils.FontSizes.large} !important`,
      selectors: {
        '@media (min-width: 640px)': {
          fontSize: `${_utils.FontSizes.xLarge} !important`
        }
      }
    },
    separator: {
      width: '100%',
      height: '20px',
      backgroundColor: '#fff',
      backgroundRepeat: 'no-repeat',
      backgroundPosition: 'center',
      backgroundSize: 'cover',
      backgroundImage: `url(${dekor})`
    },
    linkButton: {
      displayName: 'SkeActionButton',
      marginTop: '-12px',
      marginLeft: '-8px',
      selectors: {
        '& .ms-Button-textContainer': {
          color: palette.skeColor.blue,
          fontSize: _utils.FontSizes.xSmall,
          fontWeight: 'bold'
        },
        '& .ms-Button-icon': {
          fontSize: `${_utils.FontSizes.medium} !important`
        }
      }
    }
  });
}