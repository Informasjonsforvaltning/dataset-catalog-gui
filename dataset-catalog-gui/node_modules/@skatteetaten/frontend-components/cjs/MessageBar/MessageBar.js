"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageBar = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = require("@fluentui/react");

var React = _interopRequireWildcard(require("react"));

var _reactTransitionGroup = require("react-transition-group");

var _Button = require("../Button/Button");

var _MessageBar = require("./MessageBar.classNames");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MessageBar extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      hideMessageBar: false,
      showMessage: true
    });

    _defineProperty(this, "setShowAlways", () => {
      this.setState({
        showMessage: true,
        hideMessageBar: false
      });
    });

    _defineProperty(this, "resetDurationMessage", () => {
      const {
        duration
      } = this.props;

      if (duration) {
        this.setState({
          showMessage: true
        });
      }

      setTimeout(() => {
        this.setState({
          hideMessageBar: true,
          showMessage: false
        });
      }, Number(duration) * 1000);
      this.setState({
        hideMessageBar: false
      });
    });
  }

  componentDidMount() {
    const {
      duration
    } = this.props;

    if (duration) {
      setTimeout(() => {
        this.setState({
          hideMessageBar: true
        });
      }, Number(duration) * 1000);
    }
  }

  render() {
    const {
      showMessage,
      hideMessageBar
    } = this.state;

    const _this$props = this.props,
          {
      children,
      actions,
      onClick,
      duration,
      type,
      onDismiss,
      dismissButtonAriaLabel,
      isMultiline,
      className,
      id,
      onRenderAfterDuration
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children", "actions", "onClick", "duration", "type", "onDismiss", "dismissButtonAriaLabel", "isMultiline", "className", "id", "onRenderAfterDuration"]);

    const afterDurationComponent = onRenderAfterDuration && onRenderAfterDuration(this.resetDurationMessage, this.setShowAlways);
    return /*#__PURE__*/React.createElement("div", {
      id: id
    }, hideMessageBar && /*#__PURE__*/React.createElement("div", null, afterDurationComponent), /*#__PURE__*/React.createElement(_reactTransitionGroup.CSSTransition, {
      in: showMessage && !hideMessageBar,
      classNames: "fade",
      timeout: 300,
      unmountOnExit: true
    },
    /*
    // @ts-ignore TODO */
    status => /*#__PURE__*/React.createElement(_react.MessageBar, _extends({}, props, {
      className: (0, _classnames.default)((0, _MessageBar.getClassNames)(this.props), status, className),
      actions: actions,
      messageBarType: type,
      onDismiss: onDismiss,
      isMultiline: isMultiline,
      "aria-describedby": id,
      role: "status",
      dismissButtonAriaLabel: dismissButtonAriaLabel
    }), children)));
  }

}

exports.MessageBar = MessageBar;

_defineProperty(MessageBar, "Type", _react.MessageBarType);

_defineProperty(MessageBar, "Button", _Button.Button);

_defineProperty(MessageBar, "defaultProps", {
  actions: undefined,
  isMultiline: true,
  onClick: undefined,
  size: 'default',
  type: MessageBar.Type.info,
  dismissButtonAriaLabel: 'Lukk'
});