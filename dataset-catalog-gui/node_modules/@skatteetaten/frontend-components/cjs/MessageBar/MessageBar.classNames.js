"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _utils = require("../utils");

var _react = require("@fluentui/react");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getBackgroundColor(props) {
  const palette = (0, _react.getTheme)().palette;

  switch (props) {
    case _react.MessageBarType.error:
    case _react.MessageBarType.warning:
    case _react.MessageBarType.severeWarning:
      return {
        backgroundColor: palette.skeColor.burgundy10
      };

    case _react.MessageBarType.success:
      return {
        backgroundColor: palette.skeColor.lightGreen
      };

    case _react.MessageBarType.info:
    default:
      return {
        backgroundColor: palette.skeColor.brown10
      };
  }
}

function getIconColor(props) {
  const palette = (0, _react.getTheme)().palette;

  switch (props) {
    case _react.MessageBarType.error:
    case _react.MessageBarType.warning:
      return {
        color: palette.skeColor.statusError
      };

    case _react.MessageBarType.severeWarning:
      return {
        color: palette.skeColor.white
      };

    case _react.MessageBarType.success:
      return {
        color: palette.skeColor.statusOk
      };

    case _react.MessageBarType.info:
    default:
      return {
        color: palette.skeColor.statusWarning
      };
  }
}

function getBorderColor(props) {
  const palette = (0, _react.getTheme)().palette;

  switch (props) {
    case _react.MessageBarType.error:
    case _react.MessageBarType.warning:
      return {
        borderLeft: `3px solid ${palette.skeColor.statusError}`
      };

    case _react.MessageBarType.severeWarning:
      return {
        border: `2px solid ${palette.skeColor.statusError}`
      };

    case _react.MessageBarType.success:
      return {
        borderLeft: `3px solid ${palette.skeColor.statusOk}`
      };

    case _react.MessageBarType.info:
    default:
      return {
        borderLeft: `3px solid ${palette.skeColor.statusWarning}`
      };
  }
}

const getClassNames = props => {
  const palette = (0, _react.getTheme)().palette;
  const severe = props.type === _react.MessageBarType.severeWarning;
  const {
    size
  } = props;
  return (0, _mergeStyles.mergeStyles)([{
    selectors: {
      '&.ms-MessageBar': _objectSpread(_objectSpread(_objectSpread({}, getBackgroundColor(props.type)), getBorderColor(props.type)), {}, {
        color: palette.skeColor.blackAlt,
        selectors: {
          '&.fade-exit': {
            opacity: 1
          }
        }
      }),
      '.ms-MessageBar-content': {
        border: severe ? `2px solid ${palette.skeColor.statusError}` : 'none',
        padding: size === 'large' ? '25px 25px 25px 30px' : '',
        width: 'auto',
        selectors: {
          '@media (max-width: 640px)': {
            padding: size === 'large' ? '12px 12px 12px 0px' : ''
          }
        }
      },
      '& .ms-MessageBar-icon': {
        backgroundColor: severe ? palette.skeColor.statusError : 'none',
        margin: 0,
        padding: '9px 10px 8px 9px'
      },
      '.ms-MessageBar-icon i': _objectSpread(_objectSpread({}, getIconColor(props.type)), {}, {
        fontSize: size === 'large' ? _utils.IconFontSizes.mega : _utils.IconFontSizes.large,
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: size === 'large' ? _utils.IconFontSizes.xlarge : undefined,
            margin: size === 'large' ? '10px 0 0 10px' : ''
          }
        }
      }),
      '.ms-MessageBar-text': {
        margin: '8px'
      },
      '.ms-MessageBar-innerText': {
        fontSize: size === 'large' ? _utils.FontSizes.large : _utils.FontSizes.medium,
        color: palette.skeColor.blackAlt,
        lineHeight: size === 'large' ? '1.75rem' : '1.5rem',
        padding: size === 'large' ? '7px 0px 0px 30px' : '-2px 0px 0px 0px',
        selectors: {
          '@media (max-width: 640px)': {
            padding: size === 'large' ? '7px 0px 0px 8px' : '-2px 0px 0px 0px'
          }
        }
      },
      '.ms-MessageBar-dismissal': {
        marginTop: size === 'large' ? '12px ' : '4px',
        marginRight: size === 'large' ? 'undefined ' : '4px',
        borderRadius: '50%',
        transition: 'transform 80ms',
        selectors: {
          ':hover': {
            backgroundColor: palette.skeColor.interactiveLight
          },
          ':focus': {
            backgroundColor: palette.skeColor.interactiveLight,
            border: `2px solid ${palette.skeColor.interactive}`,
            '::after': {
              outline: `0 none !important`,
              borderRadius: '50%'
            }
          },
          ':active': {
            transform: 'translate(0,1px)'
          }
        }
      },
      '.ms-MessageBar-dismissal i': {
        fontSize: size === 'large' ? _utils.IconFontSizes.xlarge : _utils.IconFontSizes.large
      }
    }
  }]);
};

exports.getClassNames = getClassNames;