"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextField = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _LabelWithCallout = require("../LabelWithCallout");

var _utils = require("../utils");

var _react2 = require("@fluentui/react");

var _TextField = require("./TextField.classNames");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/*
 * visibleName TextField (Tekstfelt)
 */
const TextField = _ref => {
  let {
    calloutFloating,
    children,
    className,
    labelWithCalloutProps,
    editable,
    errorMessage,
    id,
    label,
    required = false,
    labelButtonAriaLabel,
    mask,
    inputMode,
    onCalloutToggle,
    onRenderLabel,
    readOnly,
    value,
    requiredWithMark = false
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["calloutFloating", "children", "className", "labelWithCalloutProps", "editable", "errorMessage", "id", "label", "required", "labelButtonAriaLabel", "mask", "inputMode", "onCalloutToggle", "onRenderLabel", "readOnly", "value", "requiredWithMark"]);

  rest.inputSize = rest.inputSize || 'normal';
  const shouldEditWhenEmpty = rest.editableWhenEmpty ? value === '' : false;
  const generatedId = (0, _utils.generateId)();
  const mainId = id ? id : 'textfield-' + generatedId;
  const inputId = mainId + '-input';
  const labelId = mainId + '-label';
  const textField = React.useRef();
  const [editMode, setEditMode] = React.useState(shouldEditWhenEmpty);

  const onEdit = () => {
    textField.current && textField.current.focus();
    setEditMode(true);
  };

  const onBlur = e => {
    rest.onBlur && rest.onBlur(e);

    if (editMode) {
      setEditMode(shouldEditWhenEmpty);
    }
  };

  const setValue = () => {
    if (rest.suffix && readOnly && !editMode) {
      return value + ' ' + rest.suffix;
    } else if (value === null) {
      return undefined;
    }

    return value;
  };

  const setCustomButtonAriaLabel = () => {
    if (rest.suffix && readOnly) {
      return 'Rediger ' + label + ' (' + rest.suffix + ')';
    } else {
      return undefined;
    }
  };

  let TextFieldType;

  if (mask) {
    TextFieldType = _react2.MaskedTextField;
  } else {
    TextFieldType = _react2.TextField;
  }

  return /*#__PURE__*/React.createElement("div", {
    id: mainId,
    className: (0, _classnames.default)((0, _TextField.getClassNames)(_objectSpread({
      errorMessage
    }, rest)), className)
  }, /*#__PURE__*/React.createElement(_LabelWithCallout.LabelWithCallout, _extends({}, labelWithCalloutProps, {
    id: labelId,
    inputId: inputId,
    label: label,
    buttonAriaLabel: labelButtonAriaLabel ? labelButtonAriaLabel : setCustomButtonAriaLabel(),
    requiredMark: requiredWithMark,
    editFunction: onEdit,
    warning: rest.warning,
    help: rest.help,
    readOnly: readOnly,
    editable: editable,
    inputSize: rest.inputSize,
    calloutFloating: calloutFloating,
    onRenderLabel: onRenderLabel,
    onCalloutToggle: onCalloutToggle
  })), /*#__PURE__*/React.createElement(TextFieldType, _extends({}, rest, {
    id: inputId,
    inputMode: inputMode,
    value: setValue(),
    readOnly: editMode ? false : readOnly,
    className: (0, _classnames.default)((0, _TextField.getClassNames)(_objectSpread(_objectSpread({}, rest), {}, {
      editMode,
      readOnly
    })), className),
    required: required || requiredWithMark,
    errorMessage: errorMessage,
    onBlur: onBlur,
    componentRef: ref => {
      if (rest.componentRef && typeof rest.componentRef === 'function') {
        rest.componentRef(ref);
      }

      textField.current = ref;
    },
    mask: mask
  }), children));
};

exports.TextField = TextField;