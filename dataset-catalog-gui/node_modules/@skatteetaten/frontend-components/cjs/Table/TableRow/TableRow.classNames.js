"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _react = require("@fluentui/react");

var _spacing = _interopRequireDefault(require("../../utils/designtokens/_spacing.json"));

var _fontSizes = _interopRequireDefault(require("../../utils/designtokens/_fontSizes.json"));

var _breakpoints = _interopRequireDefault(require("../../utils/designtokens/_breakpoints.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getClassNames = (props, expandabledRowOpenWidth) => {
  const {
    compactTable
  } = props;
  const palette = (0, _react.getTheme)().palette;
  return (0, _mergeStyles.mergeStyleSets)({
    tableRow: {
      borderBox: 'box-sizing',
      verticalAlign: 'middle',
      selectors: {
        '&.tableRowIsClickable': {
          selectors: {
            ':hover': {
              backgroundColor: palette.skeColor.lightBlue
            }
          }
        },
        '&.tableRowEditableAndOpen': {
          display: 'table-row'
        },
        '&.tableRowEditableAndClosed': {
          display: 'none'
        },
        '&.tableRowHasSeparator': {
          borderBottom: `1px solid ${palette.skeColor.lightGrey}`
        } //'&.tableRowIsExpandableAndOpen': {},

      }
    },
    expandableContent: {
      // Dette henter width'en fra parent-row slik at ekspandert innhold kan ta hele bredden
      width: expandabledRowOpenWidth ? expandabledRowOpenWidth - 5 + 'px' : '',
      padding: compactTable ? `${_spacing.default['ske-spacing-sm']}` : `${_spacing.default['ske-spacing-md']} 0`,
      boxSizing: 'border-box',
      position: 'relative',
      zIndex: 99
    },
    tableCell: {
      fontWeight: _fontSizes.default['ske-font-weight-regular'],
      padding: 0,
      // verticalAlign: 'inherit',
      verticalAlign: 'middle',
      selectors: {
        '&.tableCellAlignedRight': {
          justifyContent: 'flex-end',
          textAlign: 'right'
        },
        '&.tableCellAlignedCenter': {
          justifyContent: 'center',
          textAlign: 'center'
        },
        '&.tableCellIsSum': {
          textAlign: 'end',
          padding: _spacing.default['ske-spacing-lg']
        },
        '&.tableCellForExpandCollapseButton': {
          maxWidth: _spacing.default['ske-spacing-xl'],
          selectors: {
            [`@media (min-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
              maxWidth: '3.125rem'
            }
          }
        },
        '&.tableCellIsEditableRowClosed': {
          borderBottom: 'none'
        },
        '&.tableCellAboveExpandedArea': {
          borderBottom: 'none',
          verticalAlign: 'top'
        },
        '&.tableCellHiddenOnMobile': {
          display: 'none',
          selectors: {
            [`@media (min-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
              display: 'table-cell'
            }
          }
        },
        '&.tableCellHasSeparator': {
          borderBottom: `1px solid ${palette.skeColor.lightGrey}`
        }
      }
    },
    cellContent: {
      display: 'block',
      width: '100%',
      verticalAlign: 'middle',
      boxSizing: 'border-box',
      fontSize: compactTable ? _fontSizes.default['ske-font-size-s'] : 'inherit',
      padding: `${_spacing.default['ske-spacing-md']} ${_spacing.default['ske-spacing-lg']}`,
      textAlign: 'inherit',
      selectors: {
        '&.cellContentSmall': {
          padding: `${_spacing.default['ske-spacing-xs']} ${_spacing.default['ske-spacing-lg']}`
        },
        '&.cellContentClickable': {
          paddingTop: _spacing.default['ske-spacing-md'],
          paddingBottom: _spacing.default['ske-spacing-md'],
          cursor: 'pointer'
        },
        '&.cellContentLarge': {
          padding: compactTable ? `${_spacing.default['ske-spacing-sm']} ${_spacing.default['ske-spacing-sm']}` : `${_spacing.default['ske-spacing-lg']} ${_spacing.default['ske-spacing-lg']}`
        },
        '&.cellContentChildRow': {
          padding: `0 ${_spacing.default['ske-spacing-lg']} ${_spacing.default['ske-spacing-lg']} ${_spacing.default['ske-spacing-lg']}`
        },
        '&.cellContentAlignedRight': {
          /* justifyContent: 'flex-end',*/
          textAlign: 'right'
        },
        '&.cellContentAlignedCenter': {
          /* justifyContent: 'center',*/
          textAlign: 'center'
        },
        '&.cellContentAboveExpandedArea': {
          alignItems: 'start'
        },
        '&.cellContentHideEdit': {
          minHeight: _spacing.default['ske-spacing-mega']
        }
      }
    },
    // TO-DO hover og focus settes i riktig - avventer at bug om hover/focus på iconButton først fikses
    expandButton: {},
    expandButtonIsActive: {},
    editButton: {
      width: '100%',
      height: '100%',
      margin: 0,
      padding: 0,
      border: 'none',
      background: 'transparent',
      boxSizing: 'border-box',
      fontSize: 'inherit',
      textAlign: 'inherit'
    },
    emptyTd: {
      borderBottom: `2px solid ${palette.skeColor.blackAlt}`
    }
  });
};

exports.getClassNames = getClassNames;