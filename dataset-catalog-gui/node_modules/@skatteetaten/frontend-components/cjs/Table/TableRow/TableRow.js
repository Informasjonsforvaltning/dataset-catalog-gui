"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TableRow = void 0;

var _react = _interopRequireWildcard(require("react"));

var _IconButton = require("../../IconButton");

var _TableRow = require("./TableRow.classNames");

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * visibleName TableRow (Tabellrad)
 */
const TableRow = props => {
  const {
    rowIndex,
    customClassNames,
    data,
    editableRows,
    editableContent,
    columns,
    editModeActive,
    expandableContent,
    expandableModeActive,
    expandableRows,
    expandIconPlacement,
    tableHasScroll,
    isEditableRowOpen = false,
    isExpandableRowOpen = false,
    onCloseRow,
    onEditRow,
    onExpandRow,
    openExpandableRowIndex,
    tableId,
    openEditableOnRowClick,
    showRowSeparators,
    compactTable
  } = props;
  const editableRow = !data.hideEdit && editableRows;
  const showExtraCol = data.hideEdit && editableRows;
  const showRowSeparator = !data.hideSeparator && showRowSeparators;
  const numberOfColumns = columns.length + (editableRow || expandableRows || showExtraCol ? 1 : 0);

  const expandabledRowRef = _react.default.useRef(null);

  const expandCollapseCellRef = /*#__PURE__*/_react.default.createRef();

  const [focusRow, setFocusRow] = _react.default.useState(openExpandableRowIndex);

  (0, _react.useEffect)(() => {
    if (openExpandableRowIndex !== undefined) {
      setFocusRow(openExpandableRowIndex);
    }
  }, [openExpandableRowIndex]);
  (0, _react.useEffect)(() => {
    if (focusRow === rowIndex && expandCollapseCellRef.current) {
      const knapp = expandCollapseCellRef.current.children[0];
      knapp.focus();
    }
  }, [expandCollapseCellRef, focusRow, rowIndex]);
  const styles = (0, _TableRow.getClassNames)(props, expandabledRowRef?.current?.offsetWidth);
  const childrenLength = !!data['children'] ? data['children'].length : 0;

  const editButton = /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)(styles.cellContent, customClassNames?.cellContent, data.customClassNames?.cellContent, {
      cellContentSmall: !showRowSeparators || compactTable
    })
  }, /*#__PURE__*/_react.default.createElement(_IconButton.IconButton, {
    title: (0, _utils.t)('tablerow.editable.title'),
    type: "button",
    icon: "Edit",
    className: styles.editButton,
    buttonSize: compactTable ? 'xSmall' : 'default',
    onClick: () => onEditRow(rowIndex),
    disabled: editModeActive || expandableModeActive,
    "aria-describedby": tableId.concat(rowIndex.toString(), '_0')
  }));

  const expandableContentId = `${tableId}-${rowIndex}-expanded`;

  const expandableCellContent = () => {
    if (expandableContent) {
      return /*#__PURE__*/_react.default.createElement("div", {
        id: expandableContentId,
        className: (0, _classnames.default)(styles.expandableContent, customClassNames?.expandableContent, data?.customClassNames?.expandableContent)
      }, expandableContent(data, onCloseRow, rowIndex));
    }

    return undefined;
  };

  const ExpandCollapseButton = btnProps => {
    return /*#__PURE__*/_react.default.createElement("td", {
      "data-testid": 'table-cell-expandable',
      ref: expandCollapseCellRef,
      className: (0, _classnames.default)(styles.tableCell, customClassNames?.tableCell, data.customClassNames?.tableCell, 'tableCellForExpandCollapseButton')
    }, /*#__PURE__*/_react.default.createElement(_IconButton.IconButton, {
      id: `${tableId}-${rowIndex}-expand-button`,
      title: (0, _utils.t)('tablerow.expandable.title'),
      className: (0, _classnames.default)(styles.expandButton, {
        [styles.expandButtonIsActive]: isExpandableRowOpen
      }),
      icon: btnProps.isOpen ? 'ChevronUp' : 'ChevronDown',
      onClick: () => {
        if (btnProps.isOpen) {
          onCloseRow();
        } else {
          onExpandRow(rowIndex);
        }
      },
      buttonSize: compactTable ? 'xSmall' : 'large',
      type: "button",
      "aria-expanded": btnProps.isOpen,
      "aria-describedby": tableId.concat(rowIndex.toString(), '_0'),
      "aria-controls": btnProps.isOpen ? expandableContentId : undefined,
      disabled: editModeActive
    }), btnProps.isOpen && btnProps.shouldRenderCellContent && expandableCellContent());
  };

  const actionButtons = editableRow || expandableRows ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, editableRow && /*#__PURE__*/_react.default.createElement("td", {
    className: (0, _classnames.default)(styles.tableCell, customClassNames?.tableCell, data.customClassNames?.tableCell, {
      tableCellHasSeparator: showRowSeparator && !isExpandableRowOpen
    }),
    rowSpan: childrenLength + 1
  }, editButton), expandableRows && /*#__PURE__*/_react.default.createElement(ExpandCollapseButton, {
    isOpen: isExpandableRowOpen,
    shouldRenderCellContent: expandIconPlacement === 'before'
  })) : null;

  const renderCellContent = (content, index, alignment, isChild, isExpandabledRowOpen) => openEditableOnRowClick && editableContent && editableRow ? /*#__PURE__*/_react.default.createElement("button", {
    "data-testid": 'openEditableOnRowClick-button',
    className: styles.editButton,
    onClick: () => onEditRow(index),
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)(styles.cellContent, customClassNames?.cellContent, data.customClassNames?.cellContent, 'cellContentClickable', {
      cellContentAboveExpandedArea: isExpandabledRowOpen,
      cellContentAlignedRight: alignment === 'right',
      cellContentAlignedCenter: alignment === 'center',
      cellContentLarge: showRowSeparator && !isChild,
      cellContentChildRow: isChild,
      cellContentHideEdit: !editableRow && editableRows
    })
  }, formatContent(content, index))) : /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(styles.cellContent, customClassNames?.cellContent, data.customClassNames?.cellContent, {
      cellContentAboveExpandedArea: isExpandabledRowOpen,
      cellContentAlignedRight: alignment === 'right',
      cellContentAlignedCenter: alignment === 'center',
      cellContentLarge: showRowSeparator && !isChild,
      cellContentChildRow: isChild,
      cellContentHideEdit: !editableRow && editableRows
    })
  }, formatContent(content, index));

  const formatContent = (content, index) => {
    if (columns[index].formatFunction) {
      return columns[index].formatFunction(content);
    }

    return content;
  };

  const renderRow = (rowData, rowColumns, rowKey, isRowExpanded, isChild = false) => {
    return rowColumns.map((column, cellIndex) => {
      if (cellIndex > 0) {
        return /*#__PURE__*/_react.default.createElement("td", {
          key: tableId.concat(rowKey.toString(), '_', cellIndex.toString()),
          className: (0, _classnames.default)(styles.tableCell, customClassNames?.tableCell, data.customClassNames?.tableCell, {
            tableCellAboveExpandedArea: isRowExpanded,
            tableCellAlignedRight: column.alignment === 'right',
            tableCellAlignedCenter: column.alignment === 'center',
            tableCellIsEditableRowClosed: editableRow && !props.isEditableRowOpen,
            tableCellHiddenOnMobile: column.hideOnMobile,
            tableCellHasSeparator: showRowSeparator && !isExpandableRowOpen && !data['children']
          })
        }, renderCellContent(rowData[column.fieldName], cellIndex, column.alignment, isChild, isRowExpanded));
      } else if (!isChild) {
        return /*#__PURE__*/_react.default.createElement("th", {
          key: tableId.concat(rowKey.toString(), '_', cellIndex.toString()),
          id: tableId.concat(rowKey.toString(), '_', cellIndex.toString()),
          className: (0, _classnames.default)(styles.tableCell, customClassNames?.tableCell, data.customClassNames?.tableCell, {
            tableCellAboveExpandedArea: isRowExpanded,
            tableCellAlignedRight: column.alignment === 'right',
            tableCellAlignedCenter: column.alignment === 'center',
            tableCellIsEditableRowClosed: editableRow && !props.isEditableRowOpen,
            tableCellHiddenOnMobile: column.hideOnMobile,
            tableCellHasSeparator: showRowSeparator && !isExpandableRowOpen
          }),
          scope: 'row',
          rowSpan: childrenLength + 1
        }, renderCellContent(rowData[column.fieldName], cellIndex, column.alignment, isChild, isRowExpanded));
      }

      return null;
    });
  };

  if (isEditableRowOpen) {
    return /*#__PURE__*/_react.default.createElement("tr", {
      key: rowIndex,
      className: (0, _classnames.default)(styles.tableRow, customClassNames?.tableRow, data.customClassNames?.tableRow, isEditableRowOpen ? 'tableRowEditableAndOpen' : 'tableRowEditableAndClosed', 'tableRowHasSeparator')
    }, /*#__PURE__*/_react.default.createElement("td", {
      key: rowIndex,
      "data-testid": 'editable-content',
      className: (0, _classnames.default)(styles.tableCell, customClassNames?.tableCell, data.customClassNames?.tableCell),
      colSpan: numberOfColumns
    }, editableContent && editableContent(data, onCloseRow, rowIndex)));
  }

  const actionButtonsBefore = tableHasScroll || expandIconPlacement === 'before';
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, expandableRows ? isExpandableRowOpen ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("tr", {
    key: rowIndex,
    ref: expandabledRowRef,
    className: (0, _classnames.default)(styles.tableRow, customClassNames?.tableRow, data.customClassNames?.tableRow, {
      tableRowHasSeparator: showRowSeparator && (expandIconPlacement === 'before' || expandIconPlacement === 'after' && !isExpandableRowOpen)
    })
  }, expandIconPlacement === 'before' && /*#__PURE__*/_react.default.createElement(ExpandCollapseButton, {
    isOpen: true,
    shouldRenderCellContent: true
  }), renderRow(data, columns, rowIndex, true), expandIconPlacement !== 'before' && /*#__PURE__*/_react.default.createElement(ExpandCollapseButton, {
    isOpen: true,
    shouldRenderCellContent: false
  })), expandIconPlacement !== 'before' && /*#__PURE__*/_react.default.createElement("tr", {
    key: rowIndex + 'expanded',
    className: (0, _classnames.default)(styles.tableRow, customClassNames?.tableRow, data.customClassNames?.tableRow, {
      tableRowHasSeparator: showRowSeparator
    })
  }, /*#__PURE__*/_react.default.createElement("td", {
    colSpan: numberOfColumns
  }, expandableCellContent()))) : /*#__PURE__*/_react.default.createElement("tr", {
    key: rowIndex,
    ref: expandabledRowRef,
    className: (0, _classnames.default)(styles.tableRow, customClassNames?.tableRow, data.customClassNames?.tableRow, {
      tableRowIsClickable: openEditableOnRowClick,
      tableRowHasSeparator: showRowSeparator && !isExpandableRowOpen && !data['children']
    })
  }, (tableHasScroll || expandIconPlacement === 'before') && actionButtons, renderRow(data, columns, rowIndex, false), !tableHasScroll && expandIconPlacement !== 'before' && actionButtons) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("tr", {
    key: rowIndex,
    className: (0, _classnames.default)(styles.tableRow, customClassNames?.tableRow, data.customClassNames?.tableRow, {
      tableRowIsClickable: openEditableOnRowClick,
      tableRowHasSeparator: showRowSeparator && !isExpandableRowOpen && !data['children']
    })
  }, actionButtonsBefore && actionButtons, renderRow(data, columns, rowIndex, false, false), !actionButtonsBefore && actionButtons, showExtraCol && /*#__PURE__*/_react.default.createElement("td", null)), !isEditableRowOpen && !!data['children'] && childrenLength > 0 && data['children'].map((child, childIndex) => {
    return /*#__PURE__*/_react.default.createElement("tr", {
      key: rowIndex + 'child' + childIndex,
      className: (0, _classnames.default)(styles.tableRow, customClassNames?.tableRow, data.customClassNames?.tableRow, {
        tableRowHasSeparator: showRowSeparator && childIndex === data['children'].length - 1
      })
    }, actionButtonsBefore && /*#__PURE__*/_react.default.createElement("td", null), renderRow(child, columns, childIndex, false, true), !actionButtonsBefore && /*#__PURE__*/_react.default.createElement("td", null), showExtraCol && /*#__PURE__*/_react.default.createElement("td", null));
  })));
};

exports.TableRow = TableRow;
var _default = TableRow;
exports.default = _default;