"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _utils = require("../utils");

var _Card = require("./Card.types");

var _react = require("@fluentui/react");

var _mergeStyles = require("@fluentui/merge-styles");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const fadeIn = (0, _mergeStyles.keyframes)({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});

function getCardBorder(props) {
  const palette = (0, _react.getTheme)().palette;

  switch (props.border) {
    case _Card.CardBorder.YELLOW_BORDER:
      return {
        border: `4px solid ${palette.skeColor.brown}`
      };

    case _Card.CardBorder.GREEN_BORDER:
      return {
        border: `4px solid ${palette.skeColor.green}`
      };

    case _Card.CardBorder.RED_BORDER:
      return {
        border: `4px solid ${palette.skeColor.pink}`
      };

    case _Card.CardBorder.GREY_BORDER:
      return {
        border: `4px solid ${palette.skeColor.grey}`
      };

    case _Card.CardBorder.WHITE_BORDER:
      return {
        border: `4px solid ${palette.skeColor.white}`
      };

    default:
      return {
        border: 'none'
      };
  }
}

function getMargin(props) {
  switch (props.margin) {
    case 'none':
      return {
        margin: '0px'
      };

    case 'small':
      return {
        margin: '4px'
      };

    case 'medium':
      return {
        margin: '12px'
      };

    case 'large':
      return {
        margin: '24px'
      };

    case 'xlarge':
      return {
        margin: '64px'
      };

    default:
      return {
        margin: '8px'
      };
  }
}

const getClassNames = (props, state) => {
  const theme = (0, _react.getTheme)();
  const palette = theme.palette;
  const {
    isExpandedState
  } = state;
  const {
    title,
    titlesize,
    expand
  } = props;
  return (0, _mergeStyles.mergeStyleSets)({
    root: _objectSpread(_objectSpread({
      displayName: 'SkeCard',
      color: theme.semanticColors.bodyText,
      backgroundColor: palette.skeColor[props.color],
      marginBottom: props.marginbottom
    }, getCardBorder(props)), {}, {
      padding: 0,
      display: 'flow-root',
      boxSizing: 'border-box',
      selectors: {
        ':hover': {
          cursor: expand ? 'pointer' : 'default'
        },
        ':focus': {
          outline: 'none'
        }
      }
    }),
    expandIcon: {
      color: palette.skeColor.blue,
      borderTopWidth: '0px',
      border: 'none',
      height: '46px',
      width: '46px',
      borderRadius: '50%',
      marginRight: '8px',
      selectors: {
        i: {
          transform: isExpandedState ? 'rotate(-180deg)' : '0',
          fontSize: _utils.FontSizes.superLarge
        },
        ':hover': {
          borderColor: palette.skeColor.blue,
          background: palette.skeColor.lightBlue
        }
      }
    },
    titlecontainer: _objectSpread(_objectSpread({}, getMargin(props)), {}, {
      marginBottom: '2px',
      textAlign: 'left',
      outline: 'none',
      selectors: {
        ':focus': {
          textDecoration: 'underline'
        }
      }
    }),
    header: {
      width: '100%',
      backgroundColor: 'inherit',
      border: 'none',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      padding: 0,
      position: 'relative',
      wordBreak: 'break-word',
      selectors: {
        ':hover': {
          cursor: expand ? 'pointer' : ''
        },
        ':active': {
          color: expand ? palette.skeColor.blue : palette.skeColor.blackAlt
        },
        ':focus': {
          outlineColor: palette.skeColor.blue
        },
        ':focus:not(:focus-visible)': {
          outline: 'none'
        },
        ':focus-visible': {
          outlineColor: palette.skeColor.blue
        }
      }
    },
    title: {
      flex: '1 1 1px',
      fontSize: titlesize,
      fontWeight: _utils.FontWeights.semibold
    },
    titleExpand: {
      flex: '1 1 1px',
      fontSize: titlesize,
      fontWeight: _utils.FontWeights.semibold,
      margin: 0,
      selectors: {
        ':hover': {
          textDecoration: 'underline'
        }
      }
    },
    actions: {
      fontSize: _utils.FontSizes.medium
    },
    subtitle: {
      width: '100%',
      fontSize: _utils.FontSizes.large,
      fontWeight: _utils.FontWeights.regular,
      padding: '5px 0 5px 0'
    },
    body: _objectSpread(_objectSpread({
      textAlign: 'left',
      animationName: fadeIn,
      fontSize: _utils.FontSizes.medium
    }, getMargin(props)), {}, {
      marginTop: title ? '0' : undefined
    })
  });
};

exports.getClassNames = getClassNames;