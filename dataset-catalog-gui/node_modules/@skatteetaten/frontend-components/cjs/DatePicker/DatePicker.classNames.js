"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = exports.getCalendarClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _utils = require("../utils");

var _fontSizes = _interopRequireDefault(require("../utils/designtokens/_fontSizes.json"));

var _colors = _interopRequireDefault(require("../utils/designtokens/_colors.json"));

var _spacing = _interopRequireDefault(require("../utils/designtokens/_spacing.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const errorIcon = "'" + _utils.SkeIcons.icons.Error + "'";

function getFieldTypeStyles(props) {
  if (props.inputSize === 'large') {
    return {
      '& .ms-TextField-fieldGroup': {
        borderWidth: _spacing.default['ske-spacing-xs'],
        height: _spacing.default['ske-spacing-xxxl'],
        margin: `${_spacing.default['ske-spacing-sm']} 0`,
        fontSize: _fontSizes.default['ske-font-size-l']
      },
      '& input.ms-TextField-field': {
        fontSize: `${_fontSizes.default['ske-font-size-l']} !important`
      },
      'i.ms-DatePicker-event--without-label': {
        marginTop: _spacing.default['ske-spacing-xs'],
        padding: _spacing.default['ske-spacing-sm'],
        fontSize: _fontSizes.default['ske-font-size-xl'],
        color: _colors.default['ske-color-interactive'],
        lineHeight: _spacing.default['ske-spacing-xxl']
      }
    };
  } else {
    return {
      '& .ms-TextField-fieldGroup': {
        fontSize: _fontSizes.default['ske-font-size-s']
      },
      'i.ms-DatePicker-event--without-label': {
        color: _colors.default['ske-color-interactive']
      }
    };
  }
}

function getTextFieldStyles(props) {
  if (props.readonlyMode === true) {
    return {
      '& .ms-TextField-fieldGroup': {
        border: 'none'
      },
      '& .ms-TextField-fieldGroup:focus .ms-TextField-field': {
        cursor: 'not-allowed'
      },
      '& .ms-TextField-field': {
        paddingLeft: 0,
        pointerEvents: 'none'
      }
    };
  } else {
    return {};
  }
}

const getCalendarClassNames = props => {
  return (0, _mergeStyles.mergeStyles)({
    displayName: 'SkeCalendar',
    color: _colors.default['ske-color-black-100'],
    selectors: {
      '& .ms-DatePicker-monthOption:hover': {
        color: `${_colors.default['ske-color-black-100']} !important`
      },
      '& .ms-DatePicker-day--highlighted': {
        backgroundColor: _colors.default['ske-color-interactive-light'],
        color: _colors.default['ske-color-black-100']
      },
      '& .ms-DatePicker-day--today': {
        backgroundColor: _colors.default['ske-color-interactive-light'],
        color: _colors.default['ske-color-black-100']
      }
    }
  });
};

exports.getCalendarClassNames = getCalendarClassNames;

const getClassNames = props => {
  const {
    errorMessage,
    readonlyMode
  } = props;
  const color = errorMessage ? _colors.default['ske-color-status-error'] : _colors.default['ske-color-interactive'];
  return (0, _mergeStyles.mergeStyles)({
    displayName: 'SkeDatePicker',
    outline: 'transparent',
    position: 'relative',
    selectors: _objectSpread(_objectSpread({
      '&& .ms-TextField-fieldGroup': {
        borderRadius: 0,
        borderColor: _colors.default['ske-color-black-100']
      },
      '& .ms-TextField-field': {
        fontSize: _fontSizes.default['ske-font-size-m']
      },
      '&& .ms-TextField-fieldGroup.ms-TextField-fieldGroup:after': {
        content: '""'
      },
      '& .ms-TextField-fieldGroup::before': {
        display: 'none'
      },
      '& .ms-TextField.is-disabled': !readonlyMode && {
        borderColor: _colors.default['ske-color-grey-50'],
        borderStyle: 'solid',
        borderWidth: 0,
        backgroundColor: _colors.default['ske-color-grey-5']
      },
      '& .ms-TextField.is-disabled i': {
        color: _colors.default['ske-color-grey-50']
      },
      '& .ms-TextField.is-disabled input': {
        padding: _spacing.default['ske-spacing-md'],
        cursor: 'not-allowed',
        color: _colors.default['ske-color-black-100']
      },
      '& .ms-TextField.is-disabled .ms-TextField-fieldGroup': {
        backgroundColor: readonlyMode ? 'transparent' : undefined,
        borderColor: _colors.default['ske-color-grey-50'],
        borderStyle: 'solid',
        borderWidth: '1px'
      },
      '& .ms-TextField .ms-TextField-fieldGroup .ms-TextField-field': readonlyMode && {
        fontWeight: _fontSizes.default['ske-font-weight-bold'],
        fontSize: _fontSizes.default['ske-font-size-medium'],
        color: _colors.default['ske-color-black-100']
      },
      '.ms-TextField i': readonlyMode && {
        display: 'none'
      },
      // style customization for underlined mode
      '& .ms-TextField.ms-TextField--underlined .ms-TextField-wrapper': {
        border: `1px solid ${color}`
      },
      '& .ms-TextField.ms-TextField--underlined .ms-TextField-wrapper:hover': {
        border: `1px solid ${_colors.default['ske-color-black-100']}`
      },
      '& .ms-TextField-errorMessage': {
        color: _colors.default['ske-color-status-error'],
        fontWeight: _fontSizes.default['ske-font-weight-medium'],
        selectors: {
          ':before': {
            fontFamily: _utils.SkeIcons.fontFace.fontFamily,
            fontSize: _fontSizes.default['ske-font-size-l'],
            display: 'block',
            content: errorIcon,
            marginRight: _spacing.default['ske-spacing-sm']
          }
        }
      },
      '& .ms-TextField .ms-TextField-fieldGroup': errorMessage && {
        borderColor: _colors.default['ske-color-status-error'],
        borderWidth: _spacing.default['ske-spacing-xs']
      },
      '& .ms-TextField.is-active .ms-TextField-fieldGroup': errorMessage && {
        outlineColor: _colors.default['ske-color-status-interactive'],
        borderColor: _colors.default['ske-color-status-interactive']
      }
    }, getFieldTypeStyles(props)), getTextFieldStyles(props))
  });
};

exports.getClassNames = getClassNames;