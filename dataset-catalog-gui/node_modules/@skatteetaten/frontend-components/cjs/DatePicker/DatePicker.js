"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePicker = void 0;
Object.defineProperty(exports, "DayOfWeek", {
  enumerable: true,
  get: function () {
    return _react2.DayOfWeek;
  }
});
Object.defineProperty(exports, "FirstWeekOfYear", {
  enumerable: true,
  get: function () {
    return _react2.FirstWeekOfYear;
  }
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _i18n = _interopRequireWildcard(require("./../utils/i18n/i18n"));

var _classnames = _interopRequireDefault(require("classnames"));

var _moment = _interopRequireDefault(require("moment"));

require("moment/locale/nb");

var _react2 = require("@fluentui/react");

var _utils = require("../utils");

var _LabelWithCallout = require("../LabelWithCallout");

var _DatePicker = require("./DatePicker.classNames");

var _ErrorMessage = require("../ErrorMessage");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const DEFAULT_DATE_FORMAT = 'DD.MM.YYYY';

const DEFAULTFORMATDATE = date => {
  if (date) {
    return (0, _moment.default)(date).format(DEFAULT_DATE_FORMAT);
  }

  return '';
};

const DEFAULTPARSEDATEFROMSTRING = date => {
  if (date) {
    return (0, _moment.default)(date, DEFAULT_DATE_FORMAT).toDate();
  }

  return null;
};
/*
 * visibleName DatePicker (Datovelger)
 */


const DatePicker = props => {
  const {
    ariaLabel,
    calloutFloating,
    datepickerCalloutProps,
    children,
    className,
    editable,
    errorMessage = undefined,
    id,
    invalidInputErrorMessage,
    isOutOfBoundsErrorMessage,
    isRequired,
    isRequiredErrorMessage,
    help,
    label,
    labelButtonAriaLabel,
    labelWithCalloutProps,
    language,
    onCalloutToggle,
    readonlyMode,
    requiredWithMark = false
  } = props,
        rest = _objectWithoutProperties(props, ["ariaLabel", "calloutFloating", "datepickerCalloutProps", "children", "className", "editable", "errorMessage", "id", "invalidInputErrorMessage", "isOutOfBoundsErrorMessage", "isRequired", "isRequiredErrorMessage", "help", "label", "labelButtonAriaLabel", "labelWithCalloutProps", "language", "onCalloutToggle", "readonlyMode", "requiredWithMark"]);

  const defaultValues = {
    allowTextInput: true,
    dateTimeFormatter: undefined,
    disabled: false,
    firstDayOfWeek: language !== 'en' ? _react2.DayOfWeek.Monday : _react2.DayOfWeek.Sunday,
    firstWeekOfYear: 0,
    // FirstDay = 0, FirstFullWeek = 1, FirstFourDayWeek = 2
    formatDate: DEFAULTFORMATDATE,
    initialPickerDate: new Date(),
    isMonthPickerVisible: true,
    isRequired: false,
    highlightCurrentMonth: true,
    parseDateFromString: DEFAULTPARSEDATEFROMSTRING,
    pickerAriaLabel: (0, _i18n.t)('datepicker.ariaLabel'),
    showGoToToday: true,
    showMonthPickerAsOverlay: false,
    showWeekNumbers: true
  };
  const generatedId = (0, _utils.generateId)();
  const mainId = id ? id : 'datepicker-' + generatedId;
  const inputId = mainId + '-input';
  const labelId = mainId + '-label';
  const datePickerRef = React.useRef();
  const [editMode, setEditMode] = React.useState(false);
  const [readOnly, setReadOnly] = React.useState(readonlyMode && !editMode);
  const [requiredInternalState, setRequiredInternalState] = React.useState(false);
  React.useEffect(() => {
    setReadOnly(readonlyMode && !editMode);
  }, [editMode, readonlyMode]);

  if (language) {
    _i18n.default.changeLanguage(language);

    _moment.default.locale(language);
  }

  const DEFAULT_STRINGS = {
    months: _moment.default.months(),
    shortMonths: _moment.default.monthsShort(),
    days: _moment.default.weekdays(),
    shortDays: _moment.default.weekdaysShort(),
    goToToday: (0, _i18n.t)('datepicker.goToToday'),
    prevMonthAriaLabel: (0, _i18n.t)('datepicker.prevMonthAriaLabel'),
    nextMonthAriaLabel: (0, _i18n.t)('datepicker.nextMonthAriaLabel'),
    prevYearAriaLabel: (0, _i18n.t)('datepicker.prevYearAriaLabel'),
    nextYearAriaLabel: (0, _i18n.t)('datepicker.nextYearAriaLabel'),
    invalidInputErrorMessage: _i18n.default.t('datepicker.invalidInputErrorMessage', {
      DEFAULT_DATE_FORMAT
    }),

    /** Automatisk utvide høyde (ved multiline) */
    isOutOfBoundsErrorMessage: 'Datoen er ikke innenfor gyldig periode',
    isRequiredErrorMessage: (0, _i18n.t)('datepicker.isRequiredErrorMessage')
  };

  const onEdit = () => {
    if (!editMode) {
      datePickerRef.current && datePickerRef.current.focus();
    }

    setEditMode(!editMode);
  };

  const onBlur = e => {
    rest.onBlur && rest.onBlur(e);
    setRequiredInternalState(isRequired || requiredWithMark); // TO-DO datepicker er blitt en FunctionComponent. Det er ikke mulig å aksessere intern state på denne måten
    // Filled out feature request here: https://github.com/microsoft/fluentui/issues/19512
    // if (editMode && !datePickerRef.current?.state.isDatePickerShown) {
    //   setEditMode(!editMode);
    // }
  };

  return /*#__PURE__*/React.createElement("div", {
    id: id
  }, /*#__PURE__*/React.createElement(_LabelWithCallout.LabelWithCallout, _extends({
    id: labelId,
    inputId: inputId + '-label',
    label: label,
    requiredMark: requiredWithMark,
    buttonAriaLabel: labelButtonAriaLabel,
    help: help,
    calloutFloating: calloutFloating,
    onCalloutToggle: onCalloutToggle,
    editable: editable,
    editFunction: onEdit,
    readOnly: readonlyMode,
    calloutProps: _objectSpread({}, labelWithCalloutProps?.calloutProps)
  }, labelWithCalloutProps)), /*#__PURE__*/React.createElement(_react2.DatePicker, _extends({}, defaultValues, rest, {
    id: inputId,
    ariaLabel: ariaLabel,
    className: (0, _classnames.default)((0, _DatePicker.getClassNames)(_objectSpread({
      errorMessage,
      readonlyMode: readOnly
    }, rest)), className),
    isRequired: requiredInternalState,
    componentRef: ref => {
      datePickerRef.current = ref;
    },
    calloutProps: _objectSpread(_objectSpread({}, datepickerCalloutProps), {}, {
      className: (0, _classnames.default)((0, _DatePicker.getCalendarClassNames)(props), datepickerCalloutProps?.className)
    }),
    disabled: readOnly ? true : rest.disabled,
    onBlur: onBlur,
    strings: _objectSpread(_objectSpread({}, DEFAULT_STRINGS), {}, {
      isRequiredErrorMessage: isRequiredErrorMessage ? isRequiredErrorMessage : DEFAULT_STRINGS.isRequiredErrorMessage,
      isOutOfBoundsErrorMessage: isOutOfBoundsErrorMessage ? isOutOfBoundsErrorMessage : DEFAULT_STRINGS.isOutOfBoundsErrorMessage,
      invalidInputErrorMessage: invalidInputErrorMessage ? invalidInputErrorMessage : DEFAULT_STRINGS.invalidInputErrorMessage
    })
  }), children), errorMessage && typeof errorMessage === 'string' ? /*#__PURE__*/React.createElement(_ErrorMessage.ErrorMessage, null, errorMessage) : errorMessage);
};

exports.DatePicker = DatePicker;
var _default = DatePicker;
exports.default = _default;