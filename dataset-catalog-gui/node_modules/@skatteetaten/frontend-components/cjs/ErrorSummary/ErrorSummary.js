"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorSummary = void 0;

var React = _interopRequireWildcard(require("react"));

var _ErrorSummary = require("./ErrorSummary.classNames");

var _Link = require("../Link");

var _Icon = require("../Icon");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ErrorSummary = props => {
  const {
    id = 'errorsummary',
    shadowRootNode,
    titleTagName = 'h3',
    className,
    errors,
    onClick,
    children
  } = props;
  const styles = (0, _ErrorSummary.getClassNames)(props);
  const TitleTag = titleTagName;
  const errorsExist = errors && errors.length;

  const scrollToId = elementId => {
    const element = shadowRootNode ? shadowRootNode.getElementById(elementId) : document.getElementById(elementId);

    if (element) {
      element.scrollIntoView({
        behavior: 'smooth'
      });
      element.focus();
    }
  };

  return errorsExist || children ? /*#__PURE__*/React.createElement("div", {
    className: (0, _classnames.default)(className, styles.mainContainer),
    id: id,
    role: "status",
    "aria-live": "assertive"
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.iconArea
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.errorIcon
  }, /*#__PURE__*/React.createElement(_Icon.Icon, {
    iconName: 'Error'
  }))), /*#__PURE__*/React.createElement("div", {
    className: styles.errorListContainer
  }, /*#__PURE__*/React.createElement(TitleTag, null, props.title), errors && /*#__PURE__*/React.createElement("ul", null, errors.map(error => /*#__PURE__*/React.createElement("li", {
    key: error.id
  }, /*#__PURE__*/React.createElement(_Link.Link, {
    linkGroup: true,
    tabIndex: 0,
    icon: "ArrowForward",
    placement: "before",
    text: error.error,
    onClick: () => {
      onClick ? onClick(error.id) : scrollToId(error.id);
    }
  })))), children)) : null;
};

exports.ErrorSummary = ErrorSummary;