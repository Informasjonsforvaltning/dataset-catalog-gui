"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = getClassNames;

var _mergeStyles = require("@fluentui/merge-styles");

var _react = require("@fluentui/react");

var _utils = require("../utils");

var _colors = _interopRequireDefault(require("../utils/designtokens/_colors.json"));

var _fontSizes = _interopRequireDefault(require("../utils/designtokens/_fontSizes.json"));

var _breakpoints = _interopRequireDefault(require("../utils/designtokens/_breakpoints.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getTypeColor(props) {
  const radius = '200px';
  const interactiveColor = _colors.default['ske-color-interactive'];
  const whiteColor = _colors.default['ske-color-white-100'];
  const sizeNormal = {
    height: 'auto',
    minHeight: '32px',
    padding: '7px 15px'
  };

  switch (props.buttonStyle) {
    case 'primaryCornered':
      return _objectSpread(_objectSpread({
        borderRadius: '7px',
        borderColor: interactiveColor,
        background: interactiveColor,
        color: whiteColor
      }, sizeNormal), {}, {
        selectors: {
          [`@media  only screen and (max-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
            width: props.mobileFullWidth ? '100%' : 'auto'
          }
        }
      });

    case 'callToAction':
      return {
        borderColor: interactiveColor,
        background: interactiveColor,
        color: whiteColor,
        boxShadow: `0 8px 6px -6px ${_colors.default['ske-color-grey-30']}`,
        fontSize: _fontSizes.default['ske-font-size-xl'],
        borderWidth: '3px',
        borderRadius: '8px',
        fontWeight: _fontSizes.default['ske-font-weight-semibold'],
        padding: '25px',
        height: '80px',
        maxWidth: 'calc((75*550px)/100)'
      };

    case 'primary':
      return _objectSpread(_objectSpread({
        borderRadius: radius,
        borderColor: interactiveColor,
        background: interactiveColor,
        color: whiteColor
      }, sizeNormal), {}, {
        selectors: {
          [`@media  only screen and (max-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
            width: props.mobileFullWidth ? '100%' : undefined
          }
        }
      });

    case 'warning':
      return _objectSpread(_objectSpread({
        borderRadius: radius,
        borderColor: _colors.default['ske-color-burgundy-50'],
        background: _colors.default['ske-color-burgundy-10'],
        color: _colors.default['ske-color-black-100']
      }, sizeNormal), {}, {
        selectors: {
          [`@media  only screen and (max-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
            width: props.mobileFullWidth ? '100%' : 'auto'
          }
        }
      });

    case 'secondarySimple':
      return _objectSpread(_objectSpread({
        borderWidth: 3,
        borderRadius: radius,
        borderColor: 'transparent',
        background: 'none',
        color: interactiveColor
      }, sizeNormal), {}, {
        selectors: {
          [`@media  only screen and (max-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
            width: props.mobileFullWidth ? '100%' : 'auto'
          },
          '.ms-Button-textContainer': {
            textDecoration: 'underline'
          }
        }
      });

    default:
      // secondary
      return _objectSpread(_objectSpread({
        borderRadius: radius,
        borderColor: interactiveColor,
        background: whiteColor,
        color: interactiveColor
      }, sizeNormal), {}, {
        selectors: {
          [`@media  only screen and (max-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
            width: props.mobileFullWidth ? '100%' : 'auto'
          }
        }
      });
  }
}

function getTypeHoverColor(props) {
  const interactiveColor = _colors.default['ske-color-interactive'];
  const interactiveDarkColor = _colors.default['ske-color-interactive-dark'];
  const interactiveLightColor = _colors.default['ske-color-interactive-light'];
  const errorColor = _colors.default['ske-color-status-error'];
  const whiteColor = _colors.default['ske-color-white-100'];

  switch (props.buttonStyle) {
    case 'warning':
      return {
        borderColor: errorColor,
        background: errorColor,
        color: whiteColor
      };

    case 'secondarySimple':
      return {
        borderColor: interactiveColor,
        background: interactiveLightColor,
        textDecoration: 'none',
        selectors: {
          '.ms-Button-textContainer': {
            textDecoration: 'none'
          }
        }
      };

    case 'primaryCornered':
    case 'primary':
    case 'callToAction':
      return {
        borderColor: interactiveDarkColor,
        background: interactiveDarkColor,
        color: whiteColor
      };

    default:
      return {
        borderColor: interactiveColor,
        background: interactiveLightColor,
        color: interactiveColor
      };
  }
}

function getDisabledColor(props) {
  switch (props.buttonStyle) {
    case 'primary':
      return {
        boxShadow: `none`
      };

    case 'secondary':
      return {
        background: 'none'
      };

    default:
      return;
  }
}

function setFocusRadius(props) {
  if (props.buttonStyle === 'primaryCornered') {
    return '8px';
  }

  if (props.buttonStyle === 'callToAction') {
    return '10px';
  } else {
    return '21px';
  }
}

function getClassNames(props) {
  const theme = (0, _react.getTheme)();
  const inset = props.buttonStyle === 'secondarySimple' ? -4 : -8;
  const disabled = props.disabled;
  const radius = setFocusRadius(props);
  return (0, _mergeStyles.mergeStyles)([(0, _utils.getFocusStyle)(theme, inset, 'relative', radius), {
    displayName: `ske-${props.buttonStyle}-button`,
    selectors: {
      '&.ms-Button': _objectSpread({
        borderWidth: '3px',
        fontWeight: 'normal',
        padding: '15px',
        transition: '0.2s',
        textAlign: 'center',
        verticalAlign: 'top'
      }, getTypeColor(props)),
      '&.ms-Button:hover': _objectSpread({}, getTypeHoverColor(props)),
      '&.ms-Button:active': {
        transition: '0.15s',
        boxShadow: 'none',
        transform: disabled ? 'none' : 'translateY(2px)',
        transitionTimingFunction: 'ease'
      },
      '&.ms-Button:disabled': _objectSpread({
        background: _colors.default['ske-color-grey-10'],
        borderColor: _colors.default['ske-color-grey-30'],
        color: _colors.default['ske-color-grey-30'],
        cursor: 'not-allowed'
      }, getDisabledColor(props)),
      '&.ms-Button i': {
        fontSize: _fontSizes.default['ske-font-size-icon-l']
      }
    }
  }]);
}