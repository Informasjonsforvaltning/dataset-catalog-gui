"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _spacing = _interopRequireDefault(require("../utils/designtokens/_spacing.json"));

var _fontSizes = _interopRequireDefault(require("../utils/designtokens/_fontSizes.json"));

var _colors = _interopRequireDefault(require("../utils/designtokens/_colors.json"));

var _breakpoints = _interopRequireDefault(require("../utils/designtokens/_breakpoints.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getClassNames = props => {
  const whiteBackground = _colors.default['ske-color-white-100'];
  const hoverBackground = _colors.default['ske-color-interactive-light'];
  const color = _colors.default['ske-color-interactive'];
  const overrideMaxWidth = props.containerMaxWidth; // @ts-ignore TODO

  return (0, _mergeStyles.mergeStyleSets)({
    topcontainer: {
      width: '100%',
      marginTop: '40px',
      zIndex: 2,
      visibility: 'hidden',
      selectors: {
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-lg']})`]: {
          position: 'fixed',
          top: 0,
          right: 0
        }
      }
    },
    container: {
      position: 'relative !important',
      margin: '0 auto',
      opacity: 0,
      transition: '0.2s',
      selectors: {
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-lg']})`]: {
          maxWidth: overrideMaxWidth ? overrideMaxWidth : `${_breakpoints.default['ske-breakpoint-lg']}`
        },
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-xl']})`]: {
          maxWidth: overrideMaxWidth ? overrideMaxWidth : `${_breakpoints.default['ske-breakpoint-xl']}`
        },
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-xxl']})`]: {
          maxWidth: overrideMaxWidth ? overrideMaxWidth : `${_breakpoints.default['ske-breakpoint-xxl']}`
        }
      }
    },
    box: {
      marginTop: 0,
      selectors: {
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-lg']})`]: {
          top: '80vh',
          position: 'absolute',
          right: 0
        }
      }
    },
    actionButton: {
      display: 'block',
      textDecoration: 'none !important',
      textAlign: 'center',
      margin: `${_spacing.default['ske-spacing-xl']} auto`,
      selectors: {
        '.ms-Button-flexContainer': {
          flexDirection: 'initial',
          justifyContent: 'center'
        },
        ':hover .ms-Button-flexContainer > div': {
          backgroundColor: hoverBackground
        }
      }
    },
    icon: {
      fontSize: '1.375rem',
      color: color,
      display: 'inline',
      lineHeight: '0.8'
    },
    iconFixateContainer: {
      background: whiteBackground,
      borderColor: color,
      borderWidth: '2px',
      borderStyle: 'solid',
      borderRadius: '50%',
      height: '30px',
      width: '30px',
      position: 'absolute'
    },
    iconFixate: {
      position: 'absolute',
      top: '0.4em',
      left: '0.25em'
    },
    label: {
      fontSize: _fontSizes.default['ske-font-size-icon-s'],
      fontWeight: 700,
      textAlign: 'center',
      marginTop: '40px',
      backgroundColor: 'white !important',
      borderRadius: '10px',
      color: color,
      padding: '2px 15px',
      zIndex: 1
    },
    vis: {
      visibility: 'visible',
      opacity: '1 !important',
      transform: 'translateY(-15px)'
    }
  });
};

exports.getClassNames = getClassNames;