"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollToTopButton = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _Icon = require("../Icon");

var _ActionButton = require("../ActionButton");

var _ScrollToTopButton = require("./ScrollToTopButton.classNames");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * visibleName ScrollToTopButton (GÃ¥ til toppen)
 */
class ScrollToTopButton extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      skjult: true
    });

    _defineProperty(this, "sjekkSkjulKnapp", () => {
      const {
        skjult
      } = this.state;
      window.scrollY === 0 ? !skjult && this.setState({
        skjult: true
      }) : skjult && this.setState({
        skjult: false
      });
    });
  }

  componentDidMount() {
    window.addEventListener('scroll', this.sjekkSkjulKnapp);
    this.sjekkSkjulKnapp();
  }

  componentWillUnmount() {
    window.removeEventListener('scroll', this.sjekkSkjulKnapp);
  }

  render() {
    const {
      id,
      customClassNames,
      label
    } = this.props; // @ts-ignore TODO

    const styles = (0, _ScrollToTopButton.getClassNames)(this.props);
    const visKlasse = this.state.skjult ? '' : styles.vis;
    return /*#__PURE__*/React.createElement("div", {
      id: id,
      className: (0, _classnames.default)(styles.topcontainer, customClassNames?.topContainer),
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement("div", {
      className: (0, _classnames.default)(styles.container, visKlasse, customClassNames?.container)
    }, /*#__PURE__*/React.createElement("div", {
      className: (0, _classnames.default)(styles.box, customClassNames?.box)
    }, /*#__PURE__*/React.createElement(_ActionButton.ActionButton, {
      className: (0, _classnames.default)(styles.actionButton, customClassNames?.button),
      ariaLabel: label,
      onClick: () => window.scrollTo(0, 0)
    }, /*#__PURE__*/React.createElement("div", {
      className: (0, _classnames.default)(styles.iconFixateContainer, customClassNames?.iconContainer)
    }, /*#__PURE__*/React.createElement("div", {
      className: styles.iconFixate
    }, /*#__PURE__*/React.createElement(_Icon.Icon, {
      className: (0, _classnames.default)(styles.icon, customClassNames?.icon),
      iconName: 'MoveUp'
    }))), /*#__PURE__*/React.createElement("div", {
      className: (0, _classnames.default)(styles.label, customClassNames?.label)
    }, label)))));
  }

}

exports.ScrollToTopButton = ScrollToTopButton;

_defineProperty(ScrollToTopButton, "defaultProps", {
  label: 'Til toppen',
  containerMaxWidth: undefined
});