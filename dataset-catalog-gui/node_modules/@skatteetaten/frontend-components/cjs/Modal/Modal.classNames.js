"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _react = require("@fluentui/react");

var _spacing = _interopRequireDefault(require("../utils/designtokens/_spacing.json"));

var _breakpoints = _interopRequireDefault(require("../utils/designtokens/_breakpoints.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getClassNames = (props, tag) => {
  const palette = (0, _react.getTheme)().palette;
  let primaryColor;

  switch (tag) {
    case 'INK':
      {
        primaryColor = palette.skeColor.green100;
        break;
      }

    case 'LSO':
      {
        primaryColor = palette.skeColor.black100;
        break;
      }

    default:
      {
        primaryColor = palette.skeColor.burgundy100;
        break;
      }
  }

  return (0, _mergeStyles.mergeStyleSets)({
    wrapper: {
      display: 'flex',
      position: 'fixed',
      zIndex: 99998,
      top: 0,
      bottom: 0,
      right: 0,
      left: 0,
      alignItems: 'center',
      justifyContent: 'center'
    },
    modal: {
      display: 'flex',
      flexWrap: 'nowrap',
      padding: _spacing.default['ske-spacing-lg'],
      flexDirection: 'column',
      position: 'relative',
      height: 'auto',
      maxHeight: '90%',
      maxWidth: '90%',
      background: palette.skeColor.white,
      boxSizing: 'border-box',
      border: `4px solid ${primaryColor}`,
      zIndex: 99999,
      overflow: 'auto',
      selectors: {
        '@media (min-width: 320px)': {
          // TO-DO dette brekkpunktet her savnes
          minWidth: '40ch'
        },
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-sm']})`]: {
          minWidth: '50ch'
        },
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-md']})`]: {
          minWidth: '70ch'
        },
        [`@media (min-width: ${_breakpoints.default['ske-breakpoint-lg']})`]: {
          minWidth: '80ch'
        }
      }
    },
    overlay: {
      position: 'fixed',
      zIndex: 99998,
      top: 0,
      bottom: 0,
      right: 0,
      left: 0,
      background: 'rgba(0, 0, 0, 0.4)'
    },
    closeButton: {
      position: 'absolute',
      height: '1.875rem',
      right: '0.625rem',
      top: '0.625rem'
    }
  });
};

exports.getClassNames = getClassNames;