"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modal = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _reactHooks = require("@fluentui/react-hooks");

var _react2 = require("@fluentui/react");

var _IconButton = require("../IconButton");

var _SkeBasis = require("../SkeBasis");

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = _interopRequireWildcard(require("./../utils/i18n/i18n"));

var _ModalContext = require("./ModalContext");

var _Modal = require("./Modal.classNames");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ModalBase = props => {
  const {
    name,
    shadowRootNode,
    hideCloseButton,
    customClassNames,
    language,
    elementToFocusOnDismiss,
    onClose,
    onOpen,
    children
  } = props;
  const [isDOMAnchorReady, setIsDOMAnchorReady] = React.useState(false);
  const [modalRef, setModalRef] = React.useState(null);
  const modalInstance = (0, _ModalContext.useModalContext)();
  const focusTrapZone = React.useRef(null);
  const focusTrapZoneElm = React.useRef(null);
  language && _i18n.default.changeLanguage(language);

  const closeModal = () => {
    modalInstance && modalInstance.close(name);
    onClose && modalRef && onClose(modalRef);
  };

  const onRefChange = React.useCallback(node => {
    setModalRef(node);
  }, []);
  React.useEffect(() => {
    (0, _utils.createModalDomPlacement)(setIsDOMAnchorReady, shadowRootNode);
  }, [shadowRootNode]);
  React.useEffect(() => {
    if (modalRef && onOpen) {
      onOpen(modalRef);
    }
  }, [modalRef, onOpen]);
  (0, _utils.useEscOnPress)(modalRef, closeModal);
  const focusTrapZoneId = (0, _reactHooks.useId)('ModalTrapFocus');

  if (!isDOMAnchorReady) {
    return null;
  }

  const anchor = (0, _utils.getModalAnchor)(shadowRootNode);
  return /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/React.createElement(_SkeBasis.BrandContext.Consumer, null, ({
    tag
  }) => /*#__PURE__*/React.createElement("div", {
    className: (0, _classnames.default)((0, _Modal.getClassNames)(props, tag).wrapper, customClassNames?.wrapper)
  }, /*#__PURE__*/React.createElement("div", {
    ref: onRefChange,
    className: (0, _classnames.default)((0, _Modal.getClassNames)(props, tag).modal, customClassNames?.modal)
  }, /*#__PURE__*/React.createElement(_react2.FocusTrapZone, {
    id: focusTrapZoneId,
    ref: focusTrapZoneElm,
    componentRef: focusTrapZone,
    className: (0, _classnames.default)(customClassNames?.trapzone),
    elementToFocusOnDismiss: elementToFocusOnDismiss,
    isClickableOutsideFocusTrap: true
  }, !hideCloseButton && /*#__PURE__*/React.createElement(_IconButton.IconButton, {
    uniqueId: 'modal-closebutton',
    title: (0, _i18n.t)('modal.closebutton'),
    className: (0, _classnames.default)((0, _Modal.getClassNames)(props, tag).closeButton, customClassNames?.closebutton),
    icon: 'Cancel',
    onClick: closeModal
  }), children)), /*#__PURE__*/React.createElement("div", {
    "data-testid": 'modal-overlay',
    className: (0, _classnames.default)((0, _Modal.getClassNames)(props, tag).overlay, customClassNames?.overlay),
    onClick: closeModal
  }))), anchor);
};

const Modal = /*#__PURE__*/React.memo(ModalBase);
exports.Modal = Modal;