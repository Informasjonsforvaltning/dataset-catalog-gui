"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _react = require("@fluentui/react");

var _utils = require("../utils");

const defaultMargin = '16px 0 4px 0';

function containsTag(tag, tags) {
  if (Array.isArray(tags) && tags !== undefined) {
    return tags.indexOf(tag) > -1;
  }

  return false;
}

const getTagStyle = (tag, {
  noMargin,
  noColor,
  noSize,
  noBorder
}) => ({
  showMargin: !containsTag(tag, noMargin),
  showColor: !containsTag(tag, noColor),
  showSize: !containsTag(tag, noSize),
  showBorder: !containsTag(tag, noBorder)
});

const getH1Style = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('h1', options);
  return {
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.superLarge),
    lineHeight: '48px',
    fontWeight: _utils.FontWeights.bold,
    margin: (0, _utils.takeIf)(showMargin, '40px 0 8px 0'),
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.xxLarge),
        margin: (0, _utils.takeIf)(showMargin, '32px 0 4px 0'),
        lineHeight: '40px'
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.xLarge),
        margin: (0, _utils.takeIf)(showMargin, '32px 0 4px 0'),
        lineHeight: '40px'
      }
    }
  };
};

const getH2Style = (options, palette) => {
  const {
    showColor,
    showMargin,
    showSize
  } = getTagStyle('h2', options);
  return {
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.xxLarge),
    lineHeight: '32px',
    fontWeight: _utils.FontWeights.bold,
    margin: (0, _utils.takeIf)(showMargin, '32px 0 8px 0'),
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.xLarge),
        margin: (0, _utils.takeIf)(showMargin, defaultMargin),
        lineHeight: '28px'
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.large),
        margin: (0, _utils.takeIf)(showMargin, defaultMargin),
        lineHeight: '28px'
      }
    }
  };
};

const getH3Style = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('h3', options);
  return {
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.xLarge),
    fontWeight: _utils.FontWeights.bold,
    margin: (0, _utils.takeIf)(showMargin, '24px 0 8px 0'),
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.largePlus),
        margin: (0, _utils.takeIf)(showMargin, defaultMargin)
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.large),
        margin: (0, _utils.takeIf)(showMargin, defaultMargin)
      }
    }
  };
};

const getH4Style = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('h4', options);
  return {
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.large),
    fontWeight: _utils.FontWeights.bold,
    margin: (0, _utils.takeIf)(showMargin, '16px 0 0 0'),
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.mediumPlus),
        margin: (0, _utils.takeIf)(showMargin, '8px 0 0 0')
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.medium),
        margin: (0, _utils.takeIf)(showMargin, '8px 0 0 0')
      }
    }
  };
};

const getPStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('p', options);
  return {
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.medium),
    fontWeight: _utils.FontWeights.regular,
    lineHeight: '23px',
    margin: (0, _utils.takeIf)(showMargin, '14px 0 0 0'),
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getUlStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('ul', options);
  return {
    listStyleType: 'square',
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.medium),
    margin: (0, _utils.takeIf)(showMargin, '16px 0 16px 0'),
    lineHeight: '22px',
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getOlStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('ol', options);
  return {
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.medium),
    margin: (0, _utils.takeIf)(showMargin, '16px 0 16px 0'),
    lineHeight: '24px',
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getBlockqouteStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('blockquote', options);
  return {
    fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.medium),
    fontWeight: _utils.FontWeights.regular,
    lineHeight: '22px',
    margin: (0, _utils.takeIf)(showMargin, '16px 24px'),
    padding: '8px 24px',
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blackAlt),
    borderLeft: `4px solid ${palette.skeColor.brown}`,
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: (0, _utils.takeIf)(showSize, _utils.FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getAStyle = (options, palette) => {
  const {
    showColor,
    showBorder
  } = getTagStyle('a', options);
  return {
    color: (0, _utils.takeIf)(showColor, palette.skeColor.blue),
    textDecoration: 'none',
    paddingBottom: '1px',
    borderBottom: (0, _utils.takeIf)(showBorder, `1px solid ${palette.skeColor.blue}`),
    selectors: {
      ':hover': {
        color: palette.skeColor.darkBlue,
        borderBottom: '2px solid ' + palette.skeColor.darkBlue
      },
      ':focus': {
        color: palette.skeColor.darkBlue,
        borderBottom: '2px solid ' + palette.skeColor.darkBlue,
        backgroundColor: palette.skeColor.lightBlue,
        outline: 'none'
      }
    }
  };
};

const getClassNames = function getClassNames(props) {
  const palette = (0, _react.getTheme)().palette;
  return (0, _mergeStyles.mergeStyles)([{
    displayName: 'SkeTypography',
    fontFamily: "'Helvetica Neue', Helvetica , Arial, 'Liberation Sans', 'Nimbus Sans L', sans-serif",
    selectors: {
      h1: getH1Style(props, palette),
      h2: getH2Style(props, palette),
      h3: getH3Style(props, palette),
      h4: getH4Style(props, palette),
      p: getPStyle(props, palette),
      ul: getUlStyle(props, palette),
      ol: getOlStyle(props, palette),
      blockquote: getBlockqouteStyle(props, palette),
      a: getAStyle(props, palette)
    }
  }]);
};

exports.getClassNames = getClassNames;