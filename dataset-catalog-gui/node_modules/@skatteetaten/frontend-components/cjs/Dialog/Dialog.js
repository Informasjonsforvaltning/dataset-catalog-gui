"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dialog = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _Callout = require("../Callout");

var _Dialog = require("./Dialog.classNames");

var _react2 = require("@fluentui/react");

var _SkeBasis = require("../SkeBasis");

var _i18n = _interopRequireDefault(require("../utils/i18n/i18n"));

var _WaitAlert = _interopRequireDefault(require("./WaitAlert"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Dialog extends React.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "_iconButtonElement", void 0);

    this.state = {
      isCalloutVisible: false
    };
    this._iconButtonElement = /*#__PURE__*/React.createRef();
    this._onClick = this._onClick.bind(this);
    this._onDismiss = this._onDismiss.bind(this);

    if (props.language) {
      _i18n.default.changeLanguage(props.language);
    }
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.language !== this.props.language) {
      _i18n.default.changeLanguage(this.props.language);
    }
  }

  render() {
    const _this$props = this.props,
          {
      children,
      title,
      subText,
      isBlocking,
      isModeless,
      type,
      className,
      layoutStyle,
      closeButtonAriaLabel,
      modalProps,
      doNotLayer
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children", "title", "subText", "isBlocking", "isModeless", "type", "className", "layoutStyle", "closeButtonAriaLabel", "modalProps", "doNotLayer"]);

    const {
      isCalloutVisible
    } = this.state;
    return /*#__PURE__*/React.createElement(_SkeBasis.BrandContext.Consumer, null, ({
      tag
    }) => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_react2.Dialog, _extends({}, props, {
      dialogContentProps: {
        type: type,
        title,
        subText,
        closeButtonAriaLabel: closeButtonAriaLabel
      },
      modalProps: _objectSpread({
        isBlocking,
        isModeless,
        className: (0, _classnames.default)((0, _Dialog.getClassNames)(this.props, tag).main, className)
      }, modalProps),
      ariaLabelledById: props.waitAlert ? 'waitAlertHeading' : undefined,
      ariaDescribedById: props.waitAlert ? 'waitAlertText' : undefined
    }), isCalloutVisible && /*#__PURE__*/React.createElement(_Callout.Callout, {
      directionalHint: _Callout.Callout.POS_TOP_LEFT,
      color: _Callout.Callout.HELP,
      ariaLabel: 'Hjelpetekst',
      target: this._iconButtonElement,
      onClose: this._onDismiss
    }), props.waitAlert ? /*#__PURE__*/React.createElement(_WaitAlert.default, {
      onDismiss: props.onDismiss,
      waitAlertBtnText: props.waitAlertBtnText
    }, children) : children)));
  }

  _onClick() {
    this.setState({
      isCalloutVisible: !this.state.isCalloutVisible
    });
  }

  _onDismiss() {
    this.setState({
      isCalloutVisible: false
    });
  }

}

exports.Dialog = Dialog;

_defineProperty(Dialog, "Footer", _react2.DialogFooter);

_defineProperty(Dialog, "Type", _react2.DialogType);

_defineProperty(Dialog, "defaultProps", {
  layoutStyle: 'normal',
  type: Dialog.Type.normal,
  closeButtonAriaLabel: 'Lukk',
  tabletContentOverflows: false,
  isModeless: false,
  isBlocking: undefined,
  waitAlert: false
});