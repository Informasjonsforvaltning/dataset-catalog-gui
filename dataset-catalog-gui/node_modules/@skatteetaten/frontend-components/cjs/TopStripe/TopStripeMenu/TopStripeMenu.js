"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TopStripeMenu = void 0;

var React = _interopRequireWildcard(require("react"));

var _TopStripeMenu = require("./TopStripeMenu.classNames");

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var _Icon = require("../../Icon");

var _ActionButton = require("../../ActionButton");

var _TopStripeButton = require("../TopStripeButton");

var _TopStripe = require("../TopStripe");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * visibleName TopStripeMenu (ToppstripeMeny)
 */
const TopStripeMenu = props => {
  const styles = (0, _TopStripeMenu.getClassNames)();
  const {
    children,
    className,
    onRender,
    icon,
    title,
    index,
    showOnMobile = false,
    closeMenuAriaLabel = 'Lukk',
    closeOnClick = true,
    showChevron = true,
    contentIsMenu = true
  } = props;
  const {
    open,
    setOpen,
    closeMenu
  } = React.useContext(_TopStripe.TopStripeContext);
  const isMenuOpen = open === index;
  const screenSize = (0, _utils.UseScreen)();

  if (screenSize.sm && !showOnMobile) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_TopStripeButton.TopStripeButton, {
    "aria-haspopup": contentIsMenu,
    "aria-expanded": isMenuOpen,
    className: (0, _classnames.default)(className, {
      [styles.topStripeMenuShowChevron]: showChevron,
      [styles.topStripeMenuHasIcon]: icon
    }),
    onClick: () => setOpen(index),
    showOnMobile: showOnMobile
  }, icon ? /*#__PURE__*/React.createElement(_Icon.Icon, {
    className: styles.topStripeMenuIcon,
    iconName: icon
  }) : '', /*#__PURE__*/React.createElement("div", {
    className: styles.topStripeMenuTitle
  }, title), showChevron ? /*#__PURE__*/React.createElement(_Icon.Icon, {
    className: styles.topStripeMenuChevronIcon,
    "aria-hidden": true,
    iconName: isMenuOpen ? 'MenuUp' : 'MenuDown'
  }) : ''), isMenuOpen && /*#__PURE__*/React.createElement("ul", {
    className: styles.topStripeMenuDropdownContainer,
    role: contentIsMenu ? 'menu' : undefined
  }, onRender ? onRender : React.Children.map(children, child => {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.createElement("li", {
        onClick: e => {
          child.props && child.props.onClick && child.props.onClick(e);
          closeOnClick && closeMenu && closeMenu();
        },
        className: styles.topStripeMenuDropdownElementContainer
      }, child.props.icon ? /*#__PURE__*/React.createElement(_Icon.Icon, {
        iconName: child.props.icon || undefined,
        "aria-hidden": true,
        className: styles.topStripeMenuDropdownElementIcon
      }) : '', /*#__PURE__*/React.cloneElement(child, {
        role: 'menuitem',
        'aria-current': child.props.icon ? 'true' : undefined,
        icon: undefined,
        onClick: undefined,
        className: (0, _classnames.default)(child.props.className, styles.topStripeMenuDropdownElement)
      }));
    } else {
      return /*#__PURE__*/React.createElement("li", {
        className: styles.topStripeMenuDropdownElement
      }, children);
    }
  }), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement(_ActionButton.ActionButton, {
    className: styles.topStripeMenuDropdownCloseButton,
    icon: 'ChevronUp',
    onClick: () => setOpen(index),
    ariaLabel: closeMenuAriaLabel
  }))));
};

exports.TopStripeMenu = TopStripeMenu;