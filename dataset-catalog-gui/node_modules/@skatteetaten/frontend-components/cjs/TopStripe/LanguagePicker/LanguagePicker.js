"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LanguagePicker = exports.LanguageEnum = void 0;

var React = _interopRequireWildcard(require("react"));

var _TopStripeButton = require("../TopStripeButton");

var _TopStripeMenu = require("../TopStripeMenu");

var _assets = require("../assets");

var _Icon = require("../../Icon");

var _utils = require("../../utils");

var _LanguagePicker = require("./LanguagePicker.classNames");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let LanguageEnum;
exports.LanguageEnum = LanguageEnum;

(function (LanguageEnum) {
  LanguageEnum["BOKMAAL"] = "nb";
  LanguageEnum["NYNORSK"] = "nn";
  LanguageEnum["ENGLISH"] = "en";
  LanguageEnum["SAMI"] = "se";
})(LanguageEnum || (exports.LanguageEnum = LanguageEnum = {}));

const generateLanguagePickerText = language => {
  switch (language) {
    case LanguageEnum.BOKMAAL:
      return 'Bokmål';

    case LanguageEnum.NYNORSK:
      return 'Nynorsk';

    case LanguageEnum.ENGLISH:
      return 'English';

    case LanguageEnum.SAMI:
      return 'Sámegiella';
  }
};

const displayFlag = language => {
  switch (language) {
    case LanguageEnum.BOKMAAL:
      return /*#__PURE__*/React.createElement("img", {
        src: _assets.NorwegianFlag,
        alt: ''
      });

    case LanguageEnum.NYNORSK:
      return /*#__PURE__*/React.createElement("img", {
        src: _assets.NorwegianFlag,
        alt: ''
      });

    case LanguageEnum.ENGLISH:
      return /*#__PURE__*/React.createElement("img", {
        src: _assets.EnglishFlag,
        alt: ''
      });

    case LanguageEnum.SAMI:
      return /*#__PURE__*/React.createElement("img", {
        src: _assets.SamiFlag,
        alt: ''
      });
  }
};

const generateLanguagePickerTitle = language => {
  const styles = (0, _LanguagePicker.getClassNames)();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: styles.languageButtonFlag
  }, displayFlag(language)), generateLanguagePickerText(language));
};

const LanguagePickerButton = ({
  buttonLanguage,
  selectedLanguage,
  setLanguage,
  showOnMobile
}) => {
  const styles = (0, _LanguagePicker.getClassNames)();
  const isSelectedLanguage = buttonLanguage === selectedLanguage;
  return /*#__PURE__*/React.createElement(_TopStripeButton.TopStripeButton, {
    onClick: () => setLanguage(buttonLanguage),
    showOnMobile: showOnMobile,
    className: styles.languageButton,
    role: 'menuitem',
    "aria-current": isSelectedLanguage
  }, isSelectedLanguage && /*#__PURE__*/React.createElement(_Icon.Icon, {
    iconName: 'Check',
    className: styles.checkIcon
  }), /*#__PURE__*/React.createElement("span", {
    className: (0, _classnames.default)(styles.languageButtonContent, styles.languageButtonFlag)
  }, displayFlag(buttonLanguage)), /*#__PURE__*/React.createElement("span", {
    className: (0, _classnames.default)(styles.languageButtonContent, styles.languageButtonText, {
      [styles.languageButtonIsNotSelected]: !isSelectedLanguage
    })
  }, generateLanguagePickerText(buttonLanguage)));
};

const LanguagePicker = props => {
  const {
    className,
    selectedLanguage,
    setLanguage,
    showOnMobile = true,
    showSami = false
  } = props;
  const [languages, setLanguages] = React.useState([]);
  (0, React.useEffect)(() => {
    showSami ? setLanguages([LanguageEnum.BOKMAAL, LanguageEnum.NYNORSK, LanguageEnum.ENGLISH, LanguageEnum.SAMI]) : setLanguages([LanguageEnum.BOKMAAL, LanguageEnum.NYNORSK, LanguageEnum.ENGLISH]);
  }, [showSami]);
  (0, React.useEffect)(() => {
    document.documentElement.lang = selectedLanguage;
  }, [selectedLanguage]);
  const screenSize = (0, _utils.UseScreen)();

  if (screenSize.sm && !showOnMobile) {
    return null;
  }

  return /*#__PURE__*/React.createElement(_TopStripeMenu.TopStripeMenu, {
    "data-testid": 'language-picker',
    showOnMobile: showOnMobile,
    title: generateLanguagePickerTitle(selectedLanguage),
    className: className
  }, languages.map(language => {
    return /*#__PURE__*/React.createElement(LanguagePickerButton, {
      key: language,
      buttonLanguage: language,
      selectedLanguage: selectedLanguage,
      setLanguage: setLanguage,
      showOnMobile: showOnMobile
    });
  }));
};

exports.LanguagePicker = LanguagePicker;