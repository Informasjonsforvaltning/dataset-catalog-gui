"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHotkeys = useHotkeys;

var _hotkeysJs = _interopRequireDefault(require("hotkeys-js"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This file is compied under the MIT lisence from here: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/master/src/useHotkeys.ts
function useHotkeys(keys, callback, options, deps) {
  if (options instanceof Array) {
    deps = options;
    options = undefined;
  }

  const {
    enableOnTags,
    filter
  } = options || {};
  const ref = (0, _react.useRef)(null);
  const memoisedCallback = (0, _react.useCallback)((keyboardEvent, hotkeysEvent) => {
    if (ref.current === null || document.activeElement === ref.current) {
      callback(keyboardEvent, hotkeysEvent);
      return true;
    }

    return false;
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  deps ? [ref, ...deps] : [ref]);
  (0, _react.useEffect)(() => {
    if (options && options.enableOnTags) {
      _hotkeysJs.default.filter = ({
        target,
        srcElement
      }) => {
        const targetTagName = //@ts-ignore
        target && target.tagName || srcElement && srcElement.tagName;
        return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));
      };
    }

    if (filter) _hotkeysJs.default.filter = filter;
    (0, _hotkeysJs.default)(keys, options || {}, memoisedCallback);
    return () => _hotkeysJs.default.unbind(keys, memoisedCallback);
  }, [memoisedCallback, options, enableOnTags, filter, keys]);
  return ref;
}