"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UseScreen = void 0;

var _react = require("react");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getValuesForComparison = sizeObj => ({
  gt: sizeObj.gt,
  lt: sizeObj.lt,
  sm: sizeObj.sm,
  md: sizeObj.md,
  lg: sizeObj.lg,
  xl: sizeObj.xl,
  xxl: sizeObj.xxl,
  xxxl: sizeObj.xxxl
});

const UseScreen = () => {
  const [size, setSize] = (0, _react.useState)({
    width: 0,
    height: 0,
    sizes: {
      sm: 480,
      md: 640,
      lg: 1024,
      xl: 1366,
      xxl: 1920
    },
    lt: {
      sm: false,
      md: true,
      lg: true,
      xl: true,
      xxl: true,
      xxxl: true
    },
    gt: {
      sm: false,
      md: false,
      lg: false,
      xl: false,
      xxl: false,
      xxxl: false
    },
    sm: true,
    md: false,
    lg: false,
    xl: false,
    xxl: false,
    xxxl: false
  });
  (0, _react.useEffect)(() => {
    const getSizes = () => {
      const newSizes = {};

      if (window.innerHeight !== size.height) {
        newSizes.height = window.innerHeight;
      }

      const w = window.innerWidth;

      if (w !== size.width) {
        newSizes.width = w;
      }

      const s = size.sizes;
      newSizes.gt = {
        sm: w >= s.sm,
        md: w >= s.md,
        lg: w >= s.lg,
        xl: w >= s.xl,
        xxl: w >= s.xxl
      };
      newSizes.lt = {
        sm: false,
        md: w < s.sm,
        lg: w < s.md,
        xl: w < s.lg,
        xxl: w < s.xl,
        xxxl: w < s.xxl
      };
      newSizes.sm = !newSizes.gt.sm;
      newSizes.md = newSizes.gt.sm && newSizes.lt.lg;
      newSizes.lg = newSizes.gt.md && newSizes.lt.xl;
      newSizes.xl = newSizes.gt.lg && newSizes.lt.xxl;
      newSizes.xxl = newSizes.gt.xl && newSizes.lt.xxxl;
      newSizes.xxxl = newSizes.gt.xxl;
      const sizeHasChanged = JSON.stringify(getValuesForComparison(newSizes)) !== JSON.stringify(getValuesForComparison(size));
      return [sizeHasChanged, _objectSpread({
        sizes: size.sizes
      }, newSizes)];
    };

    function updateSizes() {
      const [sizeHasChanged, sizes] = getSizes();

      if (sizeHasChanged) {
        // @ts-ignore TODO
        setSize(sizes);
      }
    }

    updateSizes();
    window.addEventListener('resize', updateSizes);
    return () => window.removeEventListener('resize', updateSizes);
  }, [size]);
  return size;
};

exports.UseScreen = UseScreen;