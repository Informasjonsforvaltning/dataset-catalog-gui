"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _colors = _interopRequireDefault(require("../utils/designtokens/_colors.json"));

var _fontSizes = _interopRequireDefault(require("../utils/designtokens/_fontSizes.json"));

var _spacing = _interopRequireDefault(require("../utils/designtokens/_spacing.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getCalloutBorder(props) {
  if (props.color === 'ske-color-white-100' || props.border) {
    return {
      border: `2px solid ${_colors.default['ske-color-black-100']}`
    };
  } else {
    return {
      border: 'none'
    };
  }
}

const getClassNames = (props, widthBtnLabel) => {
  return (0, _mergeStyles.mergeStyleSets)({
    main: _objectSpread(_objectSpread({
      displayName: 'SkeCallout',
      boxShadow: 'none !important',
      zIndex: 1000000
    }, getCalloutBorder(props)), {}, {
      selectors: {
        '.ms-Callout-main': {
          width: '100%',
          backgroundColor: _colors.default[props.color],
          boxShadow: 'none',
          'box-sizing': 'border-box',
          padding: `${_spacing.default['ske-spacing-lg']} ${_spacing.default['ske-spacing-xxl']} ${_spacing.default['ske-spacing-lg']} ${_spacing.default['ske-spacing-lg']}` //'1rem 2.5rem 1rem 1rem',

        },
        '.ms-Callout-beak': {
          backgroundColor: _colors.default[props.color],
          left: 'calc('.concat(widthBtnLabel, '/2) !important')
        },
        '& p': {
          margin: '0 '
        },
        '&& h3': {
          marginTop: '0',
          fontSize: _fontSizes.default['ske-font-size-m']
        }
      }
    }),
    calloutWrapper: {
      width: '100%'
    },
    closeButton: {
      backgroundColor: 'transparent',
      border: 'none',
      position: 'absolute',
      color: `${_colors.default['ske-color-black-100']} !important`,
      right: '1px',
      top: '1px',
      opacity: 1,
      selectors: {
        '&& i': {
          fontWeight: _fontSizes.default['ske-font-weight-bold']
        },
        '&:hover i': {
          transition: 'opacity 300ms ease-out'
        }
      }
    }
  });
};

exports.getClassNames = getClassNames;