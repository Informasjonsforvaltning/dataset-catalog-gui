"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClassNames = void 0;

var _mergeStyles = require("@fluentui/merge-styles");

var _react = require("@fluentui/react");

var _utils = require("../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getType(props) {
  if (props.type === 'left') {
    return {
      display: 'block'
    };
  } else {
    return {};
  }
}

function getIcon(props) {
  if (props.alignIcon === 'right') {
    return {
      fontSize: '1.75rem',
      float: 'right'
    };
  }

  return {
    fontSize: _utils.FontSizes.superLarge,
    display: 'inherit',
    margin: `16px 0`,
    textAlign: 'center',
    color: 'black'
  };
}

function getTitle(props) {
  const palette = (0, _react.getTheme)().palette;

  if (props.alignTitle === 'left') {
    return {
      textAlign: 'left',
      margin: 0,
      marginBottom: '8px',
      color: palette.skeColor.blue
    };
  } else {
    return {};
  }
}

function getDescription(props) {
  const palette = (0, _react.getTheme)().palette;

  if (props.alignDescription === 'left') {
    return {
      margin: 0,
      textAlign: 'left',
      lineHeight: '25px',
      color: palette.skeColor.blackAlt
    };
  } else {
    return {};
  }
}

const getClassNames = props => {
  const palette = (0, _react.getTheme)().palette;
  return (0, _mergeStyles.mergeStyleSets)({
    content: {
      selectors: {
        '& i': _objectSpread({}, getIcon(props)),
        '& p': _objectSpread({
          margin: 0,
          textAlign: 'center',
          lineHeight: '25px',
          color: palette.skeColor.blackAlt
        }, getDescription(props)),
        '& h2, h3, h4, h5, h6': _objectSpread({
          textAlign: 'center',
          margin: 0,
          marginBottom: '8px',
          fontSize: '1.5rem',
          color: palette.skeColor.blue
        }, getTitle(props)),
        '&:active, &:focus, &:hover': {
          selectors: {
            h2: {
              color: palette.skeColor.darkBlue
            }
          }
        }
      }
    },
    nav: {
      selectors: {
        '& a, & button': {
          border: '0',
          margin: 'auto'
        },
        '& button': _objectSpread({
          backgroundColor: 'inherit'
        }, getTitle(props)),
        '& ul': _objectSpread({
          display: 'flex',
          flexWrap: 'wrap',
          padding: 0,
          justifyContent: 'space-between'
        }, getType(props)),
        '& ul li': {
          borderBottom: `3px solid ${palette.skeColor.darkBlue}`,
          position: 'relative',
          textDecoration: 'none',
          listStyle: 'none',
          display: 'flex',
          marginBottom: '32px',
          flexBasis: '46%'
        },
        '& ul li > a, & ul li > button': {
          color: palette.skeColor.darkBlue,
          textDecoration: 'none',
          paddingBottom: '16px',
          paddingLeft: '16px',
          paddingRight: '16px',
          margin: '0 !important',
          width: '100%',
          transition: 'all 0.2s ease'
        },
        '& ul li > a:active, & ul li > a:focus, & ul li > a:hover, & ul li > button:active, & ul li > button:focus, & ul li > button:hover': {
          backgroundColor: palette.skeColor.lightBlue,
          outline: 'none',
          transition: 'background-color .2s'
        },
        '& ul li > a::after, & ul li > button::after': {
          content: '""',
          position: 'absolute',
          display: 'inline-block',
          left: 0,
          bottom: 0,
          backgroundColor: palette.skeColor.darkBlue,
          transition: 'height 0.1s',
          width: '100%',
          height: 0
        },
        '& ul li > a:focus:after, & ul li > a:hover:after, & ul li > button:focus:after, & ul li > button:hover:after': {
          height: 2
        },
        '@media (max-width: 1023px)': {
          selectors: {
            'ul li': {
              flexBasis: '100%'
            }
          }
        }
      }
    }
  });
};

exports.getClassNames = getClassNames;