"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavigationTile = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _NavigationContent = require("./NavigationContent");

var _NavigationTile = require("./NavigationTile.classNames");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/*
 * visibleName NavigationTile (Forsideknapp)
 */
const NavigationTile = props => {
  const {
    children,
    contents,
    className,
    type,
    alignIcon,
    alignTitle,
    alignDescription,
    ariaLabel,
    headingLevel,
    useButtons
  } = props,
        rest = _objectWithoutProperties(props, ["children", "contents", "className", "type", "alignIcon", "alignTitle", "alignDescription", "ariaLabel", "headingLevel", "useButtons"]);

  const styles = (0, _NavigationTile.getClassNames)(props);
  return /*#__PURE__*/React.createElement("nav", _extends({
    "aria-label": ariaLabel
  }, rest, {
    className: (0, _classnames.default)(styles.nav, (0, _NavigationTile.getClassNames)(props), className)
  }), /*#__PURE__*/React.createElement("ul", null, contents && contents.map((_ref, index) => {
    let rest = _extends({}, _ref);

    return /*#__PURE__*/React.createElement(_NavigationContent.NavigationContent, _extends({
      key: index + '.' + rest.to,
      className: styles.content,
      headingLevel: headingLevel,
      useButtons: useButtons
    }, rest));
  }), React.Children.map(children, (child, index) => {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.createElement(_NavigationContent.NavigationContent, _extends({
        key: index + '.' + child.props.to,
        className: styles.content,
        headingLevel: headingLevel,
        useButtons: useButtons
      }, child.props), child.props.children);
    }
  })));
};

exports.NavigationTile = NavigationTile;
NavigationTile.defaultProps = {
  alignDescription: 'center',
  alignIcon: 'center',
  alignTitle: 'center',
  type: 'center'
};