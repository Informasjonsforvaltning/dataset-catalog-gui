import * as React from 'react';
import { createPortal } from 'react-dom';
import { useId } from '@fluentui/react-hooks';
import { FocusTrapZone } from '@fluentui/react';
import { IconButton } from '../IconButton';
import { BrandContext } from '../SkeBasis';
import classnames from 'classnames';
import i18n, { t } from './../utils/i18n/i18n';
import { useModalContext } from './ModalContext';
import { getClassNames } from './Modal.classNames';
import { getModalAnchor, createModalDomPlacement, useEscOnPress } from './utils';

const ModalBase = props => {
  const {
    name,
    shadowRootNode,
    hideCloseButton,
    customClassNames,
    language,
    elementToFocusOnDismiss,
    onClose,
    onOpen,
    children
  } = props;
  const [isDOMAnchorReady, setIsDOMAnchorReady] = React.useState(false);
  const [modalRef, setModalRef] = React.useState(null);
  const modalInstance = useModalContext();
  const focusTrapZone = React.useRef(null);
  const focusTrapZoneElm = React.useRef(null);
  language && i18n.changeLanguage(language);

  const closeModal = () => {
    modalInstance && modalInstance.close(name);
    onClose && modalRef && onClose(modalRef);
  };

  const onRefChange = React.useCallback(node => {
    setModalRef(node);
  }, []);
  React.useEffect(() => {
    createModalDomPlacement(setIsDOMAnchorReady, shadowRootNode);
  }, [shadowRootNode]);
  React.useEffect(() => {
    if (modalRef && onOpen) {
      onOpen(modalRef);
    }
  }, [modalRef, onOpen]);
  useEscOnPress(modalRef, closeModal);
  const focusTrapZoneId = useId('ModalTrapFocus');

  if (!isDOMAnchorReady) {
    return null;
  }

  const anchor = getModalAnchor(shadowRootNode);
  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(BrandContext.Consumer, null, ({
    tag
  }) => /*#__PURE__*/React.createElement("div", {
    className: classnames(getClassNames(props, tag).wrapper, customClassNames?.wrapper)
  }, /*#__PURE__*/React.createElement("div", {
    ref: onRefChange,
    className: classnames(getClassNames(props, tag).modal, customClassNames?.modal)
  }, /*#__PURE__*/React.createElement(FocusTrapZone, {
    id: focusTrapZoneId,
    ref: focusTrapZoneElm,
    componentRef: focusTrapZone,
    className: classnames(customClassNames?.trapzone),
    elementToFocusOnDismiss: elementToFocusOnDismiss,
    isClickableOutsideFocusTrap: true
  }, !hideCloseButton && /*#__PURE__*/React.createElement(IconButton, {
    uniqueId: 'modal-closebutton',
    title: t('modal.closebutton'),
    className: classnames(getClassNames(props, tag).closeButton, customClassNames?.closebutton),
    icon: 'Cancel',
    onClick: closeModal
  }), children)), /*#__PURE__*/React.createElement("div", {
    "data-testid": 'modal-overlay',
    className: classnames(getClassNames(props, tag).overlay, customClassNames?.overlay),
    onClick: closeModal
  }))), anchor);
};

export const Modal = /*#__PURE__*/React.memo(ModalBase);