import React, { useState, useMemo } from 'react';
import { ModalContext, ModalConsumer } from './ModalContext';
export const ModalProvider = ({
  children
}) => {
  const [modalList, setModalList] = useState([]);
  const modal = useMemo(() => {
    const isOpen = name => modalList.includes(name);

    const isClosed = name => !modalList.includes(name);

    const openModal = name => {
      document.body.style.overflow = 'hidden';

      if (isOpen(name)) {
        return;
      }

      setModalList([...modalList, name]);
    };

    const closeModal = name => {
      document.body.style.overflow = '';

      if (isClosed(name)) {
        return;
      }

      const newList = modalList.filter(modalName => modalName !== name);
      setModalList(newList);
    };

    const closeAll = () => {
      document.body.style.overflow = '';

      if (modalList.length > 0) {
        setModalList([]);
      }
    };

    const toggleModal = name => {
      if (isOpen(name)) {
        closeModal(name);
        return;
      }

      openModal(name);
    };

    return {
      open: name => openModal(name),
      close: name => closeModal(name),
      toggle: name => toggleModal(name),
      closeAll: () => closeAll(),
      isOpen: name => isOpen(name),
      isClose: name => isClosed(name),
      list: modalList
    };
  }, [modalList]);
  return /*#__PURE__*/React.createElement(ModalContext.Provider, {
    value: modal
  }, /*#__PURE__*/React.createElement(ModalConsumer, null, children));
};