function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classnames from 'classnames';
import * as React from 'react';
import { getClassNames } from './Card.classNames';
import { Icon } from '../Icon';
import { CardBorder, CardColor } from './Card.types';
/*
 * visibleName Card (Innholdskort)
 */

export class Card extends React.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "_toggleExpand", () => {
      this.setState({
        isExpandedState: !this.state.isExpandedState
      });
      this.props.onClick && this.props.onClick();
    });

    const {
      isExpanded
    } = props;
    this.state = {
      isExpandedState: isExpanded || false
    };
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.state.isExpandedState !== prevState.isExpandedState) {
      this.props.onChange && this.props.onChange(this.state.isExpandedState);
    }
  }

  render() {
    const {
      isExpandedState
    } = this.state;

    const _this$props = this.props,
          {
      children,
      title,
      titleTagName,
      subtitle,
      expand,
      className,
      id,
      buttonType,
      ariaLabel,
      isExpanded,
      titlesize,
      color,
      border,
      marginbottom,
      margin,
      onChange,
      onClick
    } = _this$props,
          htmlAttributes = _objectWithoutProperties(_this$props, ["children", "title", "titleTagName", "subtitle", "expand", "className", "id", "buttonType", "ariaLabel", "isExpanded", "titlesize", "color", "border", "marginbottom", "margin", "onChange", "onClick"]);

    const TitleTag = titleTagName;
    const styles = getClassNames(this.props, this.state);
    const expandCard = /*#__PURE__*/React.createElement("button", {
      className: styles.header,
      onClick: expand ? this._toggleExpand : undefined,
      "aria-expanded": isExpandedState,
      type: buttonType
    }, /*#__PURE__*/React.createElement("div", {
      className: styles.titlecontainer
    }, /*#__PURE__*/React.createElement(TitleTag, {
      "aria-label": title,
      className: styles.titleExpand
    }, title), /*#__PURE__*/React.createElement("div", {
      className: styles.subtitle,
      "aria-label": subtitle
    }, subtitle)), /*#__PURE__*/React.createElement("div", {
      className: styles.expandIcon
    }, /*#__PURE__*/React.createElement(Icon, {
      iconName: 'ChevronDown'
    })));
    const regularCard = /*#__PURE__*/React.createElement("div", {
      className: styles.header
    }, /*#__PURE__*/React.createElement("div", {
      className: styles.titlecontainer
    }, /*#__PURE__*/React.createElement(TitleTag, {
      className: styles.title,
      "aria-label": title
    }, title), /*#__PURE__*/React.createElement("div", {
      className: styles.subtitle,
      "aria-label": subtitle
    }, subtitle)));
    return /*#__PURE__*/React.createElement("div", _extends({
      id: id,
      className: classnames(styles.root, className)
    }, htmlAttributes), expand ? expandCard : title || subtitle ? regularCard : null, isExpandedState && /*#__PURE__*/React.createElement("div", {
      className: styles.body
    }, children));
  }

}

_defineProperty(Card, "Color", CardColor);

_defineProperty(Card, "Border", CardBorder);

_defineProperty(Card, "defaultProps", {
  title: undefined,
  titleTagName: 'div',
  subtitle: undefined,
  titlesize: 'x-large',
  expand: false,
  isExpanded: true,
  color: CardColor.BEIGE,
  marginbottom: '2px',
  margin: 'medium',
  buttonType: 'button'
});