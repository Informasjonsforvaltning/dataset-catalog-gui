import classnames from 'classnames';
import React, { useEffect, useState } from 'react';
import { getClassNames } from './Table.classNames';
import { generateId, getSrOnlyStyle } from '../utils';
import { TableRow } from './TableRow';
import { SumRow } from './SumRow';
import { TableHeader } from './TableHeader';
export const setScrollBarState = (wrapperWidth, tableWidth, setTableIsScrollable) => {
  if (tableWidth && wrapperWidth && tableWidth > wrapperWidth) {
    setTableIsScrollable(true);
  } else {
    setTableIsScrollable(false);
  }
};
/*
 * visibleName Table (Tabell)
 */

export const Table = props => {
  const {
    id,
    customClassNames,
    editableRows,
    expandableRows,
    expandIconPlacement,
    children,
    columns,
    openEditableOnRowClick,
    showRowSeparators = true,
    compactTable = false,
    caption = null,
    hideCaption,
    openEditableRowIndex: OpenEditableRowIndexExternal,
    setOpenEditableRowIndex,
    openExpandableRowIndex: openExpandableRowIndexExternal,
    setOpenExpandableRowIndex,
    sum
  } = props;
  const genratedId = generateId();
  const mainId = id ? id : 'table-' + genratedId;
  const wrapperRef = React.useRef(null);
  const tableRef = React.useRef(null);
  const [tableIsScrollable, setTableIsScrollable] = useState(false);
  const [openEditableRowIndexInternal, setOpenEditableRowIndexInternal] = useState(OpenEditableRowIndexExternal);
  const [openExpandableRowIndexInternal, setOpenExpandableIndexInternal] = useState();
  const [sort, setSort] = useState({
    ascending: false,
    columnFieldName: ''
  });
  const styles = getClassNames(props);
  useEffect(() => {
    if (setOpenEditableRowIndex) {
      setOpenEditableRowIndex(openEditableRowIndexInternal);
    }
  }, [openEditableRowIndexInternal, setOpenEditableRowIndex]);
  useEffect(() => {
    setOpenEditableRowIndexInternal(OpenEditableRowIndexExternal);
  }, [OpenEditableRowIndexExternal]);
  useEffect(() => {
    if (setOpenExpandableRowIndex) {
      setOpenExpandableRowIndex(openExpandableRowIndexInternal);
    }
  }, [openExpandableRowIndexInternal, setOpenExpandableRowIndex]);
  useEffect(() => {
    setOpenExpandableIndexInternal(openExpandableRowIndexExternal);
  }, [openExpandableRowIndexExternal]);

  const updateDimensions = () => {
    const tableWidth = tableRef.current && tableRef.current.clientWidth;
    const wrapperWidth = wrapperRef.current && wrapperRef.current.clientWidth;
    setScrollBarState(wrapperWidth, tableWidth, value => setTableIsScrollable(value));
  };

  const sortRowData = rows => {
    const sortingKey = sort.columnFieldName;

    if (sortingKey) {
      const copiedArray = [...rows];
      const sortDescending = !sort.ascending;
      const sortingFunction = columns && columns.filter(column => column.fieldName === sortingKey)[0].sortingFunction;

      if (sortingFunction) {
        copiedArray.sort((a, b) => sortingFunction(a[sortingKey], b[sortingKey]));
      } else {
        copiedArray.sort(function (a, b) {
          return a[sortingKey] < b[sortingKey] ? -1 : 1;
        });
      }

      if (sortDescending) {
        copiedArray.reverse();
      }

      return copiedArray;
    }

    return rows;
  };

  const handleEditRow = index => {
    setOpenEditableRowIndexInternal(index);
  };

  const handleExpandRow = index => {
    setOpenExpandableIndexInternal(index);
  };

  const handleCloseRow = () => {
    setOpenEditableRowIndexInternal(undefined);
    setOpenExpandableIndexInternal(undefined);
  };

  const getRowData = () => {
    const items = sortRowData(props.data);
    return items.map((row, index) => {
      return /*#__PURE__*/React.createElement(TableRow, {
        data: row,
        key: index,
        rowIndex: index,
        columns: columns,
        editableContent: props.editableContent,
        editableRows: props.editableRows,
        editModeActive: openEditableRowIndexInternal !== undefined,
        expandableContent: props.expandableContent,
        expandableModeActive: openExpandableRowIndexInternal !== undefined,
        expandableRows: props.expandableRows,
        expandIconPlacement: props.expandIconPlacement,
        tableHasScroll: tableIsScrollable,
        isEditableRowOpen: openEditableRowIndexInternal === index,
        isExpandableRowOpen: openExpandableRowIndexInternal === index,
        openEditableOnRowClick: openEditableOnRowClick,
        onEditRow: () => handleEditRow(index),
        onExpandRow: () => handleExpandRow(index),
        onCloseRow: handleCloseRow,
        openExpandableRowIndex: openExpandableRowIndexInternal,
        tableId: mainId,
        showRowSeparators: showRowSeparators,
        compactTable: compactTable,
        sum: sum
      });
    });
  };

  React.useEffect(() => {
    const tableWidth = tableRef.current && tableRef.current.clientWidth;
    const wrapperWidth = wrapperRef.current && wrapperRef.current.clientWidth;
    setScrollBarState(wrapperWidth, tableWidth, setTableIsScrollable);
    window.addEventListener('resize', updateDimensions);
  }, []);
  const emptyTd = /*#__PURE__*/React.createElement(React.Fragment, null, editableRows && /*#__PURE__*/React.createElement("td", {
    className: styles.emptyTd
  }), expandableRows && /*#__PURE__*/React.createElement("td", {
    className: styles.emptyTd
  }));
  return /*#__PURE__*/React.createElement("div", {
    ref: wrapperRef,
    id: id,
    className: classnames(styles.SkeTable, customClassNames?.wrapper)
  }, /*#__PURE__*/React.createElement("table", {
    className: classnames(styles.tabell, customClassNames?.table)
  }, caption && /*#__PURE__*/React.createElement("caption", {
    className: classnames(styles.tabellCaption, customClassNames?.caption),
    style: hideCaption ? getSrOnlyStyle() : undefined
  }, caption), /*#__PURE__*/React.createElement("thead", {
    className: classnames(styles.tabellThead, customClassNames?.tabellThead)
  }, /*#__PURE__*/React.createElement("tr", {
    className: classnames(styles.tabellTheadRow, customClassNames?.tabellTheadRow)
  }, (tableIsScrollable || expandIconPlacement === 'before') && emptyTd, /*#__PURE__*/React.createElement(TableHeader, {
    compactTable: compactTable,
    columns: columns,
    sort: sort,
    setSort: value => setSort(value)
  }), !tableIsScrollable && expandIconPlacement !== 'before' && emptyTd)), /*#__PURE__*/React.createElement("tbody", null, getRowData(), sum && /*#__PURE__*/React.createElement(SumRow, {
    compactTable: compactTable,
    numberOfColumns: props.columns?.length ?? 0,
    editableRows: editableRows,
    expandableRows: expandableRows,
    expandIconPlacement: expandIconPlacement,
    sum: sum
  }))), children);
};
export default Table;