import { DropdownProps } from './DropDown.types';
import { IDropdownStyles } from '@fluentui/react';
export declare const getClassNames: (props: DropdownProps) => import("@fluentui/merge-styles").IProcessedStyleSet<{
    main: {
        selectors: {
            '& .ms-TextField-errorMessage': {
                fontSize: string;
            };
            '::-moz-focus-inner': {
                border: string;
            };
            '& .ms-Dropdown-title': {
                borderColor: string;
                borderRadius: string;
            };
            '& .ms-Dropdown-titleIsPlaceHolder': {
                borderColor: string;
            };
            '& .ms-Dropdown-title.ms-Dropdown-title': "" | {
                borderColor: string;
                borderWidth: string;
            } | undefined;
            '& .ms-Dropdown.is-required::before': {
                display: string;
            };
            '&:focus .ms-Dropdown-title.ms-Dropdown-title': {
                border: string;
            };
            '& .is-disabled .ms-Dropdown': {
                backgroundColor: string;
            };
            '& .is-disabled .ms-Dropdown-title': {
                borderColor: string;
                borderStyle: string;
                borderWidth: number;
                backgroundColor: string;
            };
            '& .is-disabled .ms-Dropdown-caretDownWrapper': {
                color: string;
            };
            '&:active .is-disabled .ms-Dropdown-title': {
                borderColor: string;
            };
            '&:hover .is-disabled .ms-Dropdown-title': {
                borderColor: string;
                cursor: string;
            };
            '&:focus:after': false | {
                content: string;
                position: string;
                left: number;
                top: number;
                bottom: number;
                right: number;
                borderRadius: string;
                outline: string;
                zIndex: number;
            };
            '& div[role=alert]': {
                fontWeight: string;
            };
            '& div[role=alert]::before': {
                fontFamily: string;
                fontSize: string;
                content: string;
                marginRight: string;
                verticalAlign: string;
            };
            '.ms-Dropdown-title': {
                borderWidth: string;
                padding: string;
                borderRadius: string;
                fontSize: string;
                height: string;
                lineHeight: string;
            };
            '& span.ms-Dropdown-caretDownWrapper': {
                top: string;
                fontSize: string;
                color: string;
            };
        } | {
            '& .ms-TextField-errorMessage': {
                fontSize: string;
            };
            '::-moz-focus-inner': {
                border: string;
            };
            '& .ms-Dropdown-title': {
                borderColor: string;
                borderRadius: string;
            };
            '& .ms-Dropdown-titleIsPlaceHolder': {
                borderColor: string;
            };
            '& .ms-Dropdown-title.ms-Dropdown-title': "" | {
                borderColor: string;
                borderWidth: string;
            } | undefined;
            '& .ms-Dropdown.is-required::before': {
                display: string;
            };
            '&:focus .ms-Dropdown-title.ms-Dropdown-title': {
                border: string;
            };
            '& .is-disabled .ms-Dropdown': {
                backgroundColor: string;
            };
            '& .is-disabled .ms-Dropdown-title': {
                borderColor: string;
                borderStyle: string;
                borderWidth: number;
                backgroundColor: string;
            };
            '& .is-disabled .ms-Dropdown-caretDownWrapper': {
                color: string;
            };
            '&:active .is-disabled .ms-Dropdown-title': {
                borderColor: string;
            };
            '&:hover .is-disabled .ms-Dropdown-title': {
                borderColor: string;
                cursor: string;
            };
            '&:focus:after': false | {
                content: string;
                position: string;
                left: number;
                top: number;
                bottom: number;
                right: number;
                borderRadius: string;
                outline: string;
                zIndex: number;
            };
            '& div[role=alert]': {
                fontWeight: string;
            };
            '& div[role=alert]::before': {
                fontFamily: string;
                fontSize: string;
                content: string;
                marginRight: string;
                verticalAlign: string;
            };
            '.ms-Dropdown-title': {
                fontSize: string;
                borderWidth?: undefined;
                padding?: undefined;
                borderRadius?: undefined;
                height?: undefined;
                lineHeight?: undefined;
            };
            '& span.ms-Dropdown-caretDownWrapper': {
                color: string;
                top?: undefined;
                fontSize?: undefined;
            };
        };
    };
    readOnly: {
        borderStyle: string;
        fontSize: string;
        fontWeight: string;
        display: string;
        padding: number;
        marginLeft: number;
        marginRight: number;
        height: string;
    };
}>;
export declare const getCalloutStyles: () => Partial<IDropdownStyles>;
