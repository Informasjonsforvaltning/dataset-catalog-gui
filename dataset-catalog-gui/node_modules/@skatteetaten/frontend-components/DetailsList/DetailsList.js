function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import classnames from 'classnames';
import { DetailsList as FabricDetailsList, DetailsListLayoutMode, SelectionMode, ConstrainMode, CheckboxVisibility, Selection, DetailsRow } from '@fluentui/react';
import { getClassNames } from './DetailsList.classNames';
export { FabricDetailsList, DetailsRow };
/*
 * visibleName DetailsList (Sammensatt tabell)
 */

export class DetailsList extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "sortColumn", sortItems => (ev, column) => {
      const {
        items,
        columns
      } = this.props;
      const currentColumn = columns && columns.filter(currCol => {
        return currCol.key === column.key;
      })[0];
      const newColumns = columns && columns.map(newCol => {
        if (newCol === currentColumn) {
          return _objectSpread(_objectSpread({}, newCol), {}, {
            isSorted: true,
            isSortedDescending: !currentColumn.isSortedDescending
          });
        }

        return _objectSpread(_objectSpread({}, newCol), {}, {
          isSorted: false,
          isSortedDescending: true
        });
      });
      const sortedItems = sortItems({
        isDescending: currentColumn && currentColumn.isSortedDescending,
        fieldName: currentColumn && currentColumn.fieldName,
        items: items
      });
      this.props.onSortUpdate && this.props.onSortUpdate({
        columns: newColumns,
        items: sortedItems
      });
    });
  }

  render() {
    const _this$props = this.props,
          {
      background,
      columns,
      className
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["background", "columns", "className"]);

    const enhancedColumns = columns && columns.map(col => !col.sortItems ? col : _objectSpread(_objectSpread({}, col), {}, {
      onColumnClick: this.sortColumn(col.sortItems)
    }));
    return /*#__PURE__*/React.createElement(FabricDetailsList, _extends({}, props, {
      className: classnames(getClassNames(this.props), className),
      setKey: "set",
      columns: enhancedColumns,
      checkboxCellClassName: 'DetailsListCheckBox'
    }));
  }

}

_defineProperty(DetailsList, "ConstrainMode", ConstrainMode);

_defineProperty(DetailsList, "SelectionMode", SelectionMode);

_defineProperty(DetailsList, "CheckBoxVisibility", CheckboxVisibility);

_defineProperty(DetailsList, "DetailsListLayoutMode", DetailsListLayoutMode);

_defineProperty(DetailsList, "Selection", Selection);

_defineProperty(DetailsList, "defaultProps", {
  background: 'white',
  checkboxVisibility: DetailsList.CheckBoxVisibility.hidden,
  constrainMode: DetailsList.ConstrainMode.unconstrained,
  items: [],
  layoutMode: DetailsList.DetailsListLayoutMode.justified,
  selectionMode: DetailsList.SelectionMode.none
});