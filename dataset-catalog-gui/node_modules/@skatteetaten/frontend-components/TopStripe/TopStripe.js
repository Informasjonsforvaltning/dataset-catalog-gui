function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { getClassNames } from './TopStripe.classNames';
import classnames from 'classnames';
import { TopStripeMenu } from './TopStripeMenu';
import { TopStripeButton } from './TopStripeButton';
import { TopStripeLink } from './TopStripeLink';
import { LanguagePicker } from './LanguagePicker';
import { TopStripeUser } from './TopStripeUser';
export const TopStripeContext = /*#__PURE__*/React.createContext({
  open: -1
});
/*
 * visibleName TopStripe (Toppstripe)
 */

export const TopStripe = props => {
  const topStripeElements = [TopStripeMenu, TopStripeButton, TopStripeLink, TopStripeUser, LanguagePicker];
  const notOpenIndex = -1;
  const topRef = /*#__PURE__*/React.createRef();
  const [openIndex, setOpenIndex] = React.useState(notOpenIndex);

  const setOpen = index => {
    if (openIndex === index) {
      setOpenIndex(notOpenIndex);
    } else {
      setOpenIndex(index);
    }
  };

  const {
    children,
    className,
    contentWidth
  } = props,
        rest = _objectWithoutProperties(props, ["children", "className", "contentWidth"]);

  const styles = getClassNames(contentWidth);
  const showOverlay = openIndex !== notOpenIndex ? styles.overlayShow : '';

  const handleClickOutside = e => {
    const eventPaths = e.composedPath ? e.composedPath() : [];
    const target = eventPaths.length > 0 ? eventPaths[0] : e.target;
    const node = topRef.current;

    if (node && node.contains(target)) {
      // inside click
      return;
    } // outside click


    setOpen(notOpenIndex);
  };

  const handleEscape = e => {
    // Match escape key
    if (e.keyCode === 27) {
      setOpen(notOpenIndex);
    }
  };

  React.useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    document.addEventListener('keydown', handleEscape);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleEscape);
    };
  });
  return /*#__PURE__*/React.createElement("div", {
    className: styles.topStripe
  }, /*#__PURE__*/React.createElement("div", {
    className: classnames(styles.overlay, showOverlay)
  }), /*#__PURE__*/React.createElement("div", {
    className: styles.background
  }, /*#__PURE__*/React.createElement(TopStripeContext.Provider, {
    value: {
      open: openIndex,
      setOpen: setOpen,
      closeMenu: () => setOpenIndex(notOpenIndex)
    }
  }, /*#__PURE__*/React.createElement("ul", _extends({
    ref: topRef,
    className: classnames(styles.topStripeContainer, className)
  }, rest), React.Children.map(children, (child, index) => child ? /*#__PURE__*/React.createElement("li", {
    className: classnames(styles.topStripeElement, {
      [styles.loggedInUser]: child.type === TopStripeUser,
      [styles.hideOnMobile]: topStripeElements.includes(child.type) && !child.props.showOnMobile
    })
  }, /*#__PURE__*/React.cloneElement(child, {
    index
  })) : null)))));
};