import * as React from 'react';
import { getClassNames } from './TopStripeMenu.classNames';
import classnames from 'classnames';
import { UseScreen } from '../../utils';
import { Icon } from '../../Icon';
import { ActionButton } from '../../ActionButton';
import { TopStripeButton } from '../TopStripeButton';
import { TopStripeContext } from '../TopStripe';

/*
 * visibleName TopStripeMenu (ToppstripeMeny)
 */
export const TopStripeMenu = props => {
  const styles = getClassNames();
  const {
    children,
    className,
    onRender,
    icon,
    title,
    index,
    showOnMobile = false,
    closeMenuAriaLabel = 'Lukk',
    closeOnClick = true,
    showChevron = true,
    contentIsMenu = true
  } = props;
  const {
    open,
    setOpen,
    closeMenu
  } = React.useContext(TopStripeContext);
  const isMenuOpen = open === index;
  const screenSize = UseScreen();

  if (screenSize.sm && !showOnMobile) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TopStripeButton, {
    "aria-haspopup": contentIsMenu,
    "aria-expanded": isMenuOpen,
    className: classnames(className, {
      [styles.topStripeMenuShowChevron]: showChevron,
      [styles.topStripeMenuHasIcon]: icon
    }),
    onClick: () => setOpen(index),
    showOnMobile: showOnMobile
  }, icon ? /*#__PURE__*/React.createElement(Icon, {
    className: styles.topStripeMenuIcon,
    iconName: icon
  }) : '', /*#__PURE__*/React.createElement("div", {
    className: styles.topStripeMenuTitle
  }, title), showChevron ? /*#__PURE__*/React.createElement(Icon, {
    className: styles.topStripeMenuChevronIcon,
    "aria-hidden": true,
    iconName: isMenuOpen ? 'MenuUp' : 'MenuDown'
  }) : ''), isMenuOpen && /*#__PURE__*/React.createElement("ul", {
    className: styles.topStripeMenuDropdownContainer,
    role: contentIsMenu ? 'menu' : undefined
  }, onRender ? onRender : React.Children.map(children, child => {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.createElement("li", {
        onClick: e => {
          child.props && child.props.onClick && child.props.onClick(e);
          closeOnClick && closeMenu && closeMenu();
        },
        className: styles.topStripeMenuDropdownElementContainer
      }, child.props.icon ? /*#__PURE__*/React.createElement(Icon, {
        iconName: child.props.icon || undefined,
        "aria-hidden": true,
        className: styles.topStripeMenuDropdownElementIcon
      }) : '', /*#__PURE__*/React.cloneElement(child, {
        role: 'menuitem',
        'aria-current': child.props.icon ? 'true' : undefined,
        icon: undefined,
        onClick: undefined,
        className: classnames(child.props.className, styles.topStripeMenuDropdownElement)
      }));
    } else {
      return /*#__PURE__*/React.createElement("li", {
        className: styles.topStripeMenuDropdownElement
      }, children);
    }
  }), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement(ActionButton, {
    className: styles.topStripeMenuDropdownCloseButton,
    icon: 'ChevronUp',
    onClick: () => setOpen(index),
    ariaLabel: closeMenuAriaLabel
  }))));
};