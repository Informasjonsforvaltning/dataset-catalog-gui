function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classnames from 'classnames';
import * as React from 'react';
import { Callout } from '../Callout';
import { getClassNames } from './Dialog.classNames';
import { DialogType, DialogFooter, Dialog as FabricDialog } from '@fluentui/react';
import { BrandContext } from '../SkeBasis';
import i18n from '../utils/i18n/i18n';
import WaitAlert from './WaitAlert';
export class Dialog extends React.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "_iconButtonElement", void 0);

    this.state = {
      isCalloutVisible: false
    };
    this._iconButtonElement = /*#__PURE__*/React.createRef();
    this._onClick = this._onClick.bind(this);
    this._onDismiss = this._onDismiss.bind(this);

    if (props.language) {
      i18n.changeLanguage(props.language);
    }
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.language !== this.props.language) {
      i18n.changeLanguage(this.props.language);
    }
  }

  render() {
    const _this$props = this.props,
          {
      children,
      title,
      subText,
      isBlocking,
      isModeless,
      type,
      className,
      layoutStyle,
      closeButtonAriaLabel,
      modalProps,
      doNotLayer
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children", "title", "subText", "isBlocking", "isModeless", "type", "className", "layoutStyle", "closeButtonAriaLabel", "modalProps", "doNotLayer"]);

    const {
      isCalloutVisible
    } = this.state;
    return /*#__PURE__*/React.createElement(BrandContext.Consumer, null, ({
      tag
    }) => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(FabricDialog, _extends({}, props, {
      dialogContentProps: {
        type: type,
        title,
        subText,
        closeButtonAriaLabel: closeButtonAriaLabel
      },
      modalProps: _objectSpread({
        isBlocking,
        isModeless,
        className: classnames(getClassNames(this.props, tag).main, className)
      }, modalProps),
      ariaLabelledById: props.waitAlert ? 'waitAlertHeading' : undefined,
      ariaDescribedById: props.waitAlert ? 'waitAlertText' : undefined
    }), isCalloutVisible && /*#__PURE__*/React.createElement(Callout, {
      directionalHint: Callout.POS_TOP_LEFT,
      color: Callout.HELP,
      ariaLabel: 'Hjelpetekst',
      target: this._iconButtonElement,
      onClose: this._onDismiss
    }), props.waitAlert ? /*#__PURE__*/React.createElement(WaitAlert, {
      onDismiss: props.onDismiss,
      waitAlertBtnText: props.waitAlertBtnText
    }, children) : children)));
  }

  _onClick() {
    this.setState({
      isCalloutVisible: !this.state.isCalloutVisible
    });
  }

  _onDismiss() {
    this.setState({
      isCalloutVisible: false
    });
  }

}

_defineProperty(Dialog, "Footer", DialogFooter);

_defineProperty(Dialog, "Type", DialogType);

_defineProperty(Dialog, "defaultProps", {
  layoutStyle: 'normal',
  type: Dialog.Type.normal,
  closeButtonAriaLabel: 'Lukk',
  tabletContentOverflows: false,
  isModeless: false,
  isBlocking: undefined,
  waitAlert: false
});