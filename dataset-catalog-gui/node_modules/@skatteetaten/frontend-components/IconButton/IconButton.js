function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import classnames from 'classnames';
import * as React from 'react';
import { IconButton as FabricIconButton } from '@fluentui/react';
import { getClassNames } from './IconButton.classNames';

/*
 * visibleName IconButton (Ikonknapp)
 */
export const IconButton = props => {
  const {
    icon,
    className
  } = props,
        rest = _objectWithoutProperties(props, ["icon", "className"]);

  return (
    /*#__PURE__*/
    // @ts-ignore
    React.createElement(FabricIconButton, _extends({}, rest, {
      className: classnames(getClassNames(props), className),
      iconProps: {
        iconName: icon
      }
    }))
  );
};
IconButton.defaultProps = {
  alt: ' ',
  circle: false,
  disabled: undefined,
  icon: undefined,
  onClick: undefined,
  title: undefined
};