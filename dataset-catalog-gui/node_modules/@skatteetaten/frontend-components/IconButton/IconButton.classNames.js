function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mergeStyles } from '@fluentui/merge-styles';
import { getTheme } from '@fluentui/react';
import { FontSizes, getFocusStyle } from '../utils';

function getTypeColor(props) {
  switch (props.buttonSize) {
    case 'xSmall':
      return {
        width: '26px',
        height: '26px'
      };

    case 'small':
      return {
        width: '35px',
        height: '35px'
      };

    case 'medium':
      return {
        width: '40px',
        height: '40px'
      };

    case 'large':
      return {
        width: '50px',
        height: '50px'
      };

    case 'xLarge':
      return {
        width: '60px',
        height: '60px'
      };

    default:
      return {};
  }
}

function getCircleStyles(props) {
  const palette = getTheme().palette;

  if (props.circle === true) {
    return {
      border: '3px solid ' + palette.skeColor.interactive
    };
  } else {
    return {
      border: '3px solid ' + palette.skeColor.transparent
    };
  }
}

function getCircleHoverStyles(props) {
  const palette = getTheme().palette;
  return {
    color: palette.skeColor.blue,
    //borderWidth: '3px',
    //borderColor: palette.skeColor.blue,
    background: palette.skeColor.lightBlue
  };
}

function getIconSize(props) {
  switch (props.buttonSize) {
    case 'xSmall':
      return {
        fontsize: FontSizes.smallPlus
      };

    case 'small':
      return {
        fontSize: FontSizes.mediumPlus
      };

    case 'medium':
      return {
        fontSize: FontSizes.largePlus
      };

    case 'large':
      return {
        fontSize: FontSizes.xxLarge
      };

    case 'xLarge':
      return {
        fontSize: FontSizes.superLarge
      };

    default:
      return {
        fontSize: FontSizes.icon
      };
  }
}

export const getClassNames = function getClassNames(props) {
  const palette = getTheme().palette;
  const inset = props.circle ? -8 : -4;
  const radius = '50px';
  const disabled = props.disabled;
  return mergeStyles([getFocusStyle({
    palette
  }, inset, 'relative', radius), {
    displayName: `ske-icon${props.buttonSize}-button`,
    selectors: {
      '&.ms-Button--icon': _objectSpread(_objectSpread({
        width: '40px',
        height: '40px',
        borderRadius: '50%',
        padding: 0,
        background: 'none',
        color: palette.skeColor.blue
      }, getTypeColor(props)), getCircleStyles(props)),
      '&.ms-Button--icon i': _objectSpread({}, getIconSize(props)),
      '&.ms-Button--icon:hover': _objectSpread({
        transition: 'background-color 0.2s'
      }, getCircleHoverStyles(props)),
      '&:focus&:after': {//borderColor: 'transparent',
      },
      '&.ms-Button--icon:active': {
        //color: palette.skeColor.interactiveDark,
        transition: '0.15s',
        transform: disabled ? 'none' : 'translateY(2px)'
      },
      '&.ms-Button--icon:disabled': _objectSpread(_objectSpread({}, getCircleStyles(props)), {}, {
        color: palette.skeColor.lightGrey,
        borderColor: palette.skeColor.lightGrey,
        cursor: 'not-allowed'
      }),
      '&.ms-Button--icon:disabled i': {
        color: palette.skeColor.lightGrey
      }
    }
  }]);
};