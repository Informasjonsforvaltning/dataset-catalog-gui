function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mergeStyles } from '@fluentui/merge-styles';
import { getTheme } from '@fluentui/react';
import { IconFontSizes, FontWeights, getFocusStyle } from '../utils';

function getTypeColor(props) {
  const palette = getTheme().palette;

  switch (props.color) {
    case 'blue':
      return {
        color: palette.skeColor.interactive
      };

    case 'red':
      return {
        color: palette.skeColor.statusError
      };

    case 'green':
      return {
        color: palette.skeColor.green100
      };

    case 'white':
      return {
        color: palette.skeColor.white
      };

    default:
      return {
        color: palette.bodyText
      };
  }
}

function getIconColor(props) {
  const palette = getTheme().palette;

  switch (props.color) {
    case 'black':
      return {
        color: palette.skeColor.black100
      };

    case 'green':
      return {
        color: palette.skeColor.statusOk
      };

    case 'red':
      return {
        color: palette.skeColor.statusError
      };

    case 'white':
      return {
        color: palette.skeColor.white
      };

    default:
      return {
        color: palette.skeColor.interactive
      };
  }
}

function getBorder(props) {
  const palette = getTheme().palette;
  const {
    border
  } = props;

  switch (props.color) {
    case 'black':
      return {
        borderBottom: border ? `2px solid ${palette.skeColor.grey70}` : `2px solid ${palette.skeColor.transparent}`
      };

    case 'red':
      return {
        borderBottom: border ? `2px solid ${palette.skeColor.burgundy70}` : `2px solid ${palette.skeColor.transparent}`
      };

    case 'green':
      return {
        borderBottom: border ? `2px solid ${palette.skeColor.green70}` : `2px solid ${palette.skeColor.transparent}`
      };

    case 'white':
      return {
        borderBottom: border ? `2px solid ${palette.skeColor.white}` : `2px solid ${palette.skeColor.transparent}`
      };

    default:
      return {
        borderBottom: border ? `2px solid ${palette.skeColor.interactive}` : `2px solid ${palette.skeColor.transparent}`
      };
  }
}

export function getClassNames(props) {
  const palette = getTheme().palette;
  const {
    border,
    disabled
  } = props;
  const inset = -3;
  const radius = '4px';
  return mergeStyles(getFocusStyle({
    palette
  }, inset, 'relative', radius), {
    selectors: {
      '&.ms-Button.ms-Button--action': _objectSpread(_objectSpread({
        height: 'auto',
        minHeight: '32px',
        padding: border ? '3px 6px 3px 4px' : '3px 4px',
        textAlign: props.iconAfter ? 'right' : 'left'
      }, getTypeColor(props)), getBorder(props)),
      '& span': {
        flexDirection: props.iconAfter ? 'row-reverse' : 'row'
      },
      '&.ms-Button.ms-Button--action, &.ms-Button--action .ms-Button-icon': _objectSpread({
        fontWeight: FontWeights['medium']
      }, getTypeColor(props)),
      '& .ms-Button-flexContainer': {
        alignItems: 'baseline'
      },
      '&.ms-Button--action .ms-Button-icon': _objectSpread({
        // @ts-ignore TODO
        fontSize: IconFontSizes[props.iconSize],
        marginLeft: '0',
        transform: 'translateY(4px)'
      }, getIconColor(props)),
      '&.ms-Button--action .ms-Button-label': {
        lineHeight: '1.5'
      },
      '&.ms-Button--action:hover ': {
        backgroundColor: disabled ? 'undefined' : palette.skeColor.interactiveLight,
        transition: 'background 0.3s'
      },
      '&.ms-Button--action:active ': {
        transition: '0.15s',
        transform: disabled ? '0s' : 'translateY(2px)',
        transitionTimingFunction: 'ease'
      },
      '&.ms-Button--action:active .ms-Button-label': {
        textAlign: props.iconAfter ? 'right' : 'left',
        textDecoration: 'none'
      },
      '&.ms-Button--action:disabled, &.ms-Button--action:disabled i': {
        color: palette.skeColor.lightGrey,
        cursor: 'not-allowed'
      }
    }
  });
}