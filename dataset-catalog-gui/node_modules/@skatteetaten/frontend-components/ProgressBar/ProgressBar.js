function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import classnames from 'classnames';
import { ProgressIndicator } from '@fluentui/react';
import React from 'react';
import { getClassNames } from './ProgressBar.classNames';
import { BrandContext } from '../SkeBasis';
/*
 * visibleName ProgressBar (Fremdriftsvisning)
 */

export const ProgressBar = props => {
  const {
    className
  } = props,
        rest = _objectWithoutProperties(props, ["className"]);

  return /*#__PURE__*/React.createElement(BrandContext.Consumer, null, ({
    tag
  }) => /*#__PURE__*/React.createElement(ProgressIndicator, _extends({}, rest, {
    className: classnames(getClassNames(tag), className)
  })));
};
ProgressBar.defaultProps = {
  /** Overstyring av stiler */
  className: undefined,

  /** Beskrivelse som vises under fremdriftsindikatoren */
  description: undefined,

  /** Emne som vises over fremdriftsindikatoren */
  label: undefined,

  /** Prosent fullf√∏rt (fra 0.00 til 1.00) */
  percentComplete: undefined
};