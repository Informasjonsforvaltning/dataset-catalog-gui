function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createTheme, loadTheme, registerIcons, getIcon } from '@fluentui/react';
import { ThemeProvider } from '@fluentui/react';
import * as React from 'react';
import { Fonts, SkeIcons, AliasIcons, Palette } from '../utils';
export const brands = {
  SKE: {
    tag: 'SKE',
    primaryColor: Palette.skeColor.burgundy100,
    secondaryColor: Palette.skeColor.burgundy30
  },
  INK: {
    tag: 'INK',
    primaryColor: Palette.skeColor.green100,
    secondaryColor: Palette.skeColor.green30
  },
  LSO: {
    tag: 'LSO',
    primaryColor: Palette.skeColor.black100,
    secondaryColor: Palette.skeColor.grey30
  }
};
export const BrandContext = /*#__PURE__*/React.createContext(brands.SKE //default brand
);
/*
 * visibleName SkeBasis (Basiskomponent)
 */

export class SkeBasis extends React.PureComponent {
  constructor(props) {
    super(props);
    const {
      palette,
      fonts,
      brand
    } = props;

    switch (brand) {
      case 'INK':
        this.state = {
          brand: brands.INK
        };
        break;

      case 'LSO':
        this.state = {
          brand: brands.LSO
        };
        break;

      default:
        this.state = {
          brand: brands.SKE
        };
        break;
    }

    if (palette && fonts) {
      const theme = createTheme({
        palette,
        fonts,
        isInverted: false
      });
      loadTheme(theme);
    }

    if (props.icons) {
      if (!getIcon('AccountEnk')) {
        props.icons.forEach(iconFont => registerIcons(iconFont));
      }
    }
  }

  render() {
    const fabricProps = _objectSpread({
      dir: 'ltr'
    }, this.props);

    return /*#__PURE__*/React.createElement(BrandContext.Provider, {
      value: this.state.brand
    }, /*#__PURE__*/React.createElement(ThemeProvider, fabricProps, this.props.children));
  }

}

_defineProperty(SkeBasis, "PALETTE", Palette);

_defineProperty(SkeBasis, "FONTS", Fonts);

_defineProperty(SkeBasis, "ICONS", {
  ske: SkeIcons,
  ali: AliasIcons
});

_defineProperty(SkeBasis, "defaultProps", {
  palette: SkeBasis.PALETTE,
  fonts: SkeBasis.FONTS,
  icons: [SkeBasis.ICONS.ske, SkeBasis.ICONS.ali],
  brand: 'SKE'
});