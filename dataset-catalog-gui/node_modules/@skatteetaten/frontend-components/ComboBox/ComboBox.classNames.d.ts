import { FontSizes, FontWeights, IconFontSizes } from '../utils';
import { ComboBoxProps } from './ComboBox.types';
export declare const getClassNames: (props: ComboBoxProps) => import("@fluentui/merge-styles").IProcessedStyleSet<{
    main: {
        selectors: {
            '& .ms-ComboBox': {
                borderWidth: string;
                borderRadius: string;
                height: string;
                padding: string;
                borderColor: string;
            };
            '& .ms-ComboBox:after': {
                borderRadius: string;
                borderWidth: string;
                borderColor: string | undefined;
            };
            '& .ms-ComboBox:focus': {
                borderColor: string;
            };
            '& .ms-ComboBox-Input': {
                fontSize: FontSizes;
            };
            'i.ms-Button-icon': {
                fontSize: IconFontSizes;
                paddingRight: string;
            };
            '& ::placeholder': {
                color: string;
            };
            '& .ms-ComboBox-Input.is-disabled': {
                backgroundColor: string;
            };
            '& .is-disabled .ms-ComboBox-Input:hover': {
                cursor: string;
            };
            '& .ms-ComboBox.is-disabled': {
                border: string;
            };
            '& .ms-ComboBox.is-disabled button': {
                color: string;
            };
            '.ms-ComboBox-CaretDown-button': {
                right: string;
                top: string;
                color: string;
            };
            '& div[role=alert]::before': {
                fontFamily: string;
                fontSize: number;
                content: string | undefined;
                marginRight: string;
                verticalAlign: string;
            };
            '& div[role=alert]': {
                fontWeight: FontWeights;
                fontSize: FontSizes;
            };
        } | {
            '& .ms-ComboBox-Input': {
                fontSize: FontSizes;
            };
            '& .ms-ComboBox': {
                borderRadius: string;
                height: string;
                padding: string;
            };
            '& .ms-ComboBox:after': {
                borderRadius: string;
                borderColor: string | undefined;
                borderWidth: string | undefined;
            };
            '& .ms-ComboBox:focus': {
                outline: string;
                borderColor: string;
            };
            'i.ms-Button-icon'?: undefined;
            '& ::placeholder'?: undefined;
            '& .ms-ComboBox-Input.is-disabled': {
                backgroundColor: string;
            };
            '& .is-disabled .ms-ComboBox-Input:hover': {
                cursor: string;
            };
            '& .ms-ComboBox.is-disabled': {
                border: string;
            };
            '& .ms-ComboBox.is-disabled button': {
                color: string;
            };
            '.ms-ComboBox-CaretDown-button': {
                right: string;
                top: string;
                color: string;
            };
            '& div[role=alert]::before': {
                fontFamily: string;
                fontSize: number;
                content: string | undefined;
                marginRight: string;
                verticalAlign: string;
            };
            '& div[role=alert]': {
                fontWeight: FontWeights;
                fontSize: FontSizes;
            };
        };
    };
    readOnly: {
        borderStyle: string;
        fontSize: FontSizes;
        fontWeight: number;
        display: string;
        padding: number;
    };
}>;
export declare const getOptionsClassNames: (props: ComboBoxProps) => string;
export declare const getLabelClassNames: (props: ComboBoxProps) => import("@fluentui/merge-styles").IProcessedStyleSet<{
    labelArea: {
        display: string;
        alignItems: string;
    };
    label: {};
    labelText: {
        fontSize: FontSizes;
        color: string;
        fontWeight: FontWeights;
    };
    labelIconArea: {
        height: string;
        marginTop: string;
    };
    icon: {
        color: string;
        selectors: {
            '& i': {
                fontSize: string;
            };
            '&:focus&:after': {
                border: string;
                outline: string;
            };
            '&:focus::after': {
                border: string;
                outline: string;
            };
            '&:hover': {
                border: string;
                outline: string;
                background: string;
            };
        };
    };
}>;
