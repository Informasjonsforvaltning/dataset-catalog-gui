function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { VirtualizedComboBox } from '@fluentui/react';
import classnames from 'classnames';
import { getClassNames, getOptionsClassNames } from './ComboBox.classNames';
import { generateId } from '../utils';
import { LabelWithCallout } from '../LabelWithCallout';
export const ComboBox = props => {
  const {
    children,
    errorMessage,
    label,
    help,
    className,
    id,
    required = false,
    labelButtonAriaLabel,
    labelWithCalloutProps,
    onCalloutToggle,
    calloutProps,
    readOnly,
    requiredWithMark = false,
    ref
  } = props,
        rest = _objectWithoutProperties(props, ["children", "errorMessage", "label", "help", "className", "id", "required", "labelButtonAriaLabel", "labelWithCalloutProps", "onCalloutToggle", "calloutProps", "readOnly", "requiredWithMark", "ref"]);

  const generatedId = generateId();
  const mainId = id ? id : 'combobox-' + generatedId;
  const inputId = mainId + '-input';
  const labelId = mainId + '-label';
  const styles = getClassNames(props);
  return /*#__PURE__*/React.createElement("div", {
    id: mainId,
    ref: ref
  }, /*#__PURE__*/React.createElement(LabelWithCallout, _extends({
    id: labelId,
    inputId: readOnly ? inputId : inputId + '-input' //Fabric adds its own -input postfix
    ,
    label: label,
    requiredMark: requiredWithMark,
    buttonAriaLabel: labelButtonAriaLabel,
    help: help,
    onCalloutToggle: onCalloutToggle
  }, labelWithCalloutProps)), readOnly ? /*#__PURE__*/React.createElement("input", {
    id: inputId,
    type: "text",
    readOnly: true,
    className: styles.readOnly,
    value: props.text ? props.text : props.options.filter(option => option.key === props.defaultSelectedKey)[0].text
  }) : /*#__PURE__*/React.createElement(VirtualizedComboBox, _extends({}, rest, {
    id: inputId,
    ariaLabel: label,
    required: required || requiredWithMark,
    className: classnames(styles.main, className),
    errorMessage: errorMessage,
    "aria-invalid": errorMessage ? true : false,
    calloutProps: _objectSpread(_objectSpread({}, calloutProps), {}, {
      className: getOptionsClassNames(props)
    })
  }), children));
};
ComboBox.defaultProps = {
  autoComplete: 'on',
  allowFreeform: false,
  label: undefined,
  errorMessage: undefined,
  help: undefined,
  disabled: false
};