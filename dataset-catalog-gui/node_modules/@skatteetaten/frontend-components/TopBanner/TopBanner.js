function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import classnames from 'classnames';
import { UseScreen } from '../utils';
import { Icon } from '../Icon';
import { Image } from '../Image';
import { ActionButton } from '../ActionButton';
import { BrandContext } from '../SkeBasis';
import i18n, { t } from './../utils/i18n/i18n'; // @ts-ignore TODO

import logoSKE from './assets/logoSKE.svg';
import logoSKEen from './assets/logoSKEen.svg';
import logoLSO from './assets/logoLSO.svg';
import logoINK from './assets/logoINK.svg';
import logoINKen from './assets/logoINKen.svg';
import internLogo from './assets/ske-logo-intern.svg';
import internLogoEn from './assets/ske-logo-intern-en.svg';
import { getClassNames as getExternalClassNames } from './External.classNames';
import { getClassNames as getInternalClassNames } from './Internal.classNames'; // @ts-ignore TODO

const InternalHeader = props => {
  const styles = getInternalClassNames(props);
  const size = UseScreen();
  return /*#__PURE__*/React.createElement("header", {
    className: classnames(styles.header, props.className),
    id: props.id
  }, /*#__PURE__*/React.createElement("div", {
    className: classnames(styles.headerLeftContainer, props.slantedAreaClassName)
  }, /*#__PURE__*/React.createElement("a", {
    className: styles.headerLinkContainer,
    href: props.homeUrl,
    onClick: props.onClick
  }, size.gt.md && /*#__PURE__*/React.createElement(Image, {
    className: styles.headerLogo,
    src: props.language === 'en' ? internLogoEn : internLogo,
    alt: "Skatteetaten logo"
  }), /*#__PURE__*/React.createElement(Icon, {
    className: styles.headerIcon,
    iconName: props.icon
  }), /*#__PURE__*/React.createElement("div", {
    className: styles.headerLink
  }, props.homeText))), /*#__PURE__*/React.createElement("div", {
    className: styles.headerDiagonal
  }), /*#__PURE__*/React.createElement("div", {
    className: styles.headerRightContainer
  }, typeof props.title === 'string' ? /*#__PURE__*/React.createElement("h1", null, props.title) : /*#__PURE__*/React.createElement("div", {
    className: styles.elementTitle
  }, props.title), /*#__PURE__*/React.createElement("div", null, props.children)));
}; // @ts-ignore


const ExternalHeaderContent = _ref => {
  let {
    styles
  } = _ref,
      props = _objectWithoutProperties(_ref, ["styles"]);

  if (props.children) {
    return props.children;
  }

  if (props.compact) {
    return /*#__PURE__*/React.createElement("h1", {
      className: styles.title
    }, props.title);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ActionButton, {
    href: props.homeUrl,
    onClick: props.onClick,
    className: styles.linkButton,
    icon: "ArrowBack",
    role: "link"
  }, props.homeText), /*#__PURE__*/React.createElement("h1", {
    className: styles.title
  }, props.title));
};
/*
 * visibleName TopBanner (Topp)
 */


export const TopBanner = props => {
  const {
    external
  } = props,
        rest = _objectWithoutProperties(props, ["external"]);

  return external ? /*#__PURE__*/React.createElement(ExternalHeader, rest) : /*#__PURE__*/React.createElement(InternalHeader, rest);
};
export const ExternalHeader = props => {
  const styles = getExternalClassNames(props, 'SKE'); // @ts-ignore

  const {
    logo,
    headerMain,
    contentWrapper
  } = styles;
  const compactHeight = props.compact ? 55 : 68;
  const isLink = props.logoLink;

  if (props.language) {
    i18n.changeLanguage(props.language);
  }

  const logoImageElement = (brand, showAltText = true) => {
    switch (brand) {
      case 'SKE':
        return /*#__PURE__*/React.createElement(Image, {
          src: props.language === 'en' ? logoSKEen : logoSKE,
          height: compactHeight,
          alt: isLink ? t('topbanner.ske.logoLink') : t('topbanner.ske.logo')
        });

      case 'INK':
        return /*#__PURE__*/React.createElement(Image, {
          src: props.language === 'en' ? logoINKen : logoINK,
          height: compactHeight,
          alt: isLink ? t('topbanner.ink.logoLink') : t('topbanner.ink.logo')
        });

      case 'LSO':
        return /*#__PURE__*/React.createElement(Image, {
          src: logoLSO,
          height: compactHeight,
          alt: isLink ? t('topbanner.lso.logoLink') : t('topbanner.lso.logo')
        });

      default:
        return {};
    }
  };

  return /*#__PURE__*/React.createElement(BrandContext.Consumer, null, ({
    tag
  }) => /*#__PURE__*/React.createElement("header", {
    className: classnames(getExternalClassNames(props, tag).header, props.className),
    id: props.id
  }, props.topStripe, /*#__PURE__*/React.createElement("div", {
    className: headerMain
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: logo
  }, props.logoLink ? /*#__PURE__*/React.createElement("a", {
    href: props.logoLinkUrl
  }, logoImageElement(tag, true)) : logoImageElement(tag, true))), /*#__PURE__*/React.createElement("div", {
    className: contentWrapper
  }, /*#__PURE__*/React.createElement(ExternalHeaderContent, _extends({
    styles: styles
  }, props))))));
};
TopBanner.defaultProps = {
  title: undefined,
  homeUrl: undefined,
  homeText: undefined,
  slantedAreaWidth: undefined,
  icon: 'Home',
  external: false,
  compact: false,
  logoLink: true,
  logoLinkUrl: 'https://www.skatteetaten.no',
  language: undefined
};