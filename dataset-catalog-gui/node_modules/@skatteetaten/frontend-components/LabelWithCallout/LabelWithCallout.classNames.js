function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mergeStyleSets } from '@fluentui/merge-styles';
import designtokenColors from '../utils/designtokens/_colors.json';
import designtokenSpacing from '../utils/designtokens/_spacing.json';
import designtokenFontSizes from '../utils/designtokens/_fontSizes.json';

function getLabelSize(props) {
  switch (props.inputSize) {
    case 'small':
      return {
        fontSize: designtokenFontSizes['ske-font-size-xs']
      };

    case 'large':
      return {
        fontSize: designtokenFontSizes['ske-font-size-icon-l']
      };

    default:
      return {
        fontSize: designtokenFontSizes['ske-font-size-m']
      };
  }
}

function getDisplay(props) {
  const {
    help,
    warning
  } = props;
  return help !== undefined || warning !== undefined ? 'initial' : 'inline-block';
}

export const getClassNames = props => {
  const {
    calloutFloating
  } = props;
  return mergeStyleSets({
    calloutLabelWrapper: {
      display: 'flex'
    },
    calloutContext: {
      selectors: {
        '& .ms-Callout-container': {
          position: !calloutFloating ? 'inherit' : undefined,
          margin: !calloutFloating ? `${designtokenSpacing['ske-spacing-lg']} 0` : 0,
          width: '100%'
        },
        '& .ms-Callout': !calloutFloating && {
          left: '0 !important',
          top: '0 !important',
          position: 'inherit'
        },
        '& .ms-Callout-main': !calloutFloating && {
          maxWidth: '100%',
          display: 'inline-block',
          overflow: 'initial'
        },
        '& .ms-Callout-beak': !calloutFloating && {
          left: `${designtokenSpacing['ske-spacing-xl']} !important`,
          top: `-${designtokenSpacing['ske-spacing-md']} !important`
        },
        '& .ms-Callout-beakCurtain': {
          backgroundColor: 'transparent'
        }
      }
    },
    label: _objectSpread(_objectSpread({
      paddingBottom: designtokenSpacing['ske-spacing-sm'],
      paddingLeft: 0,
      lineHeight: designtokenFontSizes['ske-line-height-m'],
      display: getDisplay(props),
      color: designtokenColors['ske-color-black-100'],
      fontWeight: designtokenFontSizes['ske-font-weight-regular']
    }, getLabelSize(props)), {}, {
      selectors: {
        '& .ms-Label': {
          fontWeight: designtokenFontSizes['ske-font-weight-regular']
        }
      }
    }),
    labelAsLegend: _objectSpread(_objectSpread({
      paddingLeft: 0,
      paddingBottom: designtokenSpacing['ske-spacing-sm'],
      display: 'inline-block',
      color: designtokenColors['ske-color-black-100'],
      fontWeight: designtokenFontSizes['ske-font-weight-regular']
    }, getLabelSize(props)), {}, {
      selectors: {
        '& .ms-Label': {
          fontWeight: designtokenFontSizes['ske-font-weight-regular']
        },
        '@supports (display: contents)': {
          display: 'contents'
        }
      }
    }),
    labelIconArea: {
      height: designtokenSpacing['ske-spacing-xl'],
      display: 'inline-block',
      selectors: {
        '& button ': {
          height: designtokenSpacing['ske-spacing-xl'],
          width: designtokenSpacing['ske-spacing-xl'],
          marginLeft: designtokenSpacing['ske-spacing-xs'],
          borderRadius: '100%'
        }
      }
    },
    icon: {
      color: designtokenColors['ske-color-interactive'],
      selectors: {
        '& i': {
          fontSize: designtokenFontSizes['ske-font-size-l']
        },
        '&:hover': {
          background: designtokenColors['ske-color-interactive-light']
        },
        '&:focus': {
          background: designtokenColors['ske-color-white']
        },
        '&:focus&:after': {
          border: `2px solid ${designtokenColors['ske-color-interactive']}`,
          borderRadius: '100%',
          inset: '-1px',
          outline: 'none'
        }
      }
    },
    warningicon: {
      color: designtokenColors['ske-color-interactive'],
      selectors: {
        '& i': {
          fontSize: designtokenFontSizes['ske-font-size-l']
        },
        '&:hover': {
          background: designtokenColors['ske-color-interactive-light']
        },
        '&:focus': {
          background: designtokenColors['ske-color-white']
        },
        '&:focus&:after': {
          border: `2px solid ${designtokenColors['ske-color-interactive']}`,
          borderRadius: '100%',
          inset: '-1px',
          outline: 'none'
        }
      }
    },
    errorIcon: {
      position: 'absolute',
      left: `-${designtokenSpacing['ske-spacing-xl']}`,
      bottom: designtokenSpacing['ske-spacing-xxl'],
      selectors: {
        '& i': {
          color: designtokenColors['ske-color-status-error'],
          fontSize: designtokenFontSizes['ske-font-size-l']
        }
      }
    }
  });
};