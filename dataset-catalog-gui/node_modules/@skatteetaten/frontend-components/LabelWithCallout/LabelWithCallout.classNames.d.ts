import { LabelWithCalloutProps } from './LabelWithCallout.types';
export declare const getClassNames: (props: LabelWithCalloutProps) => import("@fluentui/merge-styles").IProcessedStyleSet<{
    calloutLabelWrapper: {
        display: string;
    };
    calloutContext: {
        selectors: {
            '& .ms-Callout-container': {
                position: string | undefined;
                margin: string | number;
                width: string;
            };
            '& .ms-Callout': false | {
                left: string;
                top: string;
                position: string;
            };
            '& .ms-Callout-main': false | {
                maxWidth: string;
                display: string;
                overflow: string;
            };
            '& .ms-Callout-beak': false | {
                left: string;
                top: string;
            };
            '& .ms-Callout-beakCurtain': {
                backgroundColor: string;
            };
        };
    };
    label: {
        selectors: {
            '& .ms-Label': {
                fontWeight: string;
            };
        };
        fontSize: string;
        paddingBottom: string;
        paddingLeft: number;
        lineHeight: string;
        display: string;
        color: string;
        fontWeight: string;
    };
    labelAsLegend: {
        selectors: {
            '& .ms-Label': {
                fontWeight: string;
            };
            '@supports (display: contents)': {
                display: string;
            };
        };
        fontSize: string;
        paddingLeft: number;
        paddingBottom: string;
        display: string;
        color: string;
        fontWeight: string;
    };
    labelIconArea: {
        height: string;
        display: string;
        selectors: {
            '& button ': {
                height: string;
                width: string;
                marginLeft: string;
                borderRadius: string;
            };
        };
    };
    icon: {
        color: string;
        selectors: {
            '& i': {
                fontSize: string;
            };
            '&:hover': {
                background: string;
            };
            '&:focus': {
                background: any;
            };
            '&:focus&:after': {
                border: string;
                borderRadius: string;
                inset: string;
                outline: string;
            };
        };
    };
    warningicon: {
        color: string;
        selectors: {
            '& i': {
                fontSize: string;
            };
            '&:hover': {
                background: string;
            };
            '&:focus': {
                background: any;
            };
            '&:focus&:after': {
                border: string;
                borderRadius: string;
                inset: string;
                outline: string;
            };
        };
    };
    errorIcon: {
        position: string;
        left: string;
        bottom: string;
        selectors: {
            '& i': {
                color: string;
                fontSize: string;
            };
        };
    };
}>;
