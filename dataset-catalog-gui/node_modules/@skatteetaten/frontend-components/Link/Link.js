function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import classnames from 'classnames';
import { Icon } from '../Icon';
import { getClassNames } from './Link.classNames';

/*
 * visibleName Link (Lenke)
 */
export const Link = props => {
  const {
    className,
    placement,
    icon,
    path,
    text,
    openInNew,
    skipLink,
    linkGroup,
    renderContent
  } = props,
        htmlAttributes = _objectWithoutProperties(props, ["className", "placement", "icon", "path", "text", "openInNew", "skipLink", "linkGroup", "renderContent"]);

  const styles = getClassNames(props);
  return /*#__PURE__*/React.createElement("span", {
    className: classnames(styles.linkContainer, props.className)
  }, props.placement === 'before' && props.icon && /*#__PURE__*/React.createElement(Icon, {
    iconName: props.icon,
    className: styles.icon,
    role: "presentation"
  }), renderContent ? renderContent(classnames(styles.iconLink)) : openInNew ? /*#__PURE__*/React.createElement("a", _extends({
    href: props.path,
    className: classnames(styles.iconLink),
    target: "_blank",
    rel: "noopener noreferrer"
  }, htmlAttributes), props.text) : skipLink ? /*#__PURE__*/React.createElement("a", _extends({
    href: props.path,
    className: classnames(styles.skipLink)
  }, htmlAttributes), props.text) : /*#__PURE__*/React.createElement("a", _extends({
    href: props.path,
    className: classnames(styles.iconLink)
  }, htmlAttributes), props.text), props.placement === 'after' && props.icon && /*#__PURE__*/React.createElement(Icon, {
    iconName: props.icon,
    className: styles.icon,
    role: "presentation"
  }));
};