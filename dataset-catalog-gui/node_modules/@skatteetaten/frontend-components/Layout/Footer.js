function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { Grid } from '../Grid';
import { mergeStyles } from '@fluentui/merge-styles';

const getClassNames = () => {
  return mergeStyles({
    displayName: 'SkeFooter',
    paddingLeft: '0',
    paddingRight: '0',
    marginTop: '16px'
  });
};

export class Footer extends React.Component {
  render() {
    // @ts-ignore TODO
    const _this$props = this.props,
          {
      tag,
      className = '',
      children
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["tag", "className", "children"]); // @ts-ignore TODO


    const classNames = getClassNames(this.props);
    return /*#__PURE__*/React.createElement(Grid.Row, null, /*#__PURE__*/React.createElement(Grid.Col, _extends({
      tag: tag,
      className: `${classNames} ${className}`
    }, props), children));
  }

}

_defineProperty(Footer, "displayName", 'Footer');

_defineProperty(Footer, "defaultProps", {
  tag: 'footer'
});