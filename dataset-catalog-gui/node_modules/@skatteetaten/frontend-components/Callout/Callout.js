function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classnames from 'classnames';
import { Callout as FabricCallout, DirectionalHint } from '@fluentui/react';
import React, { PureComponent } from 'react';
import { IconButton } from '../IconButton';
import { getClassNames } from './Callout.classNames';
import { CalloutColor } from './Callout.types';
/*
 * visibleName Callout (Utropsboks)
 */

export class Callout extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      widthBtnLabel: '',
      target: undefined,
      isCalloutVisible: props.isCalloutVisible
    };
  }

  render() {
    const _this$props = this.props,
          {
      children,
      className,
      id
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children", "className", "id"]);

    const styles = getClassNames(props, this.state.widthBtnLabel);

    window.onclick = e => {
      if (e.target && e.target.parentElement !== this.state.target && e.target.parentElement.className.indexOf('ms-Button-textContainer') > -1 || e.target.className.indexOf('ms-Button-textContainer') > -1) {
        this.setState({
          target: e.target.parentElement,
          widthBtnLabel: window.getComputedStyle(e.target.parentElement).width
        });
      }
    };

    window.onresize = () => {
      if (this.state.target) {
        this.setState({
          //@ts-ignore
          widthBtnLabel: window.getComputedStyle(this.state.target).width
        });
      }
    };

    return /*#__PURE__*/React.createElement("div", {
      id: id,
      className: classnames(styles.calloutWrapper, className)
    }, /*#__PURE__*/React.createElement(FabricCallout, _extends({}, props, {
      className: classnames(styles.main, className),
      isBeakVisible: true
    }), children, /*#__PURE__*/React.createElement(IconButton, {
      "aria-label": "Lukk",
      icon: "Cancel",
      className: styles.closeButton,
      buttonSize: "small",
      onClick: props.onClose
    })));
  }

  _onDismiss() {
    this.setState({
      isCalloutVisible: false
    });

    if (this.props.autoDismiss) {
      this.props.onDismiss && this.props.onDismiss();
    }
  }

}

_defineProperty(Callout, "HELP", CalloutColor.HELP);

_defineProperty(Callout, "INFO", CalloutColor.INFO);

_defineProperty(Callout, "ERROR", CalloutColor.ERROR);

_defineProperty(Callout, "WARNING", CalloutColor.WARNING);

_defineProperty(Callout, "BASIC", CalloutColor.BASIC);

_defineProperty(Callout, "POS_TOP_CENTER", DirectionalHint.topCenter);

_defineProperty(Callout, "POS_TOP_LEFT", DirectionalHint.topLeftEdge);

_defineProperty(Callout, "POS_TOP_RIGHT", DirectionalHint.topRightEdge);

_defineProperty(Callout, "POS_BOTTOM_CENTER", DirectionalHint.bottomCenter);

_defineProperty(Callout, "POS_BOTTOM_LEFT", DirectionalHint.bottomLeftEdge);

_defineProperty(Callout, "POS_BOTTOM_RIGHT", DirectionalHint.bottomRightEdge);

_defineProperty(Callout, "defaultProps", {
  autoDismiss: true,
  color: Callout.HELP,
  directionalHint: Callout.POS_TOP_CENTER,
  doNotLayer: true,
  role: undefined,
  border: true
});