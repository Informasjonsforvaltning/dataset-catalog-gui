function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mergeStyleSets } from '@fluentui/merge-styles';
import designtokenColors from '../utils/designtokens/_colors.json';
import designtokenFontSizes from '../utils/designtokens/_fontSizes.json';
import designtokenSpacing from '../utils/designtokens/_spacing.json';

function getCalloutBorder(props) {
  if (props.color === 'ske-color-white-100' || props.border) {
    return {
      border: `2px solid ${designtokenColors['ske-color-black-100']}`
    };
  } else {
    return {
      border: 'none'
    };
  }
}

export const getClassNames = (props, widthBtnLabel) => {
  return mergeStyleSets({
    main: _objectSpread(_objectSpread({
      displayName: 'SkeCallout',
      boxShadow: 'none !important',
      zIndex: 1000000
    }, getCalloutBorder(props)), {}, {
      selectors: {
        '.ms-Callout-main': {
          width: '100%',
          backgroundColor: designtokenColors[props.color],
          boxShadow: 'none',
          'box-sizing': 'border-box',
          padding: `${designtokenSpacing['ske-spacing-lg']} ${designtokenSpacing['ske-spacing-xxl']} ${designtokenSpacing['ske-spacing-lg']} ${designtokenSpacing['ske-spacing-lg']}` //'1rem 2.5rem 1rem 1rem',

        },
        '.ms-Callout-beak': {
          backgroundColor: designtokenColors[props.color],
          left: 'calc('.concat(widthBtnLabel, '/2) !important')
        },
        '& p': {
          margin: '0 '
        },
        '&& h3': {
          marginTop: '0',
          fontSize: designtokenFontSizes['ske-font-size-m']
        }
      }
    }),
    calloutWrapper: {
      width: '100%'
    },
    closeButton: {
      backgroundColor: 'transparent',
      border: 'none',
      position: 'absolute',
      color: `${designtokenColors['ske-color-black-100']} !important`,
      right: '1px',
      top: '1px',
      opacity: 1,
      selectors: {
        '&& i': {
          fontWeight: designtokenFontSizes['ske-font-weight-bold']
        },
        '&:hover i': {
          transition: 'opacity 300ms ease-out'
        }
      }
    }
  });
};