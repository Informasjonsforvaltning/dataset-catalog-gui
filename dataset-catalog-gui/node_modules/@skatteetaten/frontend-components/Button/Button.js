function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import classnames from 'classnames';
import { DefaultButton } from '@fluentui/react';
import * as React from 'react';
import { getClassNames as getStandardClassNames } from './Button.classNames';

/*
 * visibleName Button (Knapp)
 */
export const Button = props => {
  const {
    children,
    icon,
    className,
    iconProps,
    buttonType
  } = props,
        rest = _objectWithoutProperties(props, ["children", "icon", "className", "iconProps", "buttonType"]);

  return /*#__PURE__*/React.createElement(DefaultButton, _extends({}, rest, {
    className: classnames(getStandardClassNames(props), className),
    iconProps: icon ? {
      iconName: icon
    } : iconProps
  }), children);
};
Button.defaultProps = {
  disabled: false,
  icon: undefined,
  onClick: undefined,
  primary: false,
  buttonStyle: 'secondary',
  mobileFullWidth: false
};