function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classnames from 'classnames';
import { Spinner as FabricSpinner, SpinnerSize } from '@fluentui/react';
import * as React from 'react';
import { getClassNames } from './Spinner.classNames';

/*
 * visibleName Spinner (Spinner)
 */
export class Spinner extends React.PureComponent {
  render() {
    const _this$props = this.props,
          {
      className
    } = _this$props,
          rest = _objectWithoutProperties(_this$props, ["className"]);

    return /*#__PURE__*/React.createElement(FabricSpinner, _extends({}, rest, {
      className: classnames(getClassNames(this.props), className)
    }));
  }

}

_defineProperty(Spinner, "Size", SpinnerSize);

_defineProperty(Spinner, "defaultProps", {
  size: SpinnerSize.medium,
  spinnerColor: 'black'
});