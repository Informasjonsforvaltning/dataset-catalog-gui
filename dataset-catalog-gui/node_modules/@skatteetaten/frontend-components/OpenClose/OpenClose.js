import * as React from 'react';
import classnames from 'classnames';
import { Icon } from '../Icon';
import { Heading } from '../utils';
import { getClassNames } from './OpenClose.classNames';
export const OpenClose = props => {
  const {
    title,
    customClassNames,
    headingLevel,
    iconRight,
    onClick,
    isOnClickOnlyFiredOnOpen = true,
    children
  } = props;
  const [isContentOpen, setContentOpen] = React.useState(props.isOpen || false);

  const toggleVisibility = () => setContentOpen(!isContentOpen);

  const clickHandler = () => {
    if (onClick) {
      if (isOnClickOnlyFiredOnOpen) {
        if (!isContentOpen) {
          onClick();
        }
      } else {
        onClick();
      }
    }

    toggleVisibility();
  };

  const styles = getClassNames(props);
  return /*#__PURE__*/React.createElement("div", {
    className: customClassNames?.wrapper
  }, /*#__PURE__*/React.createElement("button", {
    className: isContentOpen ? classnames(styles.toggleButton, styles.toggleButtonOpen, customClassNames?.button) : classnames(styles.toggleButton, customClassNames?.button),
    "aria-expanded": isContentOpen,
    onClick: clickHandler
  }, !iconRight && /*#__PURE__*/React.createElement(Icon, {
    iconName: 'ChevronDown'
  }), /*#__PURE__*/React.createElement("span", {
    className: iconRight ? styles.toggleTitleSpan : classnames(styles.toggleTitleSpan, styles.toggleTitleLeft)
  }, headingLevel && title ? /*#__PURE__*/React.createElement(Heading, {
    text: title,
    level: headingLevel,
    className: "styledHeading"
  }) : title), iconRight && /*#__PURE__*/React.createElement(Icon, {
    iconName: 'ChevronDown'
  })), isContentOpen && /*#__PURE__*/React.createElement("div", {
    className: !iconRight ? classnames(styles.content, customClassNames?.content) : classnames(styles.contentWhenIconRight, customClassNames?.content)
  }, children));
};
OpenClose.defaultProps = {
  underline: false,
  iconRight: false
};