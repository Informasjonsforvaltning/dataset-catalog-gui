(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('i18next'), require('react-i18next'), require('tslib'), require('react/jsx-runtime'), require('react'), require('classnames'), require('react-dom'), require('moment'), require('axios'), require('react-transition-group'), require('prop-types')) :
    typeof define === 'function' && define.amd ? define(['exports', 'i18next', 'react-i18next', 'tslib', 'react/jsx-runtime', 'react', 'classnames', 'react-dom', 'moment', 'axios', 'react-transition-group', 'prop-types'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@skatteetaten/frontend-components'] = {}, global.i18n, global.reactI18next, global.tslib, global.jsxRuntime, global.React, global.classnames, global.ReactDom, global.moment, global.axios, global.reactTransitionGroup, global['prop-types']));
}(this, (function (exports, i18n, reactI18next, tslib, jsxRuntime, React, classnames, ReactDOM, moment, axios, reactTransitionGroup, PropTypes) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i18n__default = /*#__PURE__*/_interopDefaultLegacy(i18n);
    var React__namespace = /*#__PURE__*/_interopNamespace(React);
    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
    var classnames__default = /*#__PURE__*/_interopDefaultLegacy(classnames);
    var ReactDOM__namespace = /*#__PURE__*/_interopNamespace(ReactDOM);
    var moment__default = /*#__PURE__*/_interopDefaultLegacy(moment);
    var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
    var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

    (function() {
        const env = {"NODE_ENV":"production"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    var designtokenColors = {
    	"ske-color-burgundy-100": "#6f2c3f",
    	"ske-color-burgundy-70": "#b04c5c",
    	"ske-color-burgundy-50": "#f06674",
    	"ske-color-burgundy-30": "#f3a7b0",
    	"ske-color-burgundy-10": "#f7e2e8",
    	"ske-color-burgundy-5": "#faf0f3",
    	"ske-color-green-100": "#2b6940",
    	"ske-color-green-70": "#5d9b73",
    	"ske-color-green-50": "#91d6ac",
    	"ske-color-green-30": "#b9e1c8",
    	"ske-color-green-10": "#e3f5ea",
    	"ske-color-green-5": "#f4faf5",
    	"ske-color-brown-100": "#6b492c",
    	"ske-color-brown-70": "#a9805b",
    	"ske-color-brown-50": "#e7b78a",
    	"ske-color-brown-30": "#f0d2b6",
    	"ske-color-brown-10": "#f9ede2",
    	"ske-color-brown-5": "#f9f4f0",
    	"ske-color-blue-100": "#2c436b",
    	"ske-color-blue-70": "#5a77a8",
    	"ske-color-blue-50": "#89abe5",
    	"ske-color-blue-30": "#b5cbee",
    	"ske-color-blue-10": "#e2eaf7",
    	"ske-color-blue-5": "#eff3f9",
    	"ske-color-black-100": "#1a1a1a",
    	"ske-color-grey-70": "#4d4d4d",
    	"ske-color-grey-50": "#808080",
    	"ske-color-grey-30": "#b2b2b2",
    	"ske-color-grey-10": "#e5e5e5",
    	"ske-color-grey-5": "#f4f4f4",
    	"ske-color-white-100": "#ffffff",
    	"ske-color-status-error": "#a82e39",
    	"ske-color-status-warning": "#9F7509",
    	"ske-color-status-ok": "#316f2a",
    	"ske-color-interactive-dark": "#093e61",
    	"ske-color-interactive": "#1362ae",
    	"ske-color-interactive-light": "#cde1f9"
    };

    var skeColor = {
      burgundy100: designtokenColors['ske-color-burgundy-100'],
      burgundy70: designtokenColors['ske-color-burgundy-70'],
      burgundy50: designtokenColors['ske-color-burgundy-50'],
      burgundy30: designtokenColors['ske-color-burgundy-30'],
      burgundy10: designtokenColors['ske-color-burgundy-10'],
      burgundy5: designtokenColors['ske-color-burgundy-5'],
      green100: designtokenColors['ske-color-green-100'],
      green70: designtokenColors['ske-color-green-70'],
      green50: designtokenColors['ske-color-green-50'],
      green30: designtokenColors['ske-color-green-30'],
      green10: designtokenColors['ske-color-green-10'],
      green5: designtokenColors['ske-color-green-5'],
      brown100: designtokenColors['ske-color-brown-100'],
      brown70: designtokenColors['ske-color-brown-70'],
      brown50: designtokenColors['ske-color-brown-50'],
      brown30: designtokenColors['ske-color-brown-30'],
      brown10: designtokenColors['ske-color-brown-10'],
      brown5: designtokenColors['ske-color-brown-5'],
      blue100: designtokenColors['ske-color-blue-100'],
      blue70: designtokenColors['ske-color-blue-70'],
      blue50: designtokenColors['ske-color-blue-50'],
      blue30: designtokenColors['ske-color-blue-30'],
      blue10: designtokenColors['ske-color-blue-10'],
      blue5: designtokenColors['ske-color-blue-5'],
      black100: designtokenColors['ske-color-black-100'],
      grey70: designtokenColors['ske-color-grey-70'],
      grey50: designtokenColors['ske-color-grey-50'],
      grey30: designtokenColors['ske-color-grey-30'],
      grey10: designtokenColors['ske-color-grey-10'],
      grey5: designtokenColors['ske-color-grey-5'],
      statusError: designtokenColors['ske-color-status-error'],
      statusWarning: designtokenColors['ske-color-status-warning'],
      statusOk: designtokenColors['ske-color-status-ok'],
      interactiveDark: designtokenColors['ske-color-interactive-dark'],
      interactive: designtokenColors['ske-color-interactive'],
      interactiveLight: designtokenColors['ske-color-interactive-light'],
      //ALIASES
      backgroundHoverColor: designtokenColors['ske-color-blue-10'],
      backgroundFocusColor: designtokenColors['ske-color-blue-10'],
      internal: designtokenColors['ske-color-burgundy-100'],
      internalLight: designtokenColors['ske-color-burgundy-5'],
      black: '#000000',
      blackAlt: designtokenColors['ske-color-black-100'],
      darkGrey: designtokenColors['ske-color-grey-70'],
      grey: designtokenColors['ske-color-grey-50'],
      lightGrey: designtokenColors['ske-color-grey-30'],
      neutralGrey: designtokenColors['ske-color-grey-5'],
      whiteGrey: designtokenColors['ske-color-grey-10'],
      white: '#ffffff',
      burgundy: designtokenColors['ske-color-burgundy-100'],
      burgundyLight: designtokenColors['ske-color-burgundy-70'],
      pink: '#df4661'
      /** UTGÅR */
      ,
      lightPink: '#f7d1d7'
      /** UTGÅR */
      ,
      brown: designtokenColors['ske-color-brown-50'],
      lightBrown: designtokenColors['ske-color-brown-30']
      /** Sjekk */
      ,
      beige: designtokenColors['ske-color-brown-10'],
      lightBeige: designtokenColors['ske-color-brown-5'],
      darkBeige: designtokenColors['ske-color-brown-30'],
      green: designtokenColors['ske-color-green-50'],
      lightGreen: designtokenColors['ske-color-green-10'],
      darkBlue: designtokenColors['ske-color-interactive-dark'],
      blue: designtokenColors['ske-color-interactive'],
      lightBlue: designtokenColors['ske-color-interactive-light'],
      error: designtokenColors['ske-color-status-error'],
      transparent: 'transparent'
    };
    var skePalette = {
      //Sets up fluentUI baseline
      themePrimary: designtokenColors['ske-color-interactive'],
      themeLighterAlt: '#ebf4fd',
      themeLighter: '#cce3f9',
      themeLight: '#82bcf1',
      themeTertiary: '#288be7',
      themeSecondary: '#146aba',
      themeDarkAlt: '#11599c',
      themeDark: '#0c3f6f',
      themeDarker: '#0a365f',
      neutralLighterAlt: '#f8f8f8',
      neutralLighter: designtokenColors['ske-color-grey-5'],
      neutralLight: '#eaeaea',
      neutralQuaternaryAlt: '#dadada',
      neutralQuaternary: '#d0d0d0',
      neutralTertiaryAlt: '#c8c8c8',
      neutralTertiary: 'rgba(89, 89, 89, 0.95)',
      neutralSecondary: 'rgba(55, 55, 55, 0.95)',
      neutralPrimaryAlt: 'rgba(47, 47, 47, 0.95)',
      neutralPrimary: 'rgba(0, 0, 0, 0.95)',
      neutralDark: 'rgba(21, 21, 21, 0.95)',
      black: designtokenColors['ske-color-black-100'],
      white: '#ffffff',
      primaryBackground: '#ffffff',
      primaryText: designtokenColors['ske-color-black-100'],
      bodyBackground: '#ffffff',
      bodyText: 'rgba(0, 0, 0, 0.95)',
      disabledBackground: designtokenColors['ske-color-grey-5'],
      disabledText: designtokenColors['ske-color-grey-50']
    }; //@ts-ignore

    var DefaultPalette$1 = Object.assign(skePalette, {
      // Egendefinerte farger fra Skatteetatens designmal
      skeColor: skeColor
      /* OPPRINNELIG LISTE
      themeDarker: '#004578',
      themeDark: '#005a9e',
      themeDarkAlt: '#106ebe',
      themePrimary: '#1362AE',
      themeSecondary: '#2b88d8',
      themeTertiary: '#71afe5',
      themeLight: '#c7e0f4',
      themeLighter: '#deecf9',
      themeLighterAlt: '#eff6fc',
      black: '#000000',
      blackTranslucent40: 'rgba(0,0,0,.4)',
      neutralDark: '#212121',
      neutralPrimary: '#333333',
      neutralPrimaryAlt: '#3c3c3c',
      neutralSecondary: '#666666',
      neutralTertiary: '#a6a6a6',
      neutralTertiaryAlt: '#c8c8c8',
      neutralQuaternary: '#d0d0d0',
      neutralQuaternaryAlt: '#dadada',
      neutralLight: '#eaeaea',
      neutralLighter: '#f4f4f4',
      neutralLighterAlt: '#f8f8f8',
      accent: '#0078d7',
      white: '#ffffff',
      yellow: '#ffb900',
      yellowLight: '#fff100',
      orange: '#d83b01',
      orangeLight: '#ea4300',
      orangeLighter: '#ff8c00',
      redDark: '#B70202',
      red: '#e81123',
      magentaDark: '#5c005c',
      magenta: '#b4009e',
      magentaLight: '#e3008c',
      purpleDark: '#32145a',
      purple: '#5c2d91',
      purpleLight: '#b4a0ff',
      blueDark: '#002050',
      blueMid: '#00188f',
      blue: '#0078d7',
      blueLight: '#00bcf2',
      tealDark: '#004b50',
      teal: '#008272',
      tealLight: '#00b294',
      greenDark: '#004b1c',
      green: '#107c10',
      greenLight: '#bad80a',*/

    });

    exports.FontSizes = void 0;

    (function (FontSizes) {
      FontSizes["mini"] = "0.625rem";
      FontSizes["xSmall"] = "0.75rem";
      FontSizes["small"] = "0.875rem";
      FontSizes["smallPlus"] = "0.9375rem";
      FontSizes["medium"] = "1rem";
      FontSizes["mediumPlus"] = "1.0625rem";
      FontSizes["icon"] = "1.25rem";
      FontSizes["large"] = "1.125rem";
      FontSizes["largePlus"] = "1.25rem";
      FontSizes["xLarge"] = "1.375rem";
      FontSizes["xxLarge"] = "1.875rem";
      FontSizes["superLarge"] = "2.625rem";
      FontSizes["mega"] = "4.25rem";
    })(exports.FontSizes || (exports.FontSizes = {}));

    exports.LineHeightSizes = void 0;

    (function (LineHeightSizes) {
      LineHeightSizes["mini"] = "1.6";
      LineHeightSizes["xSmall"] = "1.6666";
      LineHeightSizes["small"] = "1.8525";
      LineHeightSizes["smallPlus"] = "1.733";
      LineHeightSizes["medium"] = "1.625";
      LineHeightSizes["mediumPlus"] = "1.625";
      LineHeightSizes["large"] = "1.6666";
      LineHeightSizes["largePlus"] = "1.25rem";
      LineHeightSizes["xLarge"] = "1.636";
      LineHeightSizes["xxLarge"] = "1.6";
      LineHeightSizes["superLarge"] = "1.524";
      LineHeightSizes["mega"] = "1.4118";
    })(exports.LineHeightSizes || (exports.LineHeightSizes = {}));

    exports.FontWeights = void 0;

    (function (FontWeights) {
      FontWeights[FontWeights["light"] = 100] = "light";
      FontWeights[FontWeights["semilight"] = 300] = "semilight";
      FontWeights[FontWeights["regular"] = 400] = "regular";
      FontWeights[FontWeights["medium"] = 500] = "medium";
      FontWeights[FontWeights["semibold"] = 600] = "semibold";
      FontWeights[FontWeights["bold"] = 700] = "bold";
    })(exports.FontWeights || (exports.FontWeights = {}));

    exports.IconFontSizes = void 0;

    (function (IconFontSizes) {
      IconFontSizes["xSmall"] = "0.625rem";
      IconFontSizes["small"] = "0.75rem";
      IconFontSizes["medium"] = "1rem";
      IconFontSizes["large"] = "1.25rem";
      IconFontSizes["xlarge"] = "1.5rem";
      IconFontSizes["xxlarge"] = "2rem";
      IconFontSizes["mega"] = "2.5rem";
    })(exports.IconFontSizes || (exports.IconFontSizes = {}));

    var createFont = function createFont(size, weight, localeCode) {

      return {
        fontFamily: "'Helvetica Neue', Helvetica , Arial, 'Liberation Sans', 'Nimbus Sans L', sans-serif",
        MozOsxFontSmoothing: 'grayscale',
        WebkitFontSmoothing: 'antialiased',
        fontSize: size,
        fontWeight: weight
      };
    };
    var Fonts = {
      tiny: createFont(exports.FontSizes.mini, exports.FontWeights.semibold),
      xSmall: createFont(exports.FontSizes.xSmall, exports.FontWeights.regular),
      small: createFont(exports.FontSizes.small, exports.FontWeights.regular),
      smallPlus: createFont(exports.FontSizes.smallPlus, exports.FontWeights.regular),
      medium: createFont(exports.FontSizes.medium, exports.FontWeights.regular),
      mediumPlus: createFont(exports.FontSizes.mediumPlus, exports.FontWeights.regular),
      large: createFont(exports.FontSizes.large, exports.FontWeights.semilight),
      xLarge: createFont(exports.FontSizes.xLarge, exports.FontWeights.light),
      xxLarge: createFont(exports.FontSizes.xxLarge, exports.FontWeights.light),
      superLarge: createFont(exports.FontSizes.superLarge, exports.FontWeights.light),
      mega: createFont(exports.FontSizes.mega, exports.FontWeights.light)
    };

    var languages$1 = {
      nb_NO: {
        'modal.closebutton': 'Lukk',
        'datepicker.ariaLabel': 'Kalender',
        'datepicker.goToToday': 'I dag',
        'datepicker.invalidInputErrorMessage': 'Datoen er ikke gyldig. (format: {{DEFAULT_DATE_FORMAT}})',
        'datepicker.isOutOfBoundsErrorMessage': 'Datoen er ikke innenfor gyldig periode.',
        'datepicker.isRequiredErrorMessage': 'Dato må fylles ut',
        'datepicker.nextMonthAriaLabel': 'Neste måned',
        'datepicker.nextYearAriaLabel': 'Neste år',
        'datepicker.prevMonthAriaLabel': 'Forrige måned',
        'datepicker.prevYearAriaLabel': 'Forrige år',
        'dialog.waitAlert.alt': 'Illustrasjon av travel person med seks armer, opptatt med kontorarbeid.',
        'dialog.waitAlert.button_text': 'Ja',
        'dialog.waitAlert.paragraph': 'Vi ser at du ikke har gjort noe på nettsiden på ei stund. Er du fortsatt her?',
        'dialog.waitAlert.title': 'Hei!',
        'fileuploader.accepted_file_formats': 'Aksepterte filformater:',
        'fileuploader.add.label': 'Legg til fil(er)',
        'fileuploader.delete.ariaLabel': 'Fjern fil',
        'fileuploader.error.delete.403': 'Du har ikke rettigheter til å slette filer.',
        'fileuploader.error.delete.general': 'Kunne ikke slette fil',
        'fileuploader.error.file_format': 'Dette filformatet er ikke godkjent',
        'fileuploader.error.file_size': 'Vi kan ikke motta denne filen fordi den er for stor. Filer kan ikke overstige {{filstoerrelsegrense}} Mb. Du kan forsøke å dele opp i flere mindre filer, eller bruke et format som tar mindre plass.',
        'fileuploader.error.upload.403': 'Du har ikke rettigheter til å laste opp filer.',
        'fileuploader.error.upload.general': 'Kunne ikke laste opp fil',
        'fileuploader.uploaded.sr_heading': 'Lastet opp:',
        'searchfield.sr.focus': 'Bruk piltaster ned/opp for å velge forslag når de vises',
        'searchfield.sr.results': '{{ant}} forslag vises.',
        'table.sortable': 'sorterbar',
        'table.sorted_ascending': 'sortert stigende',
        'table.sorted_descending': 'sortert synkende',
        'tablerow.editable.title': 'Rediger rad',
        'tablerow.expandable.title': 'Mer informasjon',
        'topbanner.ske.logo': 'Skatteetaten logo',
        'topbanner.ske.logoLink': 'Forside Skatteetaten',
        'topbanner.ink.logo': 'Statens innkreving logo',
        'topbanner.ink.logoLink': 'Forside Statens innkreving',
        'topbanner.lso.logo': 'Lønnsstøtte logo',
        'topbanner.lso.logoLink': 'Forside Lønnsstøtte'
      },
      nn_NO: {
        'modal.closebutton': 'Lukk',
        'datepicker.ariaLabel': 'Kalender',
        'datepicker.goToToday': 'I dag',
        'datepicker.invalidInputErrorMessage': 'Datoen er ikkje gyldig. (format: {{DEFAULT_DATE_FORMAT}})',
        'datepicker.isOutOfBoundsErrorMessage': 'Datoen er ikkje innanfor ein gyldig periode.',
        'datepicker.isRequiredErrorMessage': 'Dato må fyllast ut',
        'datepicker.nextMonthAriaLabel': 'Neste månad',
        'datepicker.nextYearAriaLabel': 'Neste år',
        'datepicker.prevMonthAriaLabel': 'Førre månad',
        'datepicker.prevYearAriaLabel': 'Førre år',
        'dialog.waitAlert.alt': 'Illustrasjon av travel person med seks armar, oppteken med kontorarbeid.',
        'dialog.waitAlert.button_text': 'Ja',
        'dialog.waitAlert.paragraph': 'Vi ser at du ikkje har gjort noko på nettsida på ei stund. Er du framleis her?',
        'dialog.waitAlert.title': 'Hei!',
        'fileuploader.accepted_file_formats': 'Aksepterte filformater:',
        'fileuploader.add.label': 'Legg til fil(er)',
        'fileuploader.delete.ariaLabel': 'Fjern fil',
        'fileuploader.error.delete.403': 'Du har ikkje rettar til å sletta filer.',
        'fileuploader.error.delete.general': 'Kunne ikkje slette fil',
        'fileuploader.error.file_format': 'Dette filformatet er ikkje godkjent',
        'fileuploader.error.file_size': 'Vi kan ikkje få denne fila fordi den er for stor. Filer kan ikkje overstiga {{filstoerrelsegrense}} Mb. Du kan prøva å dela opp i fleire mindre filer, eller bruka eit format som tar mindre plass.',
        'fileuploader.error.upload.403': 'Du har ikkje rettar til å lasta opp filer.',
        'fileuploader.error.upload.general': 'Kunne ikkje lasta opp fil',
        'fileuploader.uploaded.sr_heading': 'Lasta opp:',
        'searchfield.sr.focus': 'Bruk piltastane ned/opp for å velje',
        'searchfield.sr.results': '{{ant}} forslag visast.',
        'table.sortable': 'sorterbar',
        'table.sorted_ascending': 'sortert stigande',
        'table.sorted_descending': 'sortert søkkande',
        'tablerow.editable.title': 'Rediger rad',
        'tablerow.expandable.title': 'Meir informasjon',
        'topbanner.ske.logo': 'Skatteetaten logo',
        'topbanner.ske.logoLink': 'Forside Skatteetaten',
        'topbanner.ink.logo': 'Statens innkreving logo',
        'topbanner.ink.logoLink': 'Forside Statens innkreving',
        'topbanner.lso.logo': 'Lønnsstøtte logo',
        'topbanner.lso.logoLink': 'Forside Lønnsstøtte'
      },
      en_GB: {
        'modal.closebutton': 'Close',
        'datepicker.ariaLabel': 'Calendar',
        'datepicker.goToToday': 'Today',
        'datepicker.invalidInputErrorMessage': 'Invalid date format. (format: {{DEFAULT_DATE_FORMAT}})',
        'datepicker.isOutOfBoundsErrorMessage': 'The date is not within a valid period.',
        'datepicker.isRequiredErrorMessage': 'Date is required',
        'datepicker.nextMonthAriaLabel': 'Next month',
        'datepicker.nextYearAriaLabel': 'Next year',
        'datepicker.prevMonthAriaLabel': 'Previous month',
        'datepicker.prevYearAriaLabel': 'Previous year',
        'dialog.waitAlert.alt': 'Illustration of a busy person with six arms, occupied with office work.',
        'dialog.waitAlert.button_text': 'Yes',
        'dialog.waitAlert.paragraph': 'You have been inactive for a while, are you still here?',
        'dialog.waitAlert.title': ' Hi!',
        'fileuploader.accepted_file_formats': 'Accepted file formats:',
        'fileuploader.add.label': 'Add file(s)',
        'fileuploader.delete.ariaLabel': 'Delete file',
        'fileuploader.error.delete.403': 'You do not have permission to delete files',
        'fileuploader.error.delete.general': "Can't delete file",
        'fileuploader.error.file_format': 'This file format is not accepted',
        'fileuploader.error.file_size': 'We could not receive this file because it is too large. Files cannot exceed {{filstoerrelsegrense}} Mb. You can try splitting the file into smaller files or using a format that takes up less space.',
        'fileuploader.error.upload.403': 'You do not have permission to upload files',
        'fileuploader.error.upload.general': "Can't upload file",
        'fileuploader.uploaded.sr_heading': 'Uploaded:',
        'searchfield.sr.focus': 'Use up/down to choose options when they are shown',
        'searchfield.sr.results': '{{ant}} items shown.',
        'table.sortable': 'sortable',
        'table.sorted_ascending': 'sorted ascending',
        'table.sorted_descending': 'sorted descending',
        'tablerow.editable.title': 'Edit row',
        'tablerow.expandable.title': 'More information',
        'topbanner.ske.logo': 'The Norwegian Tax Administration logo',
        'topbanner.ske.logoLink': 'Front page The Norwegian Tax Administration',
        'topbanner.ink.logo': 'The Norwegian National Collection Agency logo',
        'topbanner.ink.logoLink': 'Front page The Norwegian National Collection Agency',
        'topbanner.lso.logo': 'Salary subsidy logo',
        'topbanner.lso.logoLink': 'Front page Salary subsidy'
      },
      se_NO: {
        'datepicker.ariaLabel': 'Kaleandar',
        'datepicker.goToToday': 'Otne',
        'datepicker.invalidInputErrorMessage': 'Dáhton ii leat gustovaš. (format: {{DEFAULT_DATE_FORMAT}})',
        'datepicker.isOutOfBoundsErrorMessage': 'Dáhton ii leat gustovaš áigodagas.',
        'datepicker.isRequiredErrorMessage': 'Fertet deavdit dáhtona',
        'datepicker.nextMonthAriaLabel': 'Boahtte mánnu',
        'datepicker.nextYearAriaLabel': 'Boahtte jahki',
        'datepicker.prevMonthAriaLabel': 'Ovddit mánnu',
        'datepicker.prevYearAriaLabel': 'Ovddit jahki',
        'dialog.waitAlert.alt': 'Govvideapmi dilihis olbmo geas lea guhtta gieđa ja lea bargamin kánturbargguid.',
        'dialog.waitAlert.button_text': 'Jo',
        'dialog.waitAlert.paragraph': 'Mii oaidnit ahte don it leat geavahan siiddu guhkes áigái. Leat go ain dás?',
        'dialog.waitAlert.title': 'Hei!',
        'fileuploader.accepted_file_formats': 'Dohkkehuvvon fiilaformáhtat:',
        'fileuploader.add.label': 'Lasit fiilla/fiillaid',
        'fileuploader.delete.ariaLabel': 'Sihko fiilla',
        'fileuploader.error.delete.403': 'Dus eai leat vuoigatvuođat sihkkot fiillaid.',
        'fileuploader.error.delete.general': 'It sáhtán sihkkot fiilla',
        'fileuploader.error.file_format': 'Fiilaformáhta ii leat dohkkehuvvon',
        'fileuploader.error.file_size': 'Mii eat nagot vuostáiváldit fiilla. Fiillat eai sáhte leat stuorát go {{filstoerrelsegrense}} Mb. Sáhtát geahččalit juohkit fiilla eanet osiide, dahje geavahit formáhta mii geavaha unnit saji. ',
        'fileuploader.error.upload.403': 'Dus ii leat vuoigatvuohta lasihit fiillaid.',
        'fileuploader.error.upload.general': 'It sáhtán lasihit fiilla',
        'fileuploader.uploaded.sr_heading': 'Lasihuvvon:',
        'searchfield.sr.focus': 'Geavat vulos/bajás boaluid válljet evttohusaid',
        'searchfield.sr.results': '{{ant}} evttohus/evttohusat.',
        'table.sortable': 'sorterbar',
        'table.sorted_ascending': 'sortert stigande',
        'table.sorted_descending': 'sortert søkkande',
        'tablerow.editable.title': 'Redigere ráiddu',
        'tablerow.expandable.title': 'Eanet dieđut',
        'topbanner.ske.logo': 'Vearroetáhta dovdomearka',
        'topbanner.ske.logoLink': 'Vearroetáhta ovdasiidu',
        'topbanner.ink.logo': 'Stáhta gáibideami dovdomearka',
        'topbanner.ink.logoLink': 'Stáhta gáibideami ovdasiidu ',
        'topbanner.lso.logo': 'Bálkádoarjja dovdomearka',
        'topbanner.lso.logoLink': 'Bálkádoarjja ovdasiidu'
      }
    };

    var omstrukturerFlatJSON = function omstrukturerFlatJSON(data) {
      if (Object(data) !== data || Array.isArray(data)) return data;
      /* eslint-disable prefer-const */

      var result = {},
          cur,
          prop,
          idx,
          last,
          temp;

      for (var p in data) {
        cur = result;
        prop = '';
        last = 0;

        do {
          idx = p.indexOf('.', last);
          temp = p.substring(last, idx !== -1 ? idx : undefined);
          cur = cur[prop] || (cur[prop] = !isNaN(parseInt(temp)) ? [] : {});
          prop = temp;
          last = idx + 1;
        } while (idx >= 0);

        cur[prop] = data[p];
      }

      return result[''];
    };
    var en = omstrukturerFlatJSON(languages$1.en_GB);
    var nb = omstrukturerFlatJSON(languages$1.nb_NO);
    var nn = omstrukturerFlatJSON(languages$1.nn_NO);
    var se = omstrukturerFlatJSON(languages$1.se_NO);
    i18n__default['default'].use(reactI18next.initReactI18next).init({
      lng: 'nb',
      fallbackLng: 'nb',
      debug: false,
      ns: ['ns.translate'],
      defaultNS: 'ns.translate',
      interpolation: {
        // escapeValue not needed for react as it escapes by default
        escapeValue: false
      }
    });
    var languages = {
      nb: nb,
      nn: nn,
      en: en,
      se: se
    };
    Object.keys(languages).forEach(function (language) {
      i18n__default['default'].addResourceBundle(language, 'ns.translate', languages[language], true);
    });
    var t = function t(tekst) {
      return i18n__default['default'].t(tekst);
    };

    function getSrOnlyStyle() {
      return {
        //position: 'absolute',
        width: '1px',
        height: '1px',
        padding: 0,
        margin: '-1px',
        overflow: 'hidden',
        clip: 'rect(0,0,0,0)',
        //whiteSpace: 'nowrap',
        border: 0
      };
    }

    exports.Language = void 0;

    (function (Language) {
      Language["en"] = "en";
      Language["nb"] = "nb";
      Language["nn"] = "nn";
      Language["se"] = "se";
    })(exports.Language || (exports.Language = {}));

    function getFocusStyle$1( // @ts-ignore TODO
    theme, inset, position, radius) {
      if (inset === void 0) {
        inset = 0;
      }

      if (radius === void 0) {
        radius = '0';
      }

      return {
        outline: 'transparent',
        selectors: {
          '::-moz-focus-inner': {
            border: '0'
          },
          '.ms-Fabric--isFocusVisible &:focus:after': {
            content: '""',
            left: inset + 1,
            top: inset + 1,
            bottom: inset + 1,
            right: inset + 1,
            border: '2px solid ' + theme.palette.skeColor.interactive,
            borderRadius: radius,
            outline: 'transparent',
            zIndex: 1
          }
        }
      };
    }

    var Heading = function Heading(props) {
      var level = props.level,
          text = props.text,
          rest = tslib.__rest(props, ["level", "text"]);

      switch (level) {
        case 1:
          return jsxRuntime.jsx("h1", tslib.__assign({}, rest, {
            children: text
          }), void 0);

        case 2:
          return jsxRuntime.jsx("h2", tslib.__assign({}, rest, {
            children: text
          }), void 0);

        case 3:
          return jsxRuntime.jsx("h3", tslib.__assign({}, rest, {
            children: text
          }), void 0);

        case 4:
          return jsxRuntime.jsx("h4", tslib.__assign({}, rest, {
            children: text
          }), void 0);

        case 5:
          return jsxRuntime.jsx("h5", tslib.__assign({}, rest, {
            children: text
          }), void 0);

        case 6:
          return jsxRuntime.jsx("h6", tslib.__assign({}, rest, {
            children: text
          }), void 0);

        default:
          return jsxRuntime.jsx("span", tslib.__assign({}, rest, {
            children: text
          }), void 0);
      }
    };

    var getValuesForComparison = function getValuesForComparison(sizeObj) {
      return {
        gt: sizeObj.gt,
        lt: sizeObj.lt,
        sm: sizeObj.sm,
        md: sizeObj.md,
        lg: sizeObj.lg,
        xl: sizeObj.xl,
        xxl: sizeObj.xxl,
        xxxl: sizeObj.xxxl
      };
    };

    var UseScreen = function UseScreen() {
      var _a = React.useState({
        width: 0,
        height: 0,
        sizes: {
          sm: 480,
          md: 640,
          lg: 1024,
          xl: 1366,
          xxl: 1920
        },
        lt: {
          sm: false,
          md: true,
          lg: true,
          xl: true,
          xxl: true,
          xxxl: true
        },
        gt: {
          sm: false,
          md: false,
          lg: false,
          xl: false,
          xxl: false,
          xxxl: false
        },
        sm: true,
        md: false,
        lg: false,
        xl: false,
        xxl: false,
        xxxl: false
      }),
          size = _a[0],
          setSize = _a[1];

      React.useEffect(function () {
        var getSizes = function getSizes() {
          var newSizes = {};

          if (window.innerHeight !== size.height) {
            newSizes.height = window.innerHeight;
          }

          var w = window.innerWidth;

          if (w !== size.width) {
            newSizes.width = w;
          }

          var s = size.sizes;
          newSizes.gt = {
            sm: w >= s.sm,
            md: w >= s.md,
            lg: w >= s.lg,
            xl: w >= s.xl,
            xxl: w >= s.xxl
          };
          newSizes.lt = {
            sm: false,
            md: w < s.sm,
            lg: w < s.md,
            xl: w < s.lg,
            xxl: w < s.xl,
            xxxl: w < s.xxl
          };
          newSizes.sm = !newSizes.gt.sm;
          newSizes.md = newSizes.gt.sm && newSizes.lt.lg;
          newSizes.lg = newSizes.gt.md && newSizes.lt.xl;
          newSizes.xl = newSizes.gt.lg && newSizes.lt.xxl;
          newSizes.xxl = newSizes.gt.xl && newSizes.lt.xxxl;
          newSizes.xxxl = newSizes.gt.xxl;
          var sizeHasChanged = JSON.stringify(getValuesForComparison(newSizes)) !== JSON.stringify(getValuesForComparison(size));
          return [sizeHasChanged, tslib.__assign({
            sizes: size.sizes
          }, newSizes)];
        };

        function updateSizes() {
          var _a = getSizes(),
              sizeHasChanged = _a[0],
              sizes = _a[1];

          if (sizeHasChanged) {
            // @ts-ignore TODO
            setSize(sizes);
          }
        }

        updateSizes();
        window.addEventListener('resize', updateSizes);
        return function () {
          return window.removeEventListener('resize', updateSizes);
        };
      }, [size]);
      return size;
    };

    var SkeIconfontWOFF = "data:font/woff;base64,d09GRgABAAAAAD/QAAsAAAAAdzAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAABxEAAA74kbt8tk9TLzIAAAgcAAAAQgAAAGBRH0hRY21hcAAACGAAAASvAAAMkGs3QuBnbHlmAAANEAAAKk8AAEqYXUlFtWhlYWQAADdgAAAALAAAADZhdkGVaGhlYQAAN4wAAAAcAAAAJASyAyBobXR4AAA3qAAAABsAAAMgZED//2xvY2EAADfEAAABRQAAAZJkxFHAbWF4cAAAOQwAAAAfAAAAIAHdAKBuYW1lAAA5LAAAATIAAAI6q47KPXBvc3QAADpgAAAFbQAACIZ8gCmdeJyFV1twE1UY/jcpbVpKAcGqgFhviFoQEbViVcSKiIiKFW+ooAiCiIi1IqKi4h0Rb2iTJjRJ04bApm1oqK3looL65DAOD44PPjCODz4wPPvg+P3f2d1k287IDtmz//mv3385p2KJSIXMkpsl0LBgcaNUrV/ZtEEmSYmYf7pfvLbWr12zUkLuF/ZK+A6JVbVdJkittSK4MHi6pL6kseTkqIbS6aVLy2rKwqGmUG/oRPnpMd1V06s2yhiZIvXykGySHdIuA3JC/pJ/rCprqlUrQRkrYTwRaZWoxKQD7wTecenEOw3ZMdIjOXwfAHU/KEnJOF+WVPpk90gbdhLgCGEngyci+6QLvxm8bfwmEf1ob6cbNrJcRSWAnWJd7fhNyShQk3j2ghqD5jioaWiowFcMGsOw2EWbaSmVck/zfu6lpKyI5loqB7XYg0pIFiIsASJqsVpmylLZIO9D94D8Kn9bYlVbtdZ8a5m1ztpq7bRiVtYatH62Tlp/yHkyHp7YRKhV+vCoR36vq4GkTXoU+hWNPfiK0M+p8KINOz30KyoHIZMDJSYXYicOapiSJtYEszAFOBTLuPGdP4T+DdYa2aWgJ4hvknHr2sZ6ItBUv8LMvMag+TqX1Dw0HaR8K72uAbXgjWvxIh/1IOPNyQVAutgPtTkdtIj0OrUVYxxno1r8uFwMSkGfyk1Czgy+fZCPyWX4NnpsSPXLOcihrsLgT8hk1I1aVmQvwdqNehqyG8E7LZdz1QnJcsQ/UxrQHetks2yXXeC81qvezJAc1iHS/mGZvQ5aBhzbbjXORgwpRpjH24at6+GjkT2AZxb80lhj8PQarHvxpZJzsHZtXw0vk6DGQKtEjdTKXHoaIlatHv4PQ7OhKFaP4isC1A1yD0KH2XuEMWfwpXNkOXzu5M4h/D+K1T7IVQGL+dIoq6UZFT0W/BF4v9fh9Ec9gb0VZ3WEWStpGQff/DJneZRexpuC1jKv7jX/VfRQq1rtTwPGixDjakQ7muiFaaWTM0nraCY1atxuBV8FSitrKk4vMnIFEXFr7Ep+mYrvlxnEQeUr0JN1sNWEuRgDWkflF/ldbkUUilMv662FWnO+npxHZIZzuJ12Czo9AmqKvqQ5W/L0JCM3Iar4CNPhBnaB1lCfg9eNpPTQUpzSc4GcDatxSqVxipRybTTPR5Uobys46hGjsRKElmp0wS7wdrK/lPtTfrn4NWH6drIT5shiWSVbwJ2AlmOyjJGGmc9ib93sLmU0GptOiQgnvPryAOgjyS3hVInKEafbzaS4j/PD1dLrVO89nAJRp0p01cjMh4uq614gYiRbOLXvZ26Vw9RSPTx8UjbK7aylBKT8/jTAsqEXT9YFHnUQVHda3eHZ0jj75TbOnF48GvFCWtZ1JabVbNTwcpwe24CkngkD8iNO3efhRYoZiLEytTZSeDYRLZ0FWVaQ7ZzBz7HTY6x8xSkvLxIBl1N7Y0YRxVT1C5yNGWKiHM+y+m3O0zZgUcrqijqZL3V4dVZs4Ny06dc6xGMzD+udCZJkLdVg2i2Cv1H4GRmC5l3AzdCLcbsT8oYagLWJcjd+zYmguC2G1jTQ1DvKPGDWLDtxBxnEiXtKzsi/VoVVjQyOJ2+eUh3OFPPbfgoaCjz+vceRE8U0P0xqDc9EG/b99Gd4S9GzK87J6E71J1gZes7o93ewpbN8JalD/XsMechC0pVdwTy4XKvZu1FHwyoibzBZyxMgzlvQ00BHV5Mxp5pRAaescdbNuH/stg5bfwYqArMCywJbAq2Bw4HfAmeCoWBNsC64JLgquDm4I9gWzOH2MpUdZQNRrWj3LMryS29QZkYd4PyOEaFCvb2Gu4SRbicOUXZ3ghLt2E+zO1VfnLoSmBg/kCMpH+FMNrLHnYpSnHOU7XImRcaxo7SXMaUMfwu++rCOg+N7dloOKzMx8tCvKG32uPdznqQwe22ujO48pFOe/u24YxjuDmTU5pRxZ3KG1gt+vOfxHinKlpnwaUd7G6d7UrbiDDS8WVZ0ntEPUq6nSO8rOAVdbyOOruGIvuVxHaZX5uSPITcZ9mqG+L3tcZlYukbM3Dse11Gi784PfUc5ffRu8i77amisfp5mnIZuXqL0YigKr3ocWe8vgzxPqaQT2QfoP7cKU5DKcRqoti2cy7qzx3e/e92jd/lOvG0e/ZgznVqI9Zse/ZDP+zfYmUZPnDNPa+hDj9oNHvfm/xJOQJsnSydoRvsO0OKc6gnWuaK806MpYjbj+JhnleEzE+QTdP8+J4PKqbOzDpPoC/ZFhpkKs2eyjDgPBAp33kGnTpLyOTP5f/yfEeGRuNSu3ql24zzUSog6teCfd185p0jSm1Zf8q5R4Nc749egdaDTXB4L9d8CP9pB3Yva1mnXjf1v4f8hVPER9O9xnHw//QcWZQC8AAAAeJxjYGE8wTiBgZWBgbGGcQkDA0MIhGZUYJBlmMXAwMTAysyAFQSkuaYwHGBwfDWLKQLINWPqAwszoiiSAwAksQoBAAB4nK3VZbuUVRjF8f8hRRBJaQkBEUFCQhAR6e6S7i7pEkykUclz6AbpbqS5/Bq+3F8C73XWfuF7nbl+s2bufeaaZ/bzzDpAaaBkaBFKxdNqFMQzSlSMaUHxvCRvF89LFfwdryvFXX/fj6GMZTJLWJOK3ryJyVcMYHhMprI0FRRP/n0riPc1oDkd4j6SaTEp5CJHucwprvCCBzziMXc5wxPO8ye3ecgzrvKSV7zmKZe4QxEnOccNrnOM4zznNCe4yWEOcpY/uMURDnGNC9znXnxeiTjOUvH9ylCWtygX36I8FXiHirwbx1KZKlSlGtV5jxrUpBa1qUNd6vE+9eNIG9KID2hME5ryIc34KI7949iNlnxCK1rThrZ8Sjvax/fpyGd0ojOf04Uv6MqXdIvd6E4PetKL3vShb+xX/9ifgQxiMENi74bFXo2InRjFaMbETn7NOMYzgYlMij2cErs4jenMYCazmM0c5jKP+SxgIYtYHLv+DUtZFkeznBWsZBWrWcNa1rGeb9nARr7je37gR37iZzbxC5vZwla2sZ0d7GRXvO9XfuN3drOHvexjPwfiJJXhv98KLx69fOrKiwdxPu+eeXI+TuXDZ1dfvnrt1TiTd4pOnrtx/djx56dP3Dx8ME7drSOHrl24f+9/+Oz/41ZBD+XW51d/oSvbCkP37GLokR0NPbPLoVd2KvTOroQ+2YvQN3uAfkv2KAzIHoeB2d0wKDsTBmdPwpDsfBia/RmGZ7fDiOxhGJk9C6Oyq2F09jKMyV6FsZlO3+TsaZiaXQrTsjthelYUZmQnw8zsXJiV3Qizs+thTnYszM2Oh3nZ8zA/Ox0WZCfCwuxmWJQdDouzg2FJdjYszf4Iy7JbYXl2JKzIDoWV2bWwKrsQVmf3w5osruRUYOrQVMJQljR1aCpl6t1U2tTHqYyhLGso3zKU5Qzl26aeTuUNZQXTFZ3eMZQVDeW7hrKSoaxsKKsYyqqGspqhrG4o3zOUNQxlTUNZy1DWNpR1DGVdQ1nPUL5vKOsbygaGsqGhbGQoPzCUjQ1lE0PZ1FB+aCibGcqPDGVzQ/mxoWxh+t+aWhrKTwxlK0PZ2lC2MZRtDeWnhrKdoWxvKDsYyo6G8jND2clQdjaUnxvKLobyC0PZ1VB+aSi7GcqvTL2Zupt6M/Uw9WbqaerN1MvUm6m3qTdTH1Nvpr6m3kz9TL2Z+hvKAaYOTQNNHZoGmTo0DTZ1aBpi6tA01NShaZihHG7q0zTC1KdppKlP0yhTn6bRpj5NY0x9msaa+jR9bSjHGcrxhnKCoZxoKCcZysmmXk5TDOVUU0enaaaOTtNNHZ1mmDo6zTR1dJpl6ug029TRaY6po9NcU0eneaaOTvNNHZ0WmDo6LTR1dFpk6ui02NTRaYmpo9M3hnKpqa/TMlNfp+VW/JtaYerutNLU3WmVqbvTalN3pzWm7k5rTd2d1hmarTc0+9bQbIOh2UZDs+8Mzb43NPvB0OxHQ7OfDM1+NjTbZGj2i6HZZkOzLYZmWw3NthmabTc022FottPQbJeh2a+GZr9Z8X7+bmh9t6H1PYbW9xpa32dofb+h9QOG1gsNrRcZB/4BRVJlhwB4nM18eZTcxnknCmgcjW70MY2j7wvTwBw9B9EHODclani1KFMnRUkc0nGT1OGDimJTljUbW5HjiE+x6djpWHG8a9PrOHJeMrberrOO9DYJs8rO862E2cSrHDtZJ3HipZ+dVWQ/ZoPs9xX6mhGpWPvX9nQXCkChUMd3/L6vvhqGY+BDvsHaTIixmBnIlyNEzZOa06xbtqPniCA26rZllgVRr7maWLatJVJvuo6uCmWr3iTViBGBr5rLqUunyQ17tHBpTqhNpVK16RtOLRWq1eVqlawqRtZQ8mN5p1G5MJl1zRifVlX2BlbNTny40tjAQstVaEoA28NarMKkoD0TjAstwlbUMFGFSVKmr18gjXqzZjqGKIiCYTbqy8QwtRrn5IkaIeVpAhfIpVDECUUioU1MnEiokw1zajAR/IPmfZ7jbGamM5npJiYkoQQNJfhgUKGJEVTYQEyf2ONAkZROxrvFIOm2zyZ/BuOV9kesohv4p5mNaWI7fr7UaLr45+gRYpbtZt1umpgvW9CuD+2xcmGRtEnmxUNTpYhEvItEipSm/sdondRG07ph6I9j9gD8rgaS8UxEqTm5xkgynotGarVINBdPbtUO1qLFW4tROMKXIXQeXyYvQ7sYYkJjzEatUdNq5OWO04EvSWDawWKc3wfWYsIwyhXogT9g/uBxPgE4y6Q+TUSoSYNaoC6TVJv3NZv3vRWT5k2P7N37yM9hMum02/Btd+9AQi51b0Gyjvccxm8fO0X+npHgRCsZou0aIlv17nvCfP53zSfIoamfLv3WF4vvZbplyf9ka7RsLe7SwkTvlmBr+NAL/9l8gtlRb6JRsmnhKvn33WpzU+8tfvG3Sj/N7Ky3YsZpE2yyt1vEwYe61TIsTRrsOJSNQ81QMI5PVLqtiW88nbln6u48+cTR/NNPZ+9hxz+cP+EdJc+eKH7IO3qi9EE4Jc/23vlFdoWZgmPcJ85GHEZb1+LIQUswWaruNOHaNPIeXKWD34iTC5TkKrVKVI1WRuuVzLQ7nR7dc2hPhVzytrLT6fR0hsylR0kl7V1FGr9yJV2ppIhIKTvjbVorlcpKhRShCTxtx3fIS7Q/acZkbOgVMnlZUHUXW7JM8sTwz51m94qj2zXOvBTRtKymnZi5aZbM3DTzq2oOz6e7pz9V+nyZ3KfmVPiWS7P06u9F8UyNlGZn987OftN7Hl8v0DGV2SCTYLJMEbi7xsxDKzS3CcxNkxqkWrwUJ34rQASZYo3KGrMMHG/3LouOrqlW/Rcf5qSHOZGFn7ePJBLJVCWVVPW79LtESZQi4qlEMmklDVUUc2zwL9ZYLnCsn3hfJs97v5eeSMN3/6f2x5KRTDh6PDWZSk2kE1ElQ5oDOlBAPiaAV5gKcLYLDcEfSqQ8yRERh6rBKt6ys7o7N5HbvboO6Xoq5XTmj8dFLZfTxPjx+U4bcwP+syj/6TAODBkWWwYSgWqQacIhGdRteAmpDvjtJuC+CZLKrJQw4/1tZoW1BvzmIG+6JKXq3lma9f5W1fv9gKLw9ml4oxh3K2UQnnFVB1FfWwYBC3LLPywQJEfLjlOpDxmLvLy+7m2Ola20xJMASd2YtSGfOlJa3cVyhJfUvD1bOpJKW2XWOutdObspyQnvw7xIwrGgnIjpGQLPvS0qe7+p6DFyW0KWBvSwh7zCRGF0DSbDFIAuGVIqCxq2q0S5wiLxWrxmxmtijcoi+sPRxuEklyD1xjevbm5udOiHvJLTvOfpvVUt5z1FVr3nyepRCyjD6suAl0G/yCgn8U3AzPCSZ69quY2NHKvA42dbLXJByw3mH2VlioELiVpXGSHzmiWY93hXGRkNU7sKU0xn2TuLaTv37jZr5TQHLlyhLUpoOQeKOA5KadoOe1vfbWYSNEoNtV6i+xLUePgSA4SwqFGRTn/Xy29cxTf5yVUHP8MpNsdvHHYQRHOHXnba2w59GlVAbnG0bUylFC/ZqFY0c/v0TJIGZ6KeAS221tp0UrT2NUxTqfX1dZLYgCrhtRd7NxzvyjrT1/U2vIMHmTTLLKG011C8luI1C3U6UCPpj3G3hz7baSoqVst2h7UVWbOWEkfa3sV3xmeOzI6Z/itTDm1UMg3XzJXkY6XdxeLuGzEhiX2jxelveVfMsdkjM3Hvr7vto+39WGrFhKvp5Kvd0pAwO/SsLdqiIRqu4drkZfPpp3tf8p+GTrr9VEDvcMDxWSp5YTT7EMoGUtJgtmsAaRqoEXCYfQXZAkm/vAW9mMjl7gepm7uKSeXnlzIPPphZAtq+vIm3JihZ4S1INtfvhtsPZZaG6ddmkjiLLlU4/pDCBHYpTBRMV3NrIHe35Gi7Rx0wBMelYPjwb3hnnajcgotVStuXtdxxsXP4MKl6lxmxK8siQMdZoN55Zpm5kWlR1CZyMEfAIzZnNWuGaQkFojsrpGmZro/mRNNHc6XtpzyQkw2/RB9j/pdQlGgE5Mf/kWkm9LWf5Dh2VM6HTI4L/HooqsicHI16h2TIsaFolJywrEuWdYuSSKQTCXIxFvb+XI5EZGKGYz8gImfKssmJ742GmlAhpPDIIBs4evQoaSayCfj2cQMrkq+hFg0SxCKs6F0+P3qaBMmzkDFPE6kvW14hn8NyBEnDJS8+87HZzU3yuWeegUO/zGfJj7BMxXahEPnsMx+rbm7+0seemaFFumV+jfwQyySQvuzP0+fJf91R5hWAGFBmhUAR8SPP4M3naLpNx6Rw5gcKBpSN6GMNn3Eq+LC9Q4n0sJx3sdMxH3lkpwLqFrif3hyMkY8pGbKNKYceHX5JjzYtoM0w1a3XRaHXQZ7XgZxvpO88sq54vb6/+MgjJmiUa/e9QG8OeGwFZILOVJHH6KuoTgVE5fodQkBen2YjRESt6ovPutUpz5Xhm7jVmTgwFQj7wM3JN/bM2YKigPFUQC2WWy/P3TRXnnLHVicIBYWdVNE1+fSuIg9mE7A/w/3Lv0AbjpF/BD6fYQC6kGkWtXeE1dCaKznLbAPxfAnhZ725wmLr9AILbRMqVLLa5NvBxi3VxrGktWSOrY6T1dS0mSg0xr3noU01KxMeudHadbMs2rmxqvf1PQf2tMnxyVXbnQ5M3GCNr44lzOlUcXf5RShtzQW4ZHlsZbbCsZOL1fVWq90fJ4tcApoF6VlxUcLNEMoDb6Oj+RmafommZn98yRBuBJ3dqFtR4icmiCwAg+SDrMg9LHEP7yO/LXJk8liAY9do8hfeKmlCpk9rSBMjOxBXAulfHJ7myQ3z6cPmMFl4HXqpS1tpqhcRxVK92NiBWGx6DvKUfMe7QhI95a/mwUS4rOVrpNoia9tUYhtPyFpXJ5JXAJ/EGa2LORDyQO0+LANDrCHW4maiq++31lNU3afWN319zyoppweAnFQL0E9iCz5QLQVd7ATwW4AJMhEmBvW7zAKzghLEsgFF4FS4kIOZsRDggviFU/hDMxv/9ALoXte3bZt23eZtV0jYTbd+RgrcO3pu9NyD9yqh06fML0Tz47nc+EVRHIGWVEYnxlZtQZQboWzk5IGxpCqJhPfeeuJjo58d39189+mQcu+D58xz5r0B8fRT5gcjVKX9DoB0QkRJS9qrb4nk4GGBrxwYmxit5HLqyPfG9jW9Pz6pjQ7GzGKULpZiEsMTYgNyhMlwu0ipQ8cGdFlnc2Pdu+xsbq4PwaJqx1n3rmxSLPQGbVG2jy05RJcu0EWFAiZjnazh9LY77Y22s9XpbHTpMc3ugfaOARXFS6D0BzoZ1eYSgCEXMU4ceLWkASZqGCJSlJNTiQrEpCJhOa0NLUcItty7vNFuA2V1aA994oJ++J11oKet1pDtn2RGmV3w5mkyidwECRgCS4QmeVYQp0FguAbYprXENln8u3wmlorKHUeOAuiYXtFTX991ZJp/FIDWgIE+E1VbcD8qA5XLI62TJ94iuEcd3XgUgBi5MCSr/XGIAH5AimRIsz5DrHKUGDxAShuaIS6Imji95j2yRtQ18mtwsiDC+UtrRFsbwqkK4EeXWYQaeoy9RNCOop4sF3gH4SLl9gXSdA1BBMmM1hWSvaob04ROLHmxOGbfdOvq2PRC0S3lavGUouq3OjO3TE0dnmZVyzSiM3vYbLmYenq2wk63R9x5lXxDvenI3jGQmHFhb7XsFtJJvtqcumXtlqmxaCU8Eru9FtpVzO0Kt8IVV7AWXiju21fs6Shq+4wADTAVX3SYPVEC+CHeMFyNvDIwKMiFTfi0h5EYWQPL7PL319e/P+zX4QCXqVRWgq3UqG1XpqsoJYbmiiQ6Vx2yOqyZB9i8V1cJWkjr0sxt5MANK22S2FH1kLrccq52SGJIoC4PFG1vHrs8nEK5SraZGZxpi6Zr1wy3JroNg6xt9pj4gSnHmTp4ENMD7PlhRvYu33nnw2fvvPPsxfPnu/1ZgfEOQ28qSPkJF8ZYQKoAAWagQ0GEDKpsATOgLC04AqHUmq49TWaI4BTJxeLh6szS22/T083fL1QDJ8MKnhRWzXo2/+i+Mdva/e/gmE7OZSzuTotcLnprxcORmTvdG2ftakEJnww8PHun+6ba6Oj8SosQxUq9AEd+jrMydxb79LxCvgPyxmDKFEf7IJi2LMJic5dZaJWDTQQNT6q+j7WADdFve/tj/gGa8fSjeUwK5JzvXsU3u3fOzGA6C69treBvGLtVfOyGbGNQByJIJKcA9khZFMDsFU3NhxFUV7pvXtizpzY5osULuhxcDc0vnnQpxPupvcsP7g9uHHSnayy3pMixmYMbwf0PLcGNIf9uGXDKbuaGrn/X7DuZjZohUp0DpgAYC2ACNmsi0ELXLUa90v6I1Pr2wZOLpz9zgxouz/HNRYFE3n5ICU5a4frS9PjE1Fu0nGJkjEj+ZHFycqVa/QYM18rkJFlrVJ6bpH7oOLmBkBFBSJrnSkkxHY2C0IoYimJEtNyWP3R9/3RvrBTUMhWbNtS3VH3vCVqmVFWS6uitxZqRqaxYxQVNWyhVVioZo1a89cbSoWJ9bHrKWhnNJpPZ0RVranqsXjw0rMdY0M0qSGjQODOkZgz5GhKgTyqNEuj28+c3Nju+EMi9uoXkTs6dr3ToObXfwGzzlRi7TT/u5CzQKyBqBwwFimJjfTsfkQvUXu/KWsBvKBNCaMU2SrZWahAAJR0siObqlXYb5MC6gwqniznIVTZLezQKuq4Kknqe2YsST48S30IEmQ+qT0SbT4Ppt6n/GuRxrQHgp+HiD23CLqE0a4PVh+8JPDvJyrz3V7wMGV4g7//gAw+4s9lCUvtqKVnILm5+85vffOFXfqUhynfIYioUieiRyLdE/klQLcKTvJhOk3OL3+VeOnPmJe67i94/pNONTOb3LiyHpERCCs3Hk/ERI971n1I94/cdvTbQf+01f9Rip4M2dGQVp/dhXqcuA37i0JHWRQe2sz23vb6BHaUwaRjtRk+NuKj7TGgVTrbv5QIb+nmw8a/CD1BiVCaJdpRUweyHGxfb0U9ugVpvk3NydKheBVAoyH9iAHPqroHGjN0EwgfpiNAQkKBj6GiCkgutsCaFgxUtF7aCIq+nWolwtjALWnQ0XvQuOaBnXm6FdV4MWuG8WgmGJCiSqgaD4VQwJoS9B6DEQI/Z0Js8M4m2NHAUxUcgENBDrZm+zgFee416e7cRFSQnGilE0S1CraXWdn23YsTC8TS0KVJEpKn5VlfpWw45t00JDuvAGIzBAurAxuvoP2wIenGoLqF4Gc7cZQDMVGgmrqcbm2j0QWuDQkwLRpyQWJHAFOw4ZO3a+pKswQPInNGQqMTCWn4kFizJI9iRvj1K/gDGj0Ns6aLO1o08EXooHoaPInho2TIAf3882X9qtZzZSrkUysnZZDDEsS2WC0kRyRTyYXusUG0ZE+56C+RIUj94R0VRE3JEDafG4tl4KCTqfHbPDFct5N0JY2AT14B2eKpVTM1wZ6huMQ3X7I8YwlvUsD3/XeWhkbvDy2eWDr3lVGvmyIkjs7NHZs09SbNwexWuLp0BSbSSr//t0pmlU6dmj8zMHDl5ZCaTGi2Wl848dmapL58t37/r+j5DxP9X2+utq1db7U5nc2tr83Wwkv36WOkcwJitISrZSSPIJ5RGrufL4HAlDSnhmi6N4w4QITDmtT0b3lMDfwO5uSuH6fvQLCTKMnzIzy56l/9D3ydxybdSyTQMdW9h1/UX9Phy18YjC9HDs2DAA4SdPRy9s92ikh84g6xVd4+t3rY6trvaho/vaezJrzpb764fLjL7rrGGMVhD1AC0GQDgcHixFNJgni2AFEHbA67i0q0DpAgCqnrg3fv3v/sCJgeWHlpaeug9DywvP/AL1uxEtZpKjL4YH5ElkYevyMbHEwGR50brsSgnBgIiW+8+CIm59NBjDy0tP/D4A8vPTk1NtXapuUeBuaIBjmUDMmtWRH7Xo8kUSwRZAMuDjhXY9L716Hvg0S7eSy3JHAH5CWK0YaJtBMIVVyLQkjSucQ/slsYCdKoy5JOnLtUWWP147HQ6KWdr+Ip3FG1CsOtS8Meu5LQ2+qD9QxsUaWrbFVDqqb7o7/uWFdAiZbp6gHhqeHWiRvUBICtADrXuspWNY41eKFy1IC8PzEVy22w5Vgru26fmtD+PJ5NmMlVfpWsifVeFt/5keTYRyb70noimRd7zI5Isp5Jm6kcvvcT0dRvpY4SBnuyu3Ljd393kgnd2Az5bm5sgn8klpwV/bWd9s7suNFxHCteFXlOLqgOBoTYwBN1pIhjWttUa0SIkqkUJTSLw89/xsHMW1J0KGm+je+xjm/Qwthno4RWstdVPuvX0bZYVQDk49mjDdddTfYe2b8X7C0RUGMDII8nANFjUhAOG+vWeJQf2M/XyrReqneqGz2tbvZUcmHffU+isVwuOU6gO5AC+v4Bynrz2pUOqMkfEXuvooln3nYhvHf+9XZ6/MPROdEB237vV4/4BTsV+h7sxED1ZYiA2/fF7/z7AR9XXGwEQ2qT6OqMwmAMOaAQuVK7dgO0j0Zd8l7a//zWj0d7x+msOyDVw8U482P/5lNPzKz1L1nAWE4a7sb6Opvz26yvEgOtbcLnLVz2fNlJb/XVlLtzx15Zeayxd253djGlEL2rayaiuF3T9B/7hOp7xi1iy6D9Q1P2T4Tb640AtmJ7XALnWRhccOtwrMDC+s8BxnnrKOV9+8UXyO16YvPLh/KOLb4/+96c++MGnzBdf/KHTX39XgNYyGDkCqgRrQbOlMWTILBGTrN3zqvkq2B0XNzb6S42AlOHiPRvAtQOP6wbjr1sB3djU1kIN1mLuYO69hsVllDUhithJXyYAPwE2YYgP9X+iW5SagJg3BVE1ZuEeXHSbRlMXbMRaZhkfAePW0MXtRtvjJDSuJ5X4SL4yEhlJZDPRREyPjvC8GsvqYcB1MZ7n2YCaJXkSyxdH45HYg6EZNvu1YEThA0owfA8RpVBoh9X3XeLcqMSiWlYaK/I8J7CCyPGBQEwNioRwciSqauncSIpMZOfZUlqSxExxkgMgXtFiih4KPwcAhbCzfTt92P/jAyQtcV2qA7jUuQ7ERcfV5jCedba5f4bwmNy1fNEJ6FJ3IC8a6JsGwnFxSe0PZXF6bRodg947ixfPrp29WPy03T5+irXwuqTCDQevP/zp4sW/aq+d6slJ8o/AO8ZOrqECoYQSilQHEWEZaDkGUJBXBrFfVxGlO12M7bcXYxciYKXYKAFxtmlVSBKVxiByyvBHxx8pcq4y5RQq5EKl4Ex5Vx0A3a3O4MVXQ4qaQtmWUpVQG2+2HGco/ozvvxdjR8rMLmZ5x3pbn/Vr/CB2C6DKtuaJjtHtN1AnOTfUcT1PCtV8Xveu0JdvDbW2YlqlGe8b0yVreFhmsHg1n2n5XaHtb7Vo+2dCUlrKZCAJDekNOg+a733eIcH60T3IYrR5yGfQ9ojfWAxFGZ4lX0hrtI3e2V4bp8mume1tdHxZvXH9xvn0fjcbAS2ywBxgbsNRxSFTuysey2SJgJ2LzmL4w2Xsuo3Y1reo+gM7Q3DiG8a1+0Wqd9x8aEEUl4FK8xVBcs/tFsVyCWpZFsXFX/qEkTNKCYNcMhIlyALyG+prenS0PjqaZpVCfjd9gEiZBBcWbxkZOSyFuXgOqoXrc4vtlpZKm/lKut1OV/JmOqUBCa0PBqNSgXrqFdLVNZeA56K4ylTTxC652PDbSDlPjD3hpFjL2XQwghAOfbtOoXyq+08Z/gO80X0eWHQz9WrASYG5AnV8tOitQSXNV7GG2zojUNlHP1okF3fGIWZfbwWYc+3rLAK/q9O5zjqw1zn78JDvq0I1Jkh2cYaAVIbJw0mtISOIRsMGE8roIWZKcJpqdMNgyVpHHds3WnasZDyejE+nHKsUTE2tb/yZ4/0DhfR5kJxGMBvNT02xVsd7yYiPHVQryT17jESiUrxndOpP1r2zji+gN3UZCsIDU4tTw/GuGBsSY/IY/wTIs4dQ0L/hlihsAiODQieKWVI+dL0TYK53sVBtk2q7yirtdbyoRjfWO9VCp93uUKA4WCPBd6R9W5frvSGxbfGSnAMr2Xcor3WVCqhRcq7tXfR9oIgPu8ZAtU8PIvCNARzNJKhTRhDRiWs37P6iyzY18Uq1NakmRHXdWheMZq7aqsK3UM/n68u1fL7GKtVD1XxTF9cr6wkxoVYPHTtUdfL1JSwBSdfG930LQIEK0SoWOec9hV3ccJyNrX67iqDfg8xhoCyh21sTVIoN8z4DFnGUWHiYRMOBanLU83qBCKoB8498v0Lg1F95RdVv6HiwgBRHa7UD9frob7NsAyxKhwsGlnU1SES+zYuyqi8HgnCRDdQJqQdYzmHhvqbJ9DYJ6uoyL8FFlvtjUodqDtT3RNToOFRyV4AjqZi0NyAIgb1SLEU4uBTkxqNqZKJ7Ox2XbuQFgb8xGEt3bzN9vwfyZZnqIgw5dnUf8QMli35Yp2sImi+KyKWs9hzLfl5fxEn1j4v6c+zk4uTkHyTulyOh0ypdVRDlM5hRzwSl/CTc7dsdPyQ/YuK+PjVEV9fUCNudbNfOE0MkpqHu+xMh39xv14816sc+zlrzsU+Rb/PfOWYkrf1urn7sgWONBFHc0b3DNBr1Y5JdGhRb03ownmJ61Fc1HqzA7mJA7SpKdZ8gqct7GenVu7iuJNNJZZ3CQIcmZA3j4QAQwi0FvgPbGXlPAGkWoXEBcXRPxfkaNZbpjzzbardb3tF2e2Pj6lVW8S6222StDcIMBeKgjiDjr9kzBN0DUEujVhqu5hJoc6io5YV7NbWvtttXX1PPoC1iDSMfd1biDNeAq8rdGt5YfPNgvBWQ4xaMN1W1PcXr+raCo1eGwhrQqdzJGla5WbaMrHe5uzbiXe7F++E0bBiJWCgYDMUSRmrLFySrA+cBtR8FX++QH9DoHD/qcbrvt5hEATJJhkIrawb1b4la10UHP1urkd+QwmF4kfQ3AIKliCLd9bavv3nKOgl/XJN8Pxz0XgiGZbxH9kvQovCi980vNyz6ubA4mH+TvAwtmAYcdQtaYij4KcPjkjg0or7CNgvE1UA0wBcXKkAEAMa3/GWI4U0JeF4gumDC3YZtNWsfmQqGjNgvCILIf5SX5E9qkjR+5k5BlL4kBzdCQiSbfvEuQRL49/Oi6CdPCBIhRBCexKMgENcMJOSYIcqSJMjseIBlo7F3s3KQlFjxQjDLiUJMJ0JIOCgKmgAfTRDvFXkdXkbwRBpaazCAq6YZl9kzPNI0PKHRCwjkuzarP93iULC1Tw59IENewQWDPfuf2L8HM+QnvK8S2/sWqfOi9NcZ227adtooFKvFoh6KRY14nFWisndWjobhA+UvyNEDKS8l8sTgpaNYvGmHC1PF4lQhHddjMT0+8CVNki8y88xdzAnmfuanqbSp+RsuaCSoPqCXJVDrdj9vlmGufOvfhSkDTd+0kbRVuA2XIe3nYUIdHhQU7ZrZ66Nr4qpjhIgqzGvNcBqWXTctk/yGkq5InMDxrMSL8COiUBCExKgr8QVBJDzGrPCSyPIsEQKZr76DF1YF+Io3ifzDrEBaUEYKSdIvCxJS5ZvkZcJyEuGjCXt/QOIC2hg5QFgxIceBahRBWsJ1Kg5MNzwuclyAi4I9FIwFAjx56xrP/7oonhKEU6L4OZ4/wX4Nq+59D7KESDkYZMKXZZbtxmoqLKFeOeS8GrOXubkbcZ3IEyR7NwETDkwGJI4jCMPn6CjLDLPnTPGJvrTjPAEiuQnKXSD/0fuerKhECf59UCGq8peG8a6MqEtp0Hd3sJxrGG8Li7IsYuKdVjCrCLL8yTgFV+QiEMo/B4GzwViN/ubciZQopgjPV+YOB8UlLLwkBgc5woXjZAQeA3nZ7V8ZoGWdWQJr/jjzNmad+RCuiKGWx1XGGQD1qO1N6rnFUPcuty+BJej28zXHbfadRC48Al0FIx4IwXA0hASmYPchGr9jb5K789yGt/nIokZxhMUWSZAPCpzMB+9bLAWCalAIsoAMJGFMCN5Y1SXBFoJAPcIPoK+KLN+xkGMDXIg/NJviA0KAj1fm/RveyXeigNuevP+RgBBiOSJJj3CizAYISIuYICVkIAKgzcAeSYjzEn9ACEoiz7K8EBSFFi+UsUIlOE84liRzLHykzIhA2PlgJAjXQdDG8Q2QHA6JI2I4DEnolmRQGJHCJCmJI4LSn4MbyLNgxWeYY8xPMO9izjMfAcnqD3l/gKm3XMRRatT4/vzYZZvGImFZGPYoeUMTZfbkWd/zXrN3Tp6hmoa/s0UV/ua3pVDZmEmWQlohFInK4Qo50Z2ZQDAfF3ng3HxUDuD8cLxA6LwMzY+I8xMJBt+bGEnQz0hiaiHL8gGZP7QrxcscHwASDcLgkYdC4tuSpbKh5vVRMTwnR91GjA+OyCbMSRIlf4oN7ZH4RH9igGlhYsQWL43KODFyNNH7pHCKjBwKBTMuzPu3+2M/yUrUJzHBLAJv38e8FbAASDVcavf1mu1WLMgbPHrPd26ss1EKdPHxJAEYbPyr5L3jnMzxIP/GeBKSjgCTf8mrSkpAEsnLgsxJ3vRTSESYREhIDHwAxodnZTHwcxIovNv7N6+VdEAKCNFwKCqU38dKUYV9QlIUUH5SSgyFxJQUAubJEgVOpQyrSF8O4zW4K4WODsrcPbja1f8RkIc2lRh0FYtu5ENHg4lGYH/PI5iLGJGCGAkjUrYFpLi4pgXIt2mi62UadA15dP5o4COFrCGkCkqcVMd1vTg7Hw8onBWKxifn7TF7VyIdVlOqkjmQGRtzx8aeyNpkbPcYsclbqqOftCJJkQ8HYtIImeN4XgILK519Xygi65HIVDoR1kIhVUmkv0JsfGT32Jh/6Nk9GejTHHM72mOg6XHVxxfT18zF/RyUowZS1wjmkaVAaplUD4jQLRRdIMPcQ4JYEAWHF1M0TUMqCBmRdwQxKwDleotAz+TxgCwFTnHkFCvwNzvAEWxgDvTb4eMsVOatX0R1dvEspmefx/R5ACxw8K6KYcAx5IIgJgOSHHgzN0HYlTzHBmXOZCFr99eYoI95QDS7QYcd9mdOx1V33MZQo3E51OkNQAHtfMPsbbKw6CYLEeeMesncMnpwlllf9YPlMs2Sc0pG1jRj92e9o582EoaiTeSUdGhECkXlzO4ruDHgCsmqavad+fHxxfHx/M2RBIhSwx5J/GokkbCTAWWEJWFZXdCMoPdtAjgtqGgLE2F5JF8CMbOpZk9gJSeyPBlfmJhYGH8hoY0kWUXFqyMKZ9i48UCmOPnvyD+Bvi4wM3Q98nbmKHOGeYh5L67rvzHG5LdJYF/Luz/mtRli4vBoNALY2YWe8Lr1xHlkqvOoCq6RI/f6nCuGQ5H1dWHA9ztOPv9+FpBSKMxK0s+ivgpLGyFpEgtA0r5mdnOQ3V1Yv+7JoyaR+Eng4lEguUmqnrprvWHAw6ifMB5pFjjlBuYQ9fhpvZBR1+i7LniQAjYo8X4cnmi6RhlDakCUDpAxXnDqbp41TBAVrgaEVJsmpDCzXNpdmizvz988sXR6cfdJYrG51AEjcJsSi6VisdBcZC4aEvjQHf55GPLh8u7j89wpfmlSt+eC86F72PApft8M1JPZn8kvnjnXXvo7azV7IDOaiOfj8dzIrne8Y0kNhoi9AicjuXgYTsae4+bWdk8uBw7PyXP28j1MLxbre8A3GlNmxpkpsHlaQE9rg5iwBQK4FwPCNDAFGyDlDIFKObsJ5kDdgVERMQITrqsGboJEWehaojHsuMMIijxLJaNhN3BDFzGeiqpq5B6Ou+exu4Jx6UtRlSXBWCIWJESNhnTUdXvje2+KqkQUpbDASkE5dk8RN13dgEkpPanKldpsziENfQw0phbxrkTUeJwk7tpHyN2jekSOyfCN6HMTmhzav76+T48ockhmwSoKhMk/F11/C5db/HputlaR1cn0qPNvUnsbI2Cw+3vxMEattxcP19EXwFK6CajiKNWfgJDBtENLGKQgcoTdNUVtCjMMAHkIPUQjgSvTTcDBogZDB3RTd9SyK4IaQa6ilxpNy8bRVMkPWcF7TAiQaiBCcrzMVsnH7r//41+BT6n0lVIqn1782mI2f+snPnGQKIkYoUkpGp2bDe2SI0TBte2wHJBi/y0gc08qovAkN5l+U/pNmY+fOfOHge8uLn43QBIfOiFHWSXIhyCV+WjeuvtuKxrk8GKIk2NkIp/v28K4hunLGozLrNtl3GhBUyCKyhvHuUqAJYc5jtw8+yferddQ6b/8AYCqAACC0geQ9XmAqvcDttmziEnHu7xybR2ekUD3REgmKKREpacPYuT3gcJHgLIdmDf03mO4A/Ci2nODiW+4A+Qxc2xrfPURjBtdqf7RNUTdxz8QwIYDhPEzRCaifMZSy9rZbljuxV4fxPBQH+7KQuMlhU1jV5RBHAfG5c8C7VEsUqD7i1VsUxkBGTYSvQ8mXoEb3f10bgOjky1Qb1ic/jME1/cd++u9IeULIUUJfUHRMRMOf0EJg3nwBZ7/ApHIc2CvcuQ5EijUC9+Gn2GWksQolVhLOMPrylcUTTgtCKdpVgdTs0JYUOlfFrhTLHyFrxIeVPz3QXRls5A8XZoqk/J0qetfEtkwla+rflRidMfmnVrD30hCvU4FAvNl2Xov3w8pqPn/P4GiE1YUubMEfiJ79sBhwknhRHJfMhGSODbHZvNaPChy7Kr3z1o+D3R9YywciYRjWqFA9t0dCHD3HeP8hD3++94hIxgKKmhMKpAxjFGdgCUKZrPxED47kZfUmYQEx65f7YdsnMZ42EAbM4QmuFFB0A3R9jMLoGZ0t296OE3yqpkIAPVr8MY7WIFdFSVZHYcM7j9Pz4FN9+bp26cf5bjz9wncp0TupzjupKSyk8sc9/Oc8DOcQObhQ8nbl1H/C+Adyij0mWGEUot5E3OCeQfzPvT3/b9r92tdM/4VZjFeyyxynzUU0PE/3sn+a0iFZ97PC4ADiCRCJkQAGfxRSKzi3apIdfyPdbIxOGkPsv/blIRJUWHhMCFGejZTmE0DxaLnucRUqGakMRx8AwOOcHuvEa/08LJJd/2CYhvej043w5KM948fX3EcZ9n7VZ67PcC3yZ4KnFpbL3ycftj03g+860//bTGVShWItRiAT8r7ywScJv50NFWAvx1rYvbrrYkZ08TUxDxdxsKImmsuj1mam38wd/hwTjOM66yTXdCMzoP43xs0d9EdrCWgLxr3cqIPWaTbj+IuufDg5BOfPkc+4YWd88T5rdRfHf+6Qy55v/i9wfourifiXp4EruLDKIr431Bc28D9ZbYLShI4RLQ7pNpue5fb6APfhC9GqrMWLlnBDy7f/cfto0cricEeLNYhr9AVY0FsuoLoxzNqKgyCjXFsZRtXZgUwX2v0P67o6Blwm2j5s06uZIYLlei4kduV4258ZCyS0pPJWSuZCrnl7OqoEm4dWzt4g2UWdHJJCWjWiBQbgaJKOLCwKzk3EwnDZIGJXho3DDI7O3Fw9WDEKPXalQd8jntMa6Jdq6OdGGEx2BYRJJ4t0zPy5dvf8/hP6nr2lsNzYDeU1yYr9rHbi1Ymc/jMaTtbINXHH8+7GszCPMxVOaZVDClftM6cOZzJWLmDw3vLBD+yFUAozD4Q6FZ7Y6N9laxtdjY2OjTevxsTRU50/9cHaHJ/L59lvyZDLvhL451th154lrbtMPDJ/v8dhxQYaqMGczN+zTgDP/K5+19GSv3ctmbF/NqfidFGxIjazQw35/JwG/qHwRrLSjeGRkYZ7S9g8KVuZLF3mbW8K1eB/NfJy709SnT/B0/Xk5ggKZFEf+ciCJkr+MAL3s99mv4zB69CznnPb9F/47B9D1Uad45eYw8V3UIFX3vbJqpHzakp07XMqeKUab11xy6qz31u63Pwcc6fZ3buUdFpbPFr9qhgpA4yvCEa20Oekmvm/Lz5peOj8/OjO3erbKyZC/Pm8ePm/ILJ/F9/kiAEAHicY2BkYGAA4tBwrovx/DZfGbiZIhjQwP//DAxMkUwOQCYHAxNIBAC9LwYzeJxjYGRgYIpgYACR/4GAKZKBkQEVnAAAdT0F1nicY2BgYGCKGGz4//+Bd8MophYeygAAAUE3bwB4nGNgAAIPhhkMTxh+MZowejEmMJYx9jBuYPzCZMY0gWkX0xdmO+YK5gnMe1h4WOxYZrBsYvnAqsA6iXUZ6w7WU6x3WN+wqbDZsWWxLWJ7wm7GHsRewj6D/QT7N44kjgkcyzj2cPzgdOBM4NzD+YyLh8uFq4TrBDcTtwX3DO5j3J94xHgMeKbw7OJ5xMvH68Xbx/uKT4cvg6+GbwHfLb43/FL8TfwPBDQEvARaBOYJ3BOUEkwQXCS4R/CE4BUhNaEAoRphHmEX4SLhOcI3RMxEWkT+iUqI2okWiB4Q/SSmIBYlliP2RFxK3EW8TnyB+BHxZ+J/JKwk6iQ+SPpJfpNKk9aQfiZTJ/NCNkr2nFyF3Df5JgUWhSSFI4o6ipMUryg1KJ1Q5lJWUw5Snqd8RfmVioRKlso6lWMqz1QlVH1oCwHHom7VAAAAeJxjYGRgYDjBMIWBmwEEmICYCwgZGP6D+QwALNMCfgB4nHWQzUrDQBSFT/onNiCi4E6YlQhC0tZdFy5bunHRQvdpOulfkgmTaaHgU/gEPoWP4Mqn8ClcehrvooidkMt3vzl3MgTAJT7g4bA8+FU9rBrO2P1ynXQl3CDfCjfJ98It8qNwGw94EvZxjRVP8BrnNDd4Ea7hAq/Cdfo34Qb5XbhJ/hRukb+E25jiW9jHnfc82ehRbPLE5G6sF9s0skfmCKfaliuTq27QObJDnWsbOT1Xs70qd4uec4lKrMnUgLs6TY0qrFnr2AVL54p+GCbig9hkmGADjRFiGORIquowpltgixQR7InM/3ZKZ1Hyrx16hS4CdE5kh3R5lY/YacyZn2HPWmLH7/doHdOKr+VMRhrIrObdUrJCUe2taWL6AMtqqkAfIZ/kTz6o7pD9ACG/Z+YAAHicbVUJmxtHEd3n1bXSrtdHbAOJExJCgCTmCkcOCNG1XmelXbFa2U5CgN6ZktSeUffQ09JaHAk5gNwHuUNu7pvcCRAgB2D+FdUzs9jfF/R96nr9uqa6u7q638yOmfRXmPn/v1PYgVnkkEcBRZQwhzIqmMcCdmIRu7Abe7AXZ2Ef9uMAPoAP4kM4G+fgIM7FefgwzscF+AguxEdxET6Gj+MTuBiX4FIcwifxKXwan8FncRk+h8/jC/giLscVuBJX4Uv4Mq7GV3ANqqihjgaaWMJhLOMIrsUKWmhjFWvo4KtYRxcb6OEojuE4rsP1uAFfw434Or6Bb0JgEx58EPoYYAiJEwgQYgQFjQjfgkEMizEm2MJJTPFtfAffxfdwE27G93ELbsVtuB0/wA/xI9yBO3EX7sY9uBf34X48gAfxYzyEh/EIHsVjeBxP4En8BE/haTyDZ/EcnscL+Cl+hp/jF/glfoVf4zf4LX6H3+MP+CP+hBfxEl7GK3gVr+F1vIE38Wf8BX/FW/gb/o5/4G28g3fxHv6Jf+HfOIX/zMxXPU+Pla0PZeiXs05TBYsZbI9DK6OQZqs+D/v+2tiGUtFc1Ri9VRNekKKG3lLzCVrSZksYv5h0elEls86hXLVWeMMlGVKhOhnIvl1ITY18wyZXozAs1kLtBeSXaloHaxGpxW2QTZ0MjIQJ5mpGUt8TMZXrIvTGobDalBiS8oVZ2AZ1F69QF8qjkB3j4Tr1x8rfXR8KWxtvboaUBS46ZlPbfH1IXlDhdmK0cgvfxi3q2/kMr8vB0M5lnV5UrkvjhZTkIYW8zZD8jF+XalBKYS/K85LGfiVpe1GohZ+ra5/n16NIqOmcsyFZcnQ0LTTIddiw67TSoNgzMrJSq5ybreQaF6PUGEehjMnkm8LYYa7pS1tqBpbiQET55kjIMN/kwzDzSbt9kM2TnJfkSJpTWuv3y85kmV4SHm1ytotLYiRD6YiJNtJSzn1QcU3mWmBsySws6TAgQwMZc2+Ra2EkbDWUgyR1u87oJ+nLMzEeFZbFaESmvExhlCat4mAWOaG70mWkuMxhtZnmlvWIckdUX1dcs+3ocOo4u0LTwgqfC0dtCdXhOnD5b0nFhSVVscVxXD07u04jPaFKCrXxyeRaXDAl17iqqyQgnWLxDOzGcm1S45Jr3CEUHOhFubY2VGhz0F4057yOqFXaKnYaSy5f8x0xjrezVuaVeTI8pPv9QodMrFU5NS7E7tMwc19ImayX7wx5g7MdqQr85xCVTiim2WClY2giactNme8YqWyuKyZU6JIw3jDX5YyUumQtpyXOd4fCUKUbCGvJGgqCQlcHSvjFrja2GnsVZxvUF/wWlFIcewUHeIcbYi2KBhx71waNRFX5hvhUhzr09yeE2STpb5jpwOfNxie0SuiaUEFLCMWusQx4fYM9Ca25NpqSV8c1byqOyi5lEr3hXol4JH0e3JsSOj5BXTITcjEOOu5/nzcHpLj0pRXh4RMU+km4rJLLCZZKqDihD/MGqmaS4CNKWQpssqAVwwVjbd8I34h0je0JB4ltnGZvX0atJzVvkmWQSRxXhevEMg2321HpAWbMvtMM73o7a+c6tkuhu7V8863g+9Q/Pd98MhzoQV8rP9lFz7on9ICDR/kcQ8Hzcyw/XcnchhwxF8VUSpC78g6YWCi/uLHFmyNT6EW+4CcmfYzmj5Kx0hNhQ9t4z5md9AE78H6qy+fmF48Jw3sb7Mzs9ityjBfj6rB4vN1yllXYY7Ucs2ZaVmOnoiFrapOVtM0aSqzEhtWzxmrbYJ3usZYOWG9HrKzrrL8tVtWTrN1dVu8V1uxVVuYN1uHDqWbPzPwXJ5e6uwAAAA==";

    var SkeIcons = {
      style: {
        MozOsxFontSmoothing: 'grayscale',
        WebkitFontSmoothing: 'antialiased',
        fontStyle: 'normal',
        fontWeight: 'normal',
        speak: 'none',
        display: 'inline-block',
        transform: 'translate(0, 0)',
        textRendering: 'auto',
        fontSize: 'inherit'
      },
      fontFace: {
        fontFamily: '"SkeIconfont"',
        src: ["url(\"" + SkeIconfontWOFF + "\") format(\"woff\")"].join(', ')
      },
      icons: {
        'AccountChild': "\uEA01",
        'AccountEnk': "\uEA02",
        'AccountMultiple': "\uEA03",
        'Add': "\uEA04",
        'AddOutline': "\uEA05",
        'ArrowBack': "\uEA06",
        'ArrowDown': "\uEA07",
        'ArrowForward': "\uEA08",
        'ArrowUp': "\uEA09",
        'ArrowUpDown': "\uEA0A",
        'AttachFile': "\uEA0B",
        'Avgift': "\uEA0C",
        'AvgiftBedrift': "\uEA0D",
        'Bell': "\uEA0E",
        'Blocked': "\uEA0F",
        'BookOpen': "\uEA10",
        'BookOpenOutline': "\uEA11",
        'Bookmark': "\uEA12",
        'Briefcase': "\uEA13",
        'Calculator': "\uEA14",
        'Calendar': "\uEA15",
        'CalendarClock': "\uEA16",
        'Cancel': "\uEA17",
        'CashRefund': "\uEA18",
        'ChatBubbleOutline': "\uEA19",
        'Chatbot': "\uEA1A",
        'Check': "\uEA1B",
        'ChevronDown': "\uEA1C",
        'ChevronLeft': "\uEA1D",
        'ChevronRight': "\uEA1E",
        'ChevronUp': "\uEA1F",
        'CircleDown': "\uEA20",
        'CircleFilled': "\uEA21",
        'CircleRing': "\uEA22",
        'CircleUp': "\uEA23",
        'Cloud': "\uEA24",
        'CloudUpload': "\uEA25",
        'Code': "\uEA26",
        'Company': "\uEA27",
        'Completed': "\uEA28",
        'Copy': "\uEA29",
        'Delete': "\uEA2A",
        'Deploy': "\uEA2B",
        'Description': "\uEA2C",
        'Down': "\uEA2D",
        'Download': "\uEA2E",
        'Dupliser': "\uEA2F",
        'Earth': "\uEA30",
        'Edit': "\uEA31",
        'Ekteskap': "\uEA32",
        'Email': "\uEA33",
        'Error': "\uEA34",
        'ErrorOutline': "\uEA35",
        'ExcelFile': "\uEA36",
        'EyeOff': "\uEA37",
        'EyeOutline': "\uEA38",
        'Facebook': "\uEA39",
        'Familie': "\uEA3A",
        'Favorite': "\uEA3B",
        'File': "\uEA3C",
        'FileOutline': "\uEA3D",
        'Filter': "\uEA3E",
        'Folkeregister': "\uEA3F",
        'FormatAlignLeft': "\uEA40",
        'FormatAlignRight': "\uEA41",
        'Forum': "\uEA42",
        'Hammer': "\uEA43",
        'HelpFilled': "\uEA44",
        'HelpOutline': "\uEA45",
        'HelpSimple': "\uEA46",
        'History': "\uEA47",
        'Home': "\uEA48",
        'Info': "\uEA49",
        'InfoOutline': "\uEA4A",
        'InfoSimple': "\uEA4B",
        'Key': "\uEA4C",
        'Kroner': "\uEA4D",
        'LanPending': "\uEA4E",
        'Linkedin': "\uEA4F",
        'ListAdd': "\uEA50",
        'ListRemove': "\uEA51",
        'ListReorder': "\uEA52",
        'Lock': "\uEA53",
        'LockOpen': "\uEA54",
        'LockOutline': "\uEA55",
        'LockOutlineOpen': "\uEA56",
        'Menu': "\uEA57",
        'MenuDown': "\uEA58",
        'MenuUp': "\uEA59",
        'More': "\uEA5A",
        'MoveUp': "\uEA5B",
        'OpenInNew': "\uEA5C",
        'PDFFile': "\uEA5D",
        'PauseOutline': "\uEA5E",
        'Pencil-off': "\uEA5F",
        'Person': "\uEA60",
        'PersonMore': "\uEA61",
        'PersonMoreOutline': "\uEA62",
        'PersonOutline': "\uEA63",
        'Phone': "\uEA64",
        'Pin': "\uEA65",
        'Pinoff': "\uEA66",
        'PlayOutline': "\uEA67",
        'PreviewFile': "\uEA68",
        'Print': "\uEA69",
        'Save': "\uEA6A",
        'Search': "\uEA6B",
        'Send': "\uEA6C",
        'Settings': "\uEA6D",
        'Share': "\uEA6E",
        'Skattetrekk': "\uEA6F",
        'Soknad': "\uEA70",
        'SortAsc': "\uEA71",
        'SortDefault': "\uEA72",
        'SortDesc': "\uEA73",
        'SortDown': "\uEA74",
        'SortUp': "\uEA75",
        'TaOppgave': "\uEA76",
        'TemaAndreForhold': "\uEA77",
        'TemaArbeidTrygdPensjon': "\uEA78",
        'TemaBankLaanForsikring': "\uEA79",
        'TemaBoligEiendeler': "\uEA7A",
        'TemaChatbot': "\uEA7B",
        'TemaDriftsmidler': "\uEA7C",
        'TemaDrosjeServering': "\uEA7D",
        'TemaEiendelerEgenkapitalGjeld': "\uEA7E",
        'TemaFamilie': "\uEA7F",
        'TemaFinans': "\uEA80",
        'TemaGaveArv': "\uEA81",
        'TemaInntekt': "\uEA82",
        'TemaKredittfradrag': "\uEA83",
        'TemaMvaFastsetting': "\uEA84",
        'TemaMvaRegistreringer': "\uEA85",
        'TemaNaringsinntekt': "\uEA86",
        'TemaPersoninntekt': "\uEA87",
        'TemaPersonligeForhold': "\uEA88",
        'TemaSelskapDeltakerfastsetting': "\uEA89",
        'TemaSkogfond': "\uEA8A",
        'TemaUtgift': "\uEA8B",
        'TemaVarelagerFordringer': "\uEA8C",
        'Timelapse': "\uEA8D",
        'Timeline': "\uEA8E",
        'Timersand': "\uEA8F",
        'Twitter': "\uEA90",
        'Up': "\uEA91",
        'Update': "\uEA92",
        'Upload': "\uEA93",
        'VerticalDots': "\uEA94",
        'VerticalDotsCircle': "\uEA95",
        'VerticalDotsCircleSolid': "\uEA96",
        'Warning': "\uEA97",
        'WarningOutline': "\uEA98",
        'WordFile': "\uEA99",
        'XMLFile': "\uEA9A"
      }
    };

    // A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -
    // this cache is local to the module closure inside this bundle
    var packagesCache = {};
    // Cache access to window to avoid IE11 memory leak.
    var _win = undefined;
    try {
        _win = window;
    }
    catch (e) {
        /* no-op */
    }
    function setVersion(packageName, packageVersion) {
        if (typeof _win !== 'undefined') {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var packages = (_win.__packages__ = _win.__packages__ || {});
            // We allow either the global packages or local packages caches to invalidate so testing can
            // just clear the global to set this state
            if (!packages[packageName] || !packagesCache[packageName]) {
                packagesCache[packageName] = packageVersion;
                var versions = (packages[packageName] = packages[packageName] || []);
                versions.push(packageVersion);
            }
        }
    }

    setVersion('@fluentui/set-version', '6.0.0');

    var InjectionMode = {
        /**
         * Avoids style injection, use getRules() to read the styles.
         */
        none: 0,
        /**
         * Inserts rules using the insertRule api.
         */
        insertNode: 1,
        /**
         * Appends rules using appendChild.
         */
        appendChild: 2,
    };
    var STYLESHEET_SETTING = '__stylesheet__';
    /**
     * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node
     * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.
     */
    var REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);
    var _global$1 = {};
    // Grab window.
    try {
        _global$1 = window || {};
    }
    catch (_a) {
        /* leave as blank object */
    }
    var _stylesheet;
    /**
     * Represents the state of styles registered in the page. Abstracts
     * the surface for adding styles to the stylesheet, exposes helpers
     * for reading the styles registered in server rendered scenarios.
     *
     * @public
     */
    var Stylesheet = /** @class */ (function () {
        function Stylesheet(config, serializedStylesheet) {
            var _a, _b, _c, _d, _e, _f;
            this._rules = [];
            this._preservedRules = [];
            this._counter = 0;
            this._keyToClassName = {};
            this._onInsertRuleCallbacks = [];
            this._onResetCallbacks = [];
            this._classNameToArgs = {};
            this._config = tslib.__assign({ 
                // If there is no document we won't have an element to inject into.
                injectionMode: typeof document === 'undefined' ? InjectionMode.none : InjectionMode.insertNode, defaultPrefix: 'css', namespace: undefined, cspSettings: undefined }, config);
            this._classNameToArgs = (_a = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.classNameToArgs) !== null && _a !== void 0 ? _a : this._classNameToArgs;
            this._counter = (_b = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.counter) !== null && _b !== void 0 ? _b : this._counter;
            this._keyToClassName = (_d = (_c = this._config.classNameCache) !== null && _c !== void 0 ? _c : serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.keyToClassName) !== null && _d !== void 0 ? _d : this._keyToClassName;
            this._preservedRules = (_e = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.preservedRules) !== null && _e !== void 0 ? _e : this._preservedRules;
            this._rules = (_f = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.rules) !== null && _f !== void 0 ? _f : this._rules;
        }
        /**
         * Gets the singleton instance.
         */
        Stylesheet.getInstance = function () {
            _stylesheet = _global$1[STYLESHEET_SETTING];
            if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {
                var fabricConfig = (_global$1 === null || _global$1 === void 0 ? void 0 : _global$1.FabricConfig) || {};
                var stylesheet = new Stylesheet(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);
                _stylesheet = stylesheet;
                _global$1[STYLESHEET_SETTING] = stylesheet;
            }
            return _stylesheet;
        };
        /**
         * Serializes the Stylesheet instance into a format which allows rehydration on creation.
         * @returns string representation of `ISerializedStylesheet` interface.
         */
        Stylesheet.prototype.serialize = function () {
            return JSON.stringify({
                classNameToArgs: this._classNameToArgs,
                counter: this._counter,
                keyToClassName: this._keyToClassName,
                preservedRules: this._preservedRules,
                rules: this._rules,
            });
        };
        /**
         * Configures the stylesheet.
         */
        Stylesheet.prototype.setConfig = function (config) {
            this._config = tslib.__assign(tslib.__assign({}, this._config), config);
        };
        /**
         * Configures a reset callback.
         *
         * @param callback - A callback which will be called when the Stylesheet is reset.
         * @returns function which when called un-registers provided callback.
         */
        Stylesheet.prototype.onReset = function (callback) {
            var _this = this;
            this._onResetCallbacks.push(callback);
            return function () {
                _this._onResetCallbacks = _this._onResetCallbacks.filter(function (cb) { return cb !== callback; });
            };
        };
        /**
         * Configures an insert rule callback.
         *
         * @param callback - A callback which will be called when a rule is inserted.
         * @returns function which when called un-registers provided callback.
         */
        Stylesheet.prototype.onInsertRule = function (callback) {
            var _this = this;
            this._onInsertRuleCallbacks.push(callback);
            return function () {
                _this._onInsertRuleCallbacks = _this._onInsertRuleCallbacks.filter(function (cb) { return cb !== callback; });
            };
        };
        /**
         * Generates a unique classname.
         *
         * @param displayName - Optional value to use as a prefix.
         */
        Stylesheet.prototype.getClassName = function (displayName) {
            var namespace = this._config.namespace;
            var prefix = displayName || this._config.defaultPrefix;
            return "" + (namespace ? namespace + '-' : '') + prefix + "-" + this._counter++;
        };
        /**
         * Used internally to cache information about a class which was
         * registered with the stylesheet.
         */
        Stylesheet.prototype.cacheClassName = function (className, key, args, rules) {
            this._keyToClassName[key] = className;
            this._classNameToArgs[className] = {
                args: args,
                rules: rules,
            };
        };
        /**
         * Gets the appropriate classname given a key which was previously
         * registered using cacheClassName.
         */
        Stylesheet.prototype.classNameFromKey = function (key) {
            return this._keyToClassName[key];
        };
        /**
         * Gets all classnames cache with the stylesheet.
         */
        Stylesheet.prototype.getClassNameCache = function () {
            return this._keyToClassName;
        };
        /**
         * Gets the arguments associated with a given classname which was
         * previously registered using cacheClassName.
         */
        Stylesheet.prototype.argsFromClassName = function (className) {
            var entry = this._classNameToArgs[className];
            return entry && entry.args;
        };
        /**
         * Gets the rules associated with a given classname which was
         * previously registered using cacheClassName.
         */
        Stylesheet.prototype.insertedRulesFromClassName = function (className) {
            var entry = this._classNameToArgs[className];
            return entry && entry.rules;
        };
        /**
         * Inserts a css rule into the stylesheet.
         * @param preserve - Preserves the rule beyond a reset boundary.
         */
        Stylesheet.prototype.insertRule = function (rule, preserve) {
            var injectionMode = this._config.injectionMode;
            var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;
            if (preserve) {
                this._preservedRules.push(rule);
            }
            if (element) {
                switch (injectionMode) {
                    case InjectionMode.insertNode:
                        var sheet = element.sheet;
                        try {
                            sheet.insertRule(rule, sheet.cssRules.length);
                        }
                        catch (e) {
                            // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)
                            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter
                            // which could be slower and bulkier.
                        }
                        break;
                    case InjectionMode.appendChild:
                        element.appendChild(document.createTextNode(rule));
                        break;
                }
            }
            else {
                this._rules.push(rule);
            }
            // eslint-disable-next-line deprecation/deprecation
            if (this._config.onInsertRule) {
                // eslint-disable-next-line deprecation/deprecation
                this._config.onInsertRule(rule);
            }
            this._onInsertRuleCallbacks.forEach(function (callback) { return callback(); });
        };
        /**
         * Gets all rules registered with the stylesheet; only valid when
         * using InsertionMode.none.
         */
        Stylesheet.prototype.getRules = function (includePreservedRules) {
            return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('');
        };
        /**
         * Resets the internal state of the stylesheet. Only used in server
         * rendered scenarios where we're using InsertionMode.none.
         */
        Stylesheet.prototype.reset = function () {
            this._rules = [];
            this._counter = 0;
            this._classNameToArgs = {};
            this._keyToClassName = {};
            this._onResetCallbacks.forEach(function (callback) { return callback(); });
        };
        // Forces the regeneration of incoming styles without totally resetting the stylesheet.
        Stylesheet.prototype.resetKeys = function () {
            this._keyToClassName = {};
        };
        Stylesheet.prototype._getStyleElement = function () {
            var _this = this;
            if (!this._styleElement && typeof document !== 'undefined') {
                this._styleElement = this._createStyleElement();
                if (!REUSE_STYLE_NODE) {
                    // Reset the style element on the next frame.
                    window.requestAnimationFrame(function () {
                        _this._styleElement = undefined;
                    });
                }
            }
            return this._styleElement;
        };
        Stylesheet.prototype._createStyleElement = function () {
            var head = document.head;
            var styleElement = document.createElement('style');
            var nodeToInsertBefore = null;
            styleElement.setAttribute('data-merge-styles', 'true');
            var cspSettings = this._config.cspSettings;
            if (cspSettings) {
                if (cspSettings.nonce) {
                    styleElement.setAttribute('nonce', cspSettings.nonce);
                }
            }
            if (this._lastStyleElement) {
                // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.
                // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax
                nodeToInsertBefore = this._lastStyleElement.nextElementSibling;
            }
            else {
                var placeholderStyleTag = this._findPlaceholderStyleTag();
                if (placeholderStyleTag) {
                    nodeToInsertBefore = placeholderStyleTag.nextElementSibling;
                }
                else {
                    nodeToInsertBefore = head.childNodes[0];
                }
            }
            head.insertBefore(styleElement, head.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);
            this._lastStyleElement = styleElement;
            return styleElement;
        };
        Stylesheet.prototype._findPlaceholderStyleTag = function () {
            var head = document.head;
            if (head) {
                return head.querySelector('style[data-merge-styles]');
            }
            return null;
        };
        return Stylesheet;
    }());

    /**
     * Separates the classes and style objects. Any classes that are pre-registered
     * args are auto expanded into objects.
     */
    function extractStyleParts() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var classes = [];
        var objects = [];
        var stylesheet = Stylesheet.getInstance();
        function _processArgs(argsList) {
            for (var _i = 0, argsList_1 = argsList; _i < argsList_1.length; _i++) {
                var arg = argsList_1[_i];
                if (arg) {
                    if (typeof arg === 'string') {
                        if (arg.indexOf(' ') >= 0) {
                            _processArgs(arg.split(' '));
                        }
                        else {
                            var translatedArgs = stylesheet.argsFromClassName(arg);
                            if (translatedArgs) {
                                _processArgs(translatedArgs);
                            }
                            else {
                                // Avoid adding the same class twice.
                                if (classes.indexOf(arg) === -1) {
                                    classes.push(arg);
                                }
                            }
                        }
                    }
                    else if (Array.isArray(arg)) {
                        _processArgs(arg);
                    }
                    else if (typeof arg === 'object') {
                        objects.push(arg);
                    }
                }
            }
        }
        _processArgs(args);
        return {
            classes: classes,
            objects: objects,
        };
    }

    /**
     * Sets the current RTL value.
     */
    function setRTL$1(isRTL) {
        if (_rtl !== isRTL) {
            _rtl = isRTL;
        }
    }
    /**
     * Gets the current RTL value.
     */
    function getRTL$1() {
        if (_rtl === undefined) {
            _rtl =
                typeof document !== 'undefined' &&
                    !!document.documentElement &&
                    document.documentElement.getAttribute('dir') === 'rtl';
        }
        return _rtl;
    }
    // This has been split into 2 lines because it was working in Fabric due to the code being transpiled to es5, so this
    // was converted to var while not working in Fluent that uses babel to transpile the code to be es6-like. Splitting the
    // logic into two lines, however, allows it to work in both scenarios.
    var _rtl;
    _rtl = getRTL$1();
    function getStyleOptions() {
        return {
            rtl: getRTL$1(),
        };
    }

    var rules = {};
    function kebabRules(rulePairs, index) {
        var rule = rulePairs[index];
        if (rule.charAt(0) !== '-') {
            rulePairs[index] = rules[rule] = rules[rule] || rule.replace(/([A-Z])/g, '-$1').toLowerCase();
        }
    }

    var _vendorSettings;
    function getVendorSettings() {
        var _a;
        if (!_vendorSettings) {
            var doc = typeof document !== 'undefined' ? document : undefined;
            var nav = typeof navigator !== 'undefined' ? navigator : undefined;
            var userAgent = (_a = nav === null || nav === void 0 ? void 0 : nav.userAgent) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (!doc) {
                _vendorSettings = {
                    isWebkit: true,
                    isMoz: true,
                    isOpera: true,
                    isMs: true,
                };
            }
            else {
                _vendorSettings = {
                    isWebkit: !!(doc && 'WebkitAppearance' in doc.documentElement.style),
                    isMoz: !!(userAgent && userAgent.indexOf('firefox') > -1),
                    isOpera: !!(userAgent && userAgent.indexOf('opera') > -1),
                    isMs: !!(nav && (/rv:11.0/i.test(nav.userAgent) || /Edge\/\d./i.test(navigator.userAgent))),
                };
            }
        }
        return _vendorSettings;
    }

    var autoPrefixNames = {
        'user-select': 1,
    };
    function prefixRules(rulePairs, index) {
        var vendorSettings = getVendorSettings();
        var name = rulePairs[index];
        if (autoPrefixNames[name]) {
            var value = rulePairs[index + 1];
            if (autoPrefixNames[name]) {
                if (vendorSettings.isWebkit) {
                    rulePairs.push('-webkit-' + name, value);
                }
                if (vendorSettings.isMoz) {
                    rulePairs.push('-moz-' + name, value);
                }
                if (vendorSettings.isMs) {
                    rulePairs.push('-ms-' + name, value);
                }
                if (vendorSettings.isOpera) {
                    rulePairs.push('-o-' + name, value);
                }
            }
        }
    }

    var NON_PIXEL_NUMBER_PROPS = [
        'column-count',
        'font-weight',
        'flex',
        'flex-grow',
        'flex-shrink',
        'fill-opacity',
        'opacity',
        'order',
        'z-index',
        'zoom',
    ];
    function provideUnits(rulePairs, index) {
        var name = rulePairs[index];
        var value = rulePairs[index + 1];
        if (typeof value === 'number') {
            var isNonPixelProp = NON_PIXEL_NUMBER_PROPS.indexOf(name) > -1;
            var isVariableOrPrefixed = name.indexOf('--') > -1;
            var unit = isNonPixelProp || isVariableOrPrefixed ? '' : 'px';
            rulePairs[index + 1] = "" + value + unit;
        }
    }

    var _a$8;
    var LEFT = 'left';
    var RIGHT = 'right';
    var NO_FLIP = '@noflip';
    var NAME_REPLACEMENTS = (_a$8 = {},
        _a$8[LEFT] = RIGHT,
        _a$8[RIGHT] = LEFT,
        _a$8);
    var VALUE_REPLACEMENTS = {
        'w-resize': 'e-resize',
        'sw-resize': 'se-resize',
        'nw-resize': 'ne-resize',
    };
    /**
     * RTLifies the rulePair in the array at the current index. This mutates the array for performance
     * reasons.
     */
    function rtlifyRules(options, rulePairs, index) {
        if (options.rtl) {
            var name_1 = rulePairs[index];
            if (!name_1) {
                return;
            }
            var value = rulePairs[index + 1];
            if (typeof value === 'string' && value.indexOf(NO_FLIP) >= 0) {
                rulePairs[index + 1] = value.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, '');
            }
            else if (name_1.indexOf(LEFT) >= 0) {
                rulePairs[index] = name_1.replace(LEFT, RIGHT);
            }
            else if (name_1.indexOf(RIGHT) >= 0) {
                rulePairs[index] = name_1.replace(RIGHT, LEFT);
            }
            else if (String(value).indexOf(LEFT) >= 0) {
                rulePairs[index + 1] = value.replace(LEFT, RIGHT);
            }
            else if (String(value).indexOf(RIGHT) >= 0) {
                rulePairs[index + 1] = value.replace(RIGHT, LEFT);
            }
            else if (NAME_REPLACEMENTS[name_1]) {
                rulePairs[index] = NAME_REPLACEMENTS[name_1];
            }
            else if (VALUE_REPLACEMENTS[value]) {
                rulePairs[index + 1] = VALUE_REPLACEMENTS[value];
            }
            else {
                switch (name_1) {
                    case 'margin':
                    case 'padding':
                        rulePairs[index + 1] = flipQuad(value);
                        break;
                    case 'box-shadow':
                        rulePairs[index + 1] = negateNum(value, 0);
                        break;
                }
            }
        }
    }
    /**
     * Given a string value in a space delimited format (e.g. "1 2 3 4"), negates a particular value.
     */
    function negateNum(value, partIndex) {
        var parts = value.split(' ');
        var numberVal = parseInt(parts[partIndex], 10);
        parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));
        return parts.join(' ');
    }
    /**
     * Given a string quad, flips the left and right values.
     */
    function flipQuad(value) {
        if (typeof value === 'string') {
            var parts = value.split(' ');
            if (parts.length === 4) {
                return parts[0] + " " + parts[3] + " " + parts[2] + " " + parts[1];
            }
        }
        return value;
    }

    /**
     * Split a string into tokens separated by whitespace, except all text within parentheses
     * is treated as a single token (whitespace is ignored within parentheses).
     *
     * Unlike String.split(' '), multiple consecutive space characters are collapsed and
     * removed from the returned array (including leading and trailing spaces).
     *
     * For example:
     * `tokenizeWithParentheses("3px calc(var(--x) / 2) 9px    0 ")`
     *   => `["3px", "calc(var(--x) / 2)", "9px", "0"]`
     *
     * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.
     */
    function tokenizeWithParentheses(value) {
        var parts = [];
        var partStart = 0;
        var parens = 0;
        for (var i = 0; i < value.length; i++) {
            switch (value[i]) {
                case '(':
                    parens++;
                    break;
                case ')':
                    if (parens) {
                        parens--;
                    }
                    break;
                case '\t':
                case ' ':
                    if (!parens) {
                        // Add the new part if it's not an empty string
                        if (i > partStart) {
                            parts.push(value.substring(partStart, i));
                        }
                        partStart = i + 1;
                    }
                    break;
            }
        }
        // Add the last part
        if (partStart < value.length) {
            parts.push(value.substring(partStart));
        }
        return parts;
    }

    var DISPLAY_NAME = 'displayName';
    function getDisplayName(rules) {
        var rootStyle = rules && rules['&'];
        return rootStyle ? rootStyle.displayName : undefined;
    }
    var globalSelectorRegExp = /\:global\((.+?)\)/g;
    /**
     * Finds comma separated selectors in a :global() e.g. ":global(.class1, .class2, .class3)"
     * and wraps them each in their own global ":global(.class1), :global(.class2), :global(.class3)"
     *
     * @param selectorWithGlobals The selector to process
     * @returns The updated selector
     */
    function expandCommaSeparatedGlobals(selectorWithGlobals) {
        // We the selector does not have a :global() we can shortcut
        if (!globalSelectorRegExp.test(selectorWithGlobals)) {
            return selectorWithGlobals;
        }
        var replacementInfo = [];
        var findGlobal = /\:global\((.+?)\)/g;
        var match = null;
        // Create a result list for global selectors so we can replace them.
        while ((match = findGlobal.exec(selectorWithGlobals))) {
            // Only if the found selector is a comma separated list we'll process it.
            if (match[1].indexOf(',') > -1) {
                replacementInfo.push([
                    match.index,
                    match.index + match[0].length,
                    // Wrap each of the found selectors in :global()
                    match[1]
                        .split(',')
                        .map(function (v) { return ":global(" + v.trim() + ")"; })
                        .join(', '),
                ]);
            }
        }
        // Replace the found selectors with their wrapped variants in reverse order
        return replacementInfo
            .reverse()
            .reduce(function (selector, _a) {
            var matchIndex = _a[0], matchEndIndex = _a[1], replacement = _a[2];
            var prefix = selector.slice(0, matchIndex);
            var suffix = selector.slice(matchEndIndex);
            return prefix + replacement + suffix;
        }, selectorWithGlobals);
    }
    function expandSelector(newSelector, currentSelector) {
        if (newSelector.indexOf(':global(') >= 0) {
            return newSelector.replace(globalSelectorRegExp, '$1');
        }
        else if (newSelector.indexOf(':') === 0) {
            return currentSelector + newSelector;
        }
        else if (newSelector.indexOf('&') < 0) {
            return currentSelector + ' ' + newSelector;
        }
        return newSelector;
    }
    function extractSelector(currentSelector, rules, selector, value) {
        if (rules === void 0) { rules = { __order: [] }; }
        if (selector.indexOf('@') === 0) {
            selector = selector + '{' + currentSelector;
            extractRules([value], rules, selector);
        }
        else if (selector.indexOf(',') > -1) {
            expandCommaSeparatedGlobals(selector)
                .split(',')
                .map(function (s) { return s.trim(); })
                .forEach(function (separatedSelector) {
                return extractRules([value], rules, expandSelector(separatedSelector, currentSelector));
            });
        }
        else {
            extractRules([value], rules, expandSelector(selector, currentSelector));
        }
    }
    function extractRules(args, rules, currentSelector) {
        if (rules === void 0) { rules = { __order: [] }; }
        if (currentSelector === void 0) { currentSelector = '&'; }
        var stylesheet = Stylesheet.getInstance();
        var currentRules = rules[currentSelector];
        if (!currentRules) {
            currentRules = {};
            rules[currentSelector] = currentRules;
            rules.__order.push(currentSelector);
        }
        for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
            var arg = args_1[_i];
            // If the arg is a string, we need to look up the class map and merge.
            if (typeof arg === 'string') {
                var expandedRules = stylesheet.argsFromClassName(arg);
                if (expandedRules) {
                    extractRules(expandedRules, rules, currentSelector);
                }
                // Else if the arg is an array, we need to recurse in.
            }
            else if (Array.isArray(arg)) {
                extractRules(arg, rules, currentSelector);
            }
            else {
                for (var prop in arg) {
                    if (arg.hasOwnProperty(prop)) {
                        var propValue = arg[prop];
                        if (prop === 'selectors') {
                            // every child is a selector.
                            var selectors = arg.selectors;
                            for (var newSelector in selectors) {
                                if (selectors.hasOwnProperty(newSelector)) {
                                    extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);
                                }
                            }
                        }
                        else if (typeof propValue === 'object') {
                            // prop is a selector.
                            if (propValue !== null) {
                                extractSelector(currentSelector, rules, prop, propValue);
                            }
                        }
                        else {
                            if (propValue !== undefined) {
                                // Else, add the rule to the currentSelector.
                                if (prop === 'margin' || prop === 'padding') {
                                    expandQuads(currentRules, prop, propValue);
                                }
                                else {
                                    currentRules[prop] = propValue;
                                }
                            }
                        }
                    }
                }
            }
        }
        return rules;
    }
    function expandQuads(currentRules, name, value) {
        var parts = typeof value === 'string' ? tokenizeWithParentheses(value) : [value];
        if (parts.length === 0) {
            parts.push(value);
        }
        if (parts[parts.length - 1] === '!important') {
            // Remove !important from parts, and append it to each part individually
            parts = parts.slice(0, -1).map(function (p) { return p + ' !important'; });
        }
        currentRules[name + 'Top'] = parts[0];
        currentRules[name + 'Right'] = parts[1] || parts[0];
        currentRules[name + 'Bottom'] = parts[2] || parts[0];
        currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];
    }
    function getKeyForRules(options, rules) {
        var serialized = [options.rtl ? 'rtl' : 'ltr'];
        var hasProps = false;
        for (var _i = 0, _a = rules.__order; _i < _a.length; _i++) {
            var selector = _a[_i];
            serialized.push(selector);
            var rulesForSelector = rules[selector];
            for (var propName in rulesForSelector) {
                if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {
                    hasProps = true;
                    serialized.push(propName, rulesForSelector[propName]);
                }
            }
        }
        return hasProps ? serialized.join('') : undefined;
    }
    function repeatString(target, count) {
        if (count <= 0) {
            return '';
        }
        if (count === 1) {
            return target;
        }
        return target + repeatString(target, count - 1);
    }
    function serializeRuleEntries(options, ruleEntries) {
        if (!ruleEntries) {
            return '';
        }
        var allEntries = [];
        for (var entry in ruleEntries) {
            if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {
                allEntries.push(entry, ruleEntries[entry]);
            }
        }
        // Apply transforms.
        for (var i = 0; i < allEntries.length; i += 2) {
            kebabRules(allEntries, i);
            provideUnits(allEntries, i);
            rtlifyRules(options, allEntries, i);
            prefixRules(allEntries, i);
        }
        // Apply punctuation.
        for (var i = 1; i < allEntries.length; i += 4) {
            allEntries.splice(i, 1, ':', allEntries[i], ';');
        }
        return allEntries.join('');
    }
    function styleToRegistration(options) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var rules = extractRules(args);
        var key = getKeyForRules(options, rules);
        if (key) {
            var stylesheet = Stylesheet.getInstance();
            var registration = {
                className: stylesheet.classNameFromKey(key),
                key: key,
                args: args,
            };
            if (!registration.className) {
                registration.className = stylesheet.getClassName(getDisplayName(rules));
                var rulesToInsert = [];
                for (var _a = 0, _b = rules.__order; _a < _b.length; _a++) {
                    var selector = _b[_a];
                    rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));
                }
                registration.rulesToInsert = rulesToInsert;
            }
            return registration;
        }
        return undefined;
    }
    /**
     * Insert style to stylesheet.
     * @param registration Style registration.
     * @param specificityMultiplier Number of times classname selector is repeated in the css rule.
     * This is to increase css specificity in case it's needed. Default to 1.
     */
    function applyRegistration(registration, specificityMultiplier) {
        if (specificityMultiplier === void 0) { specificityMultiplier = 1; }
        var stylesheet = Stylesheet.getInstance();
        var className = registration.className, key = registration.key, args = registration.args, rulesToInsert = registration.rulesToInsert;
        if (rulesToInsert) {
            // rulesToInsert is an ordered array of selector/rule pairs.
            for (var i = 0; i < rulesToInsert.length; i += 2) {
                var rules = rulesToInsert[i + 1];
                if (rules) {
                    var selector = rulesToInsert[i];
                    selector = selector.replace(/&/g, repeatString("." + registration.className, specificityMultiplier));
                    // Insert. Note if a media query, we must close the query with a final bracket.
                    var processedRule = selector + "{" + rules + "}" + (selector.indexOf('@') === 0 ? '}' : '');
                    stylesheet.insertRule(processedRule);
                }
            }
            stylesheet.cacheClassName(className, key, args, rulesToInsert);
        }
    }
    function styleToClassName(options) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var registration = styleToRegistration.apply(void 0, tslib.__spreadArray([options], args));
        if (registration) {
            applyRegistration(registration, options.specificityMultiplier);
            return registration.className;
        }
        return '';
    }

    /**
     * Concatenation helper, which can merge class names together. Skips over falsey values.
     *
     * @public
     */
    function mergeStyles() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return mergeCss(args, getStyleOptions());
    }
    /**
     * Concatenation helper, which can merge class names together. Skips over falsey values.
     * Accepts a set of options that will be used when calculating styles.
     *
     * @public
     */
    function mergeCss(args, options) {
        var styleArgs = args instanceof Array ? args : [args];
        var _a = extractStyleParts(styleArgs), classes = _a.classes, objects = _a.objects;
        if (objects.length) {
            classes.push(styleToClassName(options || {}, objects));
        }
        return classes.join(' ');
    }

    /**
     * Combine a set of styles together (but does not register css classes).
     * @param styleSets - One or more stylesets to be merged (each param can also be falsy).
     */
    function concatStyleSets() {
        var styleSets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            styleSets[_i] = arguments[_i];
        }
        if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {
            return styleSets[0];
        }
        var mergedSet = {};
        // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.
        var workingSubcomponentStyles = {};
        for (var _a = 0, styleSets_1 = styleSets; _a < styleSets_1.length; _a++) {
            var currentSet = styleSets_1[_a];
            if (currentSet) {
                for (var prop in currentSet) {
                    if (currentSet.hasOwnProperty(prop)) {
                        if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {
                            // subcomponent styles - style functions or objects
                            var currentComponentStyles = currentSet.subComponentStyles;
                            for (var subCompProp in currentComponentStyles) {
                                if (currentComponentStyles.hasOwnProperty(subCompProp)) {
                                    if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                                        workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);
                                    }
                                    else {
                                        workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];
                                    }
                                }
                            }
                            continue;
                        }
                        // the as any casts below is a workaround for ts 2.8.
                        // todo: remove cast to any in ts 2.9.
                        var mergedValue = mergedSet[prop];
                        var currentValue = currentSet[prop];
                        if (mergedValue === undefined) {
                            mergedSet[prop] = currentValue;
                        }
                        else {
                            mergedSet[prop] = tslib.__spreadArray(tslib.__spreadArray([], (Array.isArray(mergedValue) ? mergedValue : [mergedValue])), (Array.isArray(currentValue) ? currentValue : [currentValue]));
                        }
                    }
                }
            }
        }
        if (Object.keys(workingSubcomponentStyles).length > 0) {
            mergedSet.subComponentStyles = {};
            var mergedSubStyles = mergedSet.subComponentStyles;
            var _loop_1 = function (subCompProp) {
                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                    var workingSet_1 = workingSubcomponentStyles[subCompProp];
                    mergedSubStyles[subCompProp] = function (styleProps) {
                        return concatStyleSets.apply(void 0, workingSet_1.map(function (styleFunctionOrObject) {
                            return typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;
                        }));
                    };
                }
            };
            // now we process the subcomponent styles if there are any
            for (var subCompProp in workingSubcomponentStyles) {
                _loop_1(subCompProp);
            }
        }
        return mergedSet;
    }

    /**
     * Takes in one or more style set objects, each consisting of a set of areas,
     * each which will produce a class name. Using this is analogous to calling
     * `mergeStyles` for each property in the object, but ensures we maintain the
     * set ordering when multiple style sets are merged.
     *
     * @param styleSets - One or more style sets to be merged.
     */
    function mergeStyleSets() {
        var styleSets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            styleSets[_i] = arguments[_i];
        }
        return mergeCssSets(styleSets, getStyleOptions());
    }
    /**
     * Takes in one or more style set objects, each1consisting of a set of areas,
     * each which will produce a class name. Using this is analogous to calling
     * `mergeCss` for each property in the object, but ensures the
     * set ordering when multiple style sets are merged.
     *
     * @param styleSets - One or more style sets to be merged.
     * @param options - (optional) Options to use when creating rules.
     */
    function mergeCssSets(styleSets, options) {
        var classNameSet = { subComponentStyles: {} };
        var styleSet = styleSets[0];
        if (!styleSet && styleSets.length <= 1) {
            return { subComponentStyles: {} };
        }
        var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);
        var registrations = [];
        for (var styleSetArea in concatenatedStyleSet) {
            if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {
                if (styleSetArea === 'subComponentStyles') {
                    classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};
                    continue;
                }
                var styles = concatenatedStyleSet[styleSetArea];
                var _a = extractStyleParts(styles), classes = _a.classes, objects = _a.objects;
                if (objects === null || objects === void 0 ? void 0 : objects.length) {
                    var registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);
                    if (registration) {
                        registrations.push(registration);
                        classNameSet[styleSetArea] = classes.concat([registration.className]).join(' ');
                    }
                }
                else {
                    classNameSet[styleSetArea] = classes.join(' ');
                }
            }
        }
        for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {
            var registration = registrations_1[_i];
            if (registration) {
                applyRegistration(registration, options === null || options === void 0 ? void 0 : options.specificityMultiplier);
            }
        }
        return classNameSet;
    }

    /**
     * Concatenates style sets into one, but resolves functional sets using the given props.
     * @param styleProps - Props used to resolve functional sets.
     * @param allStyles - Style sets, which can be functions or objects.
     */
    function concatStyleSetsWithProps(styleProps) {
        var allStyles = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            allStyles[_i - 1] = arguments[_i];
        }
        var result = [];
        for (var _a = 0, allStyles_1 = allStyles; _a < allStyles_1.length; _a++) {
            var styles = allStyles_1[_a];
            if (styles) {
                result.push(typeof styles === 'function' ? styles(styleProps) : styles);
            }
        }
        if (result.length === 1) {
            return result[0];
        }
        else if (result.length) {
            // cliffkoh: I cannot figure out how to avoid the cast to any here.
            // It is something to do with the use of Omit in IStyleSet.
            // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on
            // the official version).
            return concatStyleSets.apply(void 0, result);
        }
        return {};
    }

    /**
     * Registers a font face.
     * @public
     */
    function fontFace(font) {
        var stylesheet = Stylesheet.getInstance();
        var rule = serializeRuleEntries(getStyleOptions(), font);
        var className = stylesheet.classNameFromKey(rule);
        if (className) {
            return;
        }
        var name = stylesheet.getClassName();
        stylesheet.insertRule("@font-face{" + rule + "}", true);
        stylesheet.cacheClassName(name, rule, [], ['font-face', rule]);
    }

    /**
     * Registers keyframe definitions.
     *
     * @public
     */
    function keyframes(timeline) {
        var stylesheet = Stylesheet.getInstance();
        var rulesArray = [];
        for (var prop in timeline) {
            if (timeline.hasOwnProperty(prop)) {
                rulesArray.push(prop, '{', serializeRuleEntries(getStyleOptions(), timeline[prop]), '}');
            }
        }
        var rules = rulesArray.join('');
        var className = stylesheet.classNameFromKey(rules);
        if (className) {
            return className;
        }
        var name = stylesheet.getClassName();
        stylesheet.insertRule("@keyframes " + name + "{" + rules + "}", true);
        stylesheet.cacheClassName(name, rules, [], ['keyframes', rules]);
        return name;
    }

    /**
     * Builds a class names object from a given map.
     *
     * @param styles - Map of unprocessed styles.
     * @returns Map of property name to class name.
     */
    function buildClassMap(styles) {
        var classes = {};
        var _loop_1 = function (styleName) {
            if (styles.hasOwnProperty(styleName)) {
                var className_1;
                Object.defineProperty(classes, styleName, {
                    get: function () {
                        if (className_1 === undefined) {
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            className_1 = mergeStyles(styles[styleName]).toString();
                        }
                        return className_1;
                    },
                    enumerable: true,
                    configurable: true,
                });
            }
        };
        for (var styleName in styles) {
            _loop_1(styleName);
        }
        return classes;
    }

    var _window = undefined;
    // Note: Accessing "window" in IE11 is somewhat expensive, and calling "typeof window"
    // hits a memory leak, whereas aliasing it and calling "typeof _window" does not.
    // Caching the window value at the file scope lets us minimize the impact.
    try {
        _window = window;
    }
    catch (e) {
        /* no-op */
    }
    /**
     * Helper to get the window object. The helper will make sure to use a cached variable
     * of "window", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the
     * window object won't match the "global" window object, and for these scenarios, you should
     * pass in an element hosted within the popup.
     *
     * @public
     */
    function getWindow(rootElement) {
        if (typeof _window === 'undefined') {
            return undefined;
        }
        else {
            var el = rootElement;
            return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;
        }
    }

    /**
     * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.
     * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.
     *
     * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a
     * new instance of the class and remember to call dispose() during your code's dispose handler.
     *
     * @public
     */
    var Async = /** @class */ (function () {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        function Async(parent, onError) {
            this._timeoutIds = null;
            this._immediateIds = null;
            this._intervalIds = null;
            this._animationFrameIds = null;
            this._isDisposed = false;
            this._parent = parent || null;
            this._onErrorHandler = onError;
            this._noop = function () {
                /* do nothing */
            };
        }
        /**
         * Dispose function, clears all async operations.
         */
        Async.prototype.dispose = function () {
            var id;
            this._isDisposed = true;
            this._parent = null;
            // Clear timeouts.
            if (this._timeoutIds) {
                for (id in this._timeoutIds) {
                    if (this._timeoutIds.hasOwnProperty(id)) {
                        this.clearTimeout(parseInt(id, 10));
                    }
                }
                this._timeoutIds = null;
            }
            // Clear immediates.
            if (this._immediateIds) {
                for (id in this._immediateIds) {
                    if (this._immediateIds.hasOwnProperty(id)) {
                        this.clearImmediate(parseInt(id, 10));
                    }
                }
                this._immediateIds = null;
            }
            // Clear intervals.
            if (this._intervalIds) {
                for (id in this._intervalIds) {
                    if (this._intervalIds.hasOwnProperty(id)) {
                        this.clearInterval(parseInt(id, 10));
                    }
                }
                this._intervalIds = null;
            }
            // Clear animation frames.
            if (this._animationFrameIds) {
                for (id in this._animationFrameIds) {
                    if (this._animationFrameIds.hasOwnProperty(id)) {
                        this.cancelAnimationFrame(parseInt(id, 10));
                    }
                }
                this._animationFrameIds = null;
            }
        };
        /**
         * SetTimeout override, which will auto cancel the timeout during dispose.
         * @param callback - Callback to execute.
         * @param duration - Duration in milliseconds.
         * @returns The setTimeout id.
         */
        Async.prototype.setTimeout = function (callback, duration) {
            var _this = this;
            var timeoutId = 0;
            if (!this._isDisposed) {
                if (!this._timeoutIds) {
                    this._timeoutIds = {};
                }
                timeoutId = setTimeout(function () {
                    // Time to execute the timeout, enqueue it as a foreground task to be executed.
                    try {
                        // Now delete the record and call the callback.
                        if (_this._timeoutIds) {
                            delete _this._timeoutIds[timeoutId];
                        }
                        callback.apply(_this._parent);
                    }
                    catch (e) {
                        _this._logError(e);
                    }
                }, duration);
                this._timeoutIds[timeoutId] = true;
            }
            return timeoutId;
        };
        /**
         * Clears the timeout.
         * @param id - Id to cancel.
         */
        Async.prototype.clearTimeout = function (id) {
            if (this._timeoutIds && this._timeoutIds[id]) {
                clearTimeout(id);
                delete this._timeoutIds[id];
            }
        };
        /**
         * SetImmediate override, which will auto cancel the immediate during dispose.
         * @param callback - Callback to execute.
         * @param targetElement - Optional target element to use for identifying the correct window.
         * @returns The setTimeout id.
         */
        Async.prototype.setImmediate = function (callback, targetElement) {
            var _this = this;
            var immediateId = 0;
            var win = getWindow(targetElement);
            if (!this._isDisposed) {
                if (!this._immediateIds) {
                    this._immediateIds = {};
                }
                var setImmediateCallback = function () {
                    // Time to execute the timeout, enqueue it as a foreground task to be executed.
                    try {
                        // Now delete the record and call the callback.
                        if (_this._immediateIds) {
                            delete _this._immediateIds[immediateId];
                        }
                        callback.apply(_this._parent);
                    }
                    catch (e) {
                        _this._logError(e);
                    }
                };
                immediateId = win.setTimeout(setImmediateCallback, 0);
                this._immediateIds[immediateId] = true;
            }
            return immediateId;
        };
        /**
         * Clears the immediate.
         * @param id - Id to cancel.
         * @param targetElement - Optional target element to use for identifying the correct window.
         */
        Async.prototype.clearImmediate = function (id, targetElement) {
            var win = getWindow(targetElement);
            if (this._immediateIds && this._immediateIds[id]) {
                win.clearTimeout(id);
                delete this._immediateIds[id];
            }
        };
        /**
         * SetInterval override, which will auto cancel the timeout during dispose.
         * @param callback - Callback to execute.
         * @param duration - Duration in milliseconds.
         * @returns The setTimeout id.
         */
        Async.prototype.setInterval = function (callback, duration) {
            var _this = this;
            var intervalId = 0;
            if (!this._isDisposed) {
                if (!this._intervalIds) {
                    this._intervalIds = {};
                }
                intervalId = setInterval(function () {
                    // Time to execute the interval callback, enqueue it as a foreground task to be executed.
                    try {
                        callback.apply(_this._parent);
                    }
                    catch (e) {
                        _this._logError(e);
                    }
                }, duration);
                this._intervalIds[intervalId] = true;
            }
            return intervalId;
        };
        /**
         * Clears the interval.
         * @param id - Id to cancel.
         */
        Async.prototype.clearInterval = function (id) {
            if (this._intervalIds && this._intervalIds[id]) {
                clearInterval(id);
                delete this._intervalIds[id];
            }
        };
        /**
         * Creates a function that, when executed, will only call the func function at most once per
         * every wait milliseconds. Provide an options object to indicate that func should be invoked
         * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
         * function will return the result of the last func call.
         *
         * Note: If leading and trailing options are true func will be called on the trailing edge of
         * the timeout only if the throttled function is invoked more than once during the wait timeout.
         *
         * @param func - The function to throttle.
         * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.
         * @param options - The options object.
         * @returns The new throttled function.
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Async.prototype.throttle = function (func, wait, options) {
            var _this = this;
            if (this._isDisposed) {
                return this._noop;
            }
            var waitMS = wait || 0;
            var leading = true;
            var trailing = true;
            var lastExecuteTime = 0;
            var lastResult;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var lastArgs;
            var timeoutId = null;
            if (options && typeof options.leading === 'boolean') {
                leading = options.leading;
            }
            if (options && typeof options.trailing === 'boolean') {
                trailing = options.trailing;
            }
            var callback = function (userCall) {
                var now = Date.now();
                var delta = now - lastExecuteTime;
                var waitLength = leading ? waitMS - delta : waitMS;
                if (delta >= waitMS && (!userCall || leading)) {
                    lastExecuteTime = now;
                    if (timeoutId) {
                        _this.clearTimeout(timeoutId);
                        timeoutId = null;
                    }
                    lastResult = func.apply(_this._parent, lastArgs);
                }
                else if (timeoutId === null && trailing) {
                    timeoutId = _this.setTimeout(callback, waitLength);
                }
                return lastResult;
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var resultFunction = (function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                lastArgs = args;
                return callback(true);
            });
            return resultFunction;
        };
        /**
         * Creates a function that will delay the execution of func until after wait milliseconds have
         * elapsed since the last time it was invoked. Provide an options object to indicate that func
         * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
         * to the debounced function will return the result of the last func call.
         *
         * Note: If leading and trailing options are true func will be called on the trailing edge of
         * the timeout only if the debounced function is invoked more than once during the wait
         * timeout.
         *
         * @param func - The function to debounce.
         * @param wait - The number of milliseconds to delay.
         * @param options - The options object.
         * @returns The new debounced function.
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Async.prototype.debounce = function (func, wait, options) {
            var _this = this;
            if (this._isDisposed) {
                var noOpFunction = (function () {
                    /** Do nothing */
                });
                noOpFunction.cancel = function () {
                    return;
                };
                noOpFunction.flush = (function () { return null; });
                noOpFunction.pending = function () { return false; };
                return noOpFunction;
            }
            var waitMS = wait || 0;
            var leading = false;
            var trailing = true;
            var maxWait = null;
            var lastCallTime = 0;
            var lastExecuteTime = Date.now();
            var lastResult;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var lastArgs;
            var timeoutId = null;
            if (options && typeof options.leading === 'boolean') {
                leading = options.leading;
            }
            if (options && typeof options.trailing === 'boolean') {
                trailing = options.trailing;
            }
            if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {
                maxWait = options.maxWait;
            }
            var markExecuted = function (time) {
                if (timeoutId) {
                    _this.clearTimeout(timeoutId);
                    timeoutId = null;
                }
                lastExecuteTime = time;
            };
            var invokeFunction = function (time) {
                markExecuted(time);
                lastResult = func.apply(_this._parent, lastArgs);
            };
            var callback = function (userCall) {
                var now = Date.now();
                var executeImmediately = false;
                if (userCall) {
                    if (leading && now - lastCallTime >= waitMS) {
                        executeImmediately = true;
                    }
                    lastCallTime = now;
                }
                var delta = now - lastCallTime;
                var waitLength = waitMS - delta;
                var maxWaitDelta = now - lastExecuteTime;
                var maxWaitExpired = false;
                if (maxWait !== null) {
                    // maxWait only matters when there is a pending callback
                    if (maxWaitDelta >= maxWait && timeoutId) {
                        maxWaitExpired = true;
                    }
                    else {
                        waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
                    }
                }
                if (delta >= waitMS || maxWaitExpired || executeImmediately) {
                    invokeFunction(now);
                }
                else if ((timeoutId === null || !userCall) && trailing) {
                    timeoutId = _this.setTimeout(callback, waitLength);
                }
                return lastResult;
            };
            var pending = function () {
                return !!timeoutId;
            };
            var cancel = function () {
                if (pending()) {
                    // Mark the debounced function as having executed
                    markExecuted(Date.now());
                }
            };
            var flush = function () {
                if (pending()) {
                    invokeFunction(Date.now());
                }
                return lastResult;
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var resultFunction = (function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                lastArgs = args;
                return callback(true);
            });
            resultFunction.cancel = cancel;
            resultFunction.flush = flush;
            resultFunction.pending = pending;
            return resultFunction;
        };
        Async.prototype.requestAnimationFrame = function (callback, targetElement) {
            var _this = this;
            var animationFrameId = 0;
            var win = getWindow(targetElement);
            if (!this._isDisposed) {
                if (!this._animationFrameIds) {
                    this._animationFrameIds = {};
                }
                var animationFrameCallback = function () {
                    try {
                        // Now delete the record and call the callback.
                        if (_this._animationFrameIds) {
                            delete _this._animationFrameIds[animationFrameId];
                        }
                        callback.apply(_this._parent);
                    }
                    catch (e) {
                        _this._logError(e);
                    }
                };
                animationFrameId = win.requestAnimationFrame
                    ? win.requestAnimationFrame(animationFrameCallback)
                    : win.setTimeout(animationFrameCallback, 0);
                this._animationFrameIds[animationFrameId] = true;
            }
            return animationFrameId;
        };
        Async.prototype.cancelAnimationFrame = function (id, targetElement) {
            var win = getWindow(targetElement);
            if (this._animationFrameIds && this._animationFrameIds[id]) {
                win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);
                delete this._animationFrameIds[id];
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Async.prototype._logError = function (e) {
            if (this._onErrorHandler) {
                this._onErrorHandler(e);
            }
        };
        return Async;
    }());

    /**
     * Compares a to b and b to a.
     *
     * @public
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function shallowCompare(a, b) {
        for (var propName in a) {
            if (a.hasOwnProperty(propName)) {
                if (!b.hasOwnProperty(propName) || b[propName] !== a[propName]) {
                    return false;
                }
            }
        }
        for (var propName in b) {
            if (b.hasOwnProperty(propName)) {
                if (!a.hasOwnProperty(propName)) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more
     * objects as arguments and they will be merged sequentially into the target. Note that this will
     * shallow merge; it will not create new cloned values for target members.
     *
     * @public
     * @param target - Target object to merge following object arguments into.
     * @param args - One or more objects that will be mixed into the target in the order they are provided.
     * @returns Resulting merged target.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function assign(target) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return filteredAssign.apply(this, [null, target].concat(args));
    }
    /**
     * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter
     * the resulting merges. This allows for scenarios where you want to merge "everything except that one thing"
     * or "properties that start with data-". Note that this will shallow merge; it will not create new cloned
     * values for target members.
     *
     * @public
     * @param isAllowed - Callback to determine if the given propName is allowed in the result.
     * @param target - Target object to merge following object arguments into.
     * @param args - One or more objects that will be mixed into the target in the order they are provided.
     * @returns Resulting merged target.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function filteredAssign(isAllowed, target) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        target = target || {};
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
            var sourceObject = args_1[_a];
            if (sourceObject) {
                for (var propName in sourceObject) {
                    if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {
                        target[propName] = sourceObject[propName];
                    }
                }
            }
        }
        return target;
    }
    /**
     * Tiny helper to do the minimal amount of work in duplicating an object but omitting some
     * props. This ends up faster than using object ...rest or reduce to filter.
     *
     * This behaves very much like filteredAssign, but does not merge many objects together,
     * uses an exclusion object map, and avoids spreads all for optimal performance.
     *
     * See perf test for background:
     * https://jsperf.com/omit-vs-rest-vs-reduce/1
     *
     * @param obj - The object to clone
     * @param exclusions - The array of keys to exclude
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function omit(obj, exclusions) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var result = {};
        for (var key in obj) {
            if (exclusions.indexOf(key) === -1 && obj.hasOwnProperty(key)) {
                result[key] = obj[key];
            }
        }
        return result;
    }

    /** An instance of EventGroup allows anything with a handle to it to trigger events on it.
     *  If the target is an HTMLElement, the event will be attached to the element and can be
     *  triggered as usual (like clicking for onClick).
     *  The event can be triggered by calling EventGroup.raise() here. If the target is an
     *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets
     *  handled here in EventGroup, and the handler is called in the context of the parent
     *  (which is passed in in the constructor).
     *
     * @public
     * {@docCategory EventGroup}
     */
    var EventGroup = /** @class */ (function () {
        /** parent: the context in which events attached to non-HTMLElements are called */
        function EventGroup(parent) {
            this._id = EventGroup._uniqueId++;
            this._parent = parent;
            this._eventRecords = [];
        }
        /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.
         *  Events raised here by default have bubbling set to false and cancelable set to true.
         *  This applies also to built-in events being raised manually here on HTMLElements,
         *  which may lead to unexpected behavior if it differs from the defaults.
         *
         */
        EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {
            var retVal;
            if (EventGroup._isElement(target)) {
                if (typeof document !== 'undefined' && document.createEvent) {
                    var ev = document.createEvent('HTMLEvents');
                    ev.initEvent(eventName, bubbleEvent || false, true);
                    assign(ev, eventArgs);
                    retVal = target.dispatchEvent(ev);
                }
                else if (typeof document !== 'undefined' && document.createEventObject) {
                    // IE8
                    var evObj = document.createEventObject(eventArgs);
                    // cannot set cancelBubble on evObj, fireEvent will overwrite it
                    target.fireEvent('on' + eventName, evObj);
                }
            }
            else {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore  -- FIXME: strictBindCallApply error - https://github.com/microsoft/fluentui/issues/17331
                while (target && retVal !== false) {
                    var events = target.__events__;
                    var eventRecords = events ? events[eventName] : null;
                    if (eventRecords) {
                        for (var id in eventRecords) {
                            if (eventRecords.hasOwnProperty(id)) {
                                var eventRecordList = eventRecords[id];
                                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                // @ts-ignore  -- FIXME: strictBindCallApply error - https://github.com/microsoft/fluentui/issues/17331
                                for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {
                                    var record = eventRecordList[listIndex];
                                    if (record.objectCallback) {
                                        retVal = record.objectCallback.call(record.parent, eventArgs);
                                    }
                                }
                            }
                        }
                    }
                    // If the target has a parent, bubble the event up.
                    target = bubbleEvent ? target.parent : null;
                }
            }
            return retVal;
        };
        EventGroup.isObserved = function (target, eventName) {
            var events = target && target.__events__;
            return !!events && !!events[eventName];
        };
        /** Check to see if the target has declared support of the given event. */
        EventGroup.isDeclared = function (target, eventName) {
            var declaredEvents = target && target.__declaredEvents;
            return !!declaredEvents && !!declaredEvents[eventName];
        };
        EventGroup.stopPropagation = function (event) {
            if (event.stopPropagation) {
                event.stopPropagation();
            }
            else {
                // IE8
                event.cancelBubble = true;
            }
        };
        EventGroup._isElement = function (target) {
            return (!!target && (!!target.addEventListener || (typeof HTMLElement !== 'undefined' && target instanceof HTMLElement)));
        };
        EventGroup.prototype.dispose = function () {
            if (!this._isDisposed) {
                this._isDisposed = true;
                this.off();
                this._parent = null;
            }
        };
        /** On the target, attach a set of events, where the events object is a name to function mapping. */
        EventGroup.prototype.onAll = function (target, events, useCapture) {
            for (var eventName in events) {
                if (events.hasOwnProperty(eventName)) {
                    this.on(target, eventName, events[eventName], useCapture);
                }
            }
        };
        /**
         * On the target, attach an event whose handler will be called in the context of the parent
         * of this instance of EventGroup.
         */
        EventGroup.prototype.on = function (target, eventName, callback, options) {
            var _this = this;
            if (eventName.indexOf(',') > -1) {
                var events = eventName.split(/[ ,]+/);
                for (var i = 0; i < events.length; i++) {
                    this.on(target, events[i], callback, options);
                }
            }
            else {
                var parent_1 = this._parent;
                var eventRecord = {
                    target: target,
                    eventName: eventName,
                    parent: parent_1,
                    callback: callback,
                    options: options,
                };
                // Initialize and wire up the record on the target, so that it can call the callback if the event fires.
                var events = (target.__events__ = target.__events__ || {});
                events[eventName] =
                    events[eventName] ||
                        {
                            count: 0,
                        };
                events[eventName][this._id] = events[eventName][this._id] || [];
                events[eventName][this._id].push(eventRecord);
                events[eventName].count++;
                if (EventGroup._isElement(target)) {
                    var processElementEvent = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (_this._isDisposed) {
                            return;
                        }
                        var result;
                        try {
                            result = callback.apply(parent_1, args);
                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                            // @ts-ignore  -- FIXME: strictBindCallApply error - https://github.com/microsoft/fluentui/issues/17331
                            if (result === false && args[0]) {
                                var e = args[0];
                                if (e.preventDefault) {
                                    e.preventDefault();
                                }
                                if (e.stopPropagation) {
                                    e.stopPropagation();
                                }
                                e.cancelBubble = true;
                            }
                        }
                        catch (e) {
                            // ignore
                        }
                        return result;
                    };
                    eventRecord.elementCallback = processElementEvent;
                    if (target.addEventListener) {
                        target.addEventListener(eventName, processElementEvent, options);
                    }
                    else if (target.attachEvent) {
                        // IE8
                        target.attachEvent('on' + eventName, processElementEvent);
                    }
                }
                else {
                    var processObjectEvent = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (_this._isDisposed) {
                            return;
                        }
                        return callback.apply(parent_1, args);
                    };
                    eventRecord.objectCallback = processObjectEvent;
                }
                // Remember the record locally, so that it can be removed.
                this._eventRecords.push(eventRecord);
            }
        };
        EventGroup.prototype.off = function (target, eventName, callback, options) {
            for (var i = 0; i < this._eventRecords.length; i++) {
                var eventRecord = this._eventRecords[i];
                if ((!target || target === eventRecord.target) &&
                    (!eventName || eventName === eventRecord.eventName) &&
                    (!callback || callback === eventRecord.callback) &&
                    (typeof options !== 'boolean' || options === eventRecord.options)) {
                    var events = eventRecord.target.__events__;
                    var targetArrayLookup = events[eventRecord.eventName];
                    var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
                    // We may have already target's entries, so check for null.
                    if (targetArray) {
                        if (targetArray.length === 1 || !callback) {
                            targetArrayLookup.count -= targetArray.length;
                            delete events[eventRecord.eventName][this._id];
                        }
                        else {
                            targetArrayLookup.count--;
                            targetArray.splice(targetArray.indexOf(eventRecord), 1);
                        }
                        if (!targetArrayLookup.count) {
                            delete events[eventRecord.eventName];
                        }
                    }
                    if (eventRecord.elementCallback) {
                        if (eventRecord.target.removeEventListener) {
                            eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.options);
                        }
                        else if (eventRecord.target.detachEvent) {
                            // IE8
                            eventRecord.target.detachEvent('on' + eventRecord.eventName, eventRecord.elementCallback);
                        }
                    }
                    this._eventRecords.splice(i--, 1);
                }
            }
        };
        /** Trigger the given event in the context of this instance of EventGroup. */
        EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {
            return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);
        };
        /** Declare an event as being supported by this instance of EventGroup. */
        EventGroup.prototype.declare = function (event) {
            var declaredEvents = (this._parent.__declaredEvents = this._parent.__declaredEvents || {});
            if (typeof event === 'string') {
                declaredEvents[event] = true;
            }
            else {
                for (var i = 0; i < event.length; i++) {
                    declaredEvents[event[i]] = true;
                }
            }
        };
        EventGroup._uniqueId = 0;
        return EventGroup;
    }());

    /**
     * Helper to get the document object. Note that in popup window cases, document
     * might be the wrong document, which is why we look at ownerDocument for the
     * truth. Also note that the SSR flag is used to test ssr scenarios even if
     * document is defined (from JSDOM for example.)
     *
     * @public
     */
    function getDocument(rootElement) {
        if (typeof document === 'undefined') {
            return undefined;
        }
        else {
            var el = rootElement;
            return el && el.ownerDocument ? el.ownerDocument : document;
        }
    }

    var _scrollbarWidth;
    var _bodyScrollDisabledCount = 0;
    var DisabledScrollClassName = mergeStyles({
        overflow: 'hidden !important',
    });
    /**
     * Placing this attribute on scrollable divs optimizes detection to know
     * if the div is scrollable or not (given we can avoid expensive operations
     * like getComputedStyle.)
     *
     * @public
     */
    var DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';
    /**
     * Allows the user to scroll within a element,
     * while preventing the user from scrolling the body
     */
    var allowScrollOnElement = function (element, events) {
        if (!element) {
            return;
        }
        var _previousClientY = 0;
        var _element = null;
        // remember the clientY for future calls of _preventOverscrolling
        var _saveClientY = function (event) {
            if (event.targetTouches.length === 1) {
                _previousClientY = event.targetTouches[0].clientY;
            }
        };
        // prevent the body from scrolling when the user attempts
        // to scroll past the top or bottom of the element
        var _preventOverscrolling = function (event) {
            // only respond to a single-finger touch
            if (event.targetTouches.length !== 1) {
                return;
            }
            // prevent the body touchmove handler from firing
            // so that scrolling is allowed within the element
            event.stopPropagation();
            if (!_element) {
                return;
            }
            var clientY = event.targetTouches[0].clientY - _previousClientY;
            var scrollableParent = findScrollableParent(event.target);
            if (scrollableParent) {
                _element = scrollableParent;
            }
            // if the element is scrolled to the top,
            // prevent the user from scrolling up
            if (_element.scrollTop === 0 && clientY > 0) {
                event.preventDefault();
            }
            // if the element is scrolled to the bottom,
            // prevent the user from scrolling down
            if (_element.scrollHeight - Math.ceil(_element.scrollTop) <= _element.clientHeight && clientY < 0) {
                event.preventDefault();
            }
        };
        events.on(element, 'touchstart', _saveClientY, { passive: false });
        events.on(element, 'touchmove', _preventOverscrolling, { passive: false });
        _element = element;
    };
    /**
     * Same as allowScrollOnElement but does not prevent overscrolling.
     */
    var allowOverscrollOnElement = function (element, events) {
        if (!element) {
            return;
        }
        var _allowElementScroll = function (event) {
            event.stopPropagation();
        };
        events.on(element, 'touchmove', _allowElementScroll, { passive: false });
    };
    var _disableIosBodyScroll = function (event) {
        event.preventDefault();
    };
    /**
     * Disables the body scrolling.
     *
     * @public
     */
    function disableBodyScroll() {
        var doc = getDocument();
        if (doc && doc.body && !_bodyScrollDisabledCount) {
            doc.body.classList.add(DisabledScrollClassName);
            doc.body.addEventListener('touchmove', _disableIosBodyScroll, { passive: false, capture: false });
        }
        _bodyScrollDisabledCount++;
    }
    /**
     * Enables the body scrolling.
     *
     * @public
     */
    function enableBodyScroll() {
        if (_bodyScrollDisabledCount > 0) {
            var doc = getDocument();
            if (doc && doc.body && _bodyScrollDisabledCount === 1) {
                doc.body.classList.remove(DisabledScrollClassName);
                doc.body.removeEventListener('touchmove', _disableIosBodyScroll);
            }
            _bodyScrollDisabledCount--;
        }
    }
    /**
     * Calculates the width of a scrollbar for the browser/os.
     *
     * @public
     */
    function getScrollbarWidth() {
        if (_scrollbarWidth === undefined) {
            var scrollDiv = document.createElement('div');
            scrollDiv.style.setProperty('width', '100px');
            scrollDiv.style.setProperty('height', '100px');
            scrollDiv.style.setProperty('overflow', 'scroll');
            scrollDiv.style.setProperty('position', 'absolute');
            scrollDiv.style.setProperty('top', '-9999px');
            document.body.appendChild(scrollDiv);
            // Get the scrollbar width
            _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            // Delete the DIV
            document.body.removeChild(scrollDiv);
        }
        return _scrollbarWidth;
    }
    /**
     * Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns
     * document.body.
     *
     * @public
     */
    function findScrollableParent(startingElement) {
        var el = startingElement;
        var doc = getDocument(startingElement);
        // First do a quick scan for the scrollable attribute.
        while (el && el !== doc.body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {
                return el;
            }
            el = el.parentElement;
        }
        // If we haven't found it, the use the slower method: compute styles to evaluate if overflow is set.
        el = startingElement;
        while (el && el !== doc.body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {
                var computedStyles = getComputedStyle(el);
                var overflowY = computedStyles ? computedStyles.getPropertyValue('overflow-y') : '';
                if (overflowY && (overflowY === 'scroll' || overflowY === 'auto')) {
                    return el;
                }
            }
            el = el.parentElement;
        }
        // Fall back to window scroll.
        if (!el || el === doc.body) {
            el = getWindow(startingElement);
        }
        return el;
    }

    /**
     * Helper to get bounding client rect. Passing in window will get the window size.
     *
     * @public
     */
    function getRect(element) {
        var rect;
        if (element) {
            if (element === window) {
                rect = {
                    left: 0,
                    top: 0,
                    width: window.innerWidth,
                    height: window.innerHeight,
                    right: window.innerWidth,
                    bottom: window.innerHeight,
                };
            }
            else if (element.getBoundingClientRect) {
                rect = element.getBoundingClientRect();
            }
        }
        return rect;
    }

    var global$1 = (typeof global$1 !== "undefined" ? global$1 :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    var global = (typeof global$1 !== "undefined" ? global$1 :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop() {}

    var on$1 = noop;
    var addListener = noop;
    var once = noop;
    var off = noop;
    var removeListener = noop;
    var removeAllListeners = noop;
    var emit = noop;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process$1 = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version,
      versions: versions,
      on: on$1,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    /**
     * Sends a warning to console, if the api is present.
     *
     * @public
     * @param message - Warning message.
     */
    function warn(message) {
        if (console && console.warn) {
            console.warn(message);
        }
    }

    /**
     * Warns when props are required if a condition is met.
     *
     * @public
     * @param componentName - The name of the component being used.
     * @param props - The props passed into the component.
     * @param requiredProps - The name of the props that are required when the condition is met.
     * @param conditionalPropName - The name of the prop that the condition is based on.
     * @param condition - Whether the condition is met.
     */
    function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {
        if (condition === true && process$1.env.NODE_ENV !== 'production') {
            for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {
                var requiredPropName = requiredProps_1[_i];
                if (!(requiredPropName in props)) {
                    warn(componentName + " property '" + requiredPropName + "' is required when '" + conditionalPropName + "' is used.'");
                }
            }
        }
    }

    /**
     * Warns when two props which are mutually exclusive are both being used.
     *
     * @public
     * @param componentName - The name of the component being used.
     * @param props - The props passed into the component.
     * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.
     */
    function warnMutuallyExclusive(componentName, props, exclusiveMap) {
        {
            for (var propName in exclusiveMap) {
                if (props && props[propName] !== undefined) {
                    var propInExclusiveMapValue = exclusiveMap[propName];
                    if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== undefined) {
                        warn(componentName + " property '" + propName + "' is mutually exclusive with '" + exclusiveMap[propName] + "'. " +
                            "Use one or the other.");
                    }
                }
            }
        }
    }

    /**
     * Warns when a deprecated props are being used.
     *
     * @public
     * @param componentName - The name of the component being used.
     * @param props - The props passed into the component.
     * @param deprecationMap - The map of deprecations, where key is the prop name and the value is
     * either null or a replacement prop name.
     */
    function warnDeprecations(componentName, props, deprecationMap) {
        {
            for (var propName in deprecationMap) {
                if (props && propName in props) {
                    var deprecationMessage = componentName + " property '" + propName + "' was used but has been deprecated.";
                    var replacementPropName = deprecationMap[propName];
                    if (replacementPropName) {
                        deprecationMessage += " Use '" + replacementPropName + "' instead.";
                    }
                    warn(deprecationMessage);
                }
            }
        }
    }

    /**
     * BaseComponent class, which provides basic helpers for all components.
     *
     * @public
     * {@docCategory BaseComponent}
     *
     * @deprecated Do not use. We are moving away from class component.
     */
    /** @class */ ((function (_super) {
        tslib.__extends(BaseComponent, _super);
        /**
         * BaseComponent constructor
         * @param props - The props for the component.
         * @param context - The context for the component.
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        function BaseComponent(props, context) {
            var _this = _super.call(this, props, context) || this;
            // eslint-disable-next-line deprecation/deprecation
            _makeAllSafe(_this, BaseComponent.prototype, [
                'componentDidMount',
                'shouldComponentUpdate',
                'getSnapshotBeforeUpdate',
                'render',
                'componentDidUpdate',
                'componentWillUnmount',
            ]);
            return _this;
        }
        /**
         * When the component receives props, make sure the componentRef is updated.
         */
        BaseComponent.prototype.componentDidUpdate = function (prevProps, prevState) {
            this._updateComponentRef(prevProps, this.props);
        };
        /**
         * When the component has mounted, update the componentRef.
         */
        BaseComponent.prototype.componentDidMount = function () {
            this._setComponentRef(this.props.componentRef, this);
        };
        /**
         * If we have disposables, dispose them automatically on unmount.
         */
        BaseComponent.prototype.componentWillUnmount = function () {
            this._setComponentRef(this.props.componentRef, null);
            if (this.__disposables) {
                for (var i = 0, len = this._disposables.length; i < len; i++) {
                    var disposable = this.__disposables[i];
                    if (disposable.dispose) {
                        disposable.dispose();
                    }
                }
                this.__disposables = null;
            }
        };
        Object.defineProperty(BaseComponent.prototype, "className", {
            /**
             * Gets the object's class name.
             */
            get: function () {
                if (!this.__className) {
                    var funcNameRegex = /function (.{1,})\(/;
                    var results = funcNameRegex.exec(this.constructor.toString());
                    this.__className = results && results.length > 1 ? results[1] : '';
                }
                return this.__className;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseComponent.prototype, "_disposables", {
            /**
             * Allows subclasses to push things to this._disposables to be auto disposed.
             */
            get: function () {
                if (!this.__disposables) {
                    this.__disposables = [];
                }
                return this.__disposables;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseComponent.prototype, "_async", {
            /**
             * Gets the async instance associated with the component, created on demand. The async instance gives
             * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks
             * will be cleared/ignored automatically after unmounting. The helpers within the async object also
             * preserve the this pointer so that you don't need to "bind" the callbacks.
             */
            get: function () {
                if (!this.__async) {
                    this.__async = new Async(this);
                    this._disposables.push(this.__async);
                }
                return this.__async;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseComponent.prototype, "_events", {
            /**
             * Gets the event group instance assocaited with the component, created on demand. The event instance
             * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks
             * will be automatically disconnected after unmounting. The helpers within the events object also
             * preserve the this reference so that you don't need to "bind" the callbacks.
             */
            get: function () {
                if (!this.__events) {
                    this.__events = new EventGroup(this);
                    this._disposables.push(this.__events);
                }
                return this.__events;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Helper to return a memoized ref resolver function.
         * @param refName - Name of the member to assign the ref to.
         * @returns A function instance keyed from the given refname.
         * @deprecated Use `createRef` from React.createRef.
         */
        BaseComponent.prototype._resolveRef = function (refName) {
            var _this = this;
            if (!this.__resolves) {
                this.__resolves = {};
            }
            if (!this.__resolves[refName]) {
                this.__resolves[refName] = function (ref) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return (_this[refName] = ref);
                };
            }
            return this.__resolves[refName];
        };
        /**
         * Updates the componentRef (by calling it with "this" when necessary.)
         */
        BaseComponent.prototype._updateComponentRef = function (currentProps, newProps) {
            if (newProps === void 0) { newProps = {}; }
            // currentProps *should* always be defined, but verify that just in case a subclass is manually
            // calling a lifecycle method with no parameters (which has happened) or other odd usage.
            if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {
                this._setComponentRef(currentProps.componentRef, null);
                this._setComponentRef(newProps.componentRef, this);
            }
        };
        /**
         * Warns when a deprecated props are being used.
         *
         * @param deprecationMap - The map of deprecations, where key is the prop name and the value is
         * either null or a replacement prop name.
         */
        BaseComponent.prototype._warnDeprecations = function (deprecationMap) {
            warnDeprecations(this.className, this.props, deprecationMap);
        };
        /**
         * Warns when props which are mutually exclusive with each other are both used.
         *
         * @param mutuallyExclusiveMap - The map of mutually exclusive props.
         */
        BaseComponent.prototype._warnMutuallyExclusive = function (mutuallyExclusiveMap) {
            warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);
        };
        /**
         * Warns when props are required if a condition is met.
         *
         * @param requiredProps - The name of the props that are required when the condition is met.
         * @param conditionalPropName - The name of the prop that the condition is based on.
         * @param condition - Whether the condition is met.
         */
        BaseComponent.prototype._warnConditionallyRequiredProps = function (requiredProps, conditionalPropName, condition) {
            warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);
        };
        BaseComponent.prototype._setComponentRef = function (ref, value) {
            if (!this._skipComponentRefResolution && ref) {
                if (typeof ref === 'function') {
                    ref(value);
                }
                if (typeof ref === 'object') {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    ref.current = value;
                }
            }
        };
        return BaseComponent;
    })(React__namespace.Component));
    /**
     * Helper to override a given method with a wrapper method that can try/catch the original, but also
     * ensures that the BaseComponent's methods are called before the subclass's. This ensures that
     * componentWillUnmount in the base is called and that things in the _disposables array are disposed.
     */
    // eslint-disable-next-line deprecation/deprecation
    function _makeAllSafe(obj, prototype, methodNames) {
        for (var i = 0, len = methodNames.length; i < len; i++) {
            _makeSafe(obj, prototype, methodNames[i]);
        }
    }
    // eslint-disable-next-line deprecation/deprecation
    function _makeSafe(obj, prototype, methodName) {
        /* eslint-disable @typescript-eslint/no-explicit-any */
        var classMethod = obj[methodName];
        var prototypeMethod = prototype[methodName];
        if (classMethod || prototypeMethod) {
            obj[methodName] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                /* eslint-enable @typescript-eslint/no-explicit-any */
                var retVal;
                if (prototypeMethod) {
                    retVal = prototypeMethod.apply(this, args);
                }
                if (classMethod !== prototypeMethod) {
                    retVal = classMethod.apply(this, args);
                }
                return retVal;
            };
        }
    }
    /**
     * Simple constant function for returning null, used to render empty templates in JSX.
     *
     * @public
     */
    function nullRender() {
        return null;
    }

    /**
     * Utility component for delaying the render of a child component after a given delay. This component
     * requires a single child component; don't pass in many components. Wrap multiple components in a DIV
     * if necessary.
     *
     * @public
     * {@docCategory DelayedRender}
     */
    var DelayedRender = /** @class */ (function (_super) {
        tslib.__extends(DelayedRender, _super);
        function DelayedRender(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                isRendered: getWindow() === undefined,
            };
            return _this;
        }
        DelayedRender.prototype.componentDidMount = function () {
            var _this = this;
            var delay = this.props.delay;
            this._timeoutId = window.setTimeout(function () {
                _this.setState({
                    isRendered: true,
                });
            }, delay);
        };
        DelayedRender.prototype.componentWillUnmount = function () {
            if (this._timeoutId) {
                clearTimeout(this._timeoutId);
            }
        };
        DelayedRender.prototype.render = function () {
            return this.state.isRendered ? React__namespace.Children.only(this.props.children) : null;
        };
        DelayedRender.defaultProps = {
            delay: 0,
        };
        return DelayedRender;
    }(React__namespace.Component));

    /**
     * Storing global state in local module variables has issues when more than one copy
     * if the module gets loaded on the page (due to a bundling error or simply by consuming
     * a prebundled script.)
     *
     * This file contains helpers to deal with the getting and setting local state, and allows
     * callers to get called back when it mutates.
     */
    var GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';
    var CALLBACK_STATE_PROP_NAME = '__callbacks__';
    var _counter = 0;
    /**
     * Global settings helper, which stores settings in the global (window) namespace.
     * If window is not provided, it will store settings in module scope. Provides a
     * way to observe changes as well when their values change.
     *
     * @public
     * {@docCategory GlobalSettings}
     */
    var GlobalSettings = /** @class */ (function () {
        function GlobalSettings() {
        }
        GlobalSettings.getValue = function (key, defaultValue) {
            var globalSettings = _getGlobalSettings();
            if (globalSettings[key] === undefined) {
                globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;
            }
            return globalSettings[key];
        };
        GlobalSettings.setValue = function (key, value) {
            var globalSettings = _getGlobalSettings();
            var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];
            var oldValue = globalSettings[key];
            if (value !== oldValue) {
                globalSettings[key] = value;
                var changeDescription = {
                    oldValue: oldValue,
                    value: value,
                    key: key,
                };
                for (var id in callbacks) {
                    if (callbacks.hasOwnProperty(id)) {
                        callbacks[id](changeDescription);
                    }
                }
            }
            return value;
        };
        GlobalSettings.addChangeListener = function (cb) {
            // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.
            // (It's faster to delete a key than it is to look up the index of an object and splice an array.)
            var id = cb.__id__;
            var callbacks = _getCallbacks();
            if (!id) {
                id = cb.__id__ = String(_counter++);
            }
            callbacks[id] = cb;
        };
        GlobalSettings.removeChangeListener = function (cb) {
            var callbacks = _getCallbacks();
            delete callbacks[cb.__id__];
        };
        return GlobalSettings;
    }());
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function _getGlobalSettings() {
        var _a;
        var win = getWindow();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var globalObj = win || {};
        if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {
            globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a = {},
                _a[CALLBACK_STATE_PROP_NAME] = {},
                _a);
        }
        return globalObj[GLOBAL_SETTINGS_PROP_NAME];
    }
    function _getCallbacks() {
        var globalSettings = _getGlobalSettings();
        return globalSettings[CALLBACK_STATE_PROP_NAME];
    }

    /**
     * Simulated enum for keycodes. These will get inlined by uglify when used much like an enum
     *
     * @public
     * {@docCategory KeyCodes}
     */
    var KeyCodes = {
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        ctrl: 17,
        alt: 18,
        pauseBreak: 19,
        capslock: 20,
        escape: 27,
        space: 32,
        pageUp: 33,
        pageDown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        del: 46,
        zero: 48,
        one: 49,
        two: 50,
        three: 51,
        four: 52,
        five: 53,
        six: 54,
        seven: 55,
        eight: 56,
        nine: 57,
        colon: 58,
        a: 65,
        b: 66,
        c: 67,
        d: 68,
        e: 69,
        f: 70,
        g: 71,
        h: 72,
        i: 73,
        j: 74,
        k: 75,
        l: 76,
        m: 77,
        n: 78,
        o: 79,
        p: 80,
        q: 81,
        r: 82,
        s: 83,
        t: 84,
        u: 85,
        v: 86,
        w: 87,
        x: 88,
        y: 89,
        z: 90,
        leftWindow: 91,
        rightWindow: 92,
        select: 93,
        /* eslint-disable @typescript-eslint/naming-convention */
        zero_numpad: 96,
        one_numpad: 97,
        two_numpad: 98,
        three_numpad: 99,
        four_numpad: 100,
        five_numpad: 101,
        six_numpad: 102,
        seven_numpad: 103,
        eight_numpad: 104,
        nine_numpad: 105,
        /* eslint-enable @typescript-eslint/naming-convention */
        multiply: 106,
        add: 107,
        subtract: 109,
        decimalPoint: 110,
        divide: 111,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        numlock: 144,
        scrollLock: 145,
        semicolon: 186,
        equalSign: 187,
        comma: 188,
        dash: 189,
        period: 190,
        forwardSlash: 191,
        graveAccent: 192,
        openBracket: 219,
        backSlash: 220,
        closeBracket: 221,
        singleQuote: 222,
    };

    /**
     * Rectangle helper class.
     *
     * @public
     * {@docCategory Rectangle}
     */
    var Rectangle = /** @class */ (function () {
        function Rectangle(left, right, top, bottom) {
            if (left === void 0) { left = 0; }
            if (right === void 0) { right = 0; }
            if (top === void 0) { top = 0; }
            if (bottom === void 0) { bottom = 0; }
            this.top = top;
            this.bottom = bottom;
            this.left = left;
            this.right = right;
        }
        Object.defineProperty(Rectangle.prototype, "width", {
            /**
             * Calculated automatically by subtracting the right from left
             */
            get: function () {
                return this.right - this.left;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "height", {
            /**
             * Calculated automatically by subtracting the bottom from top.
             */
            get: function () {
                return this.bottom - this.top;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Tests if another rect is approximately equal to this rect (within 4 decimal places.)
         */
        Rectangle.prototype.equals = function (rect) {
            // Fixing to 4 decimal places because it allows enough precision and will handle cases when something
            // should be rounded, like .999999 should round to 1.
            return (parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) &&
                parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) &&
                parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) &&
                parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4)));
        };
        return Rectangle;
    }());

    /* eslint-disable @typescript-eslint/no-explicit-any */
    /**
     * Returns a single function which will call each of the given functions in the context of the
     * parent.
     */
    function appendFunction(parent) {
        var functions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            functions[_i - 1] = arguments[_i];
        }
        if (functions.length < 2) {
            return functions[0];
        }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            functions.forEach(function (f) { return f && f.apply(parent, args); });
        };
    }

    /**
     * ARIA helper to concatenate attributes, returning undefined if all attributes
     * are undefined. (Empty strings are not a valid ARIA attribute value.)
     *
     * @param ariaAttributes - ARIA attributes to merge
     */
    function mergeAriaAttributeValues() {
        var ariaAttributes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            ariaAttributes[_i] = arguments[_i];
        }
        var mergedAttribute = ariaAttributes
            .filter(function (arg) { return arg; })
            .join(' ')
            .trim();
        return mergedAttribute === '' ? undefined : mergedAttribute;
    }

    /**
     * Helper to find the index of an item within an array, using a callback to
     * determine the match.
     *
     * @public
     * @param array - Array to search.
     * @param cb - Callback which returns true on matches.
     * @param fromIndex - Optional index to start from (defaults to 0)
     */
    function findIndex(array, cb, fromIndex) {
        if (fromIndex === void 0) { fromIndex = 0; }
        var index = -1;
        for (var i = fromIndex; array && i < array.length; i++) {
            if (cb(array[i], i)) {
                index = i;
                break;
            }
        }
        return index;
    }
    /**
     * Helper to find the first item within an array that satisfies the callback.
     * @param array - Array to search
     * @param cb - Callback which returns true on matches
     */
    function find(array, cb) {
        var index = findIndex(array, cb);
        if (index < 0) {
            return undefined;
        }
        return array[index];
    }
    /**
     * Given an array, this function returns a new array where an element has been inserted at the given index.
     * @param array - The array to operate on
     * @param index - The index where an element should be inserted
     * @param itemToAdd - The element to insert
     */
    function addElementAtIndex(array, index, itemToAdd) {
        var copy = array.slice();
        copy.splice(index, 0, itemToAdd);
        return copy;
    }
    /**
     * Returns a boolean indicating if the two given arrays are equal in length and values.
     *
     * @param array1 - First array to compare
     * @param array2 - Second array to compare
     * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.
     */
    function arraysEqual(array1, array2) {
        if (array1.length !== array2.length) {
            return false;
        }
        for (var i = 0; i < array1.length; i++) {
            if (array1[i] !== array2[i]) {
                return false;
            }
        }
        return true;
    }

    /**
     * Fetches an item from session storage without throwing an exception
     * @param key The key of the item to fetch from session storage
     */
    function getItem$1(key) {
        var result = null;
        try {
            var win = getWindow();
            result = win ? win.sessionStorage.getItem(key) : null;
        }
        catch (e) {
            /* Eat the exception */
        }
        return result;
    }
    /**
     * Inserts an item into session storage without throwing an exception
     * @param key The key of the item to add to session storage
     * @param data The data to put into session storage
     */
    function setItem(key, data) {
        var _a;
        try {
            (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage.setItem(key, data);
        }
        catch (e) {
            /* Eat the exception */
        }
    }

    var RTL_LOCAL_STORAGE_KEY = 'isRTL';
    // Default to undefined so that we initialize on first read.
    var _isRTL;
    /**
     * Gets the rtl state of the page (returns true if in rtl.)
     */
    function getRTL(theme) {
        if (theme === void 0) { theme = {}; }
        if (theme.rtl !== undefined) {
            return theme.rtl;
        }
        if (_isRTL === undefined) {
            // Fabric supports persisting the RTL setting between page refreshes via session storage
            var savedRTL = getItem$1(RTL_LOCAL_STORAGE_KEY);
            if (savedRTL !== null) {
                _isRTL = savedRTL === '1';
                setRTL(_isRTL);
            }
            var doc = getDocument();
            if (_isRTL === undefined && doc) {
                _isRTL = ((doc.body && doc.body.getAttribute('dir')) || doc.documentElement.getAttribute('dir')) === 'rtl';
                setRTL$1(_isRTL);
            }
        }
        return !!_isRTL;
    }
    /**
     * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)
     */
    function setRTL(isRTL, persistSetting) {
        if (persistSetting === void 0) { persistSetting = false; }
        var doc = getDocument();
        if (doc) {
            doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');
        }
        if (persistSetting) {
            setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');
        }
        _isRTL = isRTL;
        setRTL$1(_isRTL);
    }
    /**
     * Returns the given key, but flips right/left arrows if necessary.
     */
    function getRTLSafeKeyCode(key, theme) {
        if (theme === void 0) { theme = {}; }
        if (getRTL(theme)) {
            if (key === KeyCodes.left) {
                key = KeyCodes.right;
            }
            else if (key === KeyCodes.right) {
                key = KeyCodes.left;
            }
        }
        return key;
    }

    /**
     * Determines whether or not an element has the virtual hierarchy extension.
     *
     * @public
     */
    function isVirtualElement(element) {
        return element && !!element._virtual;
    }

    /**
     * Gets the virtual parent given the child element, if it exists.
     *
     * @public
     */
    function getVirtualParent(child) {
        var parent;
        if (child && isVirtualElement(child)) {
            parent = child._virtual.parent;
        }
        return parent;
    }

    /**
     * Gets the element which is the parent of a given element.
     * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over
     * real DOM parent when present.
     *
     * @public
     */
    function getParent(child, allowVirtualParents) {
        if (allowVirtualParents === void 0) { allowVirtualParents = true; }
        return (child &&
            ((allowVirtualParents && getVirtualParent(child)) || (child.parentNode && child.parentNode)));
    }

    /**
     * Determines whether or not a parent element contains a given child element.
     * If `allowVirtualParents` is true, this method may return `true` if the child
     * has the parent in its virtual element hierarchy.
     *
     * @public
     */
    function elementContains(parent, child, allowVirtualParents) {
        if (allowVirtualParents === void 0) { allowVirtualParents = true; }
        var isContained = false;
        if (parent && child) {
            if (allowVirtualParents) {
                if (parent === child) {
                    isContained = true;
                }
                else {
                    isContained = false;
                    while (child) {
                        var nextParent = getParent(child);
                        if (nextParent === parent) {
                            isContained = true;
                            break;
                        }
                        child = nextParent;
                    }
                }
            }
            else if (parent.contains) {
                isContained = parent.contains(child);
            }
        }
        return isContained;
    }

    /**
     * Finds the first parent element where the matchFunction returns true
     * @param element - element to start searching at
     * @param matchFunction - the function that determines if the element is a match
     * @returns the matched element or null no match was found
     */
    function findElementRecursive(element, matchFunction) {
        if (!element || element === document.body) {
            return null;
        }
        return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);
    }

    /**
     * Determines if an element, or any of its ancestors, contain the given attribute
     * @param element - element to start searching at
     * @param attribute - the attribute to search for
     * @returns the value of the first instance found
     */
    function elementContainsAttribute(element, attribute) {
        var elementMatch = findElementRecursive(element, function (testElement) { return testElement.hasAttribute(attribute); });
        return elementMatch && elementMatch.getAttribute(attribute);
    }

    var DATA_PORTAL_ATTRIBUTE = 'data-portal-element';
    /**
     * Identify element as a portal by setting an attribute.
     * @param element - Element to mark as a portal.
     */
    function setPortalAttribute(element) {
        element.setAttribute(DATA_PORTAL_ATTRIBUTE, 'true');
    }

    /**
     * Determine whether a target is within a portal from perspective of root or optional parent.
     * This function only works against portal components that use the setPortalAttribute function.
     * If both parent and child are within the same portal this function will return false.
     * @param target - Element to query portal containment status of.
     * @param parent - Optional parent perspective. Search for containing portal stops at parent
     * (or root if parent is undefined or invalid.)
     */
    function portalContainsElement(target, parent) {
        var elementMatch = findElementRecursive(target, function (testElement) { return parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE); });
        return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);
    }

    /**
     * Sets the virtual parent of an element.
     * Pass `undefined` as the `parent` to clear the virtual parent.
     *
     * @public
     */
    function setVirtualParent(child, parent) {
        var virtualChild = child;
        var virtualParent = parent;
        if (!virtualChild._virtual) {
            virtualChild._virtual = {
                children: [],
            };
        }
        var oldParent = virtualChild._virtual.parent;
        if (oldParent && oldParent !== parent) {
            // Remove the child from its old parent.
            var index = oldParent._virtual.children.indexOf(virtualChild);
            if (index > -1) {
                oldParent._virtual.children.splice(index, 1);
            }
        }
        virtualChild._virtual.parent = virtualParent || undefined;
        if (virtualParent) {
            if (!virtualParent._virtual) {
                virtualParent._virtual = {
                    children: [],
                };
            }
            virtualParent._virtual.children.push(virtualChild);
        }
    }

    var IS_FOCUSABLE_ATTRIBUTE$1 = 'data-is-focusable';
    var IS_VISIBLE_ATTRIBUTE = 'data-is-visible';
    var FOCUSZONE_ID_ATTRIBUTE$1 = 'data-focuszone-id';
    var FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';
    /**
     * Gets the first focusable element.
     *
     * @public
     */
    function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {
        return getNextElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones);
    }
    /**
     * Gets the last focusable element.
     *
     * @public
     */
    function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {
        return getPreviousElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones);
    }
    /**
     * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are
     * focusable elements that also have tabIndex != -1.)
     * @param rootElement - The parent element to search beneath.
     * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,
     * and iteration continues forward.  Typical use passes rootElement.firstChild.
     * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.
     * @param checkNode - Include currentElement in search when true. Defaults to true.
     * @public
     */
    function getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {
        if (checkNode === void 0) { checkNode = true; }
        return getNextElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);
    }
    /**
     * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are
     * focusable elements that also have tabIndex != -1.)
     * @param rootElement - The parent element to search beneath.
     * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,
     * and iteration continues in reverse.  Typical use passes rootElement.lastChild.
     * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.
     * @param checkNode - Include currentElement in search when true. Defaults to true.
     * @public
     */
    function getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {
        if (checkNode === void 0) { checkNode = true; }
        return getPreviousElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);
    }
    /**
     * Attempts to focus the first focusable element that is a child or child's child of the rootElement.
     *
     * @public
     * @param rootElement - Element to start the search for a focusable child.
     * @returns True if focus was set, false if it was not.
     */
    function focusFirstChild(rootElement) {
        var element = getNextElement(rootElement, rootElement, true, false, false, true);
        if (element) {
            focusAsync(element);
            return true;
        }
        return false;
    }
    /**
     * Traverse to find the previous element.
     * If tabbable is true, the element must have tabIndex != -1.
     *
     * @public
     */
    function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {
        if (!currentElement || (!allowFocusRoot && currentElement === rootElement)) {
            return null;
        }
        var isCurrentElementVisible = isElementVisible(currentElement);
        // Check its children.
        if (traverseChildren &&
            isCurrentElementVisible &&
            (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
            var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
            if (childMatch) {
                if ((tabbable && isElementTabbable(childMatch, true)) || !tabbable) {
                    return childMatch;
                }
                var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
                if (childMatchSiblingMatch) {
                    return childMatchSiblingMatch;
                }
                var childMatchParent = childMatch.parentElement;
                // At this point if we have not found any potential matches
                // start looking at the rest of the subtree under the currentParent.
                // NOTE: We do not want to recurse here because doing so could
                // cause elements to get skipped.
                while (childMatchParent && childMatchParent !== currentElement) {
                    var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
                    if (childMatchParentMatch) {
                        return childMatchParentMatch;
                    }
                    childMatchParent = childMatchParent.parentElement;
                }
            }
        }
        // Check the current node, if it's not the first traversal.
        if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
            return currentElement;
        }
        // Check its previous sibling.
        var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (siblingMatch) {
            return siblingMatch;
        }
        // Check its parent.
        if (!suppressParentTraversal) {
            return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
        }
        return null;
    }
    /**
     * Traverse to find the next focusable element.
     * If tabbable is true, the element must have tabIndex != -1.
     *
     * @public
     * @param checkNode - Include currentElement in search when true.
     */
    function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable) {
        if (!currentElement || (currentElement === rootElement && suppressChildTraversal && !allowFocusRoot)) {
            return null;
        }
        var isCurrentElementVisible = isElementVisible(currentElement);
        // Check the current node, if it's not the first traversal.
        if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
            return currentElement;
        }
        // Check its children.
        if (!suppressChildTraversal &&
            isCurrentElementVisible &&
            (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
            var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
            if (childMatch) {
                return childMatch;
            }
        }
        if (currentElement === rootElement) {
            return null;
        }
        // Check its sibling.
        var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (siblingMatch) {
            return siblingMatch;
        }
        if (!suppressParentTraversal) {
            return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
        }
        return null;
    }
    /**
     * Determines if an element is visible.
     *
     * @public
     */
    function isElementVisible(element) {
        // If the element is not valid, return false.
        if (!element || !element.getAttribute) {
            return false;
        }
        var visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);
        // If the element is explicitly marked with the visibility attribute, return that value as boolean.
        if (visibilityAttribute !== null && visibilityAttribute !== undefined) {
            return visibilityAttribute === 'true';
        }
        // Fallback to other methods of determining actual visibility.
        return (element.offsetHeight !== 0 ||
            element.offsetParent !== null ||
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            element.isVisible === true); // used as a workaround for testing.
    }
    /**
     * Determines if an element can receive focus programmatically or via a mouse click.
     * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,
     * meaning tabIndex != -1.
     *
     * @public
     */
    function isElementTabbable(element, checkTabIndex) {
        // If this element is null or is disabled, it is not considered tabbable.
        if (!element || element.disabled) {
            return false;
        }
        var tabIndex = 0;
        var tabIndexAttributeValue = null;
        if (element && element.getAttribute) {
            tabIndexAttributeValue = element.getAttribute('tabIndex');
            if (tabIndexAttributeValue) {
                tabIndex = parseInt(tabIndexAttributeValue, 10);
            }
        }
        var isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE$1) : null;
        var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;
        var result = !!element &&
            isFocusableAttribute !== 'false' &&
            (element.tagName === 'A' ||
                element.tagName === 'BUTTON' ||
                element.tagName === 'INPUT' ||
                element.tagName === 'TEXTAREA' ||
                element.tagName === 'SELECT' ||
                isFocusableAttribute === 'true' ||
                isTabIndexSet);
        return checkTabIndex ? tabIndex !== -1 && result : result;
    }
    /**
     * Determines if a given element is a focus zone.
     *
     * @public
     */
    function isElementFocusZone(element) {
        return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE$1));
    }
    /**
     * Determines if a given element is a focus sub zone.
     *
     * @public
     */
    function isElementFocusSubZone(element) {
        return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');
    }
    /**
     * Determines if an element, or any of its children, contain focus.
     *
     * @public
     */
    function doesElementContainFocus(element) {
        var document = getDocument(element);
        var currentActiveElement = document && document.activeElement;
        if (currentActiveElement && elementContains(element, currentActiveElement)) {
            return true;
        }
        return false;
    }
    /**
     * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap
     * @param element - element to start searching from
     * @param noWrapDataAttribute - the no wrap data attribute to match (either)
     * @returns true if focus should wrap, false otherwise
     */
    function shouldWrapFocus(element, noWrapDataAttribute) {
        return elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;
    }
    var targetToFocusOnNextRepaint = undefined;
    /**
     * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,
     * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,
     * only the latest called focusAsync element will actually be focused
     * @param element - The element to focus
     */
    function focusAsync(element) {
        if (element) {
            // An element was already queued to be focused, so replace that one with the new element
            if (targetToFocusOnNextRepaint) {
                targetToFocusOnNextRepaint = element;
                return;
            }
            targetToFocusOnNextRepaint = element;
            var win = getWindow(element);
            if (win) {
                // element.focus() is a no-op if the element is no longer in the DOM, meaning this is always safe
                win.requestAnimationFrame(function () {
                    targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();
                    // We are done focusing for this frame, so reset the queued focus element
                    targetToFocusOnNextRepaint = undefined;
                });
            }
        }
    }
    /**
     * Finds the closest focusable element via an index path from a parent. See
     * `getElementIndexPath` for getting an index path from an element to a child.
     */
    function getFocusableByIndexPath(parent, path) {
        var element = parent;
        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
            var index = path_1[_i];
            var nextChild = element.children[Math.min(index, element.children.length - 1)];
            if (!nextChild) {
                break;
            }
            element = nextChild;
        }
        element =
            isElementTabbable(element) && isElementVisible(element)
                ? element
                : getNextElement(parent, element, true) || getPreviousElement(parent, element);
        return element;
    }
    /**
     * Finds the element index path from a parent element to a child element.
     *
     * If you had this node structure: "A has children [B, C] and C has child D",
     * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.
     */
    function getElementIndexPath(fromElement, toElement) {
        var path = [];
        while (toElement && fromElement && toElement !== fromElement) {
            var parent_1 = getParent(toElement, true);
            if (parent_1 === null) {
                return [];
            }
            path.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));
            toElement = parent_1;
        }
        return path;
    }

    function on(element, eventName, callback, options) {
        element.addEventListener(eventName, callback, options);
        return function () { return element.removeEventListener(eventName, callback, options); };
    }

    var MAX_CACHE_COUNT = 50;
    var DEFAULT_SPECIFICITY_MULTIPLIER = 5;
    var _memoizedClassNames = 0;
    var stylesheet$1 = Stylesheet.getInstance();
    if (stylesheet$1 && stylesheet$1.onReset) {
        stylesheet$1.onReset(function () { return _memoizedClassNames++; });
    }
    // Note that because of the caching nature within the classNames memoization,
    // I've disabled this rule to simply be able to work with any types.
    /* eslint-disable @typescript-eslint/no-explicit-any */
    // This represents a prop we attach to each Map to indicate the cached return value
    // associated with the graph node.
    var retVal = '__retval__';
    /**
     * Creates a getClassNames function which calls getStyles given the props, and injects them
     * into mergeStyleSets.
     *
     * Note that the props you pass in on every render should be in the same order and
     * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating
     * these will cause extra recalcs to occur.
     */
    function classNamesFunction(options) {
        // We build a trie where each node is a Map. The map entry key represents an argument
        // value, and the entry value is another node (Map). Each node has a `__retval__`
        // property which is used to hold the cached response.
        if (options === void 0) { options = {}; }
        // To derive the response, we can simply ensure the arguments are added or already
        // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise
        // we call the `getStyles` api to evaluate, cache on the property, and return that.
        var map = new Map();
        var styleCalcCount = 0;
        var getClassNamesCount = 0;
        var currentMemoizedClassNames = _memoizedClassNames;
        var getClassNames = function (styleFunctionOrObject, styleProps) {
            var _a;
            if (styleProps === void 0) { styleProps = {}; }
            // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.
            // If there is also no style overrides, we can skip merge styles completely and
            // simply return the result from the style funcion.
            if (options.useStaticStyles &&
                typeof styleFunctionOrObject === 'function' &&
                styleFunctionOrObject.__noStyleOverride__) {
                return styleFunctionOrObject(styleProps);
            }
            getClassNamesCount++;
            var current = map;
            var theme = styleProps.theme;
            var rtl = theme && theme.rtl !== undefined ? theme.rtl : getRTL();
            var disableCaching = options.disableCaching;
            // On reset of our stylesheet, reset memoized cache.
            if (currentMemoizedClassNames !== _memoizedClassNames) {
                currentMemoizedClassNames = _memoizedClassNames;
                map = new Map();
                styleCalcCount = 0;
            }
            if (!options.disableCaching) {
                current = _traverseMap(map, styleFunctionOrObject);
                current = _traverseMap(current, styleProps);
            }
            if (disableCaching || !current[retVal]) {
                if (styleFunctionOrObject === undefined) {
                    current[retVal] = {};
                }
                else {
                    current[retVal] = mergeCssSets([
                        (typeof styleFunctionOrObject === 'function'
                            ? styleFunctionOrObject(styleProps)
                            : styleFunctionOrObject),
                    ], { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined });
                }
                if (!disableCaching) {
                    styleCalcCount++;
                }
            }
            if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {
                var win = getWindow();
                if ((_a = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _a === void 0 ? void 0 : _a.enableClassNameCacheFullWarning) {
                    // eslint-disable-next-line no-console
                    console.warn("Styles are being recalculated too frequently. Cache miss rate is " + styleCalcCount + "/" + getClassNamesCount + ".");
                    // eslint-disable-next-line no-console
                    console.trace();
                }
                map.clear();
                styleCalcCount = 0;
                // Mutate the options passed in, that's all we can do.
                options.disableCaching = true;
            }
            // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to
            // cache the return value for this branch of the graph.
            return current[retVal];
        };
        return getClassNames;
    }
    function _traverseEdge(current, value) {
        value = _normalizeValue(value);
        if (!current.has(value)) {
            current.set(value, new Map());
        }
        return current.get(value);
    }
    function _traverseMap(current, inputs) {
        if (typeof inputs === 'function') {
            var cachedInputsFromStyled = inputs.__cachedInputs__;
            if (cachedInputsFromStyled) {
                // The styled helper will generate the styles function and will attach the cached
                // inputs (consisting of the default styles, customzied styles, and user provided styles.)
                // These should be used as cache keys for deriving the memoized value.
                for (var _i = 0, _a = inputs.__cachedInputs__; _i < _a.length; _i++) {
                    var input = _a[_i];
                    current = _traverseEdge(current, input);
                }
            }
            else {
                current = _traverseEdge(current, inputs);
            }
        }
        else if (typeof inputs === 'object') {
            for (var propName in inputs) {
                if (inputs.hasOwnProperty(propName)) {
                    current = _traverseEdge(current, inputs[propName]);
                }
            }
        }
        return current;
    }
    function _normalizeValue(value) {
        switch (value) {
            case undefined:
                return '__undefined__';
            case null:
                return '__null__';
            default:
                return value;
        }
    }

    var _initializedStylesheetResets$1 = false;
    var _resetCounter = 0;
    var _emptyObject = { empty: true };
    var _dictionary = {};
    var _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;
    /**
     * Reset memoizations.
     */
    function resetMemoizations() {
        _resetCounter++;
    }
    /**
     * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.
     * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise
     * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in
     * undefined for a value and relying on a default function will execute it the first time, but will not
     * re-evaluate subsequent times which may have been unexpected.
     *
     * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is
     * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard
     * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.
     *
     * @public
     * @param cb - The function to memoize.
     * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.
     * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.
     * If the flag is set to true, the callback result is recomputed every time till the callback result is
     * not undefined/null for the first time, and then the non-undefined/null version gets cached.
     * @returns A memoized version of the function.
     */
    function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {
        if (maxCacheSize === void 0) { maxCacheSize = 100; }
        if (ignoreNullOrUndefinedResult === void 0) { ignoreNullOrUndefinedResult = false; }
        // Avoid breaking scenarios which don't have weak map.
        if (!_weakMap) {
            return cb;
        }
        if (!_initializedStylesheetResets$1) {
            var stylesheet = Stylesheet.getInstance();
            if (stylesheet && stylesheet.onReset) {
                Stylesheet.getInstance().onReset(resetMemoizations);
            }
            _initializedStylesheetResets$1 = true;
        }
        var rootNode;
        var cacheSize = 0;
        var localResetCounter = _resetCounter;
        return function memoizedFunction() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var currentNode = rootNode;
            if (rootNode === undefined ||
                localResetCounter !== _resetCounter ||
                (maxCacheSize > 0 && cacheSize > maxCacheSize)) {
                rootNode = _createNode();
                cacheSize = 0;
                localResetCounter = _resetCounter;
            }
            currentNode = rootNode;
            // Traverse the tree until we find the match.
            for (var i = 0; i < args.length; i++) {
                var arg = _normalizeArg(args[i]);
                if (!currentNode.map.has(arg)) {
                    currentNode.map.set(arg, _createNode());
                }
                currentNode = currentNode.map.get(arg);
            }
            if (!currentNode.hasOwnProperty('value')) {
                currentNode.value = cb.apply(void 0, args);
                cacheSize++;
            }
            if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {
                currentNode.value = cb.apply(void 0, args);
            }
            return currentNode.value;
        };
    }
    /**
     * Creates a memoizer for a single-value function, backed by a WeakMap.
     * With a WeakMap, the memoized values are only kept as long as the source objects,
     * ensuring that there is no memory leak.
     *
     * This function assumes that the input values passed to the wrapped function will be
     * `function` or `object` types. To memoize functions which accept other inputs, use
     * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.
     *
     * @public
     */
    function createMemoizer(getValue) {
        if (!_weakMap) {
            // Without a `WeakMap` implementation, memoization is not possible.
            return getValue;
        }
        var cache = new _weakMap();
        function memoizedGetValue(input) {
            if (!input || (typeof input !== 'function' && typeof input !== 'object')) {
                // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.
                // All other inputs cannot be memoized against in this manner.
                return getValue(input);
            }
            if (cache.has(input)) {
                return cache.get(input);
            }
            var value = getValue(input);
            cache.set(input, value);
            return value;
        }
        return memoizedGetValue;
    }
    function _normalizeArg(val) {
        if (!val) {
            return _emptyObject;
        }
        else if (typeof val === 'object' || typeof val === 'function') {
            return val;
        }
        else if (!_dictionary[val]) {
            _dictionary[val] = { val: val };
        }
        return _dictionary[val];
    }
    function _createNode() {
        return {
            map: _weakMap ? new _weakMap() : null,
        };
    }

    function createComposedComponent(outer) {
        var Outer = outer;
        var outerMemoizer = createMemoizer(function (inner) {
            if (outer === inner) {
                throw new Error('Attempted to compose a component with itself.');
            }
            var Inner = inner;
            var innerMemoizer = createMemoizer(function (defaultRender) {
                var InnerWithDefaultRender = function (innerProps) {
                    return React__namespace.createElement(Inner, tslib.__assign({}, innerProps, { defaultRender: defaultRender }));
                };
                return InnerWithDefaultRender;
            });
            var OuterWithDefaultRender = function (outerProps) {
                var defaultRender = outerProps.defaultRender;
                return React__namespace.createElement(Outer, tslib.__assign({}, outerProps, { defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner }));
            };
            return OuterWithDefaultRender;
        });
        return outerMemoizer;
    }
    var componentAsMemoizer = createMemoizer(createComposedComponent);
    /**
     * Composes two components which conform to the `IComponentAs` specification; that is, two
     * components which accept a `defaultRender` prop, which is a 'default' implementation of
     * a component which accepts the same overall props.
     *
     * @public
     */
    function composeComponentAs(outer, inner) {
        return componentAsMemoizer(outer)(inner);
    }

    /**
     * Determines whether a component is controlled.
     * @param props - Component props
     * @param valueProp - Prop containing the controlled value
     * @returns true if controlled, false if uncontrolled
     */
    function isControlled(props, valueProp) {
        // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.
        // Mirror that behavior here (rather than checking for just undefined).
        return props[valueProp] !== undefined && props[valueProp] !== null;
    }

    /**
     * Concatination helper, which can merge class names together. Skips over falsey values.
     *
     * @public
     */
    function css() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var classes = [];
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
            var arg = args_1[_a];
            if (arg) {
                if (typeof arg === 'string') {
                    classes.push(arg);
                }
                else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {
                    classes.push(arg.toString());
                }
                else {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    for (var key in arg) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        if (arg[key]) {
                            classes.push(key);
                        }
                    }
                }
            }
        }
        return classes.join(' ');
    }

    var CustomizationsGlobalKey = 'customizations';
    var NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };
    var _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {
        settings: {},
        scopedSettings: {},
        inCustomizerContext: false,
    });
    var _events = [];
    var Customizations = /** @class */ (function () {
        function Customizations() {
        }
        Customizations.reset = function () {
            _allSettings.settings = {};
            _allSettings.scopedSettings = {};
        };
        /** Apply global Customization settings.
         * @example Customizations.applySettings(\{ theme: \{...\} \});
         */
        Customizations.applySettings = function (settings) {
            _allSettings.settings = tslib.__assign(tslib.__assign({}, _allSettings.settings), settings);
            Customizations._raiseChange();
        };
        /** Apply Customizations to a particular named scope, like a component.
         * @example Customizations.applyScopedSettings('Nav', \{ styles: () =\> \{\} \});
         */
        Customizations.applyScopedSettings = function (scopeName, settings) {
            _allSettings.scopedSettings[scopeName] = tslib.__assign(tslib.__assign({}, _allSettings.scopedSettings[scopeName]), settings);
            Customizations._raiseChange();
        };
        Customizations.getSettings = function (properties, scopeName, localSettings) {
            if (localSettings === void 0) { localSettings = NO_CUSTOMIZATIONS; }
            var settings = {};
            var localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};
            var globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};
            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
                var property = properties_1[_i];
                settings[property] =
                    localScopedSettings[property] ||
                        localSettings.settings[property] ||
                        globalScopedSettings[property] ||
                        _allSettings.settings[property];
            }
            return settings;
        };
        /** Used to run some code that sets Customizations without triggering an update until the end.
         * Useful for applying Customizations that don't affect anything currently rendered, or for
         * applying many customizations at once.
         * @param suppressUpdate - Do not raise the change event at the end, preventing all updates
         */
        Customizations.applyBatchedUpdates = function (code, suppressUpdate) {
            Customizations._suppressUpdates = true;
            try {
                code();
            }
            catch (_a) {
                /* do nothing */
            }
            Customizations._suppressUpdates = false;
            if (!suppressUpdate) {
                Customizations._raiseChange();
            }
        };
        Customizations.observe = function (onChange) {
            _events.push(onChange);
        };
        Customizations.unobserve = function (onChange) {
            _events = _events.filter(function (cb) { return cb !== onChange; });
        };
        Customizations._raiseChange = function () {
            if (!Customizations._suppressUpdates) {
                _events.forEach(function (cb) { return cb(); });
            }
        };
        return Customizations;
    }());

    var CustomizerContext = React__namespace.createContext({
        customizations: {
            inCustomizerContext: false,
            settings: {},
            scopedSettings: {},
        },
    });

    /**
     * Merge new and old settings, giving priority to new settings.
     * New settings is optional in which case oldSettings is returned as-is.
     * @param oldSettings - Old settings to fall back to.
     * @param newSettings - New settings that will be merged over oldSettings.
     * @returns Merged settings.
     */
    function mergeSettings(oldSettings, newSettings) {
        if (oldSettings === void 0) { oldSettings = {}; }
        var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);
        return mergeSettingsWith(oldSettings);
    }
    function mergeScopedSettings(oldSettings, newSettings) {
        if (oldSettings === void 0) { oldSettings = {}; }
        var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);
        return mergeSettingsWith(oldSettings);
    }
    function _isSettingsFunction(settings) {
        return typeof settings === 'function';
    }
    function _settingsMergeWith(newSettings) {
        return function (settings) { return (newSettings ? tslib.__assign(tslib.__assign({}, settings), newSettings) : settings); };
    }
    function _scopedSettingsMergeWith(scopedSettingsFromProps) {
        if (scopedSettingsFromProps === void 0) { scopedSettingsFromProps = {}; }
        return function (oldScopedSettings) {
            var newScopedSettings = tslib.__assign({}, oldScopedSettings);
            for (var scopeName in scopedSettingsFromProps) {
                if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {
                    newScopedSettings[scopeName] = tslib.__assign(tslib.__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);
                }
            }
            return newScopedSettings;
        };
    }

    /**
     * Merge props and customizations giving priority to props over context.
     * NOTE: This function will always perform multiple merge operations. Use with caution.
     * @param props - New settings to merge in.
     * @param parentContext - Context containing current settings.
     * @returns Merged customizations.
     */
    function mergeCustomizations(props, parentContext) {
        var _a = (parentContext || {}).customizations, customizations = _a === void 0 ? { settings: {}, scopedSettings: {} } : _a;
        return {
            customizations: {
                settings: mergeSettings(customizations.settings, props.settings),
                scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),
                inCustomizerContext: true,
            },
        };
    }

    /**
     * The Customizer component allows for default props to be mixed into components which
     * are decorated with the customizable() decorator, or use the styled HOC. This enables
     * injection scenarios like:
     *
     * 1. render svg icons instead of the icon font within all buttons
     * 2. inject a custom theme object into a component
     *
     * Props are provided via the settings prop which should be one of the following:
     * - A json map which contains 1 or more name/value pairs representing injectable props.
     * - A function that receives the current settings and returns the new ones that apply to the scope
     *
     * @public
     *
     * @deprecated This component is deprecated for purpose of applying theme to components
     * as of `@fluentui/react` version 8. Use `ThemeProvider` for applying theme instead.
     */
    var Customizer = /** @class */ (function (_super) {
        tslib.__extends(Customizer, _super);
        function Customizer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._onCustomizationChange = function () { return _this.forceUpdate(); };
            return _this;
        }
        Customizer.prototype.componentDidMount = function () {
            Customizations.observe(this._onCustomizationChange);
        };
        Customizer.prototype.componentWillUnmount = function () {
            Customizations.unobserve(this._onCustomizationChange);
        };
        Customizer.prototype.render = function () {
            var _this = this;
            var contextTransform = this.props.contextTransform;
            return (React__namespace.createElement(CustomizerContext.Consumer, null, function (parentContext) {
                var newContext = mergeCustomizations(_this.props, parentContext);
                if (contextTransform) {
                    newContext = contextTransform(newContext);
                }
                return React__namespace.createElement(CustomizerContext.Provider, { value: newContext }, _this.props.children);
            }));
        };
        return Customizer;
    }(React__namespace.Component));

    /**
     * Allows you to hoist static functions in components.
     * Created for the purpose of fixing broken static functions in classes
     * that utilize decorators.
     *
     * @public
     * @param source - The object where the methods are hoisted from.
     * @param dest - The object to hoist the methods onto.
     * @returns The dest object with methods added
     */
    function hoistStatics(source, dest) {
        for (var name_1 in source) {
            if (source.hasOwnProperty(name_1)) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                dest[name_1] = source[name_1];
            }
        }
        return dest;
    }

    function customizable(scope, fields, concatStyles) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return function customizableFactory(ComposedComponent) {
            var _a;
            var resultClass = (_a = /** @class */ (function (_super) {
                    tslib.__extends(ComponentWithInjectedProps, _super);
                    function ComponentWithInjectedProps(props) {
                        var _this = _super.call(this, props) || this;
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        _this._styleCache = {};
                        _this._onSettingChanged = _this._onSettingChanged.bind(_this);
                        return _this;
                    }
                    ComponentWithInjectedProps.prototype.componentDidMount = function () {
                        Customizations.observe(this._onSettingChanged);
                    };
                    ComponentWithInjectedProps.prototype.componentWillUnmount = function () {
                        Customizations.unobserve(this._onSettingChanged);
                    };
                    ComponentWithInjectedProps.prototype.render = function () {
                        var _this = this;
                        return (React__namespace.createElement(CustomizerContext.Consumer, null, function (context) {
                            var defaultProps = Customizations.getSettings(fields, scope, context.customizations);
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var componentProps = _this.props;
                            // If defaultProps.styles is a function, evaluate it before calling concatStyleSets
                            if (defaultProps.styles && typeof defaultProps.styles === 'function') {
                                defaultProps.styles = defaultProps.styles(tslib.__assign(tslib.__assign({}, defaultProps), componentProps));
                            }
                            // If concatStyles is true and custom styles have been defined compute those styles
                            if (concatStyles && defaultProps.styles) {
                                if (_this._styleCache.default !== defaultProps.styles ||
                                    _this._styleCache.component !== componentProps.styles) {
                                    var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);
                                    _this._styleCache.default = defaultProps.styles;
                                    _this._styleCache.component = componentProps.styles;
                                    _this._styleCache.merged = mergedStyles;
                                }
                                return React__namespace.createElement(ComposedComponent, tslib.__assign({}, defaultProps, componentProps, { styles: _this._styleCache.merged }));
                            }
                            return React__namespace.createElement(ComposedComponent, tslib.__assign({}, defaultProps, componentProps));
                        }));
                    };
                    ComponentWithInjectedProps.prototype._onSettingChanged = function () {
                        this.forceUpdate();
                    };
                    return ComponentWithInjectedProps;
                }(React__namespace.Component)),
                _a.displayName = 'Customized' + scope,
                _a);
            return hoistStatics(ComposedComponent, resultClass);
        };
    }

    /**
     * Hook to get Customizations settings from Customizations singleton or CustomizerContext.
     * It will trigger component state update on settings change observed.
     */
    function useCustomizationSettings(properties, scopeName) {
        var forceUpdate = useForceUpdate();
        var customizations = React__namespace.useContext(CustomizerContext).customizations;
        var inCustomizerContext = customizations.inCustomizerContext;
        React__namespace.useEffect(function () {
            if (!inCustomizerContext) {
                Customizations.observe(forceUpdate);
            }
            return function () {
                if (!inCustomizerContext) {
                    Customizations.unobserve(forceUpdate);
                }
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps -- exclude forceUpdate
        }, [inCustomizerContext]);
        return Customizations.getSettings(properties, scopeName, customizations);
    }
    function useForceUpdate() {
        var _a = React__namespace.useState(0), setValue = _a[1];
        return function () { return setValue(function (value) { return ++value; }); };
    }

    /**
     * Extends a component's lifetime methods by appending new functions to the existing lifetime functions.
     */
    function extendComponent(parent, methods) {
        for (var name_1 in methods) {
            if (methods.hasOwnProperty(name_1)) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                parent[name_1] = appendFunction(parent, parent[name_1], methods[name_1]);
            }
        }
    }

    // Initialize global window id.
    var CURRENT_ID_PROPERTY = '__currentId__';
    var DEFAULT_ID_STRING = 'id__';
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var _global = getWindow() || {};
    if (_global[CURRENT_ID_PROPERTY] === undefined) {
        _global[CURRENT_ID_PROPERTY] = 0;
    }
    var _initializedStylesheetResets = false;
    /**
     * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)
     *
     * @public
     */
    function getId(prefix) {
        if (!_initializedStylesheetResets) {
            // Configure ids to reset on stylesheet resets.
            var stylesheet = Stylesheet.getInstance();
            if (stylesheet && stylesheet.onReset) {
                stylesheet.onReset(resetIds);
            }
            _initializedStylesheetResets = true;
        }
        var index = _global[CURRENT_ID_PROPERTY]++;
        return (prefix === undefined ? DEFAULT_ID_STRING : prefix) + index;
    }
    /**
     * Resets id counter to an (optional) number.
     *
     * @public
     */
    function resetIds(counter) {
        if (counter === void 0) { counter = 0; }
        _global[CURRENT_ID_PROPERTY] = counter;
    }

    var toObjectMap = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var result = {};
        for (var _a = 0, items_1 = items; _a < items_1.length; _a++) {
            var item = items_1[_a];
            var keys = Array.isArray(item) ? item : Object.keys(item);
            for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
                var key = keys_1[_b];
                result[key] = 1;
            }
        }
        return result;
    };
    /**
     * An array of events that are allowed on every html element type.
     *
     * @public
     */
    var baseElementEvents = toObjectMap([
        'onCopy',
        'onCut',
        'onPaste',
        'onCompositionEnd',
        'onCompositionStart',
        'onCompositionUpdate',
        'onFocus',
        'onFocusCapture',
        'onBlur',
        'onBlurCapture',
        'onChange',
        'onInput',
        'onSubmit',
        'onLoad',
        'onError',
        'onKeyDown',
        'onKeyDownCapture',
        'onKeyPress',
        'onKeyUp',
        'onAbort',
        'onCanPlay',
        'onCanPlayThrough',
        'onDurationChange',
        'onEmptied',
        'onEncrypted',
        'onEnded',
        'onLoadedData',
        'onLoadedMetadata',
        'onLoadStart',
        'onPause',
        'onPlay',
        'onPlaying',
        'onProgress',
        'onRateChange',
        'onSeeked',
        'onSeeking',
        'onStalled',
        'onSuspend',
        'onTimeUpdate',
        'onVolumeChange',
        'onWaiting',
        'onClick',
        'onClickCapture',
        'onContextMenu',
        'onDoubleClick',
        'onDrag',
        'onDragEnd',
        'onDragEnter',
        'onDragExit',
        'onDragLeave',
        'onDragOver',
        'onDragStart',
        'onDrop',
        'onMouseDown',
        'onMouseDownCapture',
        'onMouseEnter',
        'onMouseLeave',
        'onMouseMove',
        'onMouseOut',
        'onMouseOver',
        'onMouseUp',
        'onMouseUpCapture',
        'onSelect',
        'onTouchCancel',
        'onTouchEnd',
        'onTouchMove',
        'onTouchStart',
        'onScroll',
        'onWheel',
        'onPointerCancel',
        'onPointerDown',
        'onPointerEnter',
        'onPointerLeave',
        'onPointerMove',
        'onPointerOut',
        'onPointerOver',
        'onPointerUp',
        'onGotPointerCapture',
        'onLostPointerCapture',
    ]);
    /**
     * An array of element attributes which are allowed on every html element type.
     *
     * @public
     */
    var baseElementProperties = toObjectMap([
        'accessKey',
        'children',
        'className',
        'contentEditable',
        'dir',
        'draggable',
        'hidden',
        'htmlFor',
        'id',
        'lang',
        'ref',
        'role',
        'style',
        'tabIndex',
        'title',
        'translate',
        'spellCheck',
        'name', // global
    ]);
    /**
     * An array of HTML element properties and events.
     *
     * @public
     */
    var htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents);
    /**
     * An array of LABEL tag properties and events.
     *
     * @public
     */
    var labelProperties = toObjectMap(htmlElementProperties, [
        'form', // button, fieldset, input, label, meter, object, output, select, textarea
    ]);
    /**
     * An array of AUDIO tag properties and events.

     * @public
     */
    var audioProperties = toObjectMap(htmlElementProperties, [
        'height',
        'loop',
        'muted',
        'preload',
        'src',
        'width', // canvas, embed, iframe, img, input, object, video
    ]);
    /**
     * An array of VIDEO tag properties and events.
     *
     * @public
     */
    var videoProperties = toObjectMap(audioProperties, [
        'poster', // video
    ]);
    /**
     * An array of OL tag properties and events.
     *
     * @public
     */
    var olProperties = toObjectMap(htmlElementProperties, [
        'start', // ol
    ]);
    /**
     * An array of LI tag properties and events.
     *
     * @public
     */
    var liProperties = toObjectMap(htmlElementProperties, [
        'value', // button, input, li, option, meter, progress, param
    ]);
    /**
     * An array of A tag properties and events.
     *
     * @public
     */
    var anchorProperties = toObjectMap(htmlElementProperties, [
        'download',
        'href',
        'hrefLang',
        'media',
        'rel',
        'target',
        'type', // a, button, input, link, menu, object, script, source, style
    ]);
    /**
     * An array of BUTTON tag properties and events.
     *
     * @public
     */
    var buttonProperties = toObjectMap(htmlElementProperties, [
        'autoFocus',
        'disabled',
        'form',
        'formAction',
        'formEncType',
        'formMethod',
        'formNoValidate',
        'formTarget',
        'type',
        'value', // button, input, li, option, meter, progress, param,
    ]);
    /**
     * An array of INPUT tag properties and events.
     *
     * @public
     */
    var inputProperties = toObjectMap(buttonProperties, [
        'accept',
        'alt',
        'autoCapitalize',
        'autoComplete',
        'checked',
        'dirname',
        'form',
        'height',
        'inputMode',
        'list',
        'max',
        'maxLength',
        'min',
        'minLength',
        'multiple',
        'pattern',
        'placeholder',
        'readOnly',
        'required',
        'src',
        'step',
        'size',
        'type',
        'value',
        'width', // canvas, embed, iframe, img, input, object, video
    ]);
    /**
     * An array of TEXTAREA tag properties and events.
     *
     * @public
     */
    var textAreaProperties = toObjectMap(buttonProperties, [
        'autoCapitalize',
        'cols',
        'dirname',
        'form',
        'maxLength',
        'minLength',
        'placeholder',
        'readOnly',
        'required',
        'rows',
        'wrap', // textarea
    ]);
    /**
     * An array of SELECT tag properties and events.
     *
     * @public
     */
    var selectProperties = toObjectMap(buttonProperties, [
        'form',
        'multiple',
        'required', // input, select, textarea
    ]);
    var optionProperties = toObjectMap(htmlElementProperties, [
        'selected',
        'value', // button, input, li, option, meter, progress, param
    ]);
    /**
     * An array of TABLE tag properties and events.
     *
     * @public
     */
    var tableProperties = toObjectMap(htmlElementProperties, [
        'cellPadding',
        'cellSpacing', // table
    ]);
    /**
     * An array of TR tag properties and events.
     *
     * @public
     */
    var trProperties = htmlElementProperties;
    /**
     * An array of TH tag properties and events.
     *
     * @public
     */
    var thProperties = toObjectMap(htmlElementProperties, [
        'rowSpan',
        'scope', // th
    ]);
    /**
     * An array of TD tag properties and events.
     *
     * @public
     */
    var tdProperties = toObjectMap(htmlElementProperties, [
        'colSpan',
        'headers',
        'rowSpan',
        'scope', // th
    ]);
    var colGroupProperties = toObjectMap(htmlElementProperties, [
        'span', // col, colgroup
    ]);
    var colProperties = toObjectMap(htmlElementProperties, [
        'span', // col, colgroup
    ]);
    /**
     * An array of FORM tag properties and events.
     *
     * @public
     */
    var formProperties = toObjectMap(htmlElementProperties, [
        'acceptCharset',
        'action',
        'encType',
        'encType',
        'method',
        'noValidate',
        'target', // form
    ]);
    /**
     * An array of IFRAME tag properties and events.
     *
     * @public
     */
    var iframeProperties = toObjectMap(htmlElementProperties, [
        'allow',
        'allowFullScreen',
        'allowPaymentRequest',
        'allowTransparency',
        'csp',
        'height',
        'importance',
        'referrerPolicy',
        'sandbox',
        'src',
        'srcDoc',
        'width', // canvas, embed, iframe, img, input, object, video,
    ]);
    /**
     * An array of IMAGE tag properties and events.
     *
     * @public
     */
    var imgProperties = toObjectMap(htmlElementProperties, [
        'alt',
        'crossOrigin',
        'height',
        'src',
        'srcSet',
        'useMap',
        'width', // canvas, embed, iframe, img, input, object, video
    ]);
    /**
     * An array of DIV tag properties and events.
     *
     * @public
     */
    var divProperties = htmlElementProperties;
    /**
     * Gets native supported props for an html element provided the allowance set. Use one of the property
     * sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given
     * props set. Note that all data- and aria- prefixed attributes will be allowed.
     * NOTE: getNativeProps should always be applied first when adding props to a react component. The
     * non-native props should be applied second. This will prevent getNativeProps from overriding your custom props.
     * For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to
     * the component after an onClick function is added, then the getNativeProps onClick will override it.
     *
     * @public
     * @param props - The unfiltered input props
     * @param allowedPropsNames - The array or record of allowed prop names.
     * @returns The filtered props
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function getNativeProps(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    props, allowedPropNames, excludedPropNames) {
        // It'd be great to properly type this while allowing 'aria-` and 'data-' attributes like TypeScript does for
        // JSX attributes, but that ability is hardcoded into the TS compiler with no analog in TypeScript typings.
        // Then we'd be able to enforce props extends native props (including aria- and data- attributes), and then
        // return native props.
        // We should be able to do this once this PR is merged: https://github.com/microsoft/TypeScript/pull/26797
        var isArray = Array.isArray(allowedPropNames);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var result = {};
        var keys = Object.keys(props);
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var key = keys_2[_i];
            var isNativeProp = (!isArray && allowedPropNames[key]) ||
                (isArray && allowedPropNames.indexOf(key) >= 0) ||
                key.indexOf('data-') === 0 ||
                key.indexOf('aria-') === 0;
            if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                result[key] = props[key];
            }
        }
        return result;
    }

    var nativeElementMap = {
        label: labelProperties,
        audio: audioProperties,
        video: videoProperties,
        ol: olProperties,
        li: liProperties,
        a: anchorProperties,
        button: buttonProperties,
        input: inputProperties,
        textarea: textAreaProperties,
        select: selectProperties,
        option: optionProperties,
        table: tableProperties,
        tr: trProperties,
        th: thProperties,
        td: tdProperties,
        colGroup: colGroupProperties,
        col: colProperties,
        form: formProperties,
        iframe: iframeProperties,
        img: imgProperties,
    };
    /**
     * Given an element tagname and user props, filters the props to only allowed props for the given
     * element type.
     * @param tagName - Tag name (e.g. "div")
     * @param props - Props object
     * @param excludedPropNames - List of props to disallow
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function getNativeElementProps(tagName, props, excludedPropNames) {
        var allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;
        return getNativeProps(props, allowedPropNames, excludedPropNames);
    }

    var REACT_LIFECYCLE_EXCLUSIONS = [
        'setState',
        'render',
        'componentWillMount',
        'UNSAFE_componentWillMount',
        'componentDidMount',
        'componentWillReceiveProps',
        'UNSAFE_componentWillReceiveProps',
        'shouldComponentUpdate',
        'componentWillUpdate',
        'getSnapshotBeforeUpdate',
        'UNSAFE_componentWillUpdate',
        'componentDidUpdate',
        'componentWillUnmount',
    ];
    /**
     * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.
     *
     * @public
     * @param destination - The instance of the object to hoist the methods onto.
     * @param source - The instance of the object where the methods are hoisted from.
     * @param exclusions - (Optional) What methods to exclude from being hoisted.
     * @returns An array of names of methods that were hoisted.
     */
    function hoistMethods(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    destination, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    source, exclusions) {
        if (exclusions === void 0) { exclusions = REACT_LIFECYCLE_EXCLUSIONS; }
        var hoisted = [];
        var _loop_1 = function (methodName) {
            if (typeof source[methodName] === 'function' &&
                destination[methodName] === undefined &&
                (!exclusions || exclusions.indexOf(methodName) === -1)) {
                hoisted.push(methodName);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                destination[methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    source[methodName].apply(source, args);
                };
            }
        };
        for (var methodName in source) {
            _loop_1(methodName);
        }
        return hoisted;
    }
    /**
     * Provides a method for convenience to unhoist hoisted methods.
     *
     * @public
     * @param source - The source object upon which methods were hoisted.
     * @param methodNames - An array of method names to unhoist.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function unhoistMethods(source, methodNames) {
        methodNames.forEach(function (methodName) { return delete source[methodName]; });
    }

    /**
     * Helper to manage componentRef resolution. Internally appends logic to
     * lifetime methods to resolve componentRef to the passed in object.
     *
     * Usage: call initializeComponentRef(this) in the constructor,
     */
    function initializeComponentRef(obj) {
        extendComponent(obj, {
            componentDidMount: _onMount,
            componentDidUpdate: _onUpdate,
            componentWillUnmount: _onUnmount,
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function _onMount() {
        _setComponentRef(this.props.componentRef, this);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function _onUpdate(prevProps) {
        if (prevProps.componentRef !== this.props.componentRef) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            _setComponentRef(prevProps.componentRef, null);
            _setComponentRef(this.props.componentRef, this);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function _onUnmount() {
        _setComponentRef(this.props.componentRef, null);
    }
    function _setComponentRef(componentRef, value) {
        if (componentRef) {
            if (typeof componentRef === 'object') {
                componentRef.current = value;
            }
            else if (typeof componentRef === 'function') {
                componentRef(value);
            }
        }
    }

    var _a$7;
    var DirectionalKeyCodes = (_a$7 = {},
        _a$7[KeyCodes.up] = 1,
        _a$7[KeyCodes.down] = 1,
        _a$7[KeyCodes.left] = 1,
        _a$7[KeyCodes.right] = 1,
        _a$7[KeyCodes.home] = 1,
        _a$7[KeyCodes.end] = 1,
        _a$7[KeyCodes.tab] = 1,
        _a$7[KeyCodes.pageUp] = 1,
        _a$7[KeyCodes.pageDown] = 1,
        _a$7);
    /**
     * Returns true if the keycode is a directional keyboard key.
     */
    function isDirectionalKeyCode(which) {
        return !!DirectionalKeyCodes[which];
    }

    var IsFocusVisibleClassName = 'ms-Fabric--isFocusVisible';
    var IsFocusHiddenClassName = 'ms-Fabric--isFocusHidden';
    /**
     * Sets the visibility of focus styling.
     *
     * By default, focus styles (the box surrounding a focused Button, for example) only show up when navigational
     * keypresses occur (through Tab, arrows, PgUp/PgDn, Home and End), and are hidden when mouse interactions occur.
     * This API provides an imperative way to turn them on/off.
     *
     * A use case might be when you have a keypress like ctrl-f6 navigate to a particular region on the page,
     * and want focus to show up.
     *
     * @param enabled - whether to remove or add focus
     * @param target - optional target
     */
    function setFocusVisibility(enabled, target) {
        var win = target ? getWindow(target) : getWindow();
        if (win) {
            var classList = win.document.body.classList;
            classList.add(enabled ? IsFocusVisibleClassName : IsFocusHiddenClassName);
            classList.remove(enabled ? IsFocusHiddenClassName : IsFocusVisibleClassName);
        }
    }

    /**
     * Counter for mounted component that uses focus rectangle.
     * We want to cleanup the listners before last component that uses focus rectangle unmounts.
     */
    var mountCounters = new WeakMap();
    function setMountCounters(key, delta) {
        var newValue;
        var currValue = mountCounters.get(key);
        if (currValue) {
            newValue = currValue + delta;
        }
        else {
            newValue = 1;
        }
        mountCounters.set(key, newValue);
        return newValue;
    }
    /**
     * Initializes the logic which:
     *
     * 1. Subscribes keydown and mousedown events. (It will only do it once per window,
     *    so it's safe to call this method multiple times.)
     * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname
     *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.
     * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the
     *    document body, removes the 'ms-Fabric--isFocusVisible' classname.
     *
     * This logic allows components on the page to conditionally render focus treatments based on
     * the existence of global classnames, which simplifies logic overall.
     *
     * @param rootRef - A Ref object. Focus rectangle can be applied on itself and all its children.
     */
    function useFocusRects(rootRef) {
        React__namespace.useEffect(function () {
            var _a;
            var win = getWindow(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
            if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {
                return undefined;
            }
            var count = setMountCounters(win, 1);
            if (count <= 1) {
                win.addEventListener('mousedown', _onMouseDown, true);
                win.addEventListener('pointerdown', _onPointerDown, true);
                win.addEventListener('keydown', _onKeyDown, true);
            }
            return function () {
                var _a;
                if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {
                    return;
                }
                count = setMountCounters(win, -1);
                if (count === 0) {
                    win.removeEventListener('mousedown', _onMouseDown, true);
                    win.removeEventListener('pointerdown', _onPointerDown, true);
                    win.removeEventListener('keydown', _onKeyDown, true);
                }
            };
        }, [rootRef]);
    }
    /**
     * Function Component wrapper which enables calling `useFocusRects` hook.
     * Renders nothing.
     */
    var FocusRects = function (props) {
        useFocusRects(props.rootRef);
        return null;
    };
    function _onMouseDown(ev) {
        setFocusVisibility(false, ev.target);
    }
    function _onPointerDown(ev) {
        if (ev.pointerType !== 'mouse') {
            setFocusVisibility(false, ev.target);
        }
    }
    function _onKeyDown(ev) {
        // eslint-disable-next-line deprecation/deprecation
        if (isDirectionalKeyCode(ev.which)) {
            setFocusVisibility(true, ev.target);
        }
    }

    /**
     * Fetches an item from local storage without throwing an exception
     * @param key The key of the item to fetch from local storage
     */
    function getItem(key) {
        var result = null;
        try {
            var win = getWindow();
            result = win ? win.localStorage.getItem(key) : null;
        }
        catch (e) {
            /* Eat the exception */
        }
        return result;
    }

    // Default to undefined so that we initialize on first read.
    var _language;
    var STORAGE_KEY = 'language';
    /**
     * Gets the language set for the page.
     * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.
     */
    function getLanguage(persistenceType) {
        if (persistenceType === void 0) { persistenceType = 'sessionStorage'; }
        if (_language === undefined) {
            var doc = getDocument();
            var savedLanguage = persistenceType === 'localStorage'
                ? getItem(STORAGE_KEY)
                : persistenceType === 'sessionStorage'
                    ? getItem$1(STORAGE_KEY)
                    : undefined;
            if (savedLanguage) {
                _language = savedLanguage;
            }
            if (_language === undefined && doc) {
                _language = doc.documentElement.getAttribute('lang');
            }
            if (_language === undefined) {
                _language = 'en';
            }
        }
        return _language;
    }

    /**
     * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged
     * together in the order provided. If an object creates a circular reference, it will assign the
     * original reference.
     */
    function merge(target) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
            var arg = args_1[_a];
            _merge(target || {}, arg);
        }
        return target;
    }
    /**
     * The _merge helper iterates through all props on source and assigns them to target.
     * When the value is an object, we will create a deep clone of the object. However if
     * there is a circular reference, the value will not be deep cloned and will persist
     * the reference.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function _merge(target, source, circularReferences) {
        if (circularReferences === void 0) { circularReferences = []; }
        circularReferences.push(source);
        for (var name_1 in source) {
            if (source.hasOwnProperty(name_1)) {
                if (name_1 !== '__proto__' && name_1 !== 'constructor' && name_1 !== 'prototype') {
                    var value = source[name_1];
                    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                        var isCircularReference = circularReferences.indexOf(value) > -1;
                        target[name_1] = (isCircularReference
                            ? value
                            : _merge(target[name_1] || {}, value, circularReferences));
                    }
                    else {
                        target[name_1] = value;
                    }
                }
            }
        }
        circularReferences.pop();
        return target;
    }

    /**
     * Returns true if and only if the user is on a iOS device.
     * Used to determine whether iOS-specific behavior should be applied.
     */
    var isIOS = function () {
        if (!window || !window.navigator || !window.navigator.userAgent) {
            return false;
        }
        return /iPad|iPhone|iPod/i.test(window.navigator.userAgent);
    };

    /** Tag names to ignore when modalizing */
    var tagsToIgnore = ['TEMPLATE', 'STYLE', 'SCRIPT'];
    /**
     * Call this on a target element to make it modal to screen readers.
     * Returns a function that undoes the changes it made.
     */
    function modalize(target) {
        var targetDocument = getDocument(target);
        if (!targetDocument) {
            // can't do this in SSR
            return function () { return undefined; };
        }
        var affectedNodes = [];
        // start at target, then recurse and do the same for parent, until we reach <body>
        while (target !== targetDocument.body && target.parentElement) {
            // grab all siblings of current element
            for (var _i = 0, _a = target.parentElement.children; _i < _a.length; _i++) {
                var sibling = _a[_i];
                // but ignore elements that are already aria-hidden
                var ariaHidden = sibling.getAttribute('aria-hidden');
                if (sibling !== target && (ariaHidden === null || ariaHidden === void 0 ? void 0 : ariaHidden.toLowerCase()) !== 'true' && tagsToIgnore.indexOf(sibling.tagName) === -1) {
                    affectedNodes.push([sibling, ariaHidden]);
                }
            }
            target = target.parentElement;
        }
        // take all those elements and set aria-hidden=true on them
        affectedNodes.forEach(function (_a) {
            var node = _a[0];
            node.setAttribute('aria-hidden', 'true');
        });
        return function () {
            unmodalize(affectedNodes);
            affectedNodes = []; // dispose
        };
    }
    /**
     * Undoes the changes that modalize() did.
     */
    function unmodalize(affectedNodes) {
        affectedNodes.forEach(function (_a) {
            var node = _a[0], originalValue = _a[1];
            // Restore the original value (false or unset)
            if (originalValue) {
                node.setAttribute('aria-hidden', originalValue);
            }
            else {
                node.removeAttribute('aria-hidden');
            }
        });
    }

    var isMacResult;
    /**
     * Returns true if the user is on a Mac. Caches the result value.
     * @param reset - Reset the cached result value (mainly for testing).
     */
    function isMac(reset) {
        var _a;
        if (typeof isMacResult === 'undefined' || reset) {
            var win = getWindow();
            // In certain SSR frameworks, `window` will be defined even on the server but `navigator` will be undefined
            var userAgent = (_a = win === null || win === void 0 ? void 0 : win.navigator) === null || _a === void 0 ? void 0 : _a.userAgent;
            isMacResult = !!userAgent && userAgent.indexOf('Macintosh') !== -1;
        }
        return !!isMacResult;
    }

    function createComposedRenderFunction(outer) {
        var outerMemoizer = createMemoizer(function (inner) {
            var innerMemoizer = createMemoizer(function (defaultRender) {
                return function (innerProps) {
                    return inner(innerProps, defaultRender);
                };
            });
            return function (outerProps, defaultRender) {
                return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);
            };
        });
        return outerMemoizer;
    }
    var memoizer = createMemoizer(createComposedRenderFunction);
    /**
     * Composes two 'render functions' to produce a final render function that renders
     * the outer function, passing the inner function as 'default render'. The inner function
     * is then passed the original 'default render' prop.
     * @public
     */
    function composeRenderFunction(outer, inner) {
        return memoizer(outer)(inner);
    }

    /**
     * Generates a function to be attached to a React component, which can be called
     * as a replacement to RAF. In-flight async calls will be auto canceled if the component
     * is unmounting before the async code is executed, preventing bugs where code
     * accesses things within the component after being unmounted.
     */
    var safeRequestAnimationFrame = function (component) {
        var activeTimeouts;
        return function (cb) {
            if (!activeTimeouts) {
                activeTimeouts = new Set();
                extendComponent(component, {
                    componentWillUnmount: function () {
                        activeTimeouts.forEach(function (id) { return cancelAnimationFrame(id); });
                    },
                });
            }
            var timeoutId = requestAnimationFrame(function () {
                activeTimeouts.delete(timeoutId);
                cb();
            });
            activeTimeouts.add(timeoutId);
        };
    };

    var SELECTION_CHANGE = 'change';
    var SELECTION_ITEMS_CHANGE = 'items-change';
    /**
     * {@docCategory Selection}
     */
    var SelectionMode;
    (function (SelectionMode) {
        SelectionMode[SelectionMode["none"] = 0] = "none";
        SelectionMode[SelectionMode["single"] = 1] = "single";
        SelectionMode[SelectionMode["multiple"] = 2] = "multiple";
    })(SelectionMode || (SelectionMode = {}));
    /**
     * {@docCategory Selection}
     */
    var SelectionDirection;
    (function (SelectionDirection) {
        SelectionDirection[SelectionDirection["horizontal"] = 0] = "horizontal";
        SelectionDirection[SelectionDirection["vertical"] = 1] = "vertical";
    })(SelectionDirection || (SelectionDirection = {}));

    /**
     * {@docCategory Selection}
     */
    var Selection = /** @class */ (function () {
        /**
         * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options
         * object with a `getKey` implementation. Providing options is optional otherwise.
         * (At most one `options` object is accepted.)
         */
        function Selection() {
            var options = []; // Otherwise, arguments require options with `getKey`.
            for (var _i = 0 // Otherwise, arguments require options with `getKey`.
            ; _i < arguments.length // Otherwise, arguments require options with `getKey`.
            ; _i++ // Otherwise, arguments require options with `getKey`.
            ) {
                options[_i] = arguments[_i]; // Otherwise, arguments require options with `getKey`.
            }
            var _a = options[0] || {}, onSelectionChanged = _a.onSelectionChanged, onItemsChanged = _a.onItemsChanged, getKey = _a.getKey, _b = _a.canSelectItem, canSelectItem = _b === void 0 ? function () { return true; } : _b, items = _a.items, _c = _a.selectionMode, selectionMode = _c === void 0 ? SelectionMode.multiple : _c;
            this.mode = selectionMode;
            this._getKey = getKey || defaultGetKey;
            this._changeEventSuppressionCount = 0;
            this._exemptedCount = 0;
            this._anchoredIndex = 0;
            this._unselectableCount = 0;
            this._onSelectionChanged = onSelectionChanged;
            this._onItemsChanged = onItemsChanged;
            this._canSelectItem = canSelectItem;
            this._keyToIndexMap = {};
            this._isModal = false;
            this.setItems(items || [], true);
            this.count = this.getSelectedCount();
        }
        Selection.prototype.canSelectItem = function (item, index) {
            if (typeof index === 'number' && index < 0) {
                return false;
            }
            return this._canSelectItem(item, index);
        };
        Selection.prototype.getKey = function (item, index) {
            var key = this._getKey(item, index);
            return typeof key === 'number' || key ? "" + key : '';
        };
        Selection.prototype.setChangeEvents = function (isEnabled, suppressChange) {
            this._changeEventSuppressionCount += isEnabled ? -1 : 1;
            if (this._changeEventSuppressionCount === 0 && this._hasChanged) {
                this._hasChanged = false;
                if (!suppressChange) {
                    this._change();
                }
            }
        };
        Selection.prototype.isModal = function () {
            return this._isModal;
        };
        Selection.prototype.setModal = function (isModal) {
            if (this._isModal !== isModal) {
                this.setChangeEvents(false);
                this._isModal = isModal;
                if (!isModal) {
                    this.setAllSelected(false);
                }
                this._change();
                this.setChangeEvents(true);
            }
        };
        /**
         * Selection needs the items, call this method to set them. If the set
         * of items is the same, this will re-evaluate selection and index maps.
         * Otherwise, shouldClear should be set to true, so that selection is
         * cleared.
         */
        Selection.prototype.setItems = function (items, shouldClear) {
            if (shouldClear === void 0) { shouldClear = true; }
            var newKeyToIndexMap = {};
            var newUnselectableIndices = {};
            var hasSelectionChanged = false;
            this.setChangeEvents(false);
            // Reset the unselectable count.
            this._unselectableCount = 0;
            var haveItemsChanged = false;
            // Build lookup table for quick selection evaluation.
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (item) {
                    var key = this.getKey(item, i);
                    if (key) {
                        if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {
                            haveItemsChanged = true;
                        }
                        newKeyToIndexMap[key] = i;
                    }
                }
                newUnselectableIndices[i] = item && !this.canSelectItem(item);
                if (newUnselectableIndices[i]) {
                    this._unselectableCount++;
                }
            }
            if (shouldClear || items.length === 0) {
                this._setAllSelected(false, true);
            }
            // Check the exemption list for discrepencies.
            var newExemptedIndicies = {};
            var newExemptedCount = 0;
            for (var indexProperty in this._exemptedIndices) {
                if (this._exemptedIndices.hasOwnProperty(indexProperty)) {
                    var index = Number(indexProperty);
                    var item = this._items[index];
                    var exemptKey = item ? this.getKey(item, Number(index)) : undefined;
                    var newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;
                    if (newIndex === undefined) {
                        // The item has likely been replaced or removed.
                        hasSelectionChanged = true;
                    }
                    else {
                        // We know the new index of the item. update the existing exemption table.
                        newExemptedIndicies[newIndex] = true;
                        newExemptedCount++;
                        hasSelectionChanged = hasSelectionChanged || newIndex !== index;
                    }
                }
            }
            if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {
                // If everything was selected but the number of items has changed, selection has changed.
                hasSelectionChanged = true;
            }
            if (!haveItemsChanged) {
                for (var _i = 0, _a = Object.keys(this._keyToIndexMap); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (!(key in newKeyToIndexMap)) {
                        haveItemsChanged = true;
                        break;
                    }
                }
            }
            this._exemptedIndices = newExemptedIndicies;
            this._exemptedCount = newExemptedCount;
            this._keyToIndexMap = newKeyToIndexMap;
            this._unselectableIndices = newUnselectableIndices;
            this._items = items;
            this._selectedItems = null;
            if (hasSelectionChanged) {
                this._updateCount();
            }
            if (haveItemsChanged) {
                EventGroup.raise(this, SELECTION_ITEMS_CHANGE);
                if (this._onItemsChanged) {
                    this._onItemsChanged();
                }
            }
            if (hasSelectionChanged) {
                this._change();
            }
            this.setChangeEvents(true);
        };
        Selection.prototype.getItems = function () {
            return this._items;
        };
        Selection.prototype.getSelection = function () {
            if (!this._selectedItems) {
                this._selectedItems = [];
                var items = this._items;
                if (items) {
                    for (var i = 0; i < items.length; i++) {
                        if (this.isIndexSelected(i)) {
                            this._selectedItems.push(items[i]);
                        }
                    }
                }
            }
            return this._selectedItems;
        };
        Selection.prototype.getSelectedCount = function () {
            return this._isAllSelected
                ? this._items.length - this._exemptedCount - this._unselectableCount
                : this._exemptedCount;
        };
        Selection.prototype.getSelectedIndices = function () {
            if (!this._selectedIndices) {
                this._selectedIndices = [];
                var items = this._items;
                if (items) {
                    for (var i = 0; i < items.length; i++) {
                        if (this.isIndexSelected(i)) {
                            this._selectedIndices.push(i);
                        }
                    }
                }
            }
            return this._selectedIndices;
        };
        Selection.prototype.getItemIndex = function (key) {
            var index = this._keyToIndexMap[key];
            return index !== null && index !== void 0 ? index : -1;
        };
        Selection.prototype.isRangeSelected = function (fromIndex, count) {
            if (count === 0) {
                return false;
            }
            var endIndex = fromIndex + count;
            for (var i = fromIndex; i < endIndex; i++) {
                if (!this.isIndexSelected(i)) {
                    return false;
                }
            }
            return true;
        };
        Selection.prototype.isAllSelected = function () {
            var selectableCount = this._items.length - this._unselectableCount;
            // In single mode, we can only have a max of 1 item.
            if (this.mode === SelectionMode.single) {
                selectableCount = Math.min(selectableCount, 1);
            }
            return ((this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||
                (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0));
        };
        Selection.prototype.isKeySelected = function (key) {
            var index = this._keyToIndexMap[key];
            return this.isIndexSelected(index);
        };
        Selection.prototype.isIndexSelected = function (index) {
            return !!((this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||
                (!this._isAllSelected && this._exemptedIndices[index]));
        };
        Selection.prototype.setAllSelected = function (isAllSelected) {
            if (isAllSelected && this.mode !== SelectionMode.multiple) {
                return;
            }
            var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;
            this.setChangeEvents(false);
            if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {
                this._exemptedIndices = {};
                if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {
                    this._exemptedCount = 0;
                    this._isAllSelected = isAllSelected;
                    this._change();
                }
                this._updateCount();
            }
            this.setChangeEvents(true);
        };
        Selection.prototype.setKeySelected = function (key, isSelected, shouldAnchor) {
            var index = this._keyToIndexMap[key];
            if (index >= 0) {
                this.setIndexSelected(index, isSelected, shouldAnchor);
            }
        };
        Selection.prototype.setIndexSelected = function (index, isSelected, shouldAnchor) {
            if (this.mode === SelectionMode.none) {
                return;
            }
            // Clamp the index.
            index = Math.min(Math.max(0, index), this._items.length - 1);
            // No-op on out of bounds selections.
            if (index < 0 || index >= this._items.length) {
                return;
            }
            this.setChangeEvents(false);
            var isExempt = this._exemptedIndices[index];
            var canSelect = !this._unselectableIndices[index];
            if (canSelect) {
                if (isSelected && this.mode === SelectionMode.single) {
                    // If this is single-select, the previous selection should be removed.
                    this._setAllSelected(false, true);
                }
                // Determine if we need to remove the exemption.
                if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {
                    delete this._exemptedIndices[index];
                    this._exemptedCount--;
                }
                // Determine if we need to add the exemption.
                if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {
                    this._exemptedIndices[index] = true;
                    this._exemptedCount++;
                }
                if (shouldAnchor) {
                    this._anchoredIndex = index;
                }
            }
            this._updateCount();
            this.setChangeEvents(true);
        };
        Selection.prototype.selectToKey = function (key, clearSelection) {
            this.selectToIndex(this._keyToIndexMap[key], clearSelection);
        };
        Selection.prototype.selectToIndex = function (index, clearSelection) {
            if (this.mode === SelectionMode.none) {
                return;
            }
            if (this.mode === SelectionMode.single) {
                this.setIndexSelected(index, true, true);
                return;
            }
            var anchorIndex = this._anchoredIndex || 0;
            var startIndex = Math.min(index, anchorIndex);
            var endIndex = Math.max(index, anchorIndex);
            this.setChangeEvents(false);
            if (clearSelection) {
                this._setAllSelected(false, true);
            }
            for (; startIndex <= endIndex; startIndex++) {
                this.setIndexSelected(startIndex, true, false);
            }
            this.setChangeEvents(true);
        };
        Selection.prototype.toggleAllSelected = function () {
            this.setAllSelected(!this.isAllSelected());
        };
        Selection.prototype.toggleKeySelected = function (key) {
            this.setKeySelected(key, !this.isKeySelected(key), true);
        };
        Selection.prototype.toggleIndexSelected = function (index) {
            this.setIndexSelected(index, !this.isIndexSelected(index), true);
        };
        Selection.prototype.toggleRangeSelected = function (fromIndex, count) {
            if (this.mode === SelectionMode.none) {
                return;
            }
            var isRangeSelected = this.isRangeSelected(fromIndex, count);
            var endIndex = fromIndex + count;
            if (this.mode === SelectionMode.single && count > 1) {
                return;
            }
            this.setChangeEvents(false);
            for (var i = fromIndex; i < endIndex; i++) {
                this.setIndexSelected(i, !isRangeSelected, false);
            }
            this.setChangeEvents(true);
        };
        Selection.prototype._updateCount = function (preserveModalState) {
            if (preserveModalState === void 0) { preserveModalState = false; }
            var count = this.getSelectedCount();
            if (count !== this.count) {
                this.count = count;
                this._change();
            }
            if (!this.count && !preserveModalState) {
                this.setModal(false);
            }
        };
        Selection.prototype._setAllSelected = function (isAllSelected, preserveModalState) {
            if (preserveModalState === void 0) { preserveModalState = false; }
            if (isAllSelected && this.mode !== SelectionMode.multiple) {
                return;
            }
            var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;
            this.setChangeEvents(false);
            if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {
                this._exemptedIndices = {};
                if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {
                    this._exemptedCount = 0;
                    this._isAllSelected = isAllSelected;
                    this._change();
                }
                this._updateCount(preserveModalState);
            }
            this.setChangeEvents(true);
        };
        Selection.prototype._change = function () {
            if (this._changeEventSuppressionCount === 0) {
                this._selectedItems = null;
                this._selectedIndices = undefined;
                EventGroup.raise(this, SELECTION_CHANGE);
                if (this._onSelectionChanged) {
                    this._onSelectionChanged();
                }
            }
            else {
                this._hasChanged = true;
            }
        };
        return Selection;
    }());
    function defaultGetKey(item, index) {
        // 0 may be used as a key
        var _a = (item || {}).key, key = _a === void 0 ? "" + index : _a;
        return key;
    }

    // Regex that finds { and } so they can be removed on a lookup for string format
    var FORMAT_ARGS_REGEX = /[\{\}]/g;
    // Regex that finds {#} so it can be replaced by the arguments in string format
    var FORMAT_REGEX = /\{\d+\}/g;
    /**
     * String format method, used for scenarios where at runtime you
     * need to evaluate a formatted string given a tokenized string. This
     * usually only is needed in localization scenarios.

     * @example
     * ```tsx
     * "I love {0} every {1}".format("CXP")
     * ```
     * will result in a Debug Exception.
     *
     * @public
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function format(s) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var args = values;
        // Callback match function
        function replaceFunc(match) {
            // looks up in the args
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var replacement = args[match.replace(FORMAT_ARGS_REGEX, '')];
            // catches undefined in nondebug and null in debug and nondebug
            if (replacement === null || replacement === undefined) {
                replacement = '';
            }
            return replacement;
        }
        return s.replace(FORMAT_REGEX, replaceFunc);
    }

    var DefaultFields = ['theme', 'styles'];
    function styled(Component, baseStyles, getProps, customizable, pure) {
        customizable = customizable || { scope: '', fields: undefined };
        var scope = customizable.scope, _a = customizable.fields, fields = _a === void 0 ? DefaultFields : _a;
        var Wrapped = React__namespace.forwardRef(function (props, forwardedRef) {
            var styles = React__namespace.useRef();
            var settings = useCustomizationSettings(fields, scope);
            var customizedStyles = settings.styles; settings.dir; var rest = tslib.__rest(settings, ["styles", "dir"]);
            var additionalProps = getProps ? getProps(props) : undefined;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var cache = (styles.current && styles.current.__cachedInputs__) || [];
            var propStyles = props.styles;
            if (!styles.current || customizedStyles !== cache[1] || propStyles !== cache[2]) {
                // Using styled components as the Component arg will result in nested styling arrays.
                // The function can be cached and in order to prevent the props from being retained within it's closure
                // we pass in just the styles and not the entire props
                var concatenatedStyles = function (styleProps) {
                    return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, propStyles);
                };
                // The __cachedInputs__ array is attached to the function and consumed by the
                // classNamesFunction as a list of keys to include for memoizing classnames.
                concatenatedStyles.__cachedInputs__ = [
                    baseStyles,
                    customizedStyles,
                    propStyles,
                ];
                concatenatedStyles.__noStyleOverride__ =
                    !customizedStyles && !propStyles;
                styles.current = concatenatedStyles;
            }
            return React__namespace.createElement(Component, tslib.__assign({ ref: forwardedRef }, rest, additionalProps, props, { styles: styles.current }));
        });
        // Function.prototype.name is an ES6 feature, so the cast to any is required until we're
        // able to drop IE 11 support and compile with ES6 libs
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Wrapped.displayName = "Styled" + (Component.displayName || Component.name);
        // This preserves backwards compatibility.
        var pureComponent = pure ? React__namespace.memo(Wrapped) : Wrapped;
        // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.
        if (Wrapped.displayName) {
            pureComponent.displayName = Wrapped.displayName;
        }
        return pureComponent;
    }

    var warningsMap;
    {
        warningsMap = {
            valueOnChange: {},
            valueDefaultValue: {},
            controlledToUncontrolled: {},
            uncontrolledToControlled: {},
        };
    }
    /**
     * Check for and warn on the following error conditions with a form component:
     * - A value prop is provided (indicated it's being used as controlled) without a change handler,
     *    and the component is not read-only
     * - Both the value and defaultValue props are provided
     * - The component is attempting to switch between controlled and uncontrolled
     *
     * The messages mimic the warnings React gives for these error conditions on input elements.
     * The warning will only be displayed once per component ID.
     */
    function warnControlledUsage(params) {
        {
            var componentId = params.componentId, componentName = params.componentName, defaultValueProp = params.defaultValueProp, props = params.props, oldProps = params.oldProps, onChangeProp = params.onChangeProp, readOnlyProp = params.readOnlyProp, valueProp = params.valueProp;
            // This warning logic closely follows what React does for native <input> elements.
            var oldIsControlled = oldProps ? isControlled(oldProps, valueProp) : undefined;
            var newIsControlled = isControlled(props, valueProp);
            if (newIsControlled) {
                // onChange (or readOnly) must be provided if value is provided
                var hasOnChange = !!props[onChangeProp];
                var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);
                if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {
                    warningsMap.valueOnChange[componentId] = true;
                    warn("Warning: You provided a '" + valueProp + "' prop to a " + componentName + " without an '" + onChangeProp + "' handler. " +
                        ("This will render a read-only field. If the field should be mutable use '" + defaultValueProp + "'. ") +
                        ("Otherwise, set '" + onChangeProp + "'" + (readOnlyProp ? " or '" + readOnlyProp + "'" : '') + "."));
                }
                // value and defaultValue are mutually exclusive
                var defaultValue = props[defaultValueProp];
                if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {
                    warningsMap.valueDefaultValue[componentId] = true;
                    warn("Warning: You provided both '" + valueProp + "' and '" + defaultValueProp + "' to a " + componentName + ". " +
                        ("Form fields must be either controlled or uncontrolled (specify either the '" + valueProp + "' prop, ") +
                        ("or the '" + defaultValueProp + "' prop, but not both). Decide between using a controlled or uncontrolled ") +
                        (componentName + " and remove one of these props. More info: https://fb.me/react-controlled-components"));
                }
            }
            // Warn if switching between uncontrolled and controlled. (One difference between this implementation
            // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)
            if (oldProps && newIsControlled !== oldIsControlled) {
                var oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';
                var newType = oldIsControlled ? 'uncontrolled' : 'controlled';
                var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;
                if (!warnMap[componentId]) {
                    warnMap[componentId] = true;
                    warn("Warning: A component is changing " + oldType + " " + componentName + " to be " + newType + ". " +
                        (componentName + "s should not switch from controlled to uncontrolled (or vice versa). ") +
                        "Decide between using controlled or uncontrolled for the lifetime of the component. " +
                        "More info: https://fb.me/react-controlled-components");
                }
            }
        }
    }

    var isIE11 = function () {
        var _a;
        var win = getWindow();
        if (!((_a = win === null || win === void 0 ? void 0 : win.navigator) === null || _a === void 0 ? void 0 : _a.userAgent)) {
            return false;
        }
        return win.navigator.userAgent.indexOf('rv:11.0') > -1;
    };

    /**
     * Function to apply default values to a component props object. This function is intended for function components,
     * to maintain parity with the `defaultProps` feature of class components. It accounts for properties that are
     * specified, but undefined.
     * @param defaultProps- An object with default values for various properties
     * @param propsWithoutDefaults- The props object passed into the component
     */
    function getPropsWithDefaults(defaultProps, propsWithoutDefaults) {
        var props = tslib.__assign({}, propsWithoutDefaults);
        for (var _i = 0, _a = Object.keys(defaultProps); _i < _a.length; _i++) {
            var key = _a[_i];
            if (props[key] === undefined) {
                props[key] = defaultProps[key];
            }
        }
        return props;
    }

    /**
     * Set up a ref resolver function given internal state managed for the ref.
     * @param local Set
     */
    var createResolver = function (local) { return function (newValue) {
        for (var _i = 0, _a = local.refs; _i < _a.length; _i++) {
            var ref = _a[_i];
            if (typeof ref === 'function') {
                ref(newValue);
            }
            else if (ref) {
                // work around the immutability of the React.Ref type
                ref.current = newValue;
            }
        }
    }; };
    /**
     * Helper to merge refs from within class components.
     */
    var createMergedRef = function (value) {
        var local = {
            refs: [],
        };
        return function () {
            var newRefs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newRefs[_i] = arguments[_i];
            }
            if (!local.resolver || !arraysEqual(local.refs, newRefs)) {
                local.resolver = createResolver(local);
            }
            local.refs = newRefs;
            return local.resolver;
        };
    };

    // This hook must live in @fluentui/utilities because _isSSR is not exported
    /**
     * React currently throws a warning when using `useLayoutEffect` on the server. To get around it,
     * this hook calls `useEffect` on the server (no-op) and `useLayoutEffect` in the browser.
     *
     * Prefer `useEffect` unless you have a specific need to do something after mount and before paint,
     * such as to avoid a render flash for certain operations.
     *
     * Server-side rendering is detected based on `setSSR` from `@fluentui/utilities`.
     *
     * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
     * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js
     */
    // eslint-disable-next-line no-restricted-properties
    var useIsomorphicLayoutEffect = React__namespace.useLayoutEffect;

    var ICON_SETTING_NAME = 'icons';
    var _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {
        __options: {
            disableWarnings: false,
            warnOnMissingIcons: true,
        },
        __remapped: {},
    });
    // Reset icon registration on stylesheet resets.
    var stylesheet = Stylesheet.getInstance();
    if (stylesheet && stylesheet.onReset) {
        stylesheet.onReset(function () {
            for (var name_1 in _iconSettings) {
                if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {
                    _iconSettings[name_1].subset.className = undefined;
                }
            }
        });
    }
    /**
     * Normalizes an icon name for consistent mapping.
     * Current implementation is to convert the icon name to lower case.
     *
     * @param name - Icon name to normalize.
     * @returns {string} Normalized icon name to use for indexing and mapping.
     */
    var normalizeIconName = function (name) { return name.toLowerCase(); };
    /**
     * Registers a given subset of icons.
     *
     * @param iconSubset - the icon subset definition.
     */
    function registerIcons(iconSubset, options) {
        var subset = tslib.__assign(tslib.__assign({}, iconSubset), { isRegistered: false, className: undefined });
        var icons = iconSubset.icons;
        // Grab options, optionally mix user provided ones on top.
        options = options ? tslib.__assign(tslib.__assign({}, _iconSettings.__options), options) : _iconSettings.__options;
        for (var iconName in icons) {
            if (icons.hasOwnProperty(iconName)) {
                var code = icons[iconName];
                var normalizedIconName = normalizeIconName(iconName);
                if (_iconSettings[normalizedIconName]) {
                    _warnDuplicateIcon(iconName);
                }
                else {
                    _iconSettings[normalizedIconName] = {
                        code: code,
                        subset: subset,
                    };
                }
            }
        }
    }
    /**
     * Gets an icon definition. If an icon is requested but the subset has yet to be registered,
     * it will get registered immediately.
     *
     * @public
     * @param name - Name of icon.
     */
    function getIcon$1(name) {
        var icon = undefined;
        var options = _iconSettings.__options;
        name = name ? normalizeIconName(name) : '';
        name = _iconSettings.__remapped[name] || name;
        if (name) {
            icon = _iconSettings[name];
            if (icon) {
                var subset = icon.subset;
                if (subset && subset.fontFace) {
                    if (!subset.isRegistered) {
                        fontFace(subset.fontFace);
                        subset.isRegistered = true;
                    }
                    if (!subset.className) {
                        subset.className = mergeStyles(subset.style, {
                            fontFamily: subset.fontFace.fontFamily,
                            fontWeight: subset.fontFace.fontWeight || 'normal',
                            fontStyle: subset.fontFace.fontStyle || 'normal',
                        });
                    }
                }
            }
            else {
                // eslint-disable-next-line deprecation/deprecation
                if (!options.disableWarnings && options.warnOnMissingIcons) {
                    warn("The icon \"" + name + "\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.");
                }
            }
        }
        return icon;
    }
    var _missingIcons = [];
    var _missingIconsTimer = undefined;
    function _warnDuplicateIcon(iconName) {
        var options = _iconSettings.__options;
        var warningDelay = 2000;
        var maxIconsInMessage = 10;
        if (!options.disableWarnings) {
            _missingIcons.push(iconName);
            if (_missingIconsTimer === undefined) {
                _missingIconsTimer = setTimeout(function () {
                    warn("Some icons were re-registered. Applications should only call registerIcons for any given " +
                        "icon once. Redefining what an icon is may have unintended consequences. Duplicates " +
                        "include: \n" +
                        _missingIcons.slice(0, maxIconsInMessage).join(', ') +
                        (_missingIcons.length > maxIconsInMessage ? " (+ " + (_missingIcons.length - maxIconsInMessage) + " more)" : ''));
                    _missingIconsTimer = undefined;
                    _missingIcons = [];
                }, warningDelay);
            }
        }
    }

    /** Generates all the semantic slot colors based on the theme so far
     * We'll use these as fallbacks for semantic slots that the passed in theme did not define.
     * The caller must still mix in the customized semantic slots at the end.
     */
    function makeSemanticColors(p, e, s, isInverted, depComments) {
        if (depComments === void 0) { depComments = false; }
        var semanticColors = tslib.__assign({ primaryButtonBorder: 'transparent', errorText: !isInverted ? '#a4262c' : '#F1707B', messageText: !isInverted ? '#323130' : '#F3F2F1', messageLink: !isInverted ? '#005A9E' : '#6CB8F6', messageLinkHovered: !isInverted ? '#004578' : '#82C7FF', infoIcon: !isInverted ? '#605e5c' : '#C8C6C4', errorIcon: !isInverted ? '#A80000' : '#F1707B', blockingIcon: !isInverted ? '#FDE7E9' : '#442726', warningIcon: !isInverted ? '#797775' : '#C8C6C4', severeWarningIcon: !isInverted ? '#D83B01' : '#FCE100', successIcon: !isInverted ? '#107C10' : '#92C353', infoBackground: !isInverted ? '#f3f2f1' : '#323130', errorBackground: !isInverted ? '#FDE7E9' : '#442726', blockingBackground: !isInverted ? '#FDE7E9' : '#442726', warningBackground: !isInverted ? '#FFF4CE' : '#433519', severeWarningBackground: !isInverted ? '#FED9CC' : '#4F2A0F', successBackground: !isInverted ? '#DFF6DD' : '#393D1B', 
            // deprecated
            warningHighlight: !isInverted ? '#ffb900' : '#fff100', successText: !isInverted ? '#107C10' : '#92c353' }, s);
        var fullSemanticColors = getSemanticColors(p, e, semanticColors, isInverted);
        return _fixDeprecatedSlots(fullSemanticColors, depComments);
    }
    /**
     * Map partial platte and effects to partial semantic colors.
     */
    function getSemanticColors(p, e, s, isInverted, depComments) {
        var result = {};
        // map palette
        var _a = p || {}, white = _a.white, black = _a.black, themePrimary = _a.themePrimary, themeDark = _a.themeDark, themeDarker = _a.themeDarker, themeDarkAlt = _a.themeDarkAlt, themeLighter = _a.themeLighter, neutralLight = _a.neutralLight, neutralLighter = _a.neutralLighter, neutralDark = _a.neutralDark, neutralQuaternary = _a.neutralQuaternary, neutralQuaternaryAlt = _a.neutralQuaternaryAlt, neutralPrimary = _a.neutralPrimary, neutralSecondary = _a.neutralSecondary, neutralSecondaryAlt = _a.neutralSecondaryAlt, neutralTertiary = _a.neutralTertiary, neutralTertiaryAlt = _a.neutralTertiaryAlt, neutralLighterAlt = _a.neutralLighterAlt, accent = _a.accent;
        if (white) {
            result.bodyBackground = white;
            result.bodyFrameBackground = white;
            result.accentButtonText = white;
            result.buttonBackground = white;
            result.primaryButtonText = white;
            result.primaryButtonTextHovered = white;
            result.primaryButtonTextPressed = white;
            result.inputBackground = white;
            result.inputForegroundChecked = white;
            result.listBackground = white;
            result.menuBackground = white;
            result.cardStandoutBackground = white;
        }
        if (black) {
            result.bodyTextChecked = black;
            result.buttonTextCheckedHovered = black;
        }
        if (themePrimary) {
            result.link = themePrimary;
            result.primaryButtonBackground = themePrimary;
            result.inputBackgroundChecked = themePrimary;
            result.inputIcon = themePrimary;
            result.inputFocusBorderAlt = themePrimary;
            result.menuIcon = themePrimary;
            result.menuHeader = themePrimary;
            result.accentButtonBackground = themePrimary;
        }
        if (themeDark) {
            result.primaryButtonBackgroundPressed = themeDark;
            result.inputBackgroundCheckedHovered = themeDark;
            result.inputIconHovered = themeDark;
        }
        if (themeDarker) {
            result.linkHovered = themeDarker;
        }
        if (themeDarkAlt) {
            result.primaryButtonBackgroundHovered = themeDarkAlt;
        }
        if (themeLighter) {
            result.inputPlaceholderBackgroundChecked = themeLighter;
        }
        if (neutralLight) {
            result.bodyBackgroundChecked = neutralLight;
            result.bodyFrameDivider = neutralLight;
            result.bodyDivider = neutralLight;
            result.variantBorder = neutralLight;
            result.buttonBackgroundCheckedHovered = neutralLight;
            result.buttonBackgroundPressed = neutralLight;
            result.listItemBackgroundChecked = neutralLight;
            result.listHeaderBackgroundPressed = neutralLight;
            result.menuItemBackgroundPressed = neutralLight;
            // eslint-disable-next-line deprecation/deprecation
            result.menuItemBackgroundChecked = neutralLight;
        }
        if (neutralLighter) {
            result.bodyBackgroundHovered = neutralLighter;
            result.buttonBackgroundHovered = neutralLighter;
            result.buttonBackgroundDisabled = neutralLighter;
            result.buttonBorderDisabled = neutralLighter;
            result.primaryButtonBackgroundDisabled = neutralLighter;
            result.disabledBackground = neutralLighter;
            result.listItemBackgroundHovered = neutralLighter;
            result.listHeaderBackgroundHovered = neutralLighter;
            result.menuItemBackgroundHovered = neutralLighter;
        }
        if (neutralQuaternary) {
            result.primaryButtonTextDisabled = neutralQuaternary;
            result.disabledSubtext = neutralQuaternary;
        }
        if (neutralQuaternaryAlt) {
            result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;
        }
        if (neutralTertiary) {
            result.disabledBodyText = neutralTertiary;
            result.variantBorderHovered = (s === null || s === void 0 ? void 0 : s.variantBorderHovered) || neutralTertiary;
            result.buttonTextDisabled = neutralTertiary;
            result.inputIconDisabled = neutralTertiary;
            result.disabledText = neutralTertiary;
        }
        if (neutralPrimary) {
            result.bodyText = neutralPrimary;
            result.actionLink = neutralPrimary;
            result.buttonText = neutralPrimary;
            result.inputBorderHovered = neutralPrimary;
            result.inputText = neutralPrimary;
            result.listText = neutralPrimary;
            result.menuItemText = neutralPrimary;
        }
        if (neutralLighterAlt) {
            result.bodyStandoutBackground = neutralLighterAlt;
            result.defaultStateBackground = neutralLighterAlt;
        }
        if (neutralDark) {
            result.actionLinkHovered = neutralDark;
            result.buttonTextHovered = neutralDark;
            result.buttonTextChecked = neutralDark;
            result.buttonTextPressed = neutralDark;
            result.inputTextHovered = neutralDark;
            result.menuItemTextHovered = neutralDark;
        }
        if (neutralSecondary) {
            result.bodySubtext = neutralSecondary;
            result.focusBorder = neutralSecondary;
            result.inputBorder = neutralSecondary;
            result.smallInputBorder = neutralSecondary;
            result.inputPlaceholderText = neutralSecondary;
        }
        if (neutralSecondaryAlt) {
            result.buttonBorder = neutralSecondaryAlt;
        }
        if (neutralTertiaryAlt) {
            result.disabledBodySubtext = neutralTertiaryAlt;
            result.disabledBorder = neutralTertiaryAlt;
            result.buttonBackgroundChecked = neutralTertiaryAlt;
            result.menuDivider = neutralTertiaryAlt;
        }
        if (accent) {
            result.accentButtonBackground = accent;
        }
        // map effects
        if (e === null || e === void 0 ? void 0 : e.elevation4) {
            result.cardShadow = e.elevation4;
        }
        if (!isInverted && (e === null || e === void 0 ? void 0 : e.elevation8)) {
            result.cardShadowHovered = e.elevation8;
        }
        else if (result.variantBorderHovered) {
            result.cardShadowHovered = '0 0 1px ' + result.variantBorderHovered;
        }
        result = tslib.__assign(tslib.__assign({}, result), s);
        return result;
    }
    function _fixDeprecatedSlots(s, depComments) {
        // Add @deprecated tag as comment if enabled
        var dep = '';
        if (depComments === true) {
            dep = ' /* @deprecated */';
        }
        /* eslint-disable deprecation/deprecation */
        s.listTextColor = s.listText + dep;
        s.menuItemBackgroundChecked += dep;
        s.warningHighlight += dep;
        s.warningText = s.messageText + dep;
        s.successText += dep;
        /* eslint-enable deprecation/deprecation */
        return s;
    }

    /**
     * Merge a partial/full theme into a full theme and returns a merged full theme.
     */
    function mergeThemes(theme, partialTheme) {
        var _a, _b, _c;
        if (partialTheme === void 0) { partialTheme = {}; }
        var mergedTheme = merge({}, theme, partialTheme, {
            semanticColors: getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === undefined ? theme.isInverted : partialTheme.isInverted),
        });
        if (((_a = partialTheme.palette) === null || _a === void 0 ? void 0 : _a.themePrimary) && !((_b = partialTheme.palette) === null || _b === void 0 ? void 0 : _b.accent)) {
            mergedTheme.palette.accent = partialTheme.palette.themePrimary;
        }
        if (partialTheme.defaultFontStyle) {
            for (var _i = 0, _d = Object.keys(mergedTheme.fonts); _i < _d.length; _i++) {
                var fontStyle = _d[_i];
                mergedTheme.fonts[fontStyle] = merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_c = partialTheme === null || partialTheme === void 0 ? void 0 : partialTheme.fonts) === null || _c === void 0 ? void 0 : _c[fontStyle]);
            }
        }
        return mergedTheme;
    }

    // When adding or removing a color, make sure you keep this consistent with IColorClassNames
    // by adding the color variants.
    var DefaultPalette = {
        themeDarker: '#004578',
        themeDark: '#005a9e',
        themeDarkAlt: '#106ebe',
        themePrimary: '#0078d4',
        themeSecondary: '#2b88d8',
        themeTertiary: '#71afe5',
        themeLight: '#c7e0f4',
        themeLighter: '#deecf9',
        themeLighterAlt: '#eff6fc',
        black: '#000000',
        blackTranslucent40: 'rgba(0,0,0,.4)',
        neutralDark: '#201f1e',
        neutralPrimary: '#323130',
        neutralPrimaryAlt: '#3b3a39',
        neutralSecondary: '#605e5c',
        neutralSecondaryAlt: '#8a8886',
        neutralTertiary: '#a19f9d',
        neutralTertiaryAlt: '#c8c6c4',
        neutralQuaternary: '#d2d0ce',
        neutralQuaternaryAlt: '#e1dfdd',
        neutralLight: '#edebe9',
        neutralLighter: '#f3f2f1',
        neutralLighterAlt: '#faf9f8',
        accent: '#0078d4',
        white: '#ffffff',
        whiteTranslucent40: 'rgba(255,255,255,.4)',
        yellowDark: '#d29200',
        yellow: '#ffb900',
        yellowLight: '#fff100',
        orange: '#d83b01',
        orangeLight: '#ea4300',
        orangeLighter: '#ff8c00',
        redDark: '#a4262c',
        red: '#e81123',
        magentaDark: '#5c005c',
        magenta: '#b4009e',
        magentaLight: '#e3008c',
        purpleDark: '#32145a',
        purple: '#5c2d91',
        purpleLight: '#b4a0ff',
        blueDark: '#002050',
        blueMid: '#00188f',
        blue: '#0078d4',
        blueLight: '#00bcf2',
        tealDark: '#004b50',
        teal: '#008272',
        tealLight: '#00b294',
        greenDark: '#004b1c',
        green: '#107c10',
        greenLight: '#bad80a',
    };

    var Depths;
    (function (Depths) {
        Depths.depth0 = '0 0 0 0 transparent';
        Depths.depth4 = '0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)';
        Depths.depth8 = '0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)';
        Depths.depth16 = '0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)';
        Depths.depth64 = '0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)';
    })(Depths || (Depths = {}));

    var DefaultEffects = {
        elevation4: Depths.depth4,
        elevation8: Depths.depth8,
        elevation16: Depths.depth16,
        elevation64: Depths.depth64,
        roundedCorner2: '2px',
        roundedCorner4: '4px',
        roundedCorner6: '6px',
    };

    var DefaultSpacing = {
        s2: '4px',
        s1: '8px',
        m: '16px',
        l1: '20px',
        l2: '32px',
    };

    /* Register the keyframes */
    var EASING_FUNCTION_1 = 'cubic-bezier(.1,.9,.2,1)';
    var EASING_FUNCTION_2 = 'cubic-bezier(.1,.25,.75,.9)';
    var DURATION_1 = '0.167s';
    var DURATION_2 = '0.267s';
    var DURATION_3 = '0.367s';
    var DURATION_4 = '0.467s';
    var FADE_IN = keyframes({
        from: { opacity: 0 },
        to: { opacity: 1 },
    });
    var FADE_OUT = keyframes({
        from: { opacity: 1 },
        to: { opacity: 0, visibility: 'hidden' },
    });
    var SLIDE_RIGHT_IN10 = _createSlideInX(-10);
    var SLIDE_RIGHT_IN20 = _createSlideInX(-20);
    var SLIDE_RIGHT_IN40 = _createSlideInX(-40);
    var SLIDE_RIGHT_IN400 = _createSlideInX(-400);
    var SLIDE_LEFT_IN10 = _createSlideInX(10);
    var SLIDE_LEFT_IN20 = _createSlideInX(20);
    var SLIDE_LEFT_IN40 = _createSlideInX(40);
    var SLIDE_LEFT_IN400 = _createSlideInX(400);
    var SLIDE_UP_IN10 = _createSlideInY(10);
    var SLIDE_UP_IN20 = _createSlideInY(20);
    var SLIDE_DOWN_IN10 = _createSlideInY(-10);
    var SLIDE_DOWN_IN20 = _createSlideInY(-20);
    var SLIDE_RIGHT_OUT10 = _createSlideOutX(10);
    var SLIDE_RIGHT_OUT20 = _createSlideOutX(20);
    var SLIDE_RIGHT_OUT40 = _createSlideOutX(40);
    var SLIDE_RIGHT_OUT400 = _createSlideOutX(400);
    var SLIDE_LEFT_OUT10 = _createSlideOutX(-10);
    var SLIDE_LEFT_OUT20 = _createSlideOutX(-20);
    var SLIDE_LEFT_OUT40 = _createSlideOutX(-40);
    var SLIDE_LEFT_OUT400 = _createSlideOutX(-400);
    var SLIDE_UP_OUT10 = _createSlideOutY(-10);
    var SLIDE_UP_OUT20 = _createSlideOutY(-20);
    var SLIDE_DOWN_OUT10 = _createSlideOutY(10);
    var SLIDE_DOWN_OUT20 = _createSlideOutY(20);
    var SCALE_UP100 = keyframes({
        from: { transform: 'scale3d(.98,.98,1)' },
        to: { transform: 'scale3d(1,1,1)' },
    });
    var SCALE_DOWN98 = keyframes({
        from: { transform: 'scale3d(1,1,1)' },
        to: { transform: 'scale3d(.98,.98,1)' },
    });
    var SCALE_DOWN100 = keyframes({
        from: { transform: 'scale3d(1.03,1.03,1)' },
        to: { transform: 'scale3d(1,1,1)' },
    });
    var SCALE_UP103 = keyframes({
        from: { transform: 'scale3d(1,1,1)' },
        to: { transform: 'scale3d(1.03,1.03,1)' },
    });
    var ROTATE90 = keyframes({
        from: { transform: 'rotateZ(0deg)' },
        to: { transform: 'rotateZ(90deg)' },
    });
    var ROTATE_N90 = keyframes({
        from: { transform: 'rotateZ(0deg)' },
        to: { transform: 'rotateZ(-90deg)' },
    });
    /**
     * Exporting raw duraction values and easing functions to be used in custom animations
     */
    var AnimationVariables = {
        easeFunction1: EASING_FUNCTION_1,
        easeFunction2: EASING_FUNCTION_2,
        durationValue1: DURATION_1,
        durationValue2: DURATION_2,
        durationValue3: DURATION_3,
        durationValue4: DURATION_4,
    };
    /**
     * All Fabric standard animations, exposed as json objects referencing predefined
     * keyframes. These objects can be mixed in with other class definitions.
     */
    var AnimationStyles = {
        slideRightIn10: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN10, DURATION_3, EASING_FUNCTION_1),
        slideRightIn20: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN20, DURATION_3, EASING_FUNCTION_1),
        slideRightIn40: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN40, DURATION_3, EASING_FUNCTION_1),
        slideRightIn400: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN400, DURATION_3, EASING_FUNCTION_1),
        slideLeftIn10: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN10, DURATION_3, EASING_FUNCTION_1),
        slideLeftIn20: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN20, DURATION_3, EASING_FUNCTION_1),
        slideLeftIn40: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN40, DURATION_3, EASING_FUNCTION_1),
        slideLeftIn400: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN400, DURATION_3, EASING_FUNCTION_1),
        slideUpIn10: _createAnimation(FADE_IN + "," + SLIDE_UP_IN10, DURATION_3, EASING_FUNCTION_1),
        slideUpIn20: _createAnimation(FADE_IN + "," + SLIDE_UP_IN20, DURATION_3, EASING_FUNCTION_1),
        slideDownIn10: _createAnimation(FADE_IN + "," + SLIDE_DOWN_IN10, DURATION_3, EASING_FUNCTION_1),
        slideDownIn20: _createAnimation(FADE_IN + "," + SLIDE_DOWN_IN20, DURATION_3, EASING_FUNCTION_1),
        slideRightOut10: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT10, DURATION_3, EASING_FUNCTION_1),
        slideRightOut20: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT20, DURATION_3, EASING_FUNCTION_1),
        slideRightOut40: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT40, DURATION_3, EASING_FUNCTION_1),
        slideRightOut400: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT400, DURATION_3, EASING_FUNCTION_1),
        slideLeftOut10: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT10, DURATION_3, EASING_FUNCTION_1),
        slideLeftOut20: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT20, DURATION_3, EASING_FUNCTION_1),
        slideLeftOut40: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT40, DURATION_3, EASING_FUNCTION_1),
        slideLeftOut400: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT400, DURATION_3, EASING_FUNCTION_1),
        slideUpOut10: _createAnimation(FADE_OUT + "," + SLIDE_UP_OUT10, DURATION_3, EASING_FUNCTION_1),
        slideUpOut20: _createAnimation(FADE_OUT + "," + SLIDE_UP_OUT20, DURATION_3, EASING_FUNCTION_1),
        slideDownOut10: _createAnimation(FADE_OUT + "," + SLIDE_DOWN_OUT10, DURATION_3, EASING_FUNCTION_1),
        slideDownOut20: _createAnimation(FADE_OUT + "," + SLIDE_DOWN_OUT20, DURATION_3, EASING_FUNCTION_1),
        scaleUpIn100: _createAnimation(FADE_IN + "," + SCALE_UP100, DURATION_3, EASING_FUNCTION_1),
        scaleDownIn100: _createAnimation(FADE_IN + "," + SCALE_DOWN100, DURATION_3, EASING_FUNCTION_1),
        scaleUpOut103: _createAnimation(FADE_OUT + "," + SCALE_UP103, DURATION_1, EASING_FUNCTION_2),
        scaleDownOut98: _createAnimation(FADE_OUT + "," + SCALE_DOWN98, DURATION_1, EASING_FUNCTION_2),
        fadeIn100: _createAnimation(FADE_IN, DURATION_1, EASING_FUNCTION_2),
        fadeIn200: _createAnimation(FADE_IN, DURATION_2, EASING_FUNCTION_2),
        fadeIn400: _createAnimation(FADE_IN, DURATION_3, EASING_FUNCTION_2),
        fadeIn500: _createAnimation(FADE_IN, DURATION_4, EASING_FUNCTION_2),
        fadeOut100: _createAnimation(FADE_OUT, DURATION_1, EASING_FUNCTION_2),
        fadeOut200: _createAnimation(FADE_OUT, DURATION_2, EASING_FUNCTION_2),
        fadeOut400: _createAnimation(FADE_OUT, DURATION_3, EASING_FUNCTION_2),
        fadeOut500: _createAnimation(FADE_OUT, DURATION_4, EASING_FUNCTION_2),
        rotate90deg: _createAnimation(ROTATE90, '0.1s', EASING_FUNCTION_2),
        rotateN90deg: _createAnimation(ROTATE_N90, '0.1s', EASING_FUNCTION_2),
        // expandCollapse 100/200/400, delay 100/200
    };
    function _createAnimation(animationName, animationDuration, animationTimingFunction) {
        return {
            animationName: animationName,
            animationDuration: animationDuration,
            animationTimingFunction: animationTimingFunction,
            animationFillMode: 'both',
        };
    }
    function _createSlideInX(fromX) {
        return keyframes({
            from: { transform: "translate3d(" + fromX + "px,0,0)", pointerEvents: 'none' },
            to: { transform: "translate3d(0,0,0)", pointerEvents: 'auto' },
        });
    }
    function _createSlideInY(fromY) {
        return keyframes({
            from: { transform: "translate3d(0," + fromY + "px,0)", pointerEvents: 'none' },
            to: { transform: "translate3d(0,0,0)", pointerEvents: 'auto' },
        });
    }
    function _createSlideOutX(toX) {
        return keyframes({
            from: { transform: "translate3d(0,0,0)" },
            to: { transform: "translate3d(" + toX + "px,0,0)" },
        });
    }
    function _createSlideOutY(toY) {
        return keyframes({
            from: { transform: "translate3d(0,0,0)" },
            to: { transform: "translate3d(0," + toY + "px,0)" },
        });
    }

    // Font face names to be registered.
    var LocalizedFontNames;
    (function (LocalizedFontNames) {
        LocalizedFontNames.Arabic = 'Segoe UI Web (Arabic)';
        LocalizedFontNames.Cyrillic = 'Segoe UI Web (Cyrillic)';
        LocalizedFontNames.EastEuropean = 'Segoe UI Web (East European)';
        LocalizedFontNames.Greek = 'Segoe UI Web (Greek)';
        LocalizedFontNames.Hebrew = 'Segoe UI Web (Hebrew)';
        LocalizedFontNames.Thai = 'Leelawadee UI Web';
        LocalizedFontNames.Vietnamese = 'Segoe UI Web (Vietnamese)';
        LocalizedFontNames.WestEuropean = 'Segoe UI Web (West European)';
        LocalizedFontNames.Selawik = 'Selawik Web';
        LocalizedFontNames.Armenian = 'Segoe UI Web (Armenian)';
        LocalizedFontNames.Georgian = 'Segoe UI Web (Georgian)';
    })(LocalizedFontNames || (LocalizedFontNames = {}));
    // Font families with fallbacks, for the general regions.
    var LocalizedFontFamilies;
    (function (LocalizedFontFamilies) {
        LocalizedFontFamilies.Arabic = "'" + LocalizedFontNames.Arabic + "'";
        LocalizedFontFamilies.ChineseSimplified = "'Microsoft Yahei UI', Verdana, Simsun";
        LocalizedFontFamilies.ChineseTraditional = "'Microsoft Jhenghei UI', Pmingliu";
        LocalizedFontFamilies.Cyrillic = "'" + LocalizedFontNames.Cyrillic + "'";
        LocalizedFontFamilies.EastEuropean = "'" + LocalizedFontNames.EastEuropean + "'";
        LocalizedFontFamilies.Greek = "'" + LocalizedFontNames.Greek + "'";
        LocalizedFontFamilies.Hebrew = "'" + LocalizedFontNames.Hebrew + "'";
        LocalizedFontFamilies.Hindi = "'Nirmala UI'";
        LocalizedFontFamilies.Japanese = "'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
        LocalizedFontFamilies.Korean = "'Malgun Gothic', Gulim";
        LocalizedFontFamilies.Selawik = "'" + LocalizedFontNames.Selawik + "'";
        LocalizedFontFamilies.Thai = "'Leelawadee UI Web', 'Kmer UI'";
        LocalizedFontFamilies.Vietnamese = "'" + LocalizedFontNames.Vietnamese + "'";
        LocalizedFontFamilies.WestEuropean = "'" + LocalizedFontNames.WestEuropean + "'";
        LocalizedFontFamilies.Armenian = "'" + LocalizedFontNames.Armenian + "'";
        LocalizedFontFamilies.Georgian = "'" + LocalizedFontNames.Georgian + "'";
    })(LocalizedFontFamilies || (LocalizedFontFamilies = {}));
    // Standard font sizes.
    var FontSizes;
    (function (FontSizes) {
        FontSizes.size10 = '10px';
        FontSizes.size12 = '12px';
        FontSizes.size14 = '14px';
        FontSizes.size16 = '16px';
        FontSizes.size18 = '18px';
        FontSizes.size20 = '20px';
        FontSizes.size24 = '24px';
        FontSizes.size28 = '28px';
        FontSizes.size32 = '32px';
        FontSizes.size42 = '42px';
        FontSizes.size68 = '68px';
        FontSizes.mini = '10px';
        FontSizes.xSmall = '10px';
        FontSizes.small = '12px';
        FontSizes.smallPlus = '12px';
        FontSizes.medium = '14px';
        FontSizes.mediumPlus = '16px';
        FontSizes.icon = '16px';
        FontSizes.large = '18px';
        FontSizes.xLarge = '20px';
        FontSizes.xLargePlus = '24px';
        FontSizes.xxLarge = '28px';
        FontSizes.xxLargePlus = '32px';
        FontSizes.superLarge = '42px';
        FontSizes.mega = '68px';
    })(FontSizes || (FontSizes = {}));
    // Standard font weights.
    var FontWeights;
    (function (FontWeights) {
        FontWeights.light = 100;
        FontWeights.semilight = 300;
        FontWeights.regular = 400;
        FontWeights.semibold = 600;
        FontWeights.bold = 700;
    })(FontWeights || (FontWeights = {}));
    // Standard Icon Sizes.
    var IconFontSizes;
    (function (IconFontSizes) {
        IconFontSizes.xSmall = '10px';
        IconFontSizes.small = '12px';
        IconFontSizes.medium = '16px';
        IconFontSizes.large = '20px';
    })(IconFontSizes || (IconFontSizes = {}));

    // Fallback fonts, if specified system or web fonts are unavailable.
    var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
    // By default, we favor system fonts for the default.
    // All localized fonts use a web font and never use the system font.
    var defaultFontFamily = "'Segoe UI', '" + LocalizedFontNames.WestEuropean + "'";
    // Mapping of language prefix to to font family.
    var LanguageToFontMap = {
        ar: LocalizedFontFamilies.Arabic,
        bg: LocalizedFontFamilies.Cyrillic,
        cs: LocalizedFontFamilies.EastEuropean,
        el: LocalizedFontFamilies.Greek,
        et: LocalizedFontFamilies.EastEuropean,
        he: LocalizedFontFamilies.Hebrew,
        hi: LocalizedFontFamilies.Hindi,
        hr: LocalizedFontFamilies.EastEuropean,
        hu: LocalizedFontFamilies.EastEuropean,
        ja: LocalizedFontFamilies.Japanese,
        kk: LocalizedFontFamilies.EastEuropean,
        ko: LocalizedFontFamilies.Korean,
        lt: LocalizedFontFamilies.EastEuropean,
        lv: LocalizedFontFamilies.EastEuropean,
        pl: LocalizedFontFamilies.EastEuropean,
        ru: LocalizedFontFamilies.Cyrillic,
        sk: LocalizedFontFamilies.EastEuropean,
        'sr-latn': LocalizedFontFamilies.EastEuropean,
        th: LocalizedFontFamilies.Thai,
        tr: LocalizedFontFamilies.EastEuropean,
        uk: LocalizedFontFamilies.Cyrillic,
        vi: LocalizedFontFamilies.Vietnamese,
        'zh-hans': LocalizedFontFamilies.ChineseSimplified,
        'zh-hant': LocalizedFontFamilies.ChineseTraditional,
        hy: LocalizedFontFamilies.Armenian,
        ka: LocalizedFontFamilies.Georgian,
    };
    function _fontFamilyWithFallbacks(fontFamily) {
        return fontFamily + ", " + FontFamilyFallbacks;
    }
    /**
     * If there is a localized font for this language, return that.
     * Returns undefined if there is no localized font for that language.
     */
    function _getLocalizedFontFamily(language) {
        for (var lang in LanguageToFontMap) {
            if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return LanguageToFontMap[lang];
            }
        }
        return defaultFontFamily;
    }
    function _createFont(size, weight, fontFamily) {
        return {
            fontFamily: fontFamily,
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontSize: size,
            fontWeight: weight,
        };
    }
    function createFontStyles(localeCode) {
        var localizedFont = _getLocalizedFontFamily(localeCode);
        var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);
        var fontStyles = {
            tiny: _createFont(FontSizes.mini, FontWeights.regular, fontFamilyWithFallback),
            xSmall: _createFont(FontSizes.xSmall, FontWeights.regular, fontFamilyWithFallback),
            small: _createFont(FontSizes.small, FontWeights.regular, fontFamilyWithFallback),
            smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular, fontFamilyWithFallback),
            medium: _createFont(FontSizes.medium, FontWeights.regular, fontFamilyWithFallback),
            mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular, fontFamilyWithFallback),
            large: _createFont(FontSizes.large, FontWeights.regular, fontFamilyWithFallback),
            xLarge: _createFont(FontSizes.xLarge, FontWeights.semibold, fontFamilyWithFallback),
            xLargePlus: _createFont(FontSizes.xLargePlus, FontWeights.semibold, fontFamilyWithFallback),
            xxLarge: _createFont(FontSizes.xxLarge, FontWeights.semibold, fontFamilyWithFallback),
            xxLargePlus: _createFont(FontSizes.xxLargePlus, FontWeights.semibold, fontFamilyWithFallback),
            superLarge: _createFont(FontSizes.superLarge, FontWeights.semibold, fontFamilyWithFallback),
            mega: _createFont(FontSizes.mega, FontWeights.semibold, fontFamilyWithFallback),
        };
        return fontStyles;
    }

    // Default urls.
    var DefaultBaseUrl = 'https://static2.sharepointonline.com/files/fabric/assets';
    // Standard font styling.
    var DefaultFontStyles = createFontStyles(getLanguage());
    function _registerFontFace(fontFamily, url, fontWeight, localFontName) {
        fontFamily = "'" + fontFamily + "'";
        var localFontSrc = localFontName !== undefined ? "local('" + localFontName + "')," : '';
        fontFace({
            fontFamily: fontFamily,
            src: localFontSrc + ("url('" + url + ".woff2') format('woff2'),") + ("url('" + url + ".woff') format('woff')"),
            fontWeight: fontWeight,
            fontStyle: 'normal',
            fontDisplay: 'swap',
        });
    }
    function _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {
        if (cdnFontName === void 0) { cdnFontName = 'segoeui'; }
        var urlBase = baseUrl + "/" + cdnFolder + "/" + cdnFontName;
        _registerFontFace(fontFamily, urlBase + '-light', FontWeights.light, localFontName && localFontName + ' Light');
        _registerFontFace(fontFamily, urlBase + '-semilight', FontWeights.semilight, localFontName && localFontName + ' SemiLight');
        _registerFontFace(fontFamily, urlBase + '-regular', FontWeights.regular, localFontName);
        _registerFontFace(fontFamily, urlBase + '-semibold', FontWeights.semibold, localFontName && localFontName + ' SemiBold');
        _registerFontFace(fontFamily, urlBase + '-bold', FontWeights.bold, localFontName && localFontName + ' Bold');
    }
    function registerDefaultFontFaces(baseUrl) {
        if (baseUrl) {
            var fontUrl = baseUrl + "/fonts";
            // Produce @font-face definitions for all supported web fonts.
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, 'leelawadeeui-thai', 'leelawadeeui');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, 'segoeui-arabic');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, 'segoeui-cyrillic');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, 'segoeui-easteuropean');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, 'segoeui-greek');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, 'segoeui-hebrew');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, 'segoeui-vietnamese');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, 'segoeui-westeuropean', 'segoeui', 'Segoe UI');
            _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, 'selawik', 'selawik');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, 'segoeui-armenian');
            _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, 'segoeui-georgian');
            // Leelawadee UI (Thai) does not have a 'light' weight, so we override
            // the font-face generated above to use the 'semilight' weight instead.
            _registerFontFace('Leelawadee UI Web', fontUrl + "/leelawadeeui-thai/leelawadeeui-semilight", FontWeights.light);
            // Leelawadee UI (Thai) does not have a 'semibold' weight, so we override
            // the font-face generated above to use the 'bold' weight instead.
            _registerFontFace('Leelawadee UI Web', fontUrl + "/leelawadeeui-thai/leelawadeeui-bold", FontWeights.semibold);
        }
    }
    /**
     * Reads the fontBaseUrl from window.FabricConfig.fontBaseUrl or falls back to a default.
     */
    function _getFontBaseUrl() {
        var _a, _b;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var fabricConfig = (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.FabricConfig;
        return (_b = fabricConfig === null || fabricConfig === void 0 ? void 0 : fabricConfig.fontBaseUrl) !== null && _b !== void 0 ? _b : DefaultBaseUrl;
    }
    /**
     * Register the font faces.
     */
    registerDefaultFontFaces(_getFontBaseUrl());

    /**
     * Creates a custom theme definition.
     * @param theme - Partial theme object.
     * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
     */
    function createTheme(theme, depComments) {
        if (theme === void 0) { theme = {}; }
        if (depComments === void 0) { depComments = false; }
        var isInverted = !!theme.isInverted;
        var baseTheme = {
            palette: DefaultPalette,
            effects: DefaultEffects,
            fonts: DefaultFontStyles,
            spacing: DefaultSpacing,
            isInverted: isInverted,
            disableGlobalClassNames: false,
            semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, undefined, isInverted, depComments),
            rtl: undefined,
        };
        return mergeThemes(baseTheme, theme);
    }

    var HighContrastSelector = '@media screen and (-ms-high-contrast: active), (forced-colors: active)';
    var HighContrastSelectorWhite = '@media screen and (-ms-high-contrast: black-on-white), (forced-colors: black-on-white)';
    var ScreenWidthMinSmall = 320;
    var ScreenWidthMinMedium = 480;
    var ScreenWidthMinLarge = 640;
    var ScreenWidthMinXLarge = 1024;
    var ScreenWidthMinXXLarge = 1366;
    var ScreenWidthMaxSmall = ScreenWidthMinMedium - 1;
    var ScreenWidthMaxMedium = ScreenWidthMinLarge - 1;
    var ScreenWidthMinUhfMobile = 768;
    function getScreenSelector(min, max) {
        var minSelector = typeof min === 'number' ? " and (min-width: " + min + "px)" : '';
        var maxSelector = typeof max === 'number' ? " and (max-width: " + max + "px)" : '';
        return "@media only screen" + minSelector + maxSelector;
    }
    /**
     * The style which turns off high contrast adjustment in browsers.
     */
    function getHighContrastNoAdjustStyle() {
        return {
            forcedColorAdjust: 'none',
            MsHighContrastAdjust: 'none',
        };
    }

    var ZIndexes;
    (function (ZIndexes) {
        ZIndexes.Nav = 1;
        /**
         * @deprecated Do not use
         */
        ZIndexes.ScrollablePane = 1;
        ZIndexes.FocusStyle = 1;
        ZIndexes.Coachmark = 1000;
        ZIndexes.Layer = 1000000;
        ZIndexes.KeytipLayer = 1000001;
    })(ZIndexes || (ZIndexes = {}));

    function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly) {
        if (typeof insetOrOptions === 'number' || !insetOrOptions) {
            return _getFocusStyleInternal(theme, {
                inset: insetOrOptions,
                position: position,
                highContrastStyle: highContrastStyle,
                borderColor: borderColor,
                outlineColor: outlineColor,
                isFocusedOnly: isFocusedOnly,
            });
        }
        else {
            return _getFocusStyleInternal(theme, insetOrOptions);
        }
    }
    function _getFocusStyleInternal(theme, options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        var _c = options.inset, inset = _c === void 0 ? 0 : _c, _d = options.width, width = _d === void 0 ? 1 : _d, _e = options.position, position = _e === void 0 ? 'relative' : _e, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h;
        return {
            // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.
            outline: 'transparent',
            // Requirement because pseudo-element is absolutely positioned.
            position: position,
            selectors: (_a = {
                    // Clear the focus border in Firefox.
                    // Reference: http://stackoverflow.com/a/199319/1436671
                    '::-moz-focus-inner': {
                        border: '0',
                    }
                },
                // When the element that uses this mixin is in a :focus state, add a pseudo-element to
                // create a border.
                _a["." + IsFocusVisibleClassName + " &" + (isFocusedOnly ? ':focus' : '') + ":after"] = {
                    content: '""',
                    position: 'absolute',
                    left: inset + 1,
                    top: inset + 1,
                    bottom: inset + 1,
                    right: inset + 1,
                    border: width + "px solid " + borderColor,
                    outline: width + "px solid " + outlineColor,
                    zIndex: ZIndexes.FocusStyle,
                    selectors: (_b = {},
                        _b[HighContrastSelector] = highContrastStyle,
                        _b),
                },
                _a),
        };
    }
    /**
     * Generates style to clear browser specific focus styles.
     */
    function focusClear() {
        return {
            selectors: {
                '&::-moz-focus-inner': {
                    // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671
                    border: 0,
                },
                '&': {
                    // Clear browser specific focus styles and use transparent as placeholder for focus style
                    outline: 'transparent',
                },
            },
        };
    }
    /**
     * Generates text input border styles on focus.
     *
     * @param borderColor - Color of the border.
     * @param borderRadius - Radius of the border.
     * @param borderType - Type of the border.
     * @param borderPosition - Position of the border relative to the input element (default to -1
     * as it's the most common border width of the input element)
     * @returns The style object.
     */
    var getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {
        var _a, _b, _c;
        if (borderType === void 0) { borderType = 'border'; }
        if (borderPosition === void 0) { borderPosition = -1; }
        var isBorderBottom = borderType === 'borderBottom';
        return {
            borderColor: borderColor,
            selectors: {
                ':after': (_a = {
                        pointerEvents: 'none',
                        content: "''",
                        position: 'absolute',
                        left: isBorderBottom ? 0 : borderPosition,
                        top: borderPosition,
                        bottom: borderPosition,
                        right: isBorderBottom ? 0 : borderPosition
                    },
                    _a[borderType] = "2px solid " + borderColor,
                    _a.borderRadius = borderRadius,
                    _a.width = borderType === 'borderBottom' ? '100%' : undefined,
                    _a.selectors = (_b = {},
                        _b[HighContrastSelector] = (_c = {},
                            _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight',
                            _c),
                        _b),
                    _a),
            },
        };
    };

    var hiddenContentStyle = {
        position: 'absolute',
        width: 1,
        height: 1,
        margin: -1,
        padding: 0,
        border: 0,
        overflow: 'hidden',
        whiteSpace: 'nowrap',
    };

    /**
     * Internal memoized function which simply takes in the class map and the
     * disable boolean. These immutable values can be memoized.
     */
    var _getGlobalClassNames = memoizeFunction(function (classNames, disableGlobalClassNames) {
        var styleSheet = Stylesheet.getInstance();
        if (disableGlobalClassNames) {
            // disable global classnames
            return Object.keys(classNames).reduce(function (acc, className) {
                acc[className] = styleSheet.getClassName(classNames[className]);
                return acc;
            }, {});
        }
        // use global classnames
        return classNames;
    });
    /**
     * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`
     * Note that calls to this function are memoized.
     *
     * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in
     * the same instance on each call to benefit from memoization.
     * @param theme - The theme to check the flag on
     * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.
     */
    function getGlobalClassNames(classNames, theme, disableGlobalClassNames) {
        return _getGlobalClassNames(classNames, disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames);
    }

    // Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
    // See LICENSE in the project root for license information.
    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    // Store the theming state in __themeState__ global scope for reuse in the case of duplicate
    // load-themed-styles hosted on the page.
    var _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any
    // Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).
    var _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;
    var _themeState = initializeThemeState();
    /**
     * initialize global state object
     */
    function initializeThemeState() {
        var state = _root.__themeState__ || {
            theme: undefined,
            lastStyleElement: undefined,
            registeredStyles: []
        };
        if (!state.runState) {
            state = __assign(__assign({}, state), { perf: {
                    count: 0,
                    duration: 0
                }, runState: {
                    flushTimer: 0,
                    mode: 0 /* sync */,
                    buffer: []
                } });
        }
        if (!state.registeredThemableStyles) {
            state = __assign(__assign({}, state), { registeredThemableStyles: [] });
        }
        _root.__themeState__ = state;
        return state;
    }
    /**
     * Loads a set of style text. If it is registered too early, we will register it when the window.load event
     * is fired.
     * @param {string} styleText Style to register.
     * @param {IStyleRecord} styleRecord Existing style record to re-apply.
     */
    function applyThemableStyles(stylesArray, styleRecord) {
        if (_themeState.loadStyles) {
            _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);
        }
        else {
            registerStyles(stylesArray);
        }
    }
    /**
     * Registers a set theme tokens to find and replace. If styles were already registered, they will be
     * replaced.
     * @param {theme} theme JSON object of theme tokens to values.
     */
    function loadTheme$1(theme) {
        _themeState.theme = theme;
        // reload styles.
        reloadStyles();
    }
    /**
     * Clear already registered style elements and style records in theme_State object
     * @param option - specify which group of registered styles should be cleared.
     * Default to be both themable and non-themable styles will be cleared
     */
    function clearStyles(option) {
        if (option === void 0) { option = 3 /* all */; }
        if (option === 3 /* all */ || option === 2 /* onlyNonThemable */) {
            clearStylesInternal(_themeState.registeredStyles);
            _themeState.registeredStyles = [];
        }
        if (option === 3 /* all */ || option === 1 /* onlyThemable */) {
            clearStylesInternal(_themeState.registeredThemableStyles);
            _themeState.registeredThemableStyles = [];
        }
    }
    function clearStylesInternal(records) {
        records.forEach(function (styleRecord) {
            var styleElement = styleRecord && styleRecord.styleElement;
            if (styleElement && styleElement.parentElement) {
                styleElement.parentElement.removeChild(styleElement);
            }
        });
    }
    /**
     * Reloads styles.
     */
    function reloadStyles() {
        if (_themeState.theme) {
            var themableStyles = [];
            for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {
                var styleRecord = _a[_i];
                themableStyles.push(styleRecord.themableStyle);
            }
            if (themableStyles.length > 0) {
                clearStyles(1 /* onlyThemable */);
                applyThemableStyles([].concat.apply([], themableStyles));
            }
        }
    }
    /**
     * Resolves ThemingInstruction objects in an array and joins the result into a string.
     * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.
     */
    function resolveThemableArray(splitStyleArray) {
        var theme = _themeState.theme;
        var themable = false;
        // Resolve the array of theming instructions to an array of strings.
        // Then join the array to produce the final CSS string.
        var resolvedArray = (splitStyleArray || []).map(function (currentValue) {
            var themeSlot = currentValue.theme;
            if (themeSlot) {
                themable = true;
                // A theming annotation. Resolve it.
                var themedValue = theme ? theme[themeSlot] : undefined;
                var defaultValue = currentValue.defaultValue || 'inherit';
                // Warn to console if we hit an unthemed value even when themes are provided, but only if "DEBUG" is true.
                // Allow the themedValue to be undefined to explicitly request the default value.
                if (theme &&
                    !themedValue &&
                    console &&
                    !(themeSlot in theme) &&
                    typeof DEBUG !== 'undefined' &&
                    DEBUG) {
                    console.warn("Theming value not provided for \"".concat(themeSlot, "\". Falling back to \"").concat(defaultValue, "\"."));
                }
                return themedValue || defaultValue;
            }
            else {
                // A non-themable string. Preserve it.
                return currentValue.rawString;
            }
        });
        return {
            styleString: resolvedArray.join(''),
            themable: themable
        };
    }
    /**
     * Registers a set of style text. If it is registered too early, we will register it when the
     * window.load event is fired.
     * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
     * @param {IStyleRecord} styleRecord May specify a style Element to update.
     */
    function registerStyles(styleArray) {
        if (typeof document === 'undefined') {
            return;
        }
        var head = document.getElementsByTagName('head')[0];
        var styleElement = document.createElement('style');
        var _a = resolveThemableArray(styleArray), styleString = _a.styleString, themable = _a.themable;
        styleElement.setAttribute('data-load-themed-styles', 'true');
        if (_styleNonce) {
            styleElement.setAttribute('nonce', _styleNonce);
        }
        styleElement.appendChild(document.createTextNode(styleString));
        _themeState.perf.count++;
        head.appendChild(styleElement);
        var ev = document.createEvent('HTMLEvents');
        ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);
        ev.args = {
            newStyle: styleElement
        };
        document.dispatchEvent(ev);
        var record = {
            styleElement: styleElement,
            themableStyle: styleArray
        };
        if (themable) {
            _themeState.registeredThemableStyles.push(record);
        }
        else {
            _themeState.registeredStyles.push(record);
        }
    }

    var _theme = createTheme({});
    var _onThemeChangeCallbacks = [];
    var ThemeSettingName = 'theme';
    function initializeThemeInCustomizations() {
        var _a;
        var _b, _c;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var win = getWindow();
        if ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {
            // does everything the `else` clause does and more, such as invoke legacy theming
            loadTheme(win.FabricConfig.legacyTheme);
        }
        else if (!Customizations.getSettings([ThemeSettingName]).theme) {
            if ((_c = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {
                _theme = createTheme(win.FabricConfig.theme);
            }
            // Set the default theme.
            Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));
        }
    }
    initializeThemeInCustomizations();
    /**
     * Gets the theme object
     * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
     */
    function getTheme(depComments) {
        if (depComments === void 0) { depComments = false; }
        if (depComments === true) {
            _theme = createTheme({}, depComments);
        }
        return _theme;
    }
    /**
     * Applies the theme, while filling in missing slots.
     * @param theme - Partial theme object.
     * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
     */
    function loadTheme(theme, depComments) {
        var _a;
        if (depComments === void 0) { depComments = false; }
        _theme = createTheme(theme, depComments);
        // Invoke the legacy method of theming the page as well.
        loadTheme$1(tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));
        Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));
        _onThemeChangeCallbacks.forEach(function (callback) {
            try {
                callback(_theme);
            }
            catch (e) {
                // don't let a bad callback break everything else
            }
        });
        return _theme;
    }
    /**
     * Loads font variables into a JSON object.
     * @param theme - The theme object
     */
    function _loadFonts(theme) {
        var lines = {};
        for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {
            var fontName = _a[_i];
            var font = theme.fonts[fontName];
            for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {
                var propName = _c[_b];
                var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);
                var value = font[propName];
                if (propName === 'fontSize' && typeof value === 'number') {
                    // if it's a number, convert it to px by default like our theming system does
                    value = value + 'px';
                }
                lines[name_1] = value;
            }
        }
        return lines;
    }

    // This file mimics styles and mixins from _General.Mixins.scss
    var normalize$1 = {
        boxShadow: 'none',
        margin: 0,
        padding: 0,
        boxSizing: 'border-box',
    };
    var noWrap = {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
    };

    /**
     * Generates placeholder style for each of the browsers supported by `@fluentui/react`.
     * @param styles - The style to use.
     * @returns The placeholder style object for each browser depending on the placeholder directive it uses.
     */
    function getPlaceholderStyles(styles) {
        return {
            selectors: {
                '::placeholder': styles,
                ':-ms-input-placeholder': styles,
                '::-ms-input-placeholder': styles, // Edge
            },
        };
    }

    /**
     * {@docCategory AnimationClassNames}
     */
    var AnimationClassNames = buildClassMap(AnimationStyles);

    setVersion('@fluentui/style-utilities', '8.6.5');

    initializeThemeInCustomizations();

    var DirectionalHint = {
        /**
         * Appear above the target element, with the left edges of the callout and target aligning.
         */
        topLeftEdge: 0,
        /**
         * Appear above the target element, with the centers of the callout and target aligning.
         */
        topCenter: 1,
        /**
         * Appear above the target element, with the right edges of the callout and target aligning.
         */
        topRightEdge: 2,
        /**
         * Appear above the target element, aligning with the target element such that the callout tends toward
         * the center of the screen.
         */
        topAutoEdge: 3,
        /**
         * Appear below the target element, with the left edges of the callout and target aligning.
         */
        bottomLeftEdge: 4,
        /**
         * Appear below the target element, with the centers of the callout and target aligning.
         */
        bottomCenter: 5,
        /**
         * Appear below the target element, with the right edges of the callout and target aligning.
         */
        bottomRightEdge: 6,
        /**
         * Appear below the target element, aligning with the target element such that the callout tends toward
         * the center of the screen.
         */
        bottomAutoEdge: 7,
        /**
         * Appear to the left of the target element, with the top edges of the callout and target aligning.
         */
        leftTopEdge: 8,
        /**
         * Appear to the left of the target element, with the centers of the callout and target aligning.
         */
        leftCenter: 9,
        /**
         * Appear to the left of the target element, with the bottom edges of the callout and target aligning.
         */
        leftBottomEdge: 10,
        /**
         * Appear to the right of the target element, with the top edges of the callout and target aligning.
         */
        rightTopEdge: 11,
        /**
         * Appear to the right of the target element, with the centers of the callout and target aligning.
         */
        rightCenter: 12,
        /**
         * Appear to the right of the target element, with the bottom edges of the callout and target aligning.
         */
        rightBottomEdge: 13,
    };

    var RectangleEdge;
    (function (RectangleEdge) {
        RectangleEdge[RectangleEdge["top"] = 1] = "top";
        RectangleEdge[RectangleEdge["bottom"] = -1] = "bottom";
        RectangleEdge[RectangleEdge["left"] = 2] = "left";
        RectangleEdge[RectangleEdge["right"] = -2] = "right";
    })(RectangleEdge || (RectangleEdge = {}));
    var Position;
    (function (Position) {
        Position[Position["top"] = 0] = "top";
        Position[Position["bottom"] = 1] = "bottom";
        Position[Position["start"] = 2] = "start";
        Position[Position["end"] = 3] = "end";
    })(Position || (Position = {}));

    var _a$6;
    function _createPositionData(targetEdge, alignmentEdge, isAuto) {
        return {
            targetEdge: targetEdge,
            alignmentEdge: alignmentEdge,
            isAuto: isAuto,
        };
    }
    // Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target
    var DirectionalDictionary = (_a$6 = {},
        _a$6[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left),
        _a$6[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top),
        _a$6[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right),
        _a$6[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, undefined, true),
        _a$6[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left),
        _a$6[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom),
        _a$6[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right),
        _a$6[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, undefined, true),
        _a$6[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top),
        _a$6[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left),
        _a$6[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom),
        _a$6[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top),
        _a$6[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right),
        _a$6[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom),
        _a$6);
    function _isRectangleWithinBounds(rect, boundingRect) {
        if (rect.top < boundingRect.top) {
            return false;
        }
        if (rect.bottom > boundingRect.bottom) {
            return false;
        }
        if (rect.left < boundingRect.left) {
            return false;
        }
        if (rect.right > boundingRect.right) {
            return false;
        }
        return true;
    }
    /**
     * Gets all of the edges of a rectangle that are outside of the given bounds.
     * If there are no out of bounds edges it returns an empty array.
     */
    function _getOutOfBoundsEdges(rect, boundingRect) {
        var outOfBounds = [];
        if (rect.top < boundingRect.top) {
            outOfBounds.push(RectangleEdge.top);
        }
        if (rect.bottom > boundingRect.bottom) {
            outOfBounds.push(RectangleEdge.bottom);
        }
        if (rect.left < boundingRect.left) {
            outOfBounds.push(RectangleEdge.left);
        }
        if (rect.right > boundingRect.right) {
            outOfBounds.push(RectangleEdge.right);
        }
        return outOfBounds;
    }
    function _getEdgeValue(rect, edge) {
        return rect[RectangleEdge[edge]];
    }
    function _setEdgeValue(rect, edge, value) {
        rect[RectangleEdge[edge]] = value;
        return rect;
    }
    /**
     * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as
     * the itself already contains the other coordinate.
     * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.
     */
    function _getCenterValue(rect, edge) {
        var edges = _getFlankingEdges(edge);
        return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;
    }
    /**
     * Flips the value depending on the edge.
     * If the edge is a "positive" edge, Top or Left, then the value should stay as it is.
     * If the edge is a "negative" edge, Bottom or Right, then the value should be flipped.
     * This is to account for the fact that the coordinates are effectively reserved in certain cases for the
     * "negative" edges.
     *
     * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2:
     * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.
     * If top edge 1 is less than edge 2 then it is out of bounds.
     */
    function _getRelativeEdgeValue(edge, value) {
        if (edge > 0) {
            return value;
        }
        else {
            return value * -1;
        }
    }
    function _getRelativeRectEdgeValue(edge, rect) {
        return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));
    }
    function _getRelativeEdgeDifference(rect, hostRect, edge) {
        var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);
        return _getRelativeEdgeValue(edge, edgeDifference);
    }
    /**
     * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.
     * For example, if it's a bottom edge it will only change y coordinates.
     * if maintainSize is set to false, it will only adjust the specified edge value
     */
    function _moveEdge(rect, edge, newValue, maintainSize) {
        if (maintainSize === void 0) { maintainSize = true; }
        var difference = _getEdgeValue(rect, edge) - newValue;
        var returnRect = _setEdgeValue(rect, edge, newValue);
        if (maintainSize) {
            returnRect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);
        }
        return returnRect;
    }
    /**
     * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.
     */
    function _alignEdges(rect, target, edge, gap) {
        if (gap === void 0) { gap = 0; }
        return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));
    }
    /**
     * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.
     * For instance if targetEdge is bottom, then the rects top will be moved to match it.
     */
    function _alignOppositeEdges(rect, target, targetEdge, gap) {
        if (gap === void 0) { gap = 0; }
        var oppositeEdge = targetEdge * -1;
        var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);
        return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);
    }
    /**
     * Tests to see if the given edge is within the bounds of the given rectangle.
     */
    function _isEdgeInBounds(rect, bounds, edge) {
        var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);
        return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);
    }
    /**
     * Returns a measure of how much a rectangle is out of bounds for a given alignment;
     * this can be used to compare which rectangle is more or less out of bounds.
     * A value of 0 means the rectangle is entirely in bounds
     */
    function _getOutOfBoundsDegree(rect, bounds) {
        var breakingEdges = _getOutOfBoundsEdges(rect, bounds);
        var total = 0;
        for (var _i = 0, breakingEdges_1 = breakingEdges; _i < breakingEdges_1.length; _i++) {
            var edge = breakingEdges_1[_i];
            total += Math.pow(_getRelativeEdgeDifference(rect, bounds, edge), 2);
        }
        return total;
    }
    /**
     * Attempts to move the rectangle through various sides of the target to find a place to fit.
     * If no fit is found, the least bad option should be returned.
     */
    function _flipToFit(rect, target, bounding, positionData, gap) {
        if (gap === void 0) { gap = 0; }
        var directions = [
            RectangleEdge.left,
            RectangleEdge.right,
            RectangleEdge.bottom,
            RectangleEdge.top,
        ];
        // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, so the order should be updated.
        if (getRTL()) {
            directions[0] *= -1;
            directions[1] *= -1;
        }
        var currentEstimate = rect;
        var currentEdge = positionData.targetEdge;
        var currentAlignment = positionData.alignmentEdge;
        // keep track of least bad option, in case no sides fit
        var oobDegree;
        var bestEdge = currentEdge;
        var bestAlignment = currentAlignment;
        // Keep switching sides until one is found with enough space.
        // If all sides don't fit then return the unmodified element.
        for (var i = 0; i < 4; i++) {
            if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {
                // update least-bad edges
                var currentOOBDegree = _getOutOfBoundsDegree(currentEstimate, bounding);
                if (!oobDegree || currentOOBDegree < oobDegree) {
                    oobDegree = currentOOBDegree;
                    bestEdge = currentEdge;
                    bestAlignment = currentAlignment;
                }
                directions.splice(directions.indexOf(currentEdge), 1);
                if (directions.length > 0) {
                    if (directions.indexOf(currentEdge * -1) > -1) {
                        currentEdge = currentEdge * -1;
                    }
                    else {
                        currentAlignment = currentEdge;
                        currentEdge = directions.slice(-1)[0];
                    }
                    currentEstimate = _estimatePosition(rect, target, { targetEdge: currentEdge, alignmentEdge: currentAlignment }, gap);
                }
            }
            else {
                return {
                    elementRectangle: currentEstimate,
                    targetEdge: currentEdge,
                    alignmentEdge: currentAlignment,
                };
            }
        }
        // nothing fits, use least-bad option
        currentEstimate = _estimatePosition(rect, target, { targetEdge: bestEdge, alignmentEdge: bestAlignment }, gap);
        return {
            elementRectangle: currentEstimate,
            targetEdge: bestEdge,
            alignmentEdge: bestAlignment,
        };
    }
    /**
     * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges
     * into position, when `alignTargetEdge` is specified.
     */
    function _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {
        var alignmentEdge = elementEstimate.alignmentEdge, targetEdge = elementEstimate.targetEdge, elementRectangle = elementEstimate.elementRectangle;
        var oppositeEdge = alignmentEdge * -1;
        var newEstimate = _estimatePosition(elementRectangle, target, { targetEdge: targetEdge, alignmentEdge: oppositeEdge }, gap, coverTarget);
        return {
            elementRectangle: newEstimate,
            targetEdge: targetEdge,
            alignmentEdge: oppositeEdge,
        };
    }
    /**
     * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in
     * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.
     */
    function _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
        if (gap === void 0) { gap = 0; }
        var alignmentEdge = positionData.alignmentEdge, alignTargetEdge = positionData.alignTargetEdge;
        var elementEstimate = {
            elementRectangle: element,
            targetEdge: positionData.targetEdge,
            alignmentEdge: alignmentEdge,
        };
        if (!directionalHintFixed && !coverTarget) {
            elementEstimate = _flipToFit(element, target, bounding, positionData, gap);
        }
        var outOfBounds = _getOutOfBoundsEdges(elementEstimate.elementRectangle, bounding);
        // if directionalHintFixed is specified, we need to force the target edge to not change
        // we need *-1 because targetEdge refers to the target's edge; the callout edge is the opposite
        var fixedEdge = directionalHintFixed ? -elementEstimate.targetEdge : undefined;
        if (outOfBounds.length > 0) {
            if (alignTargetEdge) {
                // The edge opposite to the alignment edge might be out of bounds.
                // Flip alignment to see if we can get it within bounds.
                if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {
                    var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);
                    if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {
                        return flippedElementEstimate;
                    }
                    else {
                        // If the flipped elements edges are still out of bounds, try nudging it.
                        elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding, fixedEdge);
                    }
                }
                else {
                    elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
                }
            }
            else {
                elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
            }
        }
        return elementEstimate;
    }
    /**
     * Iterates through a list of out of bounds edges and tries to nudge and align them.
     * @param outOfBoundsEdges - Array of edges that are out of bounds
     * @param elementEstimate - The current element positioning estimate
     * @param bounding - The current bounds
     * @param preserveEdge - Specify an edge that should not be modified
     */
    function _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding, preserveEdge) {
        for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {
            var direction = outOfBoundsEdges_1[_i];
            var edgeAttempt = void 0;
            // if preserveEdge is specified, do not call _alignEdges, skip directly to _moveEdge
            // this is because _alignEdges will move the opposite edge
            if (preserveEdge && preserveEdge === direction * -1) {
                edgeAttempt = _moveEdge(elementEstimate.elementRectangle, direction, _getEdgeValue(bounding, direction), false);
                elementEstimate.forcedInBounds = true;
            }
            else {
                edgeAttempt = _alignEdges(elementEstimate.elementRectangle, bounding, direction);
                var inBounds = _isEdgeInBounds(edgeAttempt, bounding, direction * -1);
                // only update estimate if the attempt didn't break out of the opposite bounding edge
                if (!inBounds) {
                    edgeAttempt = _moveEdge(edgeAttempt, direction * -1, _getEdgeValue(bounding, direction * -1), false);
                    elementEstimate.forcedInBounds = true;
                }
            }
            elementEstimate.elementRectangle = edgeAttempt;
        }
        return elementEstimate;
    }
    /**
     * Moves the middle point on an edge to the point given.
     * Only moves in one direction. For instance if a bottom edge is passed in, then
     * the bottom edge will be moved in the x axis to match the point.
     */
    function _centerEdgeToPoint(rect, edge, point) {
        var positiveEdge = _getFlankingEdges(edge).positiveEdge;
        var elementMiddle = _getCenterValue(rect, edge);
        var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);
        return _moveEdge(rect, positiveEdge, point - distanceToMiddle);
    }
    /**
     * Moves the element rectangle to be appropriately positioned relative to a given target.
     * Does not flip or adjust the element.
     */
    function _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {
        if (gap === void 0) { gap = 0; }
        var estimatedElementPosition = new Rectangle(elementToPosition.left, elementToPosition.right, elementToPosition.top, elementToPosition.bottom);
        var alignmentEdge = positionData.alignmentEdge, targetEdge = positionData.targetEdge;
        var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
        estimatedElementPosition = coverTarget
            ? _alignEdges(estimatedElementPosition, target, targetEdge, gap)
            : _alignOppositeEdges(estimatedElementPosition, target, targetEdge, gap);
        // if no alignment edge is provided it's supposed to be centered.
        if (!alignmentEdge) {
            var targetMiddlePoint = _getCenterValue(target, targetEdge);
            estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);
        }
        else {
            estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);
        }
        return estimatedElementPosition;
    }
    /**
     * Returns the non-opposite edges of the target edge.
     * For instance if bottom is passed in then left and right will be returned.
     */
    function _getFlankingEdges(edge) {
        if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {
            return {
                positiveEdge: RectangleEdge.left,
                negativeEdge: RectangleEdge.right,
            };
        }
        else {
            return {
                positiveEdge: RectangleEdge.top,
                negativeEdge: RectangleEdge.bottom,
            };
        }
    }
    /**
     * Retrieve the final value for the return edge of `elementRectangle`. If the `elementRectangle` is closer to one side
     * of the bounds versus the other, the return edge is flipped to grow inward.
     */
    function _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {
        if (bounds &&
            Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) >
                Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {
            return returnEdge * -1;
        }
        return returnEdge;
    }
    /**
     * Whether or not the considered edge of the elementRectangle is lying on the edge of the bounds
     * @param elementRectangle The rectangle whose edge we are considering
     * @param bounds The rectangle marking the bounds
     * @param edge The target edge we're considering
     * @returns If the target edge of the elementRectangle is in the same location as that edge of the bounds
     */
    function _isEdgeOnBounds(elementRectangle, edge, bounds) {
        return bounds !== undefined && _getEdgeValue(elementRectangle, edge) === _getEdgeValue(bounds, edge);
    }
    /**
     * Finalizes the element position based on the hostElement. Only returns the
     * rectangle values to position such that they are anchored to the target.
     * This helps prevent resizing from looking very strange.
     * For instance, if the target edge is top and aligned with the left side then
     * the bottom and left values are returned so as the Callout shrinks it shrinks towards that corner.
     */
    function _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge, forceWithinBounds) {
        var returnValue = {};
        var hostRect = _getRectangleFromElement(hostElement);
        var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
        var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;
        // If we are finalizing the return edge, choose the edge such that we grow away from the bounds
        // If we are not finalizing the return edge but the opposite edge is flush against the bounds,
        // choose that as the anchor edge so the element rect can grow away from the bounds' edge
        // In this case there will not be a visual difference because there is no more room for the elementRectangle to grow
        // in the usual direction
        if (!doNotFinalizeReturnEdge || _isEdgeOnBounds(elementRectangle, getOppositeEdge(returnEdge), bounds)) {
            returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);
        }
        returnValue[RectangleEdge[elementEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);
        returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);
        // if the positioned element will still overflow, return all four edges with in-bounds values
        if (forceWithinBounds) {
            returnValue[RectangleEdge[elementEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge * -1);
            returnValue[RectangleEdge[returnEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge * -1);
        }
        return returnValue;
    }
    // Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.
    // We still want to position the beak based on it's midpoint which does not change. It will
    // be at (beakwidth / 2, beakwidth / 2)
    function _calculateActualBeakWidthInPixels(beakWidth) {
        return Math.sqrt(beakWidth * beakWidth * 2);
    }
    /**
     * Returns the appropriate IPositionData based on the props altered for RTL.
     * If directionalHintForRTL is passed in that is used if the page is RTL.
     * If directionalHint is specified, no directionalHintForRTL is available, and the page is RTL, the hint will be
     * flipped (e.g. bottomLeftEdge would become bottomRightEdge).
     *
     * If there is no directionalHint passed in, bottomAutoEdge is chosen automatically.
     */
    function _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {
        if (directionalHint === void 0) { directionalHint = DirectionalHint.bottomAutoEdge; }
        if (previousPositions) {
            return {
                alignmentEdge: previousPositions.alignmentEdge,
                isAuto: previousPositions.isAuto,
                targetEdge: previousPositions.targetEdge,
            };
        }
        var positionInformation = tslib.__assign({}, DirectionalDictionary[directionalHint]);
        if (getRTL()) {
            // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.
            if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {
                positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;
            }
            return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;
        }
        return positionInformation;
    }
    /**
     * Gets the alignment data for the given information. This only really matters if the positioning is Auto.
     * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to
     * the center of the page.
     */
    function _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {
        if (positionData.isAuto) {
            positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);
        }
        positionData.alignTargetEdge = alignTargetEdge;
        return positionData;
    }
    function getClosestEdge(targetEdge, target, boundingRect) {
        var targetCenter = _getCenterValue(target, targetEdge);
        var boundingCenter = _getCenterValue(boundingRect, targetEdge);
        var _a = _getFlankingEdges(targetEdge), positiveEdge = _a.positiveEdge, negativeEdge = _a.negativeEdge;
        if (targetCenter <= boundingCenter) {
            return positiveEdge;
        }
        else {
            return negativeEdge;
        }
    }
    function _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
        var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);
        if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {
            return {
                elementRectangle: estimatedElementPosition,
                targetEdge: positionData.targetEdge,
                alignmentEdge: positionData.alignmentEdge,
            };
        }
        else {
            return _adjustFitWithinBounds(estimatedElementPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);
        }
    }
    function _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {
        var targetEdge = elementPosition.targetEdge * -1;
        // The "host" element that we will use to help position the beak.
        var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);
        var returnValue = {};
        var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);
        // only show the beak if the callout is not fully covering the target
        var beakEdgeDifference = _getRelativeEdgeDifference(elementPosition.elementRectangle, elementPosition.targetRectangle, targetEdge);
        var showBeak = beakEdgeDifference > Math.abs(_getEdgeValue(positionedBeak, targetEdge));
        returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);
        returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);
        return {
            elementPosition: tslib.__assign({}, returnValue),
            closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),
            targetEdge: targetEdge,
            hideBeak: !showBeak,
        };
    }
    function _positionBeak(beakWidth, elementPosition) {
        var target = elementPosition.targetRectangle;
        /**
         * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and
         * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,
         * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels
         * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.
         */
        var _a = _getFlankingEdges(elementPosition.targetEdge), positiveEdge = _a.positiveEdge, negativeEdge = _a.negativeEdge;
        var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);
        var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);
        var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);
        beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);
        beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));
        if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {
            beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);
        }
        else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {
            beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);
        }
        return beakPosition;
    }
    function _getRectangleFromElement(element) {
        var clientRect = element.getBoundingClientRect();
        return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);
    }
    function _getRectangleFromIRect(rect) {
        return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);
    }
    function _getTargetRect(bounds, target) {
        var targetRectangle;
        if (target) {
            // eslint-disable-next-line no-extra-boolean-cast
            if (!!target.preventDefault) {
                var ev = target;
                targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);
                // eslint-disable-next-line no-extra-boolean-cast
            }
            else if (!!target.getBoundingClientRect) {
                targetRectangle = _getRectangleFromElement(target);
                // HTMLImgElements can have x and y values. The check for it being a point must go last.
            }
            else {
                var rectOrPoint = target;
                // eslint-disable-next-line deprecation/deprecation
                var left = rectOrPoint.left || rectOrPoint.x;
                // eslint-disable-next-line deprecation/deprecation
                var top_1 = rectOrPoint.top || rectOrPoint.y;
                var right = rectOrPoint.right || left;
                var bottom = rectOrPoint.bottom || top_1;
                targetRectangle = new Rectangle(left, right, top_1, bottom);
            }
            if (!_isRectangleWithinBounds(targetRectangle, bounds)) {
                var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);
                for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {
                    var direction = outOfBounds_1[_i];
                    targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];
                }
            }
        }
        else {
            targetRectangle = new Rectangle(0, 0, 0, 0);
        }
        return targetRectangle;
    }
    function _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {
        var gap = props.gapSpace ? props.gapSpace : 0;
        var targetRect = _getTargetRect(boundingRect, props.target);
        var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);
        var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);
        return tslib.__assign(tslib.__assign({}, positionedElement), { targetRectangle: targetRect });
    }
    function _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {
        var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge, positionedElement.forcedInBounds);
        return {
            elementPosition: finalizedElement,
            targetEdge: positionedElement.targetEdge,
            alignmentEdge: positionedElement.alignmentEdge,
        };
    }
    function _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {
        var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;
        var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);
        var positionProps = props;
        positionProps.gapSpace = gap;
        var boundingRect = props.bounds
            ? _getRectangleFromIRect(props.bounds)
            : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);
        var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);
        var beakPositioned = _positionBeak(beakWidth, positionedElement);
        var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);
        return tslib.__assign(tslib.__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), { beakPosition: finalizedBeakPosition });
    }
    function _positionCard(props, hostElement, callout, previousPositions) {
        return _positionCallout(props, hostElement, callout, previousPositions, true);
    }
    function positionCallout(props, hostElement, elementToPosition, previousPositions) {
        return _positionCallout(props, hostElement, elementToPosition, previousPositions);
    }
    function positionCard(props, hostElement, elementToPosition, previousPositions) {
        return _positionCard(props, hostElement, elementToPosition, previousPositions);
    }
    /**
     * Returns the opposite edge of the given RectangleEdge.
     */
    function getOppositeEdge(edge) {
        return edge * -1;
    }
    function _getBoundsFromTargetWindow(target, targetWindow) {
        var segments = undefined;
        if (targetWindow.getWindowSegments) {
            segments = targetWindow.getWindowSegments();
        }
        // Identify if we're dealing with single screen scenarios.
        if (segments === undefined || segments.length <= 1) {
            return {
                top: 0,
                left: 0,
                right: targetWindow.innerWidth,
                bottom: targetWindow.innerHeight,
                width: targetWindow.innerWidth,
                height: targetWindow.innerHeight,
            };
        }
        // Logic for determining dual screen scenarios.
        var x = 0;
        var y = 0;
        // If the target is an Element get coordinates for its center.
        if (target !== null && !!target.getBoundingClientRect) {
            var clientRect = target.getBoundingClientRect();
            x = (clientRect.left + clientRect.right) / 2;
            y = (clientRect.top + clientRect.bottom) / 2;
        }
        // If the target is not null get x-axis and y-axis coordinates directly.
        else if (target !== null) {
            // eslint-disable-next-line deprecation/deprecation
            x = target.left || target.x;
            // eslint-disable-next-line deprecation/deprecation
            y = target.top || target.y;
        }
        var bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };
        // Define which window segment are the coordinates in and calculate bounds based on that.
        for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
            var segment = segments_1[_i];
            if (x && segment.left <= x && segment.right >= x && y && segment.top <= y && segment.bottom >= y) {
                bounds = {
                    top: segment.top,
                    left: segment.left,
                    right: segment.right,
                    bottom: segment.bottom,
                    width: segment.width,
                    height: segment.height,
                };
            }
        }
        return bounds;
    }
    function getBoundsFromTargetWindow(target, targetWindow) {
        return _getBoundsFromTargetWindow(target, targetWindow);
    }

    /**
     * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to
     * always return the same value (and if the initializer is a function, only call it once).
     * This is similar to setting a private member in a class constructor.
     *
     * If the value should ever change based on dependencies, use `React.useMemo` instead.
     *
     * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`,
     * only the value/function passed in the first time this is called is respected.
     * @returns The value. The identity of this value will always be the same.
     */
    function useConst(initialValue) {
        // Use useRef to store the value because it's the least expensive built-in hook that works here
        // (we could also use `const [value] = React.useState(initialValue)` but that's more expensive
        // internally due to reducer handling which we don't need)
        var ref = React__namespace.useRef();
        if (ref.current === undefined) {
            // Box the value in an object so we can tell if it's initialized even if the initializer
            // returns/is undefined
            ref.current = {
                value: typeof initialValue === 'function' ? initialValue() : initialValue,
            };
        }
        return ref.current.value;
    }

    /**
     * Hook to provide an Async instance that is automatically cleaned up on dismount.
     */
    function useAsync() {
        var async = useConst(function () { return new Async(); });
        // Function that returns a function in order to dispose the async instance on unmount
        React__namespace.useEffect(function () { return function () { return async.dispose(); }; }, [async]);
        return async;
    }

    /**
     * Hook to store a value and generate callbacks for setting the value to true or false.
     * The identity of the callbacks will always stay the same.
     *
     * @param initialState - Initial value
     * @returns Array with the current value and an object containing the updater callbacks.
     */
    function useBoolean(initialState) {
        var _a = React__namespace.useState(initialState), value = _a[0], setValue = _a[1];
        var setTrue = useConst(function () { return function () {
            setValue(true);
        }; });
        var setFalse = useConst(function () { return function () {
            setValue(false);
        }; });
        var toggle = useConst(function () { return function () {
            setValue(function (currentValue) { return !currentValue; });
        }; });
        return [value, { setTrue: setTrue, setFalse: setFalse, toggle: toggle }];
    }

    function useControllableValue(controlledValue, defaultUncontrolledValue, onChange) {
        var _a = React__namespace.useState(defaultUncontrolledValue), value = _a[0], setValue = _a[1];
        var isControlled = useConst(controlledValue !== undefined);
        var currentValue = isControlled ? controlledValue : value;
        // Duplicate the current value and onChange in refs so they're accessible from
        // setValueOrCallOnChange without creating a new callback every time
        var valueRef = React__namespace.useRef(currentValue);
        var onChangeRef = React__namespace.useRef(onChange);
        React__namespace.useEffect(function () {
            valueRef.current = currentValue;
            onChangeRef.current = onChange;
        });
        // To match the behavior of the setter returned by React.useState, this callback's identity
        // should never change. This means it MUST NOT directly reference variables that can change.
        var setValueOrCallOnChange = useConst(function () { return function (update, ev) {
            // Assuming here that TValue is not a function, because a controllable value will typically
            // be something a user can enter as input
            var newValue = typeof update === 'function' ? update(valueRef.current) : update;
            if (onChangeRef.current) {
                onChangeRef.current(ev, newValue);
            }
            if (!isControlled) {
                setValue(newValue);
            }
        }; });
        return [currentValue, setValueOrCallOnChange];
    }

    /**
     * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).
     *
     * @param prefix - Optional prefix for the ID
     * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,
     *  without conditioning the hook call
     * @returns The ID
     */
    function useId(prefix, providedId) {
        // getId should only be called once since it updates the global constant for the next ID value.
        // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)
        var ref = React__namespace.useRef(providedId);
        if (!ref.current) {
            ref.current = getId(prefix);
        }
        return ref.current;
    }

    /**
     * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that
     * updates all provided refs
     * @param refs - Refs to collectively update with one ref value.
     * @returns A function with an attached "current" prop, so that it can be treated like a RefObject.
     */
    function useMergedRefs() {
        var refs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            refs[_i] = arguments[_i];
        }
        var mergedCallback = React__namespace.useCallback(function (value) {
            // Update the "current" prop hanging on the function.
            mergedCallback.current = value;
            for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {
                var ref = refs_1[_i];
                if (typeof ref === 'function') {
                    ref(value);
                }
                else if (ref) {
                    // work around the immutability of the React.Ref type
                    ref.current = value;
                }
            }
        }, tslib.__spreadArray([], refs));
        return mergedCallback;
    }

    /**
     * Hook to attach an event handler on mount and handle cleanup.
     * @param element - Element (or ref to an element) to attach the event handler to
     * @param eventName - The event to attach a handler for
     * @param callback - The handler for the event
     * @param useCapture - Whether or not to attach the handler for the capture phase
     */
    function useOnEvent(element, eventName, callback, useCapture) {
        // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders
        var callbackRef = React__namespace.useRef(callback);
        callbackRef.current = callback;
        React__namespace.useEffect(function () {
            var actualElement = element && 'current' in element ? element.current : element;
            if (!actualElement) {
                return;
            }
            var dispose = on(actualElement, eventName, function (ev) { return callbackRef.current(ev); }, useCapture);
            return dispose;
        }, [element, eventName, useCapture]);
    }

    /**
     * Hook keeping track of a given value from a previous execution of the component the Hook is used in.
     *
     * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)
     */
    function usePrevious(value) {
        var ref = React.useRef();
        React.useEffect(function () {
            ref.current = value;
        });
        return ref.current;
    }

    /**
     * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return
     * a cleanup function that'll be called before the value changes, and when the ref is unmounted.
     *
     * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see
     * https://github.com/facebook/react/issues/14387#issuecomment-503616820).
     *
     * Usage example:
     * ```ts
     * const myRef = useRefEffect<HTMLElement>(element => {
     *  ...
     *  return () => { ... cleanup ... };
     * });
     * ```
     * ```jsx
     * <div ref={myRef} />
     * ```
     *
     * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.
     * @param initial - (Optional) The initial value for the ref.
     *
     * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be
     * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.
     */
    function useRefEffect(callback, initial) {
        if (initial === void 0) { initial = null; }
        var createRefCallback = function () {
            var refCallback = function (value) {
                if (data.ref.current !== value) {
                    if (data.cleanup) {
                        data.cleanup();
                        data.cleanup = undefined;
                    }
                    data.ref.current = value;
                    if (value !== null) {
                        data.cleanup = data.callback(value);
                    }
                }
            };
            refCallback.current = initial;
            return refCallback;
        };
        var data = React__namespace.useRef({
            ref: createRefCallback(),
            callback: callback,
        }).current;
        data.callback = callback;
        return data.ref;
    }

    /**
     *  Returns a wrapper function for `setTimeout` which automatically handles disposal.
     */
    var useSetTimeout = function () {
        var timeoutIds = useConst({});
        // Cleanup function.
        React__namespace.useEffect(function () { return function () {
            for (var _i = 0, _a = Object.keys(timeoutIds); _i < _a.length; _i++) {
                var id = _a[_i];
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                clearTimeout(id);
            }
        }; }, 
        // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that
        [timeoutIds]);
        // Return wrapper which will auto cleanup.
        return useConst({
            setTimeout: function (func, duration) {
                var id = setTimeout(func, duration);
                timeoutIds[id] = 1;
                return id;
            },
            clearTimeout: function (id) {
                delete timeoutIds[id];
                clearTimeout(id);
            },
        });
    };

    /**
     * Context for providing the window.
     */
    var WindowContext = React__namespace.createContext({
        window: typeof window === 'object' ? window : undefined,
    });
    /**
     * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.
     */
    var useWindow = function () { return React__namespace.useContext(WindowContext).window; };
    /**
     * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.
     */
    var useDocument = function () { var _a; return (_a = React__namespace.useContext(WindowContext).window) === null || _a === void 0 ? void 0 : _a.document; };

    /**
     * Hook to calculate and cache the target element specified by the given target attribute,
     * as well as the target element's (or host element's) parent window
     * @param target- Target selector passed to the component as a property, describing the element that
     * the callout should target
     * @param hostElement- The callout's host element, used for determining the parent window.
     */
    function useTarget(target, hostElement) {
        var previousTargetProp = React__namespace.useRef();
        var targetRef = React__namespace.useRef(null);
        /**
         * Stores an instance of Window, used to check
         * for server side rendering and if focus was lost.
         */
        var targetWindow = useWindow();
        // If the target element changed, find the new one. If we are tracking
        // target with class name, always find element because we do not know if
        // fabric has rendered a new element and disposed the old element.
        if (!target || target !== previousTargetProp.current || typeof target === 'string') {
            var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;
            if (target) {
                if (typeof target === 'string') {
                    var currentDoc = getDocument(currentElement);
                    targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;
                }
                else if ('stopPropagation' in target) {
                    targetRef.current = target;
                }
                else if ('getBoundingClientRect' in target) {
                    targetRef.current = target;
                }
                else if ('current' in target) {
                    targetRef.current = target.current;
                }
                else {
                    targetRef.current = target;
                }
            }
            previousTargetProp.current = target;
        }
        return [targetRef, targetWindow];
    }

    /**
     * Hook which synchronously executes a callback when the component is about to unmount.
     *
     * @param callback - Function to call during unmount.
     */
    var useUnmount = function (callback) {
        var unmountRef = React__namespace.useRef(callback);
        unmountRef.current = callback;
        React__namespace.useEffect(function () { return function () {
            var _a;
            (_a = unmountRef.current) === null || _a === void 0 ? void 0 : _a.call(unmountRef);
        }; }, []);
    };

    var warningId = 0;
    /**
     * Only in development mode, display console warnings when certain conditions are met.
     * Note that all warnings except `controlledUsage` will only be shown on first render
     * (new `controlledUsage` warnings may be shown later due to prop changes).
     */
    function useWarnings(options) {
        {
            var name_1 = options.name, props = options.props, _a = options.other, other = _a === void 0 ? [] : _a, conditionallyRequired = options.conditionallyRequired, deprecations = options.deprecations, mutuallyExclusive = options.mutuallyExclusive, controlledUsage = options.controlledUsage;
            /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */
            var hasWarnedRef = React__namespace.useRef(false);
            var componentId = useConst(function () { return "useWarnings_" + warningId++; });
            var oldProps = usePrevious(props);
            /* eslint-enable react-hooks/rules-of-hooks */
            // Warn synchronously (not in useEffect) on first render to make debugging easier.
            if (!hasWarnedRef.current) {
                hasWarnedRef.current = true;
                for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {
                    var warning = other_1[_i];
                    warn(warning);
                }
                if (conditionallyRequired) {
                    for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {
                        var req = conditionallyRequired_1[_b];
                        warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);
                    }
                }
                deprecations && warnDeprecations(name_1, props, deprecations);
                mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);
            }
            // Controlled usage warnings may be displayed on either first or subsequent renders due to
            // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in
            // concurrent mode because `warnControlledUsage` internally tracks which warnings have been
            // displayed for each component instance (so nothing will be displayed twice).
            controlledUsage && warnControlledUsage(tslib.__assign(tslib.__assign({}, controlledUsage), { componentId: componentId, props: props, componentName: name_1, oldProps: oldProps }));
        }
    }

    function useScrollbarAsync(props, root) {
        var async = useAsync();
        var _a = React__namespace.useState(false), needsVerticalScrollBarState = _a[0], setNeedsVerticalScrollBar = _a[1];
        React__namespace.useEffect(function () {
            async.requestAnimationFrame(function () {
                var _a;
                // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.
                if (props.style && props.style.overflowY) {
                    return;
                }
                var needsVerticalScrollBar = false;
                if (root && root.current && ((_a = root.current) === null || _a === void 0 ? void 0 : _a.firstElementChild)) {
                    // ClientHeight returns the client height of an element rounded to an
                    // integer. On some browsers at different zoom levels this rounding
                    // can generate different results for the root container and child even
                    // though they are the same height. This causes us to show a scroll bar
                    // when not needed. Ideally we would use BoundingClientRect().height
                    // instead however seems that the API is 90% slower than using ClientHeight.
                    // Therefore instead we will calculate the difference between heights and
                    // allow for a 1px difference to still be considered ok and not show the
                    // scroll bar.
                    var rootHeight = root.current.clientHeight;
                    var firstChildHeight = root.current.firstElementChild.clientHeight;
                    if (rootHeight > 0 && firstChildHeight > rootHeight) {
                        needsVerticalScrollBar = firstChildHeight - rootHeight > 1;
                    }
                }
                if (needsVerticalScrollBarState !== needsVerticalScrollBar) {
                    setNeedsVerticalScrollBar(needsVerticalScrollBar);
                }
            });
            return function () { return async.dispose(); };
        });
        return needsVerticalScrollBarState;
    }
    function defaultFocusRestorer(options) {
        var originalElement = options.originalElement, containsFocus = options.containsFocus;
        if (originalElement && containsFocus && originalElement !== getWindow()) {
            // Make sure that the focus method actually exists
            // In some cases the object might exist but not be a real element.
            // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.
            // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.
            // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)
            setTimeout(function () {
                var _a;
                (_a = originalElement.focus) === null || _a === void 0 ? void 0 : _a.call(originalElement);
            }, 0);
        }
    }
    function useRestoreFocus(props, root) {
        var _a = props.onRestoreFocus, onRestoreFocus = _a === void 0 ? defaultFocusRestorer : _a;
        var originalFocusedElement = React__namespace.useRef();
        var containsFocus = React__namespace.useRef(false);
        React__namespace.useEffect(function () {
            originalFocusedElement.current = getDocument().activeElement;
            if (doesElementContainFocus(root.current)) {
                containsFocus.current = true;
            }
            return function () {
                var _a;
                onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({
                    originalElement: originalFocusedElement.current,
                    containsFocus: containsFocus.current,
                    documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false,
                });
                // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown
                originalFocusedElement.current = undefined;
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render
        }, []);
        useOnEvent(root, 'focus', React__namespace.useCallback(function () {
            containsFocus.current = true;
        }, []), true);
        useOnEvent(root, 'blur', React__namespace.useCallback(function (ev) {
            /** The popup should update this._containsFocus when:
             * relatedTarget exists AND
             * the relatedTarget is not contained within the popup.
             * If the relatedTarget is within the popup, that means the popup still has focus
             * and focused moved from one element to another within the popup.
             * If relatedTarget is undefined or null that usually means that a
             * keyboard event occurred and focus didn't change
             */
            if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget)) {
                containsFocus.current = false;
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render
        }, []), true);
    }
    function useHideSiblingNodes(props, root) {
        // eslint-disable-next-line deprecation/deprecation
        var shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;
        React__namespace.useEffect(function () {
            if (!(shouldHideSiblings && root.current)) {
                return;
            }
            var unmodalize = modalize(root.current);
            return unmodalize;
        }, [root, shouldHideSiblings]);
    }
    /**
     * This adds accessibility to Dialog and Panel controls
     */
    var Popup = React__namespace.forwardRef(function (propsWithoutDefaults, forwardedRef) {
        var props = getPropsWithDefaults({ shouldRestoreFocus: true, enableAriaHiddenSiblings: true }, propsWithoutDefaults);
        var root = React__namespace.useRef();
        var mergedRootRef = useMergedRefs(root, forwardedRef);
        useHideSiblingNodes(props, root);
        useRestoreFocus(props, root);
        var role = props.role, className = props.className, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, style = props.style, children = props.children, onDismiss = props.onDismiss;
        var needsVerticalScrollBar = useScrollbarAsync(props, root);
        var onKeyDown = React__namespace.useCallback(function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            switch (ev.which) {
                case KeyCodes.escape:
                    if (onDismiss) {
                        onDismiss(ev);
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                    break;
            }
        }, [onDismiss]);
        var win = useWindow();
        useOnEvent(win, 'keydown', onKeyDown);
        return (React__namespace.createElement("div", tslib.__assign({ ref: mergedRootRef }, getNativeProps(props, divProperties), { className: className, role: role, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, onKeyDown: onKeyDown, style: tslib.__assign({ overflowY: needsVerticalScrollBar ? 'scroll' : undefined, outline: 'none' }, style) }), children));
    });
    Popup.displayName = 'Popup';

    var _a$5;
    var COMPONENT_NAME$e = 'CalloutContentBase';
    var ANIMATIONS = (_a$5 = {},
        _a$5[RectangleEdge.top] = AnimationClassNames.slideUpIn10,
        _a$5[RectangleEdge.bottom] = AnimationClassNames.slideDownIn10,
        _a$5[RectangleEdge.left] = AnimationClassNames.slideLeftIn10,
        _a$5[RectangleEdge.right] = AnimationClassNames.slideRightIn10,
        _a$5);
    var BEAK_ORIGIN_POSITION = { top: 0, left: 0 };
    // Microsoft Edge will overwrite inline styles if there is an animation pertaining to that style.
    // To help ensure that edge will respect the offscreen style opacity
    // filter needs to be added as an additional way to set opacity.
    // Also set pointer-events: none so that the callout will not occlude the element it is
    // going to be positioned against
    var OFF_SCREEN_STYLE = {
        opacity: 0,
        filter: 'opacity(0)',
        pointerEvents: 'none',
    };
    // role and role description go hand-in-hand. Both would be included by spreading getNativeProps for a basic element
    // This constant array can be used to filter these out of native props spread on callout root and apply them together on
    // calloutMain (the Popup component within the callout)
    var ARIA_ROLE_ATTRIBUTES = ['role', 'aria-roledescription'];
    var DEFAULT_PROPS$8 = {
        preventDismissOnLostFocus: false,
        preventDismissOnScroll: false,
        preventDismissOnResize: false,
        isBeakVisible: true,
        beakWidth: 16,
        gapSpace: 0,
        minPagePadding: 8,
        directionalHint: DirectionalHint.bottomAutoEdge,
    };
    var getClassNames$1q = classNamesFunction({
        disableCaching: true, // disabling caching because stylesProp.position mutates often
    });
    /**
     * (Hook) to return a function to lazily fetch the bounds of the target element for the callout.
     */
    function useBounds(_a, targetRef, targetWindow) {
        var bounds = _a.bounds, _b = _a.minPagePadding, minPagePadding = _b === void 0 ? DEFAULT_PROPS$8.minPagePadding : _b, target = _a.target;
        var _c = React__namespace.useState(false), targetWindowResized = _c[0], setTargetWindowResized = _c[1];
        var cachedBounds = React__namespace.useRef();
        var getBounds = React__namespace.useCallback(function () {
            if (!cachedBounds.current || targetWindowResized) {
                var currentBounds = typeof bounds === 'function' ? (targetWindow ? bounds(target, targetWindow) : undefined) : bounds;
                if (!currentBounds && targetWindow) {
                    currentBounds = getBoundsFromTargetWindow(targetRef.current, targetWindow);
                    currentBounds = {
                        top: currentBounds.top + minPagePadding,
                        left: currentBounds.left + minPagePadding,
                        right: currentBounds.right - minPagePadding,
                        bottom: currentBounds.bottom - minPagePadding,
                        width: currentBounds.width - minPagePadding * 2,
                        height: currentBounds.height - minPagePadding * 2,
                    };
                }
                cachedBounds.current = currentBounds;
                targetWindowResized && setTargetWindowResized(false);
            }
            return cachedBounds.current;
        }, [bounds, minPagePadding, target, targetRef, targetWindow, targetWindowResized]);
        var async = useAsync();
        useOnEvent(targetWindow, 'resize', async.debounce(function () {
            setTargetWindowResized(true);
        }, 500, { leading: true }));
        return getBounds;
    }
    /**
     * (Hook) to return the maximum available height for the Callout to render into.
     */
    function useMaxHeight(_a, getBounds, positions) {
        var _b;
        var calloutMaxHeight = _a.calloutMaxHeight, finalHeight = _a.finalHeight, directionalHint = _a.directionalHint, directionalHintFixed = _a.directionalHintFixed, hidden = _a.hidden;
        var _c = React__namespace.useState(), maxHeight = _c[0], setMaxHeight = _c[1];
        var _d = (_b = positions === null || positions === void 0 ? void 0 : positions.elementPosition) !== null && _b !== void 0 ? _b : {}, top = _d.top, bottom = _d.bottom;
        React__namespace.useEffect(function () {
            var _a;
            var _b = (_a = getBounds()) !== null && _a !== void 0 ? _a : {}, topBounds = _b.top, bottomBounds = _b.bottom;
            if (!calloutMaxHeight && !hidden) {
                if (typeof top === 'number' && bottomBounds) {
                    setMaxHeight(bottomBounds - top);
                }
                else if (typeof bottom === 'number' && typeof topBounds === 'number' && bottomBounds) {
                    setMaxHeight(bottomBounds - topBounds - bottom);
                }
            }
            else if (calloutMaxHeight) {
                setMaxHeight(calloutMaxHeight);
            }
            else {
                setMaxHeight(undefined);
            }
        }, [bottom, calloutMaxHeight, finalHeight, directionalHint, directionalHintFixed, getBounds, hidden, positions, top]);
        return maxHeight;
    }
    /**
     * (Hook) to find the current position of Callout. If Callout is resized then a new position is calculated.
     */
    function usePositions(props, hostElement, calloutElement, targetRef, getBounds) {
        var _a = React__namespace.useState(), positions = _a[0], setPositions = _a[1];
        var positionAttempts = React__namespace.useRef(0);
        var previousTarget = React__namespace.useRef();
        var async = useAsync();
        var hidden = props.hidden, target = props.target, finalHeight = props.finalHeight, calloutMaxHeight = props.calloutMaxHeight, onPositioned = props.onPositioned, directionalHint = props.directionalHint;
        React__namespace.useEffect(function () {
            if (!hidden) {
                var timerId_1 = async.requestAnimationFrame(function () {
                    var _a, _b;
                    if (hostElement.current && calloutElement) {
                        var currentProps = tslib.__assign(tslib.__assign({}, props), { target: targetRef.current, bounds: getBounds() });
                        // duplicate calloutElement & remove useMaxHeight's maxHeight for position calc
                        var dupeCalloutElement = calloutElement.cloneNode(true);
                        dupeCalloutElement.style.maxHeight = calloutMaxHeight ? "" + calloutMaxHeight : '';
                        dupeCalloutElement.style.visibility = 'hidden';
                        (_a = calloutElement.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(dupeCalloutElement);
                        var previousPositions = previousTarget.current === target ? positions : undefined;
                        // If there is a finalHeight given then we assume that the user knows and will handle
                        // additional positioning adjustments so we should call positionCard
                        var newPositions = finalHeight
                            ? positionCard(currentProps, hostElement.current, dupeCalloutElement, previousPositions)
                            : positionCallout(currentProps, hostElement.current, dupeCalloutElement, previousPositions);
                        // clean up duplicate calloutElement
                        (_b = calloutElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(dupeCalloutElement);
                        // Set the new position only when the positions do not exist or one of the new callout positions
                        // is different. The position should not change if the position is within 2 decimal places.
                        if ((!positions && newPositions) ||
                            (positions && newPositions && !arePositionsEqual(positions, newPositions) && positionAttempts.current < 5)) {
                            // We should not reposition the callout more than a few times, if it is then the content is likely resizing
                            // and we should stop trying to reposition to prevent a stack overflow.
                            positionAttempts.current++;
                            setPositions(newPositions);
                        }
                        else if (positionAttempts.current > 0) {
                            // Only call the onPositioned callback if the callout has been re-positioned at least once.
                            positionAttempts.current = 0;
                            onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned(positions);
                        }
                    }
                }, calloutElement);
                previousTarget.current = target;
                return function () {
                    async.cancelAnimationFrame(timerId_1);
                    previousTarget.current = undefined;
                };
            }
            else {
                // When the callout is hidden, clear position state so that it is not accidentally used next render.
                setPositions(undefined);
                positionAttempts.current = 0;
            }
        }, [
            hidden,
            directionalHint,
            async,
            calloutElement,
            calloutMaxHeight,
            hostElement,
            targetRef,
            finalHeight,
            getBounds,
            onPositioned,
            positions,
            props,
            target,
        ]);
        return positions;
    }
    /**
     * (Hook) to set up behavior to automatically focus the callout when it appears, if indicated by props.
     */
    function useAutoFocus(_a, positions, calloutElement) {
        var hidden = _a.hidden, setInitialFocus = _a.setInitialFocus;
        var async = useAsync();
        var hasPositions = !!positions;
        React__namespace.useEffect(function () {
            if (!hidden && setInitialFocus && hasPositions && calloutElement) {
                var timerId_2 = async.requestAnimationFrame(function () { return focusFirstChild(calloutElement); }, calloutElement);
                return function () { return async.cancelAnimationFrame(timerId_2); };
            }
        }, [hidden, hasPositions, async, calloutElement, setInitialFocus]);
    }
    /**
     * (Hook) to set up various handlers to dismiss the popup when it loses focus or the window scrolls or similar cases.
     */
    function useDismissHandlers(_a, positions, hostElement, targetRef, targetWindow) {
        var hidden = _a.hidden, onDismiss = _a.onDismiss, 
        // eslint-disable-next-line deprecation/deprecation
        preventDismissOnScroll = _a.preventDismissOnScroll, 
        // eslint-disable-next-line deprecation/deprecation
        preventDismissOnResize = _a.preventDismissOnResize, 
        // eslint-disable-next-line deprecation/deprecation
        preventDismissOnLostFocus = _a.preventDismissOnLostFocus, dismissOnTargetClick = _a.dismissOnTargetClick, shouldDismissOnWindowFocus = _a.shouldDismissOnWindowFocus, preventDismissOnEvent = _a.preventDismissOnEvent;
        var isMouseDownOnPopup = React__namespace.useRef(false);
        var async = useAsync();
        var mouseDownHandlers = useConst([
            function () {
                isMouseDownOnPopup.current = true;
            },
            function () {
                isMouseDownOnPopup.current = false;
            },
        ]);
        var positionsExists = !!positions;
        React__namespace.useEffect(function () {
            var dismissOnScroll = function (ev) {
                if (positionsExists && !preventDismissOnScroll) {
                    dismissOnClickOrScroll(ev);
                }
            };
            var dismissOnResize = function (ev) {
                if (!preventDismissOnResize && !(preventDismissOnEvent && preventDismissOnEvent(ev))) {
                    onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
                }
            };
            var dismissOnLostFocus = function (ev) {
                if (!preventDismissOnLostFocus) {
                    dismissOnClickOrScroll(ev);
                }
            };
            var dismissOnClickOrScroll = function (ev) {
                var eventPaths = ev.composedPath ? ev.composedPath() : [];
                var target = eventPaths.length > 0 ? eventPaths[0] : ev.target;
                var isEventTargetOutsideCallout = hostElement.current && !elementContains(hostElement.current, target);
                // If mouse is pressed down on callout but moved outside then released, don't dismiss the callout.
                if (isEventTargetOutsideCallout && isMouseDownOnPopup.current) {
                    isMouseDownOnPopup.current = false;
                    return;
                }
                if ((!targetRef.current && isEventTargetOutsideCallout) ||
                    (ev.target !== targetWindow &&
                        isEventTargetOutsideCallout &&
                        (!targetRef.current ||
                            'stopPropagation' in targetRef.current ||
                            dismissOnTargetClick ||
                            (target !== targetRef.current && !elementContains(targetRef.current, target))))) {
                    if (preventDismissOnEvent && preventDismissOnEvent(ev)) {
                        return;
                    }
                    onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
                }
            };
            var dismissOnTargetWindowBlur = function (ev) {
                // Do nothing
                if (!shouldDismissOnWindowFocus) {
                    return;
                }
                if (((preventDismissOnEvent && !preventDismissOnEvent(ev)) ||
                    (!preventDismissOnEvent && !preventDismissOnLostFocus)) &&
                    !(targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.hasFocus()) &&
                    ev.relatedTarget === null) {
                    onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
                }
            };
            // This is added so the callout will dismiss when the window is scrolled
            // but not when something inside the callout is scrolled. The delay seems
            // to be required to avoid React firing an async focus event in IE from
            // the target changing focus quickly prior to rendering the callout.
            var disposablesPromise = new Promise(function (resolve) {
                async.setTimeout(function () {
                    if (!hidden && targetWindow) {
                        var disposables_1 = [
                            on(targetWindow, 'scroll', dismissOnScroll, true),
                            on(targetWindow, 'resize', dismissOnResize, true),
                            on(targetWindow.document.documentElement, 'focus', dismissOnLostFocus, true),
                            on(targetWindow.document.documentElement, 'click', dismissOnLostFocus, true),
                            on(targetWindow, 'blur', dismissOnTargetWindowBlur, true),
                        ];
                        resolve(function () {
                            disposables_1.forEach(function (dispose) { return dispose(); });
                        });
                    }
                }, 0);
            });
            return function () {
                disposablesPromise.then(function (dispose) { return dispose(); });
            };
        }, [
            hidden,
            async,
            hostElement,
            targetRef,
            targetWindow,
            onDismiss,
            shouldDismissOnWindowFocus,
            dismissOnTargetClick,
            preventDismissOnLostFocus,
            preventDismissOnResize,
            preventDismissOnScroll,
            positionsExists,
            preventDismissOnEvent,
        ]);
        return mouseDownHandlers;
    }
    var CalloutContentBase = React__namespace.memo(React__namespace.forwardRef(function (propsWithoutDefaults, forwardedRef) {
        var props = getPropsWithDefaults(DEFAULT_PROPS$8, propsWithoutDefaults);
        var styles = props.styles, style = props.style, ariaLabel = props.ariaLabel, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, className = props.className, isBeakVisible = props.isBeakVisible, children = props.children, beakWidth = props.beakWidth, calloutWidth = props.calloutWidth, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer, finalHeight = props.finalHeight, _a = props.hideOverflow, hideOverflow = _a === void 0 ? !!finalHeight : _a, backgroundColor = props.backgroundColor, calloutMaxHeight = props.calloutMaxHeight, onScroll = props.onScroll, 
        // eslint-disable-next-line deprecation/deprecation
        _b = props.shouldRestoreFocus, 
        // eslint-disable-next-line deprecation/deprecation
        shouldRestoreFocus = _b === void 0 ? true : _b, target = props.target, hidden = props.hidden, onLayerMounted = props.onLayerMounted;
        var hostElement = React__namespace.useRef(null);
        var _c = React__namespace.useState(null), calloutElement = _c[0], setCalloutElement = _c[1];
        var calloutCallback = React__namespace.useCallback(function (calloutEl) {
            setCalloutElement(calloutEl);
        }, []);
        var rootRef = useMergedRefs(hostElement, forwardedRef);
        var _d = useTarget(props.target, {
            current: calloutElement,
        }), targetRef = _d[0], targetWindow = _d[1];
        var getBounds = useBounds(props, targetRef, targetWindow);
        var positions = usePositions(props, hostElement, calloutElement, targetRef, getBounds);
        var maxHeight = useMaxHeight(props, getBounds, positions);
        var _e = useDismissHandlers(props, positions, hostElement, targetRef, targetWindow), mouseDownOnPopup = _e[0], mouseUpOnPopup = _e[1];
        // do not set both top and bottom css props from positions
        // instead, use maxHeight
        var isForcedInBounds = (positions === null || positions === void 0 ? void 0 : positions.elementPosition.top) && (positions === null || positions === void 0 ? void 0 : positions.elementPosition.bottom);
        var cssPositions = tslib.__assign(tslib.__assign({}, positions === null || positions === void 0 ? void 0 : positions.elementPosition), { maxHeight: maxHeight });
        if (isForcedInBounds) {
            cssPositions.bottom = undefined;
        }
        useAutoFocus(props, positions, calloutElement);
        React__namespace.useEffect(function () {
            if (!hidden) {
                onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run if hidden changes
        }, [hidden]);
        // If there is no target window then we are likely in server side rendering and we should not render anything.
        if (!targetWindow) {
            return null;
        }
        var overflowYHidden = hideOverflow;
        var beakVisible = isBeakVisible && !!target;
        var classNames = getClassNames$1q(styles, {
            theme: props.theme,
            className: className,
            overflowYHidden: overflowYHidden,
            calloutWidth: calloutWidth,
            positions: positions,
            beakWidth: beakWidth,
            backgroundColor: backgroundColor,
            calloutMaxWidth: calloutMaxWidth,
            calloutMinWidth: calloutMinWidth,
            doNotLayer: doNotLayer,
        });
        var overflowStyle = tslib.__assign(tslib.__assign({ maxHeight: calloutMaxHeight ? calloutMaxHeight : '100%' }, style), (overflowYHidden && { overflowY: 'hidden' }));
        var visibilityStyle = props.hidden ? { visibility: 'hidden' } : undefined;
        // React.CSSProperties does not understand IRawStyle, so the inline animations will need to be cast as any for now.
        return (React__namespace.createElement("div", { ref: rootRef, className: classNames.container, style: visibilityStyle },
            React__namespace.createElement("div", tslib.__assign({}, getNativeProps(props, divProperties, ARIA_ROLE_ATTRIBUTES), { className: css(classNames.root, positions && positions.targetEdge && ANIMATIONS[positions.targetEdge]), style: positions ? tslib.__assign({}, cssPositions) : OFF_SCREEN_STYLE, 
                // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.
                // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
                tabIndex: -1, ref: calloutCallback }),
                beakVisible && React__namespace.createElement("div", { className: classNames.beak, style: getBeakPosition(positions) }),
                beakVisible && React__namespace.createElement("div", { className: classNames.beakCurtain }),
                React__namespace.createElement(Popup
                // don't use getNativeElementProps for role and roledescription because it will also
                // pass through data-* props (resulting in them being used in two places)
                , { 
                    // don't use getNativeElementProps for role and roledescription because it will also
                    // pass through data-* props (resulting in them being used in two places)
                    role: props.role, "aria-roledescription": props['aria-roledescription'], ariaDescribedBy: ariaDescribedBy, ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy, className: classNames.calloutMain, onDismiss: props.onDismiss, onMouseDown: mouseDownOnPopup, onMouseUp: mouseUpOnPopup, onRestoreFocus: props.onRestoreFocus, onScroll: onScroll, shouldRestoreFocus: shouldRestoreFocus, style: overflowStyle }, children))));
    }), function (previousProps, nextProps) {
        if (!nextProps.shouldUpdateWhenHidden && previousProps.hidden && nextProps.hidden) {
            // Do not update when hidden.
            return true;
        }
        return shallowCompare(previousProps, nextProps);
    });
    /**
     * (Utility) to find and return the current `Callout` Beak position.
     *
     * @param positions
     */
    function getBeakPosition(positions) {
        var _a, _b;
        var beakPositionStyle = tslib.__assign(tslib.__assign({}, (_a = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _a === void 0 ? void 0 : _a.elementPosition), { display: ((_b = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _b === void 0 ? void 0 : _b.hideBeak) ? 'none' : undefined });
        if (!beakPositionStyle.top && !beakPositionStyle.bottom && !beakPositionStyle.left && !beakPositionStyle.right) {
            beakPositionStyle.left = BEAK_ORIGIN_POSITION.left;
            beakPositionStyle.top = BEAK_ORIGIN_POSITION.top;
        }
        return beakPositionStyle;
    }
    /**
     * (Utility) used to compare two different elementPositions to determine whether they are equal.
     *
     * @param prevElementPositions
     * @param newElementPosition
     */
    function arePositionsEqual(prevElementPositions, newElementPosition) {
        return (comparePositions(prevElementPositions.elementPosition, newElementPosition.elementPosition) &&
            comparePositions(prevElementPositions.beakPosition.elementPosition, newElementPosition.beakPosition.elementPosition));
    }
    /**
     * (Utility) used in **arePositionsEqual** to compare two different elementPositions.
     *
     * @param prevElementPositions
     * @param newElementPositions
     */
    function comparePositions(prevElementPositions, newElementPositions) {
        for (var key in newElementPositions) {
            if (newElementPositions.hasOwnProperty(key)) {
                var oldPositionEdge = prevElementPositions[key];
                var newPositionEdge = newElementPositions[key];
                if (oldPositionEdge !== undefined && newPositionEdge !== undefined) {
                    if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    CalloutContentBase.displayName = COMPONENT_NAME$e;

    function getBeakStyle(beakWidth) {
        return {
            height: beakWidth,
            width: beakWidth,
        };
    }
    var GlobalClassNames$t = {
        container: 'ms-Callout-container',
        root: 'ms-Callout',
        beak: 'ms-Callout-beak',
        beakCurtain: 'ms-Callout-beakCurtain',
        calloutMain: 'ms-Callout-main',
    };
    var getStyles$G = function (props) {
        var _a;
        var theme = props.theme, className = props.className, overflowYHidden = props.overflowYHidden, calloutWidth = props.calloutWidth, beakWidth = props.beakWidth, backgroundColor = props.backgroundColor, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer;
        var classNames = getGlobalClassNames(GlobalClassNames$t, theme);
        var semanticColors = theme.semanticColors, effects = theme.effects;
        return {
            container: [
                classNames.container,
                {
                    position: 'relative',
                },
            ],
            root: [
                classNames.root,
                theme.fonts.medium,
                {
                    position: 'absolute',
                    display: 'flex',
                    zIndex: doNotLayer ? ZIndexes.Layer : undefined,
                    boxSizing: 'border-box',
                    borderRadius: effects.roundedCorner2,
                    boxShadow: effects.elevation16,
                    selectors: (_a = {},
                        _a[HighContrastSelector] = {
                            borderWidth: 1,
                            borderStyle: 'solid',
                            borderColor: 'WindowText',
                        },
                        _a),
                },
                focusClear(),
                className,
                !!calloutWidth && { width: calloutWidth },
                !!calloutMaxWidth && { maxWidth: calloutMaxWidth },
                !!calloutMinWidth && { minWidth: calloutMinWidth },
            ],
            beak: [
                classNames.beak,
                {
                    position: 'absolute',
                    backgroundColor: semanticColors.menuBackground,
                    boxShadow: 'inherit',
                    border: 'inherit',
                    boxSizing: 'border-box',
                    transform: 'rotate(45deg)',
                },
                getBeakStyle(beakWidth),
                backgroundColor && {
                    backgroundColor: backgroundColor,
                },
            ],
            beakCurtain: [
                classNames.beakCurtain,
                {
                    position: 'absolute',
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    backgroundColor: semanticColors.menuBackground,
                    borderRadius: effects.roundedCorner2,
                },
            ],
            calloutMain: [
                classNames.calloutMain,
                {
                    backgroundColor: semanticColors.menuBackground,
                    overflowX: 'hidden',
                    overflowY: 'auto',
                    position: 'relative',
                    width: '100%',
                    borderRadius: effects.roundedCorner2,
                },
                overflowYHidden && {
                    overflowY: 'hidden',
                },
                backgroundColor && {
                    backgroundColor: backgroundColor,
                },
            ],
        };
    };

    var CalloutContent = styled(CalloutContentBase, getStyles$G, undefined, {
        scope: 'CalloutContent',
    });

    var getClassNames$1p = classNamesFunction();
    var getFabricTheme = memoizeFunction(function (theme, isRTL) { return createTheme(tslib.__assign(tslib.__assign({}, theme), { rtl: isRTL })); });
    var getDir = function (_a) {
        var theme = _a.theme, dir = _a.dir;
        var contextDir = getRTL(theme) ? 'rtl' : 'ltr';
        var pageDir = getRTL() ? 'rtl' : 'ltr';
        var componentDir = dir ? dir : contextDir;
        return {
            // If Fabric dir !== contextDir
            // Or If contextDir !== pageDir
            // Then we need to set dir of the Fabric root
            rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,
            // If dir !== contextDir || pageDir
            // then set contextual theme around content
            needsTheme: componentDir !== contextDir,
        };
    };
    var FabricBase = React__namespace.forwardRef(function (props, ref) {
        var className = props.className, theme = props.theme, applyTheme = props.applyTheme, applyThemeToBody = props.applyThemeToBody, styles = props.styles;
        var classNames = getClassNames$1p(styles, {
            theme: theme,
            applyTheme: applyTheme,
            className: className,
        });
        var rootElement = React__namespace.useRef(null);
        useApplyThemeToBody(applyThemeToBody, classNames, rootElement);
        useFocusRects(rootElement);
        return React__namespace.createElement(React__namespace.Fragment, null, useRenderedContent(props, classNames, rootElement, ref));
    });
    FabricBase.displayName = 'FabricBase';
    function useRenderedContent(props, _a, rootElement, ref) {
        var root = _a.root;
        var _b = props.as, Root = _b === void 0 ? 'div' : _b, dir = props.dir, theme = props.theme;
        var divProps = getNativeProps(props, divProperties, ['dir']);
        var _c = getDir(props), rootDir = _c.rootDir, needsTheme = _c.needsTheme;
        var renderedContent = React__namespace.createElement(Root, tslib.__assign({ dir: rootDir }, divProps, { className: root, ref: useMergedRefs(rootElement, ref) }));
        // Create the contextual theme if component direction does not match parent direction.
        if (needsTheme) {
            // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.
            renderedContent = (
            // eslint-disable-next-line deprecation/deprecation
            React__namespace.createElement(Customizer, { settings: { theme: getFabricTheme(theme, dir === 'rtl') } }, renderedContent));
        }
        return renderedContent;
    }
    function useApplyThemeToBody(applyThemeToBody, _a, rootElement) {
        var bodyThemed = _a.bodyThemed;
        React__namespace.useEffect(function () {
            if (applyThemeToBody) {
                var currentDoc_1 = getDocument(rootElement.current);
                if (currentDoc_1) {
                    currentDoc_1.body.classList.add(bodyThemed);
                    return function () {
                        currentDoc_1.body.classList.remove(bodyThemed);
                    };
                }
            }
        }, [bodyThemed, applyThemeToBody, rootElement]);
        return rootElement;
    }

    var inheritFont = { fontFamily: 'inherit' };
    var GlobalClassNames$s = {
        root: 'ms-Fabric',
        bodyThemed: 'ms-Fabric-bodyThemed',
    };
    var getStyles$F = function (props) {
        var theme = props.theme, className = props.className, applyTheme = props.applyTheme;
        var classNames = getGlobalClassNames(GlobalClassNames$s, theme);
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                {
                    color: theme.palette.neutralPrimary,
                    selectors: {
                        '& button': inheritFont,
                        '& input': inheritFont,
                        '& textarea': inheritFont,
                    },
                },
                // apply theme to only if applyTheme is true
                applyTheme && {
                    color: theme.semanticColors.bodyText,
                    backgroundColor: theme.semanticColors.bodyBackground,
                },
                className,
            ],
            bodyThemed: [
                {
                    backgroundColor: theme.semanticColors.bodyBackground,
                },
            ],
        };
    };

    /**
     * @deprecated This component is deprecated as of `@fluentui/react` version 8. Use `ThemeProvider` instead.
     */
    var Fabric = styled(FabricBase, getStyles$F, undefined, {
        scope: 'Fabric',
    });

    var _layersByHostId = {};
    var _layerHostsById = {};
    var _defaultHostSelector;
    /**
     * Register a layer for a given host id
     * @param hostId Id of the layer host
     * @param layer Layer instance
     */
    function registerLayer(hostId, callback) {
        if (!_layersByHostId[hostId]) {
            _layersByHostId[hostId] = [];
        }
        _layersByHostId[hostId].push(callback);
        var layerHosts = _layerHostsById[hostId];
        if (layerHosts) {
            for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {
                var layerHost = layerHosts_1[_i];
                layerHost.notifyLayersChanged();
            }
        }
    }
    /**
     * Unregister a layer for a given host id
     * @param hostId Id of the layer host
     * @param layer Layer instance
     */
    function unregisterLayer(hostId, callback) {
        var layers = _layersByHostId[hostId];
        if (layers) {
            var idx = layers.indexOf(callback);
            if (idx >= 0) {
                layers.splice(idx, 1);
                if (layers.length === 0) {
                    delete _layersByHostId[hostId];
                }
            }
        }
        var layerHosts = _layerHostsById[hostId];
        if (layerHosts) {
            for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {
                var layerHost = layerHosts_2[_i];
                layerHost.notifyLayersChanged();
            }
        }
    }
    /**
     * Gets the Layer Host instance associated with a hostId, if applicable.
     * @param hostId
     * @returns A component ref for the associated layer host.
     */
    function getLayerHost(hostId) {
        var layerHosts = _layerHostsById[hostId];
        return (layerHosts && layerHosts[0]) || undefined;
    }
    /**
     * Get the default target selector when determining a host
     */
    function getDefaultTarget() {
        return _defaultHostSelector;
    }

    var getClassNames$1o = classNamesFunction();
    var LayerBase = React__namespace.forwardRef(function (props, ref) {
        var rootRef = React__namespace.useRef(null);
        var mergedRef = useMergedRefs(rootRef, ref);
        var layerRef = React__namespace.useRef();
        // Tracks if the layer mount events need to be raised.
        // Required to allow the DOM to render after the layer element is added.
        var _a = React__namespace.useState(false), needRaiseLayerMount = _a[0], setNeedRaiseLayerMount = _a[1];
        var doc = useDocument();
        var eventBubblingEnabled = props.eventBubblingEnabled, styles = props.styles, theme = props.theme, className = props.className, children = props.children, hostId = props.hostId, _b = props.onLayerDidMount, onLayerDidMount = _b === void 0 ? function () { return undefined; } : _b, 
        // eslint-disable-next-line deprecation/deprecation
        _c = props.onLayerMounted, 
        // eslint-disable-next-line deprecation/deprecation
        onLayerMounted = _c === void 0 ? function () { return undefined; } : _c, onLayerWillUnmount = props.onLayerWillUnmount, insertFirst = props.insertFirst;
        var classNames = getClassNames$1o(styles, {
            theme: theme,
            className: className,
            isNotHost: !hostId,
        });
        // Returns the user provided hostId props element, the default target selector,
        // or undefined if document doesn't exist.
        var getHost = function () {
            var _a, _b, _c;
            if (hostId) {
                var layerHost = getLayerHost(hostId);
                if (layerHost) {
                    return (_a = layerHost.rootRef.current) !== null && _a !== void 0 ? _a : null;
                }
                return (_b = doc === null || doc === void 0 ? void 0 : doc.getElementById(hostId)) !== null && _b !== void 0 ? _b : null;
            }
            else {
                var defaultHostSelector = getDefaultTarget();
                return (_c = (defaultHostSelector ? doc === null || doc === void 0 ? void 0 : doc.querySelector(defaultHostSelector) : doc === null || doc === void 0 ? void 0 : doc.body)) !== null && _c !== void 0 ? _c : null;
            }
        };
        // Removes the current layer element's parentNode and runs onLayerWillUnmount prop if provided.
        var removeLayerElement = function () {
            onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();
            var elem = layerRef.current;
            // Clear ref before removing from the DOM
            layerRef.current = undefined;
            if (elem && elem.parentNode) {
                elem.parentNode.removeChild(elem);
            }
        };
        // If a doc or host exists, it will remove and update layer parentNodes.
        var createLayerElement = function () {
            var _a, _b;
            var host = getHost();
            if (!host) {
                return;
            }
            // Remove and re-create any previous existing layer elements.
            removeLayerElement();
            var el = (_b = ((_a = host.ownerDocument) !== null && _a !== void 0 ? _a : doc)) === null || _b === void 0 ? void 0 : _b.createElement('div');
            if (el) {
                el.className = classNames.root;
                setPortalAttribute(el);
                setVirtualParent(el, rootRef.current);
                insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);
                layerRef.current = el;
                setNeedRaiseLayerMount(true);
            }
        };
        useIsomorphicLayoutEffect(function () {
            createLayerElement();
            // Check if the user provided a hostId prop and register the layer with the ID.
            if (hostId) {
                registerLayer(hostId, createLayerElement);
            }
            return function () {
                removeLayerElement();
                if (hostId) {
                    unregisterLayer(hostId, createLayerElement);
                }
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps -- should run if the hostId updates.
        }, [hostId]);
        React__namespace.useEffect(function () {
            if (layerRef.current && needRaiseLayerMount) {
                onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
                onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();
                setNeedRaiseLayerMount(false);
            }
        }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);
        useDebugWarnings$2(props);
        return (React__namespace.createElement("span", { className: "ms-layer", ref: mergedRef }, layerRef.current &&
            ReactDOM__namespace.createPortal(
            /* eslint-disable deprecation/deprecation */
            React__namespace.createElement(Fabric, tslib.__assign({}, (!eventBubblingEnabled && getFilteredEvents()), { className: classNames.content }), children), 
            /* eslint-enable deprecation/deprecation */
            layerRef.current)));
    });
    LayerBase.displayName = 'LayerBase';
    var filteredEventProps;
    var onFilterEvent = function (ev) {
        // We should just be able to check ev.bubble here and only stop events that are bubbling up. However, even though
        // mouseenter and mouseleave do NOT bubble up, they are showing up as bubbling. Therefore we stop events based on
        // event name rather than ev.bubble.
        if (ev.eventPhase === Event.BUBBLING_PHASE &&
            ev.type !== 'mouseenter' &&
            ev.type !== 'mouseleave' &&
            ev.type !== 'touchstart' &&
            ev.type !== 'touchend') {
            ev.stopPropagation();
        }
    };
    function getFilteredEvents() {
        if (!filteredEventProps) {
            filteredEventProps = {};
            [
                'onClick',
                'onContextMenu',
                'onDoubleClick',
                'onDrag',
                'onDragEnd',
                'onDragEnter',
                'onDragExit',
                'onDragLeave',
                'onDragOver',
                'onDragStart',
                'onDrop',
                'onMouseDown',
                'onMouseEnter',
                'onMouseLeave',
                'onMouseMove',
                'onMouseOver',
                'onMouseOut',
                'onMouseUp',
                'onTouchMove',
                'onTouchStart',
                'onTouchCancel',
                'onTouchEnd',
                'onKeyDown',
                'onKeyPress',
                'onKeyUp',
                'onFocus',
                'onBlur',
                'onChange',
                'onInput',
                'onInvalid',
                'onSubmit',
            ].forEach(function (name) { return (filteredEventProps[name] = onFilterEvent); });
        }
        return filteredEventProps;
    }
    function useDebugWarnings$2(props) {
        {
            // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional
            useWarnings({
                name: 'Layer',
                props: props,
                deprecations: { onLayerMounted: 'onLayerDidMount' },
            });
        }
    }

    var GlobalClassNames$r = {
        root: 'ms-Layer',
        rootNoHost: 'ms-Layer--fixed',
        content: 'ms-Layer-content',
    };
    var getStyles$E = function (props) {
        var className = props.className, isNotHost = props.isNotHost, theme = props.theme;
        var classNames = getGlobalClassNames(GlobalClassNames$r, theme);
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                isNotHost && [
                    classNames.rootNoHost,
                    {
                        position: 'fixed',
                        zIndex: ZIndexes.Layer,
                        top: 0,
                        left: 0,
                        bottom: 0,
                        right: 0,
                        visibility: 'hidden',
                    },
                ],
                className,
            ],
            content: [
                classNames.content,
                {
                    visibility: 'visible',
                },
            ],
        };
    };

    var Layer = styled(LayerBase, getStyles$E, undefined, {
        scope: 'Layer',
        fields: ['hostId', 'theme', 'styles'],
    });

    var Callout$1 = React__namespace.forwardRef(function (_a, forwardedRef) {
        var layerProps = _a.layerProps, doNotLayer = _a.doNotLayer, rest = tslib.__rest(_a, ["layerProps", "doNotLayer"]);
        var content = React__namespace.createElement(CalloutContent, tslib.__assign({}, rest, { doNotLayer: doNotLayer, ref: forwardedRef }));
        return doNotLayer ? content : React__namespace.createElement(Layer, tslib.__assign({}, layerProps), content);
    });
    Callout$1.displayName = 'Callout';

    var COMPONENT_NAME$d = 'FocusTrapZone';
    var useComponentRef$6 = function (componentRef, previouslyFocusedElement, focus) {
        React__namespace.useImperativeHandle(componentRef, function () { return ({
            get previouslyFocusedElement() {
                return previouslyFocusedElement;
            },
            focus: focus,
        }); }, [previouslyFocusedElement, focus]);
    };
    var FocusTrapZone = React__namespace.forwardRef(function (props, ref) {
        var root = React__namespace.useRef(null);
        var firstBumper = React__namespace.useRef(null);
        var lastBumper = React__namespace.useRef(null);
        var mergedRootRef = useMergedRefs(root, ref);
        var id = useId(undefined, props.id);
        var doc = useDocument();
        var divProps = getNativeProps(props, divProperties);
        var internalState = useConst(function () { return ({
            previouslyFocusedElementOutsideTrapZone: undefined,
            previouslyFocusedElementInTrapZone: undefined,
            disposeFocusHandler: undefined,
            disposeClickHandler: undefined,
            hasFocus: false,
            unmodalize: undefined,
        }); });
        var ariaLabelledBy = props.ariaLabelledBy, className = props.className, children = props.children, componentRef = props.componentRef, disabled = props.disabled, _a = props.disableFirstFocus, disableFirstFocus = _a === void 0 ? false : _a, _b = props.disabled, currentDisabledValue = _b === void 0 ? false : _b, elementToFocusOnDismiss = props.elementToFocusOnDismiss, _c = props.forceFocusInsideTrap, forceFocusInsideTrap = _c === void 0 ? true : _c, focusPreviouslyFocusedInnerElement = props.focusPreviouslyFocusedInnerElement, 
        // eslint-disable-next-line deprecation/deprecation
        firstFocusableSelector = props.firstFocusableSelector, firstFocusableTarget = props.firstFocusableTarget, ignoreExternalFocusing = props.ignoreExternalFocusing, _d = props.isClickableOutsideFocusTrap, isClickableOutsideFocusTrap = _d === void 0 ? false : _d, onFocus = props.onFocus, onBlur = props.onBlur, onFocusCapture = props.onFocusCapture, onBlurCapture = props.onBlurCapture, enableAriaHiddenSiblings = props.enableAriaHiddenSiblings;
        var bumperProps = {
            'aria-hidden': true,
            style: {
                pointerEvents: 'none',
                position: 'fixed', // 'fixed' prevents browsers from scrolling to bumpers when viewport does not contain them
            },
            tabIndex: disabled ? -1 : 0,
            'data-is-visible': true,
            'data-is-focus-trap-zone-bumper': true,
        };
        var focus = React__namespace.useCallback(function () {
            if (focusPreviouslyFocusedInnerElement &&
                internalState.previouslyFocusedElementInTrapZone &&
                elementContains(root.current, internalState.previouslyFocusedElementInTrapZone)) {
                // focus on the last item that had focus in the zone before we left the zone
                focusAsync(internalState.previouslyFocusedElementInTrapZone);
                return;
            }
            var focusSelector = typeof firstFocusableSelector === 'string'
                ? firstFocusableSelector
                : firstFocusableSelector && firstFocusableSelector();
            var firstFocusableChild = null;
            if (root.current) {
                if (typeof firstFocusableTarget === 'string') {
                    firstFocusableChild = root.current.querySelector(firstFocusableTarget);
                }
                else if (firstFocusableTarget) {
                    firstFocusableChild = firstFocusableTarget(root.current);
                }
                else if (focusSelector) {
                    firstFocusableChild = root.current.querySelector('.' + focusSelector);
                }
                // Fall back to first element if query selector did not match any elements.
                if (!firstFocusableChild) {
                    firstFocusableChild = getNextElement(root.current, root.current.firstChild, false, false, false, true);
                }
            }
            if (firstFocusableChild) {
                focusAsync(firstFocusableChild);
            }
        }, [firstFocusableSelector, firstFocusableTarget, focusPreviouslyFocusedInnerElement, internalState]);
        var onBumperFocus = React__namespace.useCallback(function (isFirstBumper) {
            if (disabled) {
                return;
            }
            var currentBumper = (isFirstBumper === internalState.hasFocus
                ? lastBumper.current
                : firstBumper.current);
            if (root.current) {
                var nextFocusable = isFirstBumper === internalState.hasFocus
                    ? getLastTabbable(root.current, currentBumper, true, false)
                    : getFirstTabbable(root.current, currentBumper, true, false);
                if (nextFocusable) {
                    if (nextFocusable === firstBumper.current || nextFocusable === lastBumper.current) {
                        // This can happen when FTZ contains no tabbable elements.
                        // focus will take care of finding a focusable element in FTZ.
                        focus();
                    }
                    else {
                        nextFocusable.focus();
                    }
                }
            }
        }, [disabled, focus, internalState]);
        var onRootBlurCapture = React__namespace.useCallback(function (ev) {
            onBlurCapture === null || onBlurCapture === void 0 ? void 0 : onBlurCapture(ev);
            var relatedTarget = ev.relatedTarget;
            if (ev.relatedTarget === null) {
                // In IE11, due to lack of support, event.relatedTarget is always
                // null making every onBlur call to be "outside" of the root
                // even when it's not. Using document.activeElement is another way
                // for us to be able to get what the relatedTarget without relying
                // on the event
                relatedTarget = doc.activeElement;
            }
            if (!elementContains(root.current, relatedTarget)) {
                internalState.hasFocus = false;
            }
        }, [doc, internalState, onBlurCapture]);
        var onRootFocusCapture = React__namespace.useCallback(function (ev) {
            onFocusCapture === null || onFocusCapture === void 0 ? void 0 : onFocusCapture(ev);
            if (ev.target === firstBumper.current) {
                onBumperFocus(true);
            }
            else if (ev.target === lastBumper.current) {
                onBumperFocus(false);
            }
            internalState.hasFocus = true;
            if (ev.target !== ev.currentTarget && !(ev.target === firstBumper.current || ev.target === lastBumper.current)) {
                // every time focus changes within the trap zone, remember the focused element so that
                // it can be restored if focus leaves the pane and returns via keystroke (i.e. via a call to this.focus(true))
                internalState.previouslyFocusedElementInTrapZone = ev.target;
            }
        }, [onFocusCapture, internalState, onBumperFocus]);
        var returnFocusToInitiator = React__namespace.useCallback(function () {
            FocusTrapZone.focusStack = FocusTrapZone.focusStack.filter(function (value) {
                return id !== value;
            });
            if (doc) {
                var activeElement = doc.activeElement;
                if (!ignoreExternalFocusing &&
                    internalState.previouslyFocusedElementOutsideTrapZone &&
                    typeof internalState.previouslyFocusedElementOutsideTrapZone.focus === 'function' &&
                    (elementContains(root.current, activeElement) || activeElement === doc.body)) {
                    if (!(internalState.previouslyFocusedElementOutsideTrapZone === firstBumper.current ||
                        internalState.previouslyFocusedElementOutsideTrapZone === lastBumper.current)) {
                        focusAsync(internalState.previouslyFocusedElementOutsideTrapZone);
                    }
                }
            }
        }, [doc, id, ignoreExternalFocusing, internalState]);
        var forceFocusInTrap = React__namespace.useCallback(function (ev) {
            if (disabled) {
                return;
            }
            if (FocusTrapZone.focusStack.length && id === FocusTrapZone.focusStack[FocusTrapZone.focusStack.length - 1]) {
                var focusedElement = ev.target;
                if (!elementContains(root.current, focusedElement)) {
                    focus();
                    internalState.hasFocus = true; // set focus here since we stop event propagation
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
        }, [disabled, id, focus, internalState]);
        var forceClickInTrap = React__namespace.useCallback(function (ev) {
            if (disabled) {
                return;
            }
            if (FocusTrapZone.focusStack.length && id === FocusTrapZone.focusStack[FocusTrapZone.focusStack.length - 1]) {
                var clickedElement = ev.target;
                if (clickedElement && !elementContains(root.current, clickedElement)) {
                    focus();
                    internalState.hasFocus = true; // set focus here since we stop event propagation
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
        }, [disabled, id, focus, internalState]);
        var updateEventHandlers = React__namespace.useCallback(function () {
            if (forceFocusInsideTrap && !internalState.disposeFocusHandler) {
                internalState.disposeFocusHandler = on(window, 'focus', forceFocusInTrap, true);
            }
            else if (!forceFocusInsideTrap && internalState.disposeFocusHandler) {
                internalState.disposeFocusHandler();
                internalState.disposeFocusHandler = undefined;
            }
            if (!isClickableOutsideFocusTrap && !internalState.disposeClickHandler) {
                internalState.disposeClickHandler = on(window, 'click', forceClickInTrap, true);
            }
            else if (isClickableOutsideFocusTrap && internalState.disposeClickHandler) {
                internalState.disposeClickHandler();
                internalState.disposeClickHandler = undefined;
            }
        }, [forceClickInTrap, forceFocusInTrap, forceFocusInsideTrap, isClickableOutsideFocusTrap, internalState]);
        // Updates eventHandlers and cleans up focusStack when the component unmounts.
        React__namespace.useEffect(function () {
            var parentRoot = root.current;
            updateEventHandlers();
            return function () {
                // don't handle return focus unless forceFocusInsideTrap is true or focus is still within FocusTrapZone
                if (!disabled || forceFocusInsideTrap || !elementContains(parentRoot, doc === null || doc === void 0 ? void 0 : doc.activeElement)) {
                    returnFocusToInitiator();
                }
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run on mount.
        }, [updateEventHandlers]);
        // Updates focusStack and the previouslyFocusedElementOutsideTrapZone on prop change.
        React__namespace.useEffect(function () {
            var newForceFocusInsideTrap = forceFocusInsideTrap !== undefined ? forceFocusInsideTrap : true;
            var newDisabled = disabled !== undefined ? disabled : false;
            // Transition from forceFocusInsideTrap / FTZ disabled to enabled.
            if (!newDisabled || newForceFocusInsideTrap) {
                if (currentDisabledValue) {
                    return;
                }
                FocusTrapZone.focusStack.push(id);
                internalState.previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss
                    ? elementToFocusOnDismiss
                    : doc.activeElement;
                if (!disableFirstFocus && !elementContains(root.current, internalState.previouslyFocusedElementOutsideTrapZone)) {
                    focus();
                }
                if (!internalState.unmodalize && root.current && enableAriaHiddenSiblings) {
                    internalState.unmodalize = modalize(root.current);
                }
            }
            else if (!newForceFocusInsideTrap || newDisabled) {
                // Transition from forceFocusInsideTrap / FTZ enabled to disabled.
                returnFocusToInitiator();
                if (internalState.unmodalize) {
                    internalState.unmodalize();
                }
            }
            if (elementToFocusOnDismiss && internalState.previouslyFocusedElementOutsideTrapZone !== elementToFocusOnDismiss) {
                internalState.previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss;
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [elementToFocusOnDismiss, forceFocusInsideTrap, disabled]);
        // Cleanup lifecyle method for internalState.
        useUnmount(function () {
            // Dispose of event handlers so their closures can be garbage-collected
            if (internalState.disposeClickHandler) {
                internalState.disposeClickHandler();
                internalState.disposeClickHandler = undefined;
            }
            if (internalState.disposeFocusHandler) {
                internalState.disposeFocusHandler();
                internalState.disposeFocusHandler = undefined;
            }
            if (internalState.unmodalize) {
                internalState.unmodalize();
            }
            // Dispose of element references so the DOM Nodes can be garbage-collected
            delete internalState.previouslyFocusedElementInTrapZone;
            delete internalState.previouslyFocusedElementOutsideTrapZone;
        });
        useComponentRef$6(componentRef, internalState.previouslyFocusedElementInTrapZone, focus);
        return (React__namespace.createElement("div", tslib.__assign({}, divProps, { className: className, ref: mergedRootRef, "aria-labelledby": ariaLabelledBy, onFocusCapture: onRootFocusCapture, onFocus: onFocus, onBlur: onBlur, onBlurCapture: onRootBlurCapture }),
            React__namespace.createElement("div", tslib.__assign({}, bumperProps, { ref: firstBumper })),
            children,
            React__namespace.createElement("div", tslib.__assign({}, bumperProps, { ref: lastBumper }))));
    });
    FocusTrapZone.displayName = COMPONENT_NAME$d;
    FocusTrapZone.focusStack = [];

    /**
     * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
     * {@docCategory Icon}
     */
    var IconType;
    (function (IconType) {
        /**
         * Render using the fabric icon font.
         * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
         */
        IconType[IconType["default"] = 0] = "default";
        /**
         * Render using an image, where imageProps would be used.
         * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
         */
        IconType[IconType["image"] = 1] = "image";
        /**
         * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
         */
        IconType[IconType["Default"] = 100000] = "Default";
        /**
         * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
         */
        IconType[IconType["Image"] = 100001] = "Image";
    })(IconType || (IconType = {}));

    /**
     * The possible methods that can be used to fit the image.
     * {@docCategory Image}
     */
    var ImageFit;
    (function (ImageFit) {
        /**
         * The image is not scaled. The image is centered and cropped within the content box.
         */
        ImageFit[ImageFit["center"] = 0] = "center";
        /**
         * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will
         * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of
         * the frame will be empty depending on the difference in aspect ratio between the image and the frame.
         */
        ImageFit[ImageFit["contain"] = 1] = "contain";
        /**
         * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped
         * from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.
         */
        ImageFit[ImageFit["cover"] = 2] = "cover";
        /**
         * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the
         * frame will have empty space.
         */
        ImageFit[ImageFit["none"] = 3] = "none";
        /**
         * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will
         * behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width,
         * but if both natural height and width are larger than the frame it will behave as ImageFit.cover.
         */
        ImageFit[ImageFit["centerCover"] = 4] = "centerCover";
        /**
         * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will
         * behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width,
         * but if either natural height or width are larger than the frame it will behave as ImageFit.contain.
         */
        ImageFit[ImageFit["centerContain"] = 5] = "centerContain";
    })(ImageFit || (ImageFit = {}));
    /**
     * The cover style to be used on the image
     * {@docCategory Image}
     */
    var ImageCoverStyle;
    (function (ImageCoverStyle) {
        /**
         * The image will be shown at 100% height of container and the width will be scaled accordingly
         */
        ImageCoverStyle[ImageCoverStyle["landscape"] = 0] = "landscape";
        /**
         * The image will be shown at 100% width of container and the height will be scaled accordingly
         */
        ImageCoverStyle[ImageCoverStyle["portrait"] = 1] = "portrait";
    })(ImageCoverStyle || (ImageCoverStyle = {}));
    /**
     * {@docCategory Image}
     */
    var ImageLoadState;
    (function (ImageLoadState) {
        /**
         * The image has not yet been loaded, and there is no error yet.
         */
        ImageLoadState[ImageLoadState["notLoaded"] = 0] = "notLoaded";
        /**
         * The image has been loaded successfully.
         */
        ImageLoadState[ImageLoadState["loaded"] = 1] = "loaded";
        /**
         * An error has been encountered while loading the image.
         */
        ImageLoadState[ImageLoadState["error"] = 2] = "error";
        /**
         * @deprecated Not used. Use `onLoadingStateChange` and re-render the Image with a different src.
         */
        ImageLoadState[ImageLoadState["errorLoaded"] = 3] = "errorLoaded";
    })(ImageLoadState || (ImageLoadState = {}));

    var getClassNames$1n = classNamesFunction();
    var SVG_REGEX = /\.svg$/i;
    var KEY_PREFIX = 'fabricImage';
    function useLoadState(props, imageElement) {
        var onLoadingStateChange = props.onLoadingStateChange, onLoad = props.onLoad, onError = props.onError, src = props.src;
        var _a = React__namespace.useState(ImageLoadState.notLoaded), loadState = _a[0], setLoadState = _a[1];
        useIsomorphicLayoutEffect(function () {
            // If the src property changes, reset the load state
            // (does nothing if the load state is already notLoaded)
            setLoadState(ImageLoadState.notLoaded);
        }, [src]);
        // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render
        React__namespace.useEffect(function () {
            if (loadState === ImageLoadState.notLoaded) {
                // testing if naturalWidth and naturalHeight are greater than zero is better than checking
                // .complete, because .complete will also be set to true if the image breaks. However,
                // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back
                // to checking .complete for these images.
                var isLoaded = imageElement.current
                    ? (src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0) ||
                        (imageElement.current.complete && SVG_REGEX.test(src))
                    : false;
                if (isLoaded) {
                    setLoadState(ImageLoadState.loaded);
                }
            }
        });
        React__namespace.useEffect(function () {
            onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState);
            // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes
        }, [loadState]);
        var onImageLoaded = React__namespace.useCallback(function (ev) {
            onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);
            if (src) {
                setLoadState(ImageLoadState.loaded);
            }
        }, [src, onLoad]);
        var onImageError = React__namespace.useCallback(function (ev) {
            onError === null || onError === void 0 ? void 0 : onError(ev);
            setLoadState(ImageLoadState.error);
        }, [onError]);
        return [loadState, onImageLoaded, onImageError];
    }
    var ImageBase = React__namespace.forwardRef(function (props, forwardedRef) {
        var frameElement = React__namespace.useRef();
        var imageElement = React__namespace.useRef();
        var _a = useLoadState(props, imageElement), loadState = _a[0], onImageLoaded = _a[1], onImageError = _a[2];
        var imageProps = getNativeProps(props, imgProperties, [
            'width',
            'height',
        ]);
        var src = props.src, alt = props.alt, width = props.width, height = props.height, _b = props.shouldFadeIn, shouldFadeIn = _b === void 0 ? true : _b, shouldStartVisible = props.shouldStartVisible, className = props.className, imageFit = props.imageFit, role = props.role, maximizeFrame = props.maximizeFrame, styles = props.styles, theme = props.theme, loading = props.loading;
        var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);
        var classNames = getClassNames$1n(styles, {
            theme: theme,
            className: className,
            width: width,
            height: height,
            maximizeFrame: maximizeFrame,
            shouldFadeIn: shouldFadeIn,
            shouldStartVisible: shouldStartVisible,
            isLoaded: loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && props.shouldStartVisible),
            isLandscape: coverStyle === ImageCoverStyle.landscape,
            isCenter: imageFit === ImageFit.center,
            isCenterContain: imageFit === ImageFit.centerContain,
            isCenterCover: imageFit === ImageFit.centerCover,
            isContain: imageFit === ImageFit.contain,
            isCover: imageFit === ImageFit.cover,
            isNone: imageFit === ImageFit.none,
            isError: loadState === ImageLoadState.error,
            isNotImageFit: imageFit === undefined,
        });
        // If image dimensions aren't specified, the natural size of the image is used.
        return (React__namespace.createElement("div", { className: classNames.root, style: { width: width, height: height }, ref: frameElement },
            React__namespace.createElement("img", tslib.__assign({}, imageProps, { onLoad: onImageLoaded, onError: onImageError, key: KEY_PREFIX + props.src || '', className: classNames.image, ref: useMergedRefs(imageElement, forwardedRef), src: src, alt: alt, role: role, loading: loading }))));
    });
    ImageBase.displayName = 'ImageBase';
    function useCoverStyle(props, loadState, imageElement, frameElement) {
        var previousLoadState = React__namespace.useRef(loadState);
        var coverStyle = React__namespace.useRef();
        if (coverStyle === undefined ||
            (previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded)) {
            coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);
        }
        previousLoadState.current = loadState;
        return coverStyle.current;
    }
    function computeCoverStyle(props, loadState, imageElement, frameElement) {
        var imageFit = props.imageFit, width = props.width, height = props.height;
        // Do not compute cover style if it was already specified in props
        if (props.coverStyle !== undefined) {
            return props.coverStyle;
        }
        else if (loadState === ImageLoadState.loaded &&
            (imageFit === ImageFit.cover ||
                imageFit === ImageFit.contain ||
                imageFit === ImageFit.centerContain ||
                imageFit === ImageFit.centerCover) &&
            imageElement.current &&
            frameElement.current) {
            // Determine the desired ratio using the width and height props.
            // If those props aren't available, measure measure the frame.
            var desiredRatio = void 0;
            if (typeof width === 'number' &&
                typeof height === 'number' &&
                imageFit !== ImageFit.centerContain &&
                imageFit !== ImageFit.centerCover) {
                desiredRatio = width / height;
            }
            else {
                desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;
            }
            // Examine the source image to determine its original ratio.
            var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;
            // Should we crop from the top or the sides?
            if (naturalRatio > desiredRatio) {
                return ImageCoverStyle.landscape;
            }
        }
        return ImageCoverStyle.portrait;
    }

    var GlobalClassNames$q = {
        root: 'ms-Image',
        rootMaximizeFrame: 'ms-Image--maximizeFrame',
        image: 'ms-Image-image',
        imageCenter: 'ms-Image-image--center',
        imageContain: 'ms-Image-image--contain',
        imageCover: 'ms-Image-image--cover',
        imageCenterContain: 'ms-Image-image--centerContain',
        imageCenterCover: 'ms-Image-image--centerCover',
        imageNone: 'ms-Image-image--none',
        imageLandscape: 'ms-Image-image--landscape',
        imagePortrait: 'ms-Image-image--portrait',
    };
    var getStyles$D = function (props) {
        var className = props.className, width = props.width, height = props.height, maximizeFrame = props.maximizeFrame, isLoaded = props.isLoaded, shouldFadeIn = props.shouldFadeIn, shouldStartVisible = props.shouldStartVisible, isLandscape = props.isLandscape, isCenter = props.isCenter, isContain = props.isContain, isCover = props.isCover, isCenterContain = props.isCenterContain, isCenterCover = props.isCenterCover, isNone = props.isNone, isError = props.isError, isNotImageFit = props.isNotImageFit, theme = props.theme;
        var classNames = getGlobalClassNames(GlobalClassNames$q, theme);
        var ImageFitStyles = {
            position: 'absolute',
            left: '50% /* @noflip */',
            top: '50%',
            transform: 'translate(-50%,-50%)', // @todo test RTL renders transform: translate(50%,-50%);
        };
        // Cut the mustard using msMaxTouchPoints to detect IE11 which does not support CSS object-fit
        var window = getWindow();
        var supportsObjectFit = window !== undefined && window.navigator.msMaxTouchPoints === undefined;
        var fallbackObjectFitStyles = (isContain && isLandscape) || (isCover && !isLandscape)
            ? { width: '100%', height: 'auto' }
            : { width: 'auto', height: '100%' };
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                {
                    overflow: 'hidden',
                },
                maximizeFrame && [
                    classNames.rootMaximizeFrame,
                    {
                        height: '100%',
                        width: '100%',
                    },
                ],
                isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,
                (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {
                    position: 'relative',
                },
                className,
            ],
            image: [
                classNames.image,
                {
                    display: 'block',
                    opacity: 0,
                },
                isLoaded && [
                    'is-loaded',
                    {
                        opacity: 1,
                    },
                ],
                isCenter && [classNames.imageCenter, ImageFitStyles],
                isContain && [
                    classNames.imageContain,
                    supportsObjectFit && {
                        width: '100%',
                        height: '100%',
                        objectFit: 'contain',
                    },
                    !supportsObjectFit && fallbackObjectFitStyles,
                    !supportsObjectFit && ImageFitStyles,
                ],
                isCover && [
                    classNames.imageCover,
                    supportsObjectFit && {
                        width: '100%',
                        height: '100%',
                        objectFit: 'cover',
                    },
                    !supportsObjectFit && fallbackObjectFitStyles,
                    !supportsObjectFit && ImageFitStyles,
                ],
                isCenterContain && [
                    classNames.imageCenterContain,
                    isLandscape && {
                        maxWidth: '100%',
                    },
                    !isLandscape && {
                        maxHeight: '100%',
                    },
                    ImageFitStyles,
                ],
                isCenterCover && [
                    classNames.imageCenterCover,
                    isLandscape && {
                        maxHeight: '100%',
                    },
                    !isLandscape && {
                        maxWidth: '100%',
                    },
                    ImageFitStyles,
                ],
                isNone && [
                    classNames.imageNone,
                    {
                        width: 'auto',
                        height: 'auto',
                    },
                ],
                isNotImageFit && [
                    !!width &&
                        !height && {
                        height: 'auto',
                        width: '100%',
                    },
                    !width &&
                        !!height && {
                        height: '100%',
                        width: 'auto',
                    },
                    !!width &&
                        !!height && {
                        height: '100%',
                        width: '100%',
                    },
                ],
                isLandscape && classNames.imageLandscape,
                !isLandscape && classNames.imagePortrait,
                !isLoaded && 'is-notLoaded',
                shouldFadeIn && 'is-fadeIn',
                isError && 'is-error',
            ],
        };
    };

    var Image$1 = styled(ImageBase, getStyles$D, undefined, {
        scope: 'Image',
    }, true);
    Image$1.displayName = 'Image';

    /** Class names used in themeable and non-themeable Icon components */
    var classNames = mergeStyleSets({
        root: {
            display: 'inline-block',
        },
        placeholder: [
            'ms-Icon-placeHolder',
            {
                width: '1em',
            },
        ],
        image: [
            'ms-Icon-imageContainer',
            {
                overflow: 'hidden',
            },
        ],
    });
    /** Class name used only in non-themeable Icon components */
    var MS_ICON = 'ms-Icon';
    var getStyles$C = function (props) {
        var className = props.className, iconClassName = props.iconClassName, isPlaceholder = props.isPlaceholder, isImage = props.isImage, styles = props.styles;
        return {
            root: [
                isPlaceholder && classNames.placeholder,
                classNames.root,
                isImage && classNames.image,
                iconClassName,
                className,
                styles && styles.root,
                // eslint-disable-next-line deprecation/deprecation
                styles && styles.imageContainer,
            ],
        };
    };

    var getIconContent = memoizeFunction(function (iconName) {
        var _a = getIcon$1(iconName) || {
            subset: {},
            code: undefined,
        }, code = _a.code, subset = _a.subset;
        if (!code) {
            return null;
        }
        return {
            children: code,
            iconClassName: subset.className,
            fontFamily: subset.fontFace && subset.fontFace.fontFamily,
            mergeImageProps: subset.mergeImageProps,
        };
    }, undefined, true /*ignoreNullOrUndefinedResult */);
    /**
     * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.
     * To style the icon, use `className` or reference `ms-Icon` in CSS.
     * {@docCategory Icon}
     */
    var FontIcon = function (props) {
        var iconName = props.iconName, className = props.className, _a = props.style, style = _a === void 0 ? {} : _a;
        var iconContent = getIconContent(iconName) || {};
        var iconClassName = iconContent.iconClassName, children = iconContent.children, fontFamily = iconContent.fontFamily, mergeImageProps = iconContent.mergeImageProps;
        var nativeProps = getNativeProps(props, htmlElementProperties);
        var accessibleName = props['aria-label'] || props.title;
        var containerProps = props['aria-label'] || props['aria-labelledby'] || props.title
            ? {
                role: mergeImageProps ? undefined : 'img',
            }
            : {
                'aria-hidden': true,
            };
        var finalChildren = children;
        if (mergeImageProps) {
            if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {
                finalChildren = React__namespace.cloneElement(children, { alt: accessibleName });
            }
        }
        return (React__namespace.createElement("i", tslib.__assign({ "data-icon-name": iconName }, containerProps, nativeProps, (mergeImageProps
            ? {
                title: undefined,
                'aria-label': undefined,
            }
            : {}), { className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className), 
            // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles
            // https://github.com/microsoft/fluentui/issues/10449
            style: tslib.__assign({ fontFamily: fontFamily }, style) }), finalChildren));
    };
    /**
     * Memoized helper for rendering a FontIcon.
     * @param iconName - The name of the icon to use from the icon font.
     * @param className - Class name for styling the icon.
     * @param ariaLabel - Label for the icon for the benefit of screen readers.
     * {@docCategory Icon}
     */
    memoizeFunction(function (iconName, className, ariaLabel) {
        return FontIcon({ iconName: iconName, className: className, 'aria-label': ariaLabel });
    });

    var getClassNames$1m = classNamesFunction({
        // Icon is used a lot by other components.
        // It's likely to see expected cases which pass different className to the Icon.
        // Therefore setting a larger cache size.
        cacheSize: 100,
    });
    var IconBase = /** @class */ (function (_super) {
        tslib.__extends(IconBase, _super);
        function IconBase(props) {
            var _this = _super.call(this, props) || this;
            _this._onImageLoadingStateChange = function (state) {
                if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {
                    _this.props.imageProps.onLoadingStateChange(state);
                }
                if (state === ImageLoadState.error) {
                    _this.setState({ imageLoadError: true });
                }
            };
            _this.state = {
                imageLoadError: false,
            };
            return _this;
        }
        IconBase.prototype.render = function () {
            var _a = this.props, children = _a.children, className = _a.className, styles = _a.styles, iconName = _a.iconName, imageErrorAs = _a.imageErrorAs, theme = _a.theme;
            var isPlaceholder = typeof iconName === 'string' && iconName.length === 0;
            var isImage = 
            // eslint-disable-next-line deprecation/deprecation
            !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;
            var iconContent = getIconContent(iconName) || {};
            var iconClassName = iconContent.iconClassName, iconContentChildren = iconContent.children, mergeImageProps = iconContent.mergeImageProps;
            var classNames = getClassNames$1m(styles, {
                theme: theme,
                className: className,
                iconClassName: iconClassName,
                isImage: isImage,
                isPlaceholder: isPlaceholder,
            });
            var RootType = isImage ? 'span' : 'i';
            var nativeProps = getNativeProps(this.props, htmlElementProperties, [
                'aria-label',
            ]);
            var imageLoadError = this.state.imageLoadError;
            var imageProps = tslib.__assign(tslib.__assign({}, this.props.imageProps), { onLoadingStateChange: this._onImageLoadingStateChange });
            var ImageType = (imageLoadError && imageErrorAs) || Image$1;
            // eslint-disable-next-line deprecation/deprecation
            var ariaLabel = this.props['aria-label'] || this.props.ariaLabel;
            var accessibleName = imageProps.alt || ariaLabel || this.props.title;
            var hasName = !!(accessibleName ||
                this.props['aria-labelledby'] ||
                imageProps['aria-label'] ||
                imageProps['aria-labelledby']);
            var containerProps = hasName
                ? {
                    role: isImage || mergeImageProps ? undefined : 'img',
                    'aria-label': isImage || mergeImageProps ? undefined : accessibleName,
                }
                : {
                    'aria-hidden': true,
                };
            var finalIconContentChildren = iconContentChildren;
            if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {
                finalIconContentChildren = React__namespace.cloneElement(iconContentChildren, {
                    alt: accessibleName,
                });
            }
            return (React__namespace.createElement(RootType, tslib.__assign({ "data-icon-name": iconName }, containerProps, nativeProps, (mergeImageProps
                ? {
                    title: undefined,
                    'aria-label': undefined,
                }
                : {}), { className: classNames.root }), isImage ? React__namespace.createElement(ImageType, tslib.__assign({}, imageProps)) : children || finalIconContentChildren));
        };
        return IconBase;
    }(React__namespace.Component));

    /**
     * Legacy Icon component which can be targeted by customization. It's recommended to use `FontIcon`
     * or `ImageIcon` instead, especially in scenarios where rendering performance is important.
     * {@docCategory Icon}
     */
    var Icon$1 = styled(IconBase, getStyles$C, undefined, {
        scope: 'Icon',
    }, true);
    Icon$1.displayName = 'Icon';

    /**
     * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations.
     * To style the icon, use `className` or reference `ms-Icon` in CSS.
     * {@docCategory Icon}
     */
    var ImageIcon = function (props) {
        var className = props.className, imageProps = props.imageProps;
        var nativeProps = getNativeProps(props, htmlElementProperties, [
            'aria-label',
            'aria-labelledby',
            'title',
            'aria-describedby',
        ]);
        var altText = imageProps.alt || props['aria-label'];
        var hasName = altText ||
            props['aria-labelledby'] ||
            props.title ||
            imageProps['aria-label'] ||
            imageProps['aria-labelledby'] ||
            imageProps.title;
        // move naming or describing attributes from the container (where they are invalid) to the image
        var imageNameProps = {
            'aria-labelledby': props['aria-labelledby'],
            'aria-describedby': props['aria-describedby'],
            title: props.title,
        };
        var containerProps = hasName
            ? {}
            : {
                'aria-hidden': true,
            };
        return (React__namespace.createElement("div", tslib.__assign({}, containerProps, nativeProps, { className: css(MS_ICON, classNames.root, classNames.image, className) }),
            React__namespace.createElement(Image$1, tslib.__assign({}, imageNameProps, imageProps, { alt: hasName ? altText : '' }))));
    };

    var SELECTION_FORWARD = 'forward';
    var SELECTION_BACKWARD = 'backward';
    /**
     * {@docCategory Autofill}
     */
    var Autofill = /** @class */ (function (_super) {
        tslib.__extends(Autofill, _super);
        function Autofill(props) {
            var _this = _super.call(this, props) || this;
            _this._inputElement = React__namespace.createRef();
            _this._autoFillEnabled = true;
            // Composition events are used when the character/text requires several keystrokes to be completed.
            // Some examples of this are mobile text input and languages like Japanese or Arabic.
            // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart
            _this._onCompositionStart = function (ev) {
                _this.setState({ isComposing: true });
                _this._autoFillEnabled = false;
            };
            // Composition events are used when the character/text requires several keystrokes to be completed.
            // Some examples of this are mobile text input and languages like Japanese or Arabic.
            // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart
            _this._onCompositionUpdate = function () {
                if (isIE11()) {
                    _this._updateValue(_this._getCurrentInputValue(), true);
                }
            };
            // Composition events are used when the character/text requires several keystrokes to be completed.
            // Some examples of this are mobile text input and languages like Japanese or Arabic.
            // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart
            _this._onCompositionEnd = function (ev) {
                var inputValue = _this._getCurrentInputValue();
                _this._tryEnableAutofill(inputValue, _this.value, false, true);
                _this.setState({ isComposing: false });
                // Due to timing, this needs to be async, otherwise no text will be selected.
                _this._async.setTimeout(function () {
                    // it's technically possible that the value of isComposing is reset during this timeout,
                    // so explicitly trigger this with composing=true here, since it is supposed to be the
                    // update for composition end
                    _this._updateValue(_this._getCurrentInputValue(), false);
                }, 0);
            };
            _this._onClick = function () {
                if (_this.value && _this.value !== '' && _this._autoFillEnabled) {
                    _this._autoFillEnabled = false;
                }
            };
            _this._onKeyDown = function (ev) {
                if (_this.props.onKeyDown) {
                    _this.props.onKeyDown(ev);
                }
                // If the event is actively being composed, then don't alert autofill.
                // Right now typing does not have isComposing, once that has been fixed any should be removed.
                if (!ev.nativeEvent.isComposing) {
                    // eslint-disable-next-line deprecation/deprecation
                    switch (ev.which) {
                        case KeyCodes.backspace:
                            _this._autoFillEnabled = false;
                            break;
                        case KeyCodes.left:
                        case KeyCodes.right:
                            if (_this._autoFillEnabled) {
                                _this.setState({ inputValue: _this.props.suggestedDisplayValue || '' });
                                _this._autoFillEnabled = false;
                            }
                            break;
                        default:
                            if (!_this._autoFillEnabled) {
                                // eslint-disable-next-line deprecation/deprecation
                                if (_this.props.enableAutofillOnKeyPress.indexOf(ev.which) !== -1) {
                                    _this._autoFillEnabled = true;
                                }
                            }
                            break;
                    }
                }
            };
            _this._onInputChanged = function (ev) {
                var value = _this._getCurrentInputValue(ev);
                if (!_this.state.isComposing) {
                    _this._tryEnableAutofill(value, _this.value, ev.nativeEvent.isComposing);
                }
                // If it is not IE11 and currently composing, update the value
                if (!(isIE11() && _this.state.isComposing)) {
                    var nativeEventComposing = ev.nativeEvent.isComposing;
                    var isComposing = nativeEventComposing === undefined ? _this.state.isComposing : nativeEventComposing;
                    _this._updateValue(value, isComposing);
                }
            };
            _this._onChanged = function () {
                // Swallow this event, we don't care about it
                // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose
                return;
            };
            /**
             * Updates the current input value as well as getting a new display value.
             * @param newValue - The new value from the input
             */
            _this._updateValue = function (newValue, composing) {
                // Only proceed if the value is nonempty and is different from the old value
                // This is to work around the fact that, in IE 11, inputs with a placeholder fire an onInput event on focus
                if (!newValue && newValue === _this.value) {
                    return;
                }
                // eslint-disable-next-line deprecation/deprecation
                var _a = _this.props, onInputChange = _a.onInputChange, onInputValueChange = _a.onInputValueChange;
                if (onInputChange) {
                    newValue = (onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(newValue, composing)) || '';
                }
                _this.setState({ inputValue: newValue }, function () { return onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange(newValue, composing); });
            };
            initializeComponentRef(_this);
            _this._async = new Async(_this);
            _this.state = {
                inputValue: props.defaultVisibleValue || '',
                isComposing: false,
            };
            return _this;
        }
        Autofill.getDerivedStateFromProps = function (props, state) {
            // eslint-disable-next-line deprecation/deprecation
            if (props.updateValueInWillReceiveProps) {
                // eslint-disable-next-line deprecation/deprecation
                var updatedInputValue = props.updateValueInWillReceiveProps();
                // Don't update if we have a null value or the value isn't changing
                // the value should still update if an empty string is passed in
                if (updatedInputValue !== null && updatedInputValue !== state.inputValue && !state.isComposing) {
                    return tslib.__assign(tslib.__assign({}, state), { inputValue: updatedInputValue });
                }
            }
            return null;
        };
        Object.defineProperty(Autofill.prototype, "cursorLocation", {
            get: function () {
                if (this._inputElement.current) {
                    var inputElement = this._inputElement.current;
                    if (inputElement.selectionDirection !== SELECTION_FORWARD) {
                        return inputElement.selectionEnd;
                    }
                    else {
                        return inputElement.selectionStart;
                    }
                }
                else {
                    return -1;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Autofill.prototype, "isValueSelected", {
            get: function () {
                return Boolean(this.inputElement && this.inputElement.selectionStart !== this.inputElement.selectionEnd);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Autofill.prototype, "value", {
            get: function () {
                return this._getControlledValue() || this.state.inputValue || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Autofill.prototype, "selectionStart", {
            get: function () {
                return this._inputElement.current ? this._inputElement.current.selectionStart : -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Autofill.prototype, "selectionEnd", {
            get: function () {
                return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Autofill.prototype, "inputElement", {
            get: function () {
                return this._inputElement.current;
            },
            enumerable: false,
            configurable: true
        });
        Autofill.prototype.componentDidUpdate = function (_, _1, cursor) {
            var _a = this.props, suggestedDisplayValue = _a.suggestedDisplayValue, shouldSelectFullInputValueInComponentDidUpdate = _a.shouldSelectFullInputValueInComponentDidUpdate, preventValueSelection = _a.preventValueSelection;
            var differenceIndex = 0;
            if (preventValueSelection) {
                return;
            }
            if (this._autoFillEnabled &&
                this.value &&
                suggestedDisplayValue &&
                _doesTextStartWith(suggestedDisplayValue, this.value)) {
                var shouldSelectFullRange = false;
                if (shouldSelectFullInputValueInComponentDidUpdate) {
                    shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();
                }
                if (shouldSelectFullRange && this._inputElement.current) {
                    this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);
                }
                else {
                    while (differenceIndex < this.value.length &&
                        this.value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {
                        differenceIndex++;
                    }
                    if (differenceIndex > 0 && this._inputElement.current) {
                        this._inputElement.current.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);
                    }
                }
            }
            else if (this._inputElement.current) {
                if (cursor !== null && !this._autoFillEnabled && !this.state.isComposing) {
                    this._inputElement.current.setSelectionRange(cursor.start, cursor.end, cursor.dir);
                }
            }
        };
        Autofill.prototype.componentWillUnmount = function () {
            this._async.dispose();
        };
        Autofill.prototype.render = function () {
            var nativeProps = getNativeProps(this.props, inputProperties);
            var style = tslib.__assign(tslib.__assign({}, this.props.style), { fontFamily: 'inherit' });
            return (React__namespace.createElement("input", tslib.__assign({ autoCapitalize: "off", autoComplete: "off", "aria-autocomplete": 'both' }, nativeProps, { style: style, ref: this._inputElement, value: this._getDisplayValue(), onCompositionStart: this._onCompositionStart, onCompositionUpdate: this._onCompositionUpdate, onCompositionEnd: this._onCompositionEnd, 
                // TODO (Fabric 8?) - switch to calling only onChange. See notes in TextField._onInputChange.
                onChange: this._onChanged, onInput: this._onInputChanged, onKeyDown: this._onKeyDown, onClick: this.props.onClick ? this.props.onClick : this._onClick, "data-lpignore": true })));
        };
        Autofill.prototype.focus = function () {
            this._inputElement.current && this._inputElement.current.focus();
        };
        Autofill.prototype.clear = function () {
            this._autoFillEnabled = true;
            this._updateValue('', false);
            this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);
        };
        Autofill.prototype.getSnapshotBeforeUpdate = function () {
            var _a, _b;
            var inel = this._inputElement.current;
            if (inel && inel.selectionStart !== this.value.length) {
                return {
                    start: (_a = inel.selectionStart) !== null && _a !== void 0 ? _a : inel.value.length,
                    end: (_b = inel.selectionEnd) !== null && _b !== void 0 ? _b : inel.value.length,
                    dir: inel.selectionDirection || 'backward' || 'none',
                };
            }
            return null;
        };
        Autofill.prototype._getCurrentInputValue = function (ev) {
            if (ev && ev.target && ev.target.value) {
                return ev.target.value;
            }
            else if (this.inputElement && this.inputElement.value) {
                return this.inputElement.value;
            }
            else {
                return '';
            }
        };
        /**
         * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,
         * whether or not any text is selected, and only if the new input value is longer than the old input value.
         * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then
         * it should be completed.
         * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.
         * @param newValue - new input value
         * @param oldValue - old input value
         * @param isComposing - if true then the text is actively being composed and it has not completed.
         * @param isComposed - if the text is a composed text value.
         */
        Autofill.prototype._tryEnableAutofill = function (newValue, oldValue, isComposing, isComposed) {
            if (!isComposing &&
                newValue &&
                this._inputElement.current &&
                this._inputElement.current.selectionStart === newValue.length &&
                !this._autoFillEnabled &&
                (newValue.length > oldValue.length || isComposed)) {
                this._autoFillEnabled = true;
            }
        };
        Autofill.prototype._getDisplayValue = function () {
            if (this._autoFillEnabled) {
                return _getDisplayValue(this.value, this.props.suggestedDisplayValue);
            }
            return this.value;
        };
        Autofill.prototype._getControlledValue = function () {
            var value = this.props.value;
            if (value === undefined || typeof value === 'string') {
                return value;
            }
            // eslint-disable-next-line no-console
            console.warn("props.value of Autofill should be a string, but it is " + value + " with type of " + typeof value);
            return value.toString();
        };
        Autofill.defaultProps = {
            enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up],
        };
        return Autofill;
    }(React__namespace.Component));
    /**
     * Returns a string that should be used as the display value.
     * It evaluates this based on whether or not the suggested value starts with the input value
     * and whether or not autofill is enabled.
     * @param inputValue - the value that the input currently has.
     * @param suggestedDisplayValue - the possible full value
     */
    function _getDisplayValue(inputValue, suggestedDisplayValue) {
        var displayValue = inputValue;
        if (suggestedDisplayValue && inputValue && _doesTextStartWith(suggestedDisplayValue, displayValue)) {
            displayValue = suggestedDisplayValue;
        }
        return displayValue;
    }
    function _doesTextStartWith(text, startWith) {
        if (!text || !startWith) {
            return false;
        }
        {
            for (var _i = 0, _a = [text, startWith]; _i < _a.length; _i++) {
                var val = _a[_i];
                if (typeof val !== 'string') {
                    throw new Error(Autofill.name + " received non-string value \"" + val + "\" of type " + typeof val + " from either input's value or suggestedDisplayValue");
                }
            }
        }
        return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;
    }

    /**
     * {@docCategory FocusZone}
     */
    var FocusZoneTabbableElements = {
        /** Tabbing is not allowed */
        none: 0,
        /** All tabbing action is allowed */
        all: 1,
        /** Tabbing is allowed only on input elements */
        inputOnly: 2,
    };
    /**
     * {@docCategory FocusZone}
     */
    var FocusZoneDirection;
    (function (FocusZoneDirection) {
        /** Only react to up/down arrows. */
        FocusZoneDirection[FocusZoneDirection["vertical"] = 0] = "vertical";
        /** Only react to left/right arrows. */
        FocusZoneDirection[FocusZoneDirection["horizontal"] = 1] = "horizontal";
        /** React to all arrows. */
        FocusZoneDirection[FocusZoneDirection["bidirectional"] = 2] = "bidirectional";
        /**
         * React to all arrows. Navigate next item in DOM on right/down arrow keys and previous - left/up arrow keys.
         * Right and Left arrow keys are swapped in RTL mode.
         */
        FocusZoneDirection[FocusZoneDirection["domOrder"] = 3] = "domOrder";
    })(FocusZoneDirection || (FocusZoneDirection = {}));

    var IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';
    var IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';
    var FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';
    var TABINDEX = 'tabindex';
    var NO_VERTICAL_WRAP = 'data-no-vertical-wrap';
    var NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';
    var LARGE_DISTANCE_FROM_CENTER = 999999999;
    var LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;
    var focusZoneStyles;
    var focusZoneClass = 'ms-FocusZone';
    /**
     * Raises a click on a target element based on a keyboard event.
     */
    function raiseClickFromKeyboardEvent(target, ev) {
        var event;
        if (typeof MouseEvent === 'function') {
            event = new MouseEvent('click', {
                ctrlKey: ev === null || ev === void 0 ? void 0 : ev.ctrlKey,
                metaKey: ev === null || ev === void 0 ? void 0 : ev.metaKey,
                shiftKey: ev === null || ev === void 0 ? void 0 : ev.shiftKey,
                altKey: ev === null || ev === void 0 ? void 0 : ev.altKey,
                bubbles: ev === null || ev === void 0 ? void 0 : ev.bubbles,
                cancelable: ev === null || ev === void 0 ? void 0 : ev.cancelable,
            });
        }
        else {
            event = document.createEvent('MouseEvents');
            event.initMouseEvent('click', ev ? ev.bubbles : false, ev ? ev.cancelable : false, window, // not using getWindow() since this can only be run client side
            0, // detail
            0, // screen x
            0, // screen y
            0, // client x
            0, // client y
            ev ? ev.ctrlKey : false, ev ? ev.altKey : false, ev ? ev.shiftKey : false, ev ? ev.metaKey : false, 0, // button
            null);
        }
        target.dispatchEvent(event);
    }
    // Helper function that will return a class for when the root is focused
    function getRootClass() {
        if (!focusZoneStyles) {
            focusZoneStyles = mergeStyles({
                selectors: {
                    ':focus': {
                        outline: 'none',
                    },
                },
            }, focusZoneClass);
        }
        return focusZoneStyles;
    }
    var _allInstances = {};
    var _outerZones = new Set();
    var ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];
    var ALLOW_VIRTUAL_ELEMENTS = false;
    var FocusZone = /** @class */ (function (_super) {
        tslib.__extends(FocusZone, _super);
        function FocusZone(props) {
            var _a, _b, _c, _d;
            var _this = _super.call(this, props) || this;
            _this._root = React__namespace.createRef();
            _this._mergedRef = createMergedRef();
            _this._onFocus = function (ev) {
                if (_this._portalContainsElement(ev.target)) {
                    // If the event target is inside a portal do not process the event.
                    return;
                }
                var _a = _this.props, onActiveElementChanged = _a.onActiveElementChanged, 
                // eslint-disable-next-line deprecation/deprecation
                doNotAllowFocusEventToPropagate = _a.doNotAllowFocusEventToPropagate, stopFocusPropagation = _a.stopFocusPropagation, 
                // eslint-disable-next-line deprecation/deprecation
                onFocusNotification = _a.onFocusNotification, onFocus = _a.onFocus, shouldFocusInnerElementWhenReceivedFocus = _a.shouldFocusInnerElementWhenReceivedFocus, defaultTabbableElement = _a.defaultTabbableElement;
                var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);
                var newActiveElement;
                if (isImmediateDescendant) {
                    newActiveElement = ev.target;
                }
                else {
                    var parentElement = ev.target;
                    while (parentElement && parentElement !== _this._root.current) {
                        if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {
                            newActiveElement = parentElement;
                            break;
                        }
                        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
                    }
                }
                // If an inner focusable element should be focused when FocusZone container receives focus
                if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {
                    var maybeElementToFocus = defaultTabbableElement &&
                        typeof defaultTabbableElement === 'function' &&
                        _this._root.current &&
                        defaultTabbableElement(_this._root.current);
                    // try to focus defaultTabbable element
                    if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {
                        newActiveElement = maybeElementToFocus;
                        maybeElementToFocus.focus();
                    }
                    else {
                        // force focus on first focusable element
                        _this.focus(true);
                        if (_this._activeElement) {
                            // set to null as new active element was handled in method above
                            newActiveElement = null;
                        }
                    }
                }
                var initialElementFocused = !_this._activeElement;
                // If the new active element is a child of this zone and received focus,
                // update alignment an immediate descendant
                if (newActiveElement && newActiveElement !== _this._activeElement) {
                    if (isImmediateDescendant || initialElementFocused) {
                        _this._setFocusAlignment(newActiveElement, true, true);
                    }
                    _this._activeElement = newActiveElement;
                    if (initialElementFocused) {
                        _this._updateTabIndexes();
                    }
                }
                if (onActiveElementChanged) {
                    onActiveElementChanged(_this._activeElement, ev);
                }
                if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {
                    ev.stopPropagation();
                }
                if (onFocus) {
                    onFocus(ev);
                }
                else if (onFocusNotification) {
                    onFocusNotification();
                }
            };
            _this._onBlur = function () {
                _this._setParkedFocus(false);
            };
            _this._onMouseDown = function (ev) {
                if (_this._portalContainsElement(ev.target)) {
                    // If the event target is inside a portal do not process the event.
                    return;
                }
                var disabled = _this.props.disabled;
                if (disabled) {
                    return;
                }
                var target = ev.target;
                var path = [];
                while (target && target !== _this._root.current) {
                    path.push(target);
                    target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
                }
                while (path.length) {
                    target = path.pop();
                    if (target && isElementTabbable(target)) {
                        _this._setActiveElement(target, true);
                    }
                    if (isElementFocusZone(target)) {
                        // Stop here since the focus zone will take care of its own children.
                        break;
                    }
                }
            };
            /**
             * Handle the keystrokes.
             */
            _this._onKeyDown = function (ev, theme) {
                if (_this._portalContainsElement(ev.target)) {
                    // If the event target is inside a portal do not process the event.
                    return;
                }
                // eslint-disable-next-line deprecation/deprecation
                var _a = _this.props, direction = _a.direction, disabled = _a.disabled, isInnerZoneKeystroke = _a.isInnerZoneKeystroke, pagingSupportDisabled = _a.pagingSupportDisabled, shouldEnterInnerZone = _a.shouldEnterInnerZone;
                if (disabled) {
                    return;
                }
                if (_this.props.onKeyDown) {
                    _this.props.onKeyDown(ev);
                }
                // If the default has been prevented, do not process keyboard events.
                if (ev.isDefaultPrevented()) {
                    return;
                }
                if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {
                    // If this element has focus, it is being controlled by a parent.
                    // Ignore the keystroke.
                    return;
                }
                if (((shouldEnterInnerZone && shouldEnterInnerZone(ev)) || (isInnerZoneKeystroke && isInnerZoneKeystroke(ev))) &&
                    _this._isImmediateDescendantOfZone(ev.target)) {
                    // Try to focus
                    var innerZone = _this._getFirstInnerZone();
                    if (innerZone) {
                        if (!innerZone.focus(true)) {
                            return;
                        }
                    }
                    else if (isElementFocusSubZone(ev.target)) {
                        if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else if (ev.altKey) {
                    return;
                }
                else {
                    // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props, deprecation/deprecation
                    switch (ev.which) {
                        case KeyCodes.space:
                            if (_this._shouldRaiseClicksOnSpace && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                                break;
                            }
                            return;
                        case KeyCodes.left:
                            if (direction !== FocusZoneDirection.vertical) {
                                _this._preventDefaultWhenHandled(ev);
                                if (_this._moveFocusLeft(theme)) {
                                    break;
                                }
                            }
                            return;
                        case KeyCodes.right:
                            if (direction !== FocusZoneDirection.vertical) {
                                _this._preventDefaultWhenHandled(ev);
                                if (_this._moveFocusRight(theme)) {
                                    break;
                                }
                            }
                            return;
                        case KeyCodes.up:
                            if (direction !== FocusZoneDirection.horizontal) {
                                _this._preventDefaultWhenHandled(ev);
                                if (_this._moveFocusUp()) {
                                    break;
                                }
                            }
                            return;
                        case KeyCodes.down:
                            if (direction !== FocusZoneDirection.horizontal) {
                                _this._preventDefaultWhenHandled(ev);
                                if (_this._moveFocusDown()) {
                                    break;
                                }
                            }
                            return;
                        case KeyCodes.pageDown:
                            if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {
                                break;
                            }
                            return;
                        case KeyCodes.pageUp:
                            if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {
                                break;
                            }
                            return;
                        case KeyCodes.tab:
                            if (
                            // eslint-disable-next-line deprecation/deprecation
                            _this.props.allowTabKey ||
                                _this.props.handleTabKey === FocusZoneTabbableElements.all ||
                                (_this.props.handleTabKey === FocusZoneTabbableElements.inputOnly &&
                                    _this._isElementInput(ev.target))) {
                                var focusChanged = false;
                                _this._processingTabKey = true;
                                if (direction === FocusZoneDirection.vertical ||
                                    !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {
                                    focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();
                                }
                                else {
                                    var tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;
                                    focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);
                                }
                                _this._processingTabKey = false;
                                if (focusChanged) {
                                    break;
                                }
                                else if (_this.props.shouldResetActiveElementWhenTabFromZone) {
                                    _this._activeElement = null;
                                }
                            }
                            return;
                        case KeyCodes.home:
                            if (_this._isContentEditableElement(ev.target) ||
                                (_this._isElementInput(ev.target) &&
                                    !_this._shouldInputLoseFocus(ev.target, false))) {
                                return false;
                            }
                            var firstChild = _this._root.current && _this._root.current.firstChild;
                            if (_this._root.current &&
                                firstChild &&
                                _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {
                                break;
                            }
                            return;
                        case KeyCodes.end:
                            if (_this._isContentEditableElement(ev.target) ||
                                (_this._isElementInput(ev.target) &&
                                    !_this._shouldInputLoseFocus(ev.target, true))) {
                                return false;
                            }
                            var lastChild = _this._root.current && _this._root.current.lastChild;
                            if (_this._root.current &&
                                _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {
                                break;
                            }
                            return;
                        case KeyCodes.enter:
                            if (_this._shouldRaiseClicksOnEnter && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                                break;
                            }
                            return;
                        default:
                            return;
                    }
                }
                ev.preventDefault();
                ev.stopPropagation();
            };
            _this._getHorizontalDistanceFromCenter = function (isForward, activeRect, targetRect) {
                // eslint-disable-next-line deprecation/deprecation
                var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;
                // ClientRect values can be floats that differ by very small fractions of a decimal.
                // If the difference between top and bottom are within a pixel then we should treat
                // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,
                // but without Math.Floor they will be handled incorrectly.
                var targetRectTop = Math.floor(targetRect.top);
                var activeRectBottom = Math.floor(activeRect.bottom);
                var targetRectBottom = Math.floor(targetRect.bottom);
                var activeRectTop = Math.floor(activeRect.top);
                var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;
                var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;
                if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {
                    if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                        return 0;
                    }
                    return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
                }
                if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                    return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
                }
                return LARGE_DISTANCE_FROM_CENTER;
            };
            // Manage componentRef resolution.
            initializeComponentRef(_this);
            {
                warnDeprecations('FocusZone', props, {
                    rootProps: undefined,
                    allowTabKey: 'handleTabKey',
                    elementType: 'as',
                    ariaDescribedBy: 'aria-describedby',
                    ariaLabelledBy: 'aria-labelledby',
                });
            }
            _this._id = getId('FocusZone');
            _this._focusAlignment = {
                left: 0,
                top: 0,
            };
            _this._processingTabKey = false;
            var shouldRaiseClicksFallback = (_b = (_a = props.shouldRaiseClicks) !== null && _a !== void 0 ? _a : FocusZone.defaultProps.shouldRaiseClicks) !== null && _b !== void 0 ? _b : true;
            _this._shouldRaiseClicksOnEnter = (_c = props.shouldRaiseClicksOnEnter) !== null && _c !== void 0 ? _c : shouldRaiseClicksFallback;
            _this._shouldRaiseClicksOnSpace = (_d = props.shouldRaiseClicksOnSpace) !== null && _d !== void 0 ? _d : shouldRaiseClicksFallback;
            return _this;
        }
        /** Used for testing purposes only. */
        FocusZone.getOuterZones = function () {
            return _outerZones.size;
        };
        /**
         * Handle global tab presses so that we can patch tabindexes on the fly.
         * HEADS UP: This must not be an arrow function in order to be referentially equal among instances
         * for ref counting to work correctly!
         */
        FocusZone._onKeyDownCapture = function (ev) {
            // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props
            if (ev.which === KeyCodes.tab) {
                _outerZones.forEach(function (zone) { return zone._updateTabIndexes(); });
            }
        };
        FocusZone.prototype.componentDidMount = function () {
            var root = this._root.current;
            _allInstances[this._id] = this;
            if (root) {
                this._windowElement = getWindow(root);
                var parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);
                while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {
                    if (isElementFocusZone(parentElement)) {
                        this._isInnerZone = true;
                        break;
                    }
                    parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
                }
                if (!this._isInnerZone) {
                    _outerZones.add(this);
                    if (this._windowElement && _outerZones.size === 1) {
                        this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);
                    }
                }
                this._root.current && this._root.current.addEventListener('blur', this._onBlur, true);
                // Assign initial tab indexes so that we can set initial focus as appropriate.
                this._updateTabIndexes();
                if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {
                    this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);
                    // eslint-disable-next-line deprecation/deprecation
                }
                else if (this.props.defaultActiveElement) {
                    // eslint-disable-next-line deprecation/deprecation
                    this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);
                }
                if (this.props.shouldFocusOnMount) {
                    this.focus();
                }
            }
        };
        FocusZone.prototype.componentDidUpdate = function () {
            var root = this._root.current;
            var doc = this._getDocument();
            if (!this.props.preventFocusRestoration &&
                doc &&
                this._lastIndexPath &&
                (doc.activeElement === doc.body || doc.activeElement === null || doc.activeElement === root)) {
                // The element has been removed after the render, attempt to restore focus.
                var elementToFocus = getFocusableByIndexPath(root, this._lastIndexPath);
                if (elementToFocus) {
                    this._setActiveElement(elementToFocus, true);
                    elementToFocus.focus();
                    this._setParkedFocus(false);
                }
                else {
                    // We had a focus path to restore, but now that path is unresolvable. Park focus
                    // on the container until we can try again.
                    this._setParkedFocus(true);
                }
            }
        };
        FocusZone.prototype.componentWillUnmount = function () {
            delete _allInstances[this._id];
            if (!this._isInnerZone) {
                _outerZones.delete(this);
                // If this is the last outer zone, remove the keydown listener.
                if (this._windowElement && _outerZones.size === 0) {
                    this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);
                }
            }
            if (this._root.current) {
                this._root.current.removeEventListener('blur', this._onBlur, true);
            }
            this._activeElement = null;
            this._defaultFocusElement = null;
        };
        FocusZone.prototype.render = function () {
            var _this = this;
            // eslint-disable-next-line deprecation/deprecation
            var _a = this.props, tag = _a.as, elementType = _a.elementType, rootProps = _a.rootProps, ariaDescribedBy = _a.ariaDescribedBy, ariaLabelledBy = _a.ariaLabelledBy, className = _a.className;
            var divProps = getNativeProps(this.props, htmlElementProperties);
            var Tag = tag || elementType || 'div';
            // Note, right before rendering/reconciling proceeds, we need to record if focus
            // was in the zone before the update. This helper will track this and, if focus
            // was actually in the zone, what the index path to the element is at this time.
            // Then, later in componentDidUpdate, we can evaluate if we need to restore it in
            // the case the element was removed.
            this._evaluateFocusBeforeRender();
            // Only support RTL defined in global theme, not contextual theme/RTL.
            var theme = getTheme();
            return (React__namespace.createElement(Tag, tslib.__assign({ "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }, divProps, rootProps, { 
                // Once the getClassName correctly memoizes inputs this should
                // be replaced so that className is passed to getRootClass and is included there so
                // the class names will always be in the same order.
                className: css(getRootClass(), className), 
                // eslint-disable-next-line deprecation/deprecation
                ref: this._mergedRef(this.props.elementRef, this._root), "data-focuszone-id": this._id, 
                // eslint-disable-next-line react/jsx-no-bind
                onKeyDown: function (ev) { return _this._onKeyDown(ev, theme); }, onFocus: this._onFocus, onMouseDownCapture: this._onMouseDown }), this.props.children));
        };
        /**
         * Sets focus to the first tabbable item in the zone.
         * @param forceIntoFirstElement - If true, focus will be forced into the first element, even
         * if focus is already in the focus zone.
         * @returns True if focus could be set to an active element, false if no operation was taken.
         */
        FocusZone.prototype.focus = function (forceIntoFirstElement) {
            if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }
            if (this._root.current) {
                if (!forceIntoFirstElement &&
                    this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&
                    this._isInnerZone) {
                    var ownerZoneElement = this._getOwnerZone(this._root.current);
                    if (ownerZoneElement !== this._root.current) {
                        var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];
                        return !!ownerZone && ownerZone.focusElement(this._root.current);
                    }
                    return false;
                }
                else if (!forceIntoFirstElement &&
                    this._activeElement &&
                    elementContains(this._root.current, this._activeElement) &&
                    isElementTabbable(this._activeElement)) {
                    this._activeElement.focus();
                    return true;
                }
                else {
                    var firstChild = this._root.current.firstChild;
                    return this.focusElement(getNextElement(this._root.current, firstChild, true));
                }
            }
            return false;
        };
        /**
         * Sets focus to the last tabbable item in the zone.
         * @returns True if focus could be set to an active element, false if no operation was taken.
         */
        FocusZone.prototype.focusLast = function () {
            if (this._root.current) {
                var lastChild = this._root.current && this._root.current.lastChild;
                return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));
            }
            return false;
        };
        /**
         * Sets focus to a specific child element within the zone. This can be used in conjunction with
         * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct
         * location and then focus.)
         * @param element - The child element within the zone to focus.
         * @param forceAlignment - If true, focus alignment will be set according to the element provided.
         * @returns True if focus could be set to an active element, false if no operation was taken.
         */
        FocusZone.prototype.focusElement = function (element, forceAlignment) {
            // eslint-disable-next-line deprecation/deprecation
            var _a = this.props, onBeforeFocus = _a.onBeforeFocus, shouldReceiveFocus = _a.shouldReceiveFocus;
            if ((shouldReceiveFocus && !shouldReceiveFocus(element)) || (onBeforeFocus && !onBeforeFocus(element))) {
                return false;
            }
            if (element) {
                // when we set focus to a specific child, we should recalculate the alignment depending on its position.
                this._setActiveElement(element, forceAlignment);
                if (this._activeElement) {
                    this._activeElement.focus();
                }
                return true;
            }
            return false;
        };
        /**
         * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,
         * rather than a center based on the last horizontal motion.
         * @param point - the new reference point.
         */
        FocusZone.prototype.setFocusAlignment = function (point) {
            this._focusAlignment = point;
        };
        FocusZone.prototype._evaluateFocusBeforeRender = function () {
            var root = this._root.current;
            var doc = this._getDocument();
            if (doc) {
                var focusedElement = doc.activeElement;
                // Only update the index path if we are not parked on the root.
                if (focusedElement !== root) {
                    var shouldRestoreFocus = elementContains(root, focusedElement, false);
                    this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root, focusedElement) : undefined;
                }
            }
        };
        /**
         * When focus is in the zone at render time but then all focusable elements are removed,
         * we "park" focus temporarily on the root. Once we update with focusable children, we restore
         * focus to the closest path from previous. If the user tabs away from the parked container,
         * we restore focusability to the pre-parked state.
         */
        FocusZone.prototype._setParkedFocus = function (isParked) {
            var root = this._root.current;
            if (root && this._isParked !== isParked) {
                this._isParked = isParked;
                if (isParked) {
                    if (!this.props.allowFocusRoot) {
                        this._parkedTabIndex = root.getAttribute('tabindex');
                        root.setAttribute('tabindex', '-1');
                    }
                    root.focus();
                }
                else if (!this.props.allowFocusRoot) {
                    if (this._parkedTabIndex) {
                        root.setAttribute('tabindex', this._parkedTabIndex);
                        this._parkedTabIndex = undefined;
                    }
                    else {
                        root.removeAttribute('tabindex');
                    }
                }
            }
        };
        FocusZone.prototype._setActiveElement = function (element, forceAlignment) {
            var previousActiveElement = this._activeElement;
            this._activeElement = element;
            if (previousActiveElement) {
                if (isElementFocusZone(previousActiveElement)) {
                    this._updateTabIndexes(previousActiveElement);
                }
                previousActiveElement.tabIndex = -1;
            }
            if (this._activeElement) {
                if (!this._focusAlignment || forceAlignment) {
                    this._setFocusAlignment(element, true, true);
                }
                this._activeElement.tabIndex = 0;
            }
        };
        FocusZone.prototype._preventDefaultWhenHandled = function (ev) {
            this.props.preventDefaultWhenHandled && ev.preventDefault();
        };
        /**
         * Walk up the dom try to find a focusable element.
         */
        FocusZone.prototype._tryInvokeClickForFocusable = function (targetElement, ev) {
            var target = targetElement;
            if (target === this._root.current) {
                return false;
            }
            do {
                if (target.tagName === 'BUTTON' ||
                    target.tagName === 'A' ||
                    target.tagName === 'INPUT' ||
                    target.tagName === 'TEXTAREA') {
                    return false;
                }
                if (this._isImmediateDescendantOfZone(target) &&
                    target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&
                    target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {
                    raiseClickFromKeyboardEvent(target, ev);
                    return true;
                }
                target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
            } while (target !== this._root.current);
            return false;
        };
        /**
         * Traverse to find first child zone.
         */
        FocusZone.prototype._getFirstInnerZone = function (rootElement) {
            rootElement = rootElement || this._activeElement || this._root.current;
            if (!rootElement) {
                return null;
            }
            if (isElementFocusZone(rootElement)) {
                return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];
            }
            var child = rootElement.firstElementChild;
            while (child) {
                if (isElementFocusZone(child)) {
                    return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];
                }
                var match = this._getFirstInnerZone(child);
                if (match) {
                    return match;
                }
                child = child.nextElementSibling;
            }
            return null;
        };
        FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev, useDefaultWrap) {
            if (useDefaultWrap === void 0) { useDefaultWrap = true; }
            var element = this._activeElement;
            var candidateDistance = -1;
            var candidateElement = undefined;
            var changedFocus = false;
            var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;
            if (!element || !this._root.current) {
                return false;
            }
            if (this._isElementInput(element)) {
                if (!this._shouldInputLoseFocus(element, isForward)) {
                    return false;
                }
            }
            var activeRect = isBidirectional ? element.getBoundingClientRect() : null;
            do {
                element = (isForward
                    ? getNextElement(this._root.current, element)
                    : getPreviousElement(this._root.current, element));
                if (isBidirectional) {
                    if (element) {
                        var targetRect = element.getBoundingClientRect();
                        var elementDistance = getDistanceFromCenter(activeRect, targetRect);
                        if (elementDistance === -1 && candidateDistance === -1) {
                            candidateElement = element;
                            break;
                        }
                        if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {
                            candidateDistance = elementDistance;
                            candidateElement = element;
                        }
                        if (candidateDistance >= 0 && elementDistance < 0) {
                            break;
                        }
                    }
                }
                else {
                    candidateElement = element;
                    break;
                }
            } while (element);
            // Focus the closest candidate
            if (candidateElement && candidateElement !== this._activeElement) {
                changedFocus = true;
                this.focusElement(candidateElement);
            }
            else if (this.props.isCircularNavigation && useDefaultWrap) {
                if (isForward) {
                    return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
                }
                else {
                    return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
                }
            }
            return changedFocus;
        };
        FocusZone.prototype._moveFocusDown = function () {
            var _this = this;
            var targetTop = -1;
            // eslint-disable-next-line deprecation/deprecation
            var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
            if (this._moveFocus(true, function (activeRect, targetRect) {
                var distance = -1;
                // ClientRect values can be floats that differ by very small fractions of a decimal.
                // If the difference between top and bottom are within a pixel then we should treat
                // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,
                // but without Math.Floor they will be handled incorrectly.
                var targetRectTop = Math.floor(targetRect.top);
                var activeRectBottom = Math.floor(activeRect.bottom);
                if (targetRectTop < activeRectBottom) {
                    if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
                    }
                    return LARGE_DISTANCE_FROM_CENTER;
                }
                if ((targetTop === -1 && targetRectTop >= activeRectBottom) || targetRectTop === targetTop) {
                    targetTop = targetRectTop;
                    if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                        distance = 0;
                    }
                    else {
                        distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
                    }
                }
                return distance;
            })) {
                this._setFocusAlignment(this._activeElement, false, true);
                return true;
            }
            return false;
        };
        FocusZone.prototype._moveFocusUp = function () {
            var _this = this;
            var targetTop = -1;
            // eslint-disable-next-line deprecation/deprecation
            var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
            if (this._moveFocus(false, function (activeRect, targetRect) {
                var distance = -1;
                // ClientRect values can be floats that differ by very small fractions of a decimal.
                // If the difference between top and bottom are within a pixel then we should treat
                // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,
                // but without Math.Floor they will be handled incorrectly.
                var targetRectBottom = Math.floor(targetRect.bottom);
                var targetRectTop = Math.floor(targetRect.top);
                var activeRectTop = Math.floor(activeRect.top);
                if (targetRectBottom > activeRectTop) {
                    if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
                    }
                    return LARGE_DISTANCE_FROM_CENTER;
                }
                if ((targetTop === -1 && targetRectBottom <= activeRectTop) || targetRectTop === targetTop) {
                    targetTop = targetRectTop;
                    if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                        distance = 0;
                    }
                    else {
                        distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
                    }
                }
                return distance;
            })) {
                this._setFocusAlignment(this._activeElement, false, true);
                return true;
            }
            return false;
        };
        FocusZone.prototype._moveFocusLeft = function (theme) {
            var _this = this;
            var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
            if (this._moveFocus(getRTL(theme), function (activeRect, targetRect) {
                var distance = -1;
                var topBottomComparison;
                if (getRTL(theme)) {
                    // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.
                    // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.
                    // This is important, because we want to be comparing the top of the target rect
                    // with the bottom of the active rect.
                    topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
                }
                else {
                    topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
                }
                if (topBottomComparison &&
                    targetRect.right <= activeRect.right &&
                    _this.props.direction !== FocusZoneDirection.vertical) {
                    distance = activeRect.right - targetRect.right;
                }
                else if (!shouldWrap) {
                    distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
                }
                return distance;
            }, undefined /*ev*/, shouldWrap)) {
                this._setFocusAlignment(this._activeElement, true, false);
                return true;
            }
            return false;
        };
        FocusZone.prototype._moveFocusRight = function (theme) {
            var _this = this;
            var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
            if (this._moveFocus(!getRTL(theme), function (activeRect, targetRect) {
                var distance = -1;
                var topBottomComparison;
                if (getRTL(theme)) {
                    // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.
                    // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.
                    // This is important, because we want to be comparing the bottom of the target rect
                    // with the top of the active rect.
                    topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
                }
                else {
                    topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
                }
                if (topBottomComparison &&
                    targetRect.left >= activeRect.left &&
                    _this.props.direction !== FocusZoneDirection.vertical) {
                    distance = targetRect.left - activeRect.left;
                }
                else if (!shouldWrap) {
                    distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
                }
                return distance;
            }, undefined /*ev*/, shouldWrap)) {
                this._setFocusAlignment(this._activeElement, true, false);
                return true;
            }
            return false;
        };
        FocusZone.prototype._moveFocusPaging = function (isForward, useDefaultWrap) {
            if (useDefaultWrap === void 0) { useDefaultWrap = true; }
            var element = this._activeElement;
            if (!element || !this._root.current) {
                return false;
            }
            if (this._isElementInput(element)) {
                if (!this._shouldInputLoseFocus(element, isForward)) {
                    return false;
                }
            }
            var scrollableParent = findScrollableParent(element);
            if (!scrollableParent) {
                return false;
            }
            var candidateDistance = -1;
            var candidateElement = undefined;
            var targetTop = -1;
            var targetBottom = -1;
            var pagesize = scrollableParent.clientHeight;
            var activeRect = element.getBoundingClientRect();
            do {
                element = isForward
                    ? getNextElement(this._root.current, element)
                    : getPreviousElement(this._root.current, element);
                if (element) {
                    var targetRect = element.getBoundingClientRect();
                    var targetRectTop = Math.floor(targetRect.top);
                    var activeRectBottom = Math.floor(activeRect.bottom);
                    var targetRectBottom = Math.floor(targetRect.bottom);
                    var activeRectTop = Math.floor(activeRect.top);
                    var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);
                    var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;
                    var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;
                    if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {
                        break;
                    }
                    if (elementDistance > -1) {
                        // for paging down
                        if (isForward && targetRectTop > targetTop) {
                            targetTop = targetRectTop;
                            candidateDistance = elementDistance;
                            candidateElement = element;
                        }
                        else if (!isForward && targetRectBottom < targetBottom) {
                            // for paging up
                            targetBottom = targetRectBottom;
                            candidateDistance = elementDistance;
                            candidateElement = element;
                        }
                        else if (candidateDistance === -1 || elementDistance <= candidateDistance) {
                            candidateDistance = elementDistance;
                            candidateElement = element;
                        }
                    }
                }
            } while (element);
            var changedFocus = false;
            // Focus the closest candidate
            if (candidateElement && candidateElement !== this._activeElement) {
                changedFocus = true;
                this.focusElement(candidateElement);
                this._setFocusAlignment(candidateElement, false, true);
            }
            else if (this.props.isCircularNavigation && useDefaultWrap) {
                if (isForward) {
                    return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
                }
                return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
            }
            return changedFocus;
        };
        FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {
            if (this.props.direction === FocusZoneDirection.bidirectional &&
                (!this._focusAlignment || isHorizontal || isVertical)) {
                var rect = element.getBoundingClientRect();
                var left = rect.left + rect.width / 2;
                var top_1 = rect.top + rect.height / 2;
                if (!this._focusAlignment) {
                    this._focusAlignment = { left: left, top: top_1 };
                }
                if (isHorizontal) {
                    this._focusAlignment.left = left;
                }
                if (isVertical) {
                    this._focusAlignment.top = top_1;
                }
            }
        };
        FocusZone.prototype._isImmediateDescendantOfZone = function (element) {
            return this._getOwnerZone(element) === this._root.current;
        };
        FocusZone.prototype._getOwnerZone = function (element) {
            var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);
            while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {
                if (isElementFocusZone(parentElement)) {
                    return parentElement;
                }
                parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
            }
            return parentElement;
        };
        FocusZone.prototype._updateTabIndexes = function (element) {
            if (!this._activeElement &&
                this.props.defaultTabbableElement &&
                typeof this.props.defaultTabbableElement === 'function') {
                this._activeElement = this.props.defaultTabbableElement(this._root.current);
            }
            if (!element && this._root.current) {
                this._defaultFocusElement = null;
                element = this._root.current;
                if (this._activeElement && !elementContains(element, this._activeElement)) {
                    this._activeElement = null;
                }
            }
            // If active element changes state to disabled, set it to null.
            // Otherwise, we lose keyboard accessibility to other elements in focus zone.
            if (this._activeElement && !isElementTabbable(this._activeElement)) {
                this._activeElement = null;
            }
            var childNodes = element && element.children;
            for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {
                var child = childNodes[childIndex];
                if (!isElementFocusZone(child)) {
                    // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.
                    if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {
                        child.setAttribute(TABINDEX, '-1');
                    }
                    if (isElementTabbable(child)) {
                        if (this.props.disabled) {
                            child.setAttribute(TABINDEX, '-1');
                        }
                        else if (!this._isInnerZone &&
                            ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)) {
                            this._defaultFocusElement = child;
                            if (child.getAttribute(TABINDEX) !== '0') {
                                child.setAttribute(TABINDEX, '0');
                            }
                        }
                        else if (child.getAttribute(TABINDEX) !== '-1') {
                            child.setAttribute(TABINDEX, '-1');
                        }
                    }
                    else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {
                        // Disgusting IE hack. Sad face.
                        child.setAttribute('focusable', 'false');
                    }
                }
                else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {
                    if (!this._isInnerZone &&
                        ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)) {
                        this._defaultFocusElement = child;
                        if (child.getAttribute(TABINDEX) !== '0') {
                            child.setAttribute(TABINDEX, '0');
                        }
                    }
                    else if (child.getAttribute(TABINDEX) !== '-1') {
                        child.setAttribute(TABINDEX, '-1');
                    }
                }
                this._updateTabIndexes(child);
            }
        };
        FocusZone.prototype._isContentEditableElement = function (element) {
            return element && element.getAttribute('contenteditable') === 'true';
        };
        FocusZone.prototype._isElementInput = function (element) {
            if (element &&
                element.tagName &&
                (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {
                return true;
            }
            return false;
        };
        FocusZone.prototype._shouldInputLoseFocus = function (element, isForward) {
            // If a tab was used, we want to focus on the next element.
            if (!this._processingTabKey &&
                element &&
                element.type &&
                ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {
                var selectionStart = element.selectionStart;
                var selectionEnd = element.selectionEnd;
                var isRangeSelected = selectionStart !== selectionEnd;
                var inputValue = element.value;
                var isReadonly = element.readOnly;
                // We shouldn't lose focus in the following cases:
                // 1. There is range selected.
                // 2. When selection start is larger than 0 and it is backward and not readOnly.
                // 3. when selection start is not the end of length, it is forward and not readOnly.
                // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit
                // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is
                // determined by calling the callback shouldInputLoseFocusOnArrowKey
                if (isRangeSelected ||
                    (selectionStart > 0 && !isForward && !isReadonly) ||
                    (selectionStart !== inputValue.length && isForward && !isReadonly) ||
                    (!!this.props.handleTabKey &&
                        !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element)))) {
                    return false;
                }
            }
            return true;
        };
        FocusZone.prototype._shouldWrapFocus = function (element, noWrapDataAttribute) {
            return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;
        };
        /**
         * Returns true if the element is a descendant of the FocusZone through a React portal.
         */
        FocusZone.prototype._portalContainsElement = function (element) {
            return element && !!this._root.current && portalContainsElement(element, this._root.current);
        };
        FocusZone.prototype._getDocument = function () {
            return getDocument(this._root.current);
        };
        FocusZone.defaultProps = {
            isCircularNavigation: false,
            direction: FocusZoneDirection.bidirectional,
            shouldRaiseClicks: true,
        };
        return FocusZone;
    }(React__namespace.Component));

    var getClassNames$1l = classNamesFunction();
    /**
     * The useLink hook processes the Link component props and returns
     * state, slots and slotProps for consumption by the component.
     */
    var useLink = function (props, forwardedRef) {
        var as = props.as, className = props.className, disabled = props.disabled, href = props.href, onClick = props.onClick, styles = props.styles, theme = props.theme, underline = props.underline;
        var rootRef = React__namespace.useRef(null);
        var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);
        useComponentRef$5(props, rootRef);
        useFocusRects(rootRef);
        var classNames = getClassNames$1l(styles, {
            className: className,
            isButton: !href,
            isDisabled: disabled,
            isUnderlined: underline,
            theme: theme,
        });
        var _onClick = function (ev) {
            if (disabled) {
                ev.preventDefault();
            }
            else if (onClick) {
                onClick(ev);
            }
        };
        var rootType = as ? as : href ? 'a' : 'button';
        var state = {};
        var slots = { root: rootType };
        var slotProps = {
            root: tslib.__assign(tslib.__assign({}, adjustPropsForRootType(rootType, props)), { 'aria-disabled': disabled, className: classNames.root, onClick: _onClick, ref: mergedRootRefs }),
        };
        return { state: state, slots: slots, slotProps: slotProps };
    };
    var useComponentRef$5 = function (props, link) {
        React__namespace.useImperativeHandle(props.componentRef, function () { return ({
            focus: function () {
                if (link.current) {
                    link.current.focus();
                }
            },
        }); }, [link]);
    };
    var adjustPropsForRootType = function (RootType, props) {
        // Deconstruct the props so we remove props like `as`, `theme` and `styles`
        // as those will always be removed. We also take some props that are optional
        // based on the RootType.
        props.as; var disabled = props.disabled, target = props.target, href = props.href; props.theme; props.getStyles; props.styles; props.componentRef; props.underline; var restProps = tslib.__rest(props, ["as", "disabled", "target", "href", "theme", "getStyles", "styles", "componentRef", "underline"]);
        // RootType will be a string if we're dealing with an html component
        if (typeof RootType === 'string') {
            // Remove the disabled prop for anchor elements
            if (RootType === 'a') {
                return tslib.__assign({ target: target, href: disabled ? undefined : href }, restProps);
            }
            // Add the type='button' prop for button elements
            if (RootType === 'button') {
                return tslib.__assign({ type: 'button', disabled: disabled }, restProps);
            }
            // Remove the target and href props for all other non anchor elements
            return tslib.__assign(tslib.__assign({}, restProps), { disabled: disabled });
        }
        // Retain all props except 'as' for ReactComponents
        return tslib.__assign({ target: target, href: href, disabled: disabled }, restProps);
    };

    var LinkBase = React__namespace.forwardRef(function (props, ref) {
        var _a = useLink(props, ref), slots = _a.slots, slotProps = _a.slotProps;
        return React__namespace.createElement(slots.root, tslib.__assign({}, slotProps.root));
    });
    LinkBase.displayName = 'LinkBase';

    var GlobalClassNames$p = {
        root: 'ms-Link',
    };
    var getStyles$B = function (props) {
        var _a, _b, _c, _d, _e, _f;
        var className = props.className, isButton = props.isButton, isDisabled = props.isDisabled, isUnderlined = props.isUnderlined, theme = props.theme;
        var semanticColors = theme.semanticColors;
        // Tokens
        var linkColor = semanticColors.link;
        var linkInteractedColor = semanticColors.linkHovered;
        var linkDisabledColor = semanticColors.disabledText;
        var focusBorderColor = semanticColors.focusBorder;
        var classNames = getGlobalClassNames(GlobalClassNames$p, theme);
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                {
                    color: linkColor,
                    outline: 'none',
                    fontSize: 'inherit',
                    fontWeight: 'inherit',
                    textDecoration: isUnderlined ? 'underline' : 'none',
                    selectors: (_a = {
                            '.ms-Fabric--isFocusVisible &:focus': {
                                // Can't use getFocusStyle because it doesn't support wrapping links
                                // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543
                                // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines
                                // and helps the focus rect avoid getting clipped.
                                boxShadow: "0 0 0 1px " + focusBorderColor + " inset",
                                outline: "1px auto " + focusBorderColor,
                                selectors: (_b = {},
                                    _b[HighContrastSelector] = {
                                        outline: '1px solid WindowText',
                                    },
                                    _b),
                            }
                        },
                        _a[HighContrastSelector] = {
                            // For IE high contrast mode
                            borderBottom: 'none',
                        },
                        _a),
                },
                isButton && {
                    background: 'none',
                    backgroundColor: 'transparent',
                    border: 'none',
                    cursor: 'pointer',
                    display: 'inline',
                    margin: 0,
                    overflow: 'inherit',
                    padding: 0,
                    textAlign: 'left',
                    textOverflow: 'inherit',
                    userSelect: 'text',
                    borderBottom: '1px solid transparent',
                    selectors: (_c = {},
                        _c[HighContrastSelector] = {
                            color: 'LinkText',
                            forcedColorAdjust: 'none',
                        },
                        _c),
                },
                !isButton && {
                    selectors: (_d = {},
                        _d[HighContrastSelector] = {
                            // This is mainly for MessageBar, which sets MsHighContrastAdjust: none by default
                            MsHighContrastAdjust: 'auto',
                            forcedColorAdjust: 'auto',
                        },
                        _d),
                },
                isDisabled && [
                    'is-disabled',
                    {
                        color: linkDisabledColor,
                        cursor: 'default',
                    },
                    {
                        selectors: {
                            '&:link, &:visited': {
                                pointerEvents: 'none',
                            },
                        },
                    },
                ],
                !isDisabled && {
                    selectors: {
                        '&:active, &:hover, &:active:hover': {
                            color: linkInteractedColor,
                            textDecoration: 'underline',
                            selectors: (_e = {},
                                _e[HighContrastSelector] = {
                                    color: 'LinkText',
                                },
                                _e),
                        },
                        '&:focus': {
                            color: linkColor,
                            selectors: (_f = {},
                                _f[HighContrastSelector] = {
                                    color: 'LinkText',
                                },
                                _f),
                        },
                    },
                },
                classNames.root,
                className,
            ],
        };
    };

    var Link$1 = styled(LinkBase, getStyles$B, undefined, {
        scope: 'Link',
    });

    /**
     * {@docCategory ContextualMenu}
     */
    var ContextualMenuItemType;
    (function (ContextualMenuItemType) {
        ContextualMenuItemType[ContextualMenuItemType["Normal"] = 0] = "Normal";
        ContextualMenuItemType[ContextualMenuItemType["Divider"] = 1] = "Divider";
        ContextualMenuItemType[ContextualMenuItemType["Header"] = 2] = "Header";
        ContextualMenuItemType[ContextualMenuItemType["Section"] = 3] = "Section";
    })(ContextualMenuItemType || (ContextualMenuItemType = {}));

    /**
     * Determines the effective checked state of a menu item.
     *
     * @param item {IContextualMenuItem} to get the check state of.
     * @returns {true} if the item is checked.
     * @returns {false} if the item is unchecked.
     * @returns {null} if the item is not checkable.
     */
    function getIsChecked(item) {
        if (item.canCheck) {
            return !!(item.isChecked || item.checked);
        }
        if (typeof item.isChecked === 'boolean') {
            return item.isChecked;
        }
        if (typeof item.checked === 'boolean') {
            return item.checked;
        }
        // Item is not checkable.
        return null;
    }
    function hasSubmenu(item) {
        // eslint-disable-next-line deprecation/deprecation
        return !!(item.subMenuProps || item.items);
    }
    function isItemDisabled(item) {
        return !!(item.isDisabled || item.disabled);
    }
    function getMenuItemAriaRole(item) {
        var isChecked = getIsChecked(item);
        var canCheck = isChecked !== null;
        return canCheck ? 'menuitemcheckbox' : 'menuitem';
    }

    var defaultIconRenderer = function (props) {
        var item = props.item, classNames = props.classNames;
        var iconProps = item.iconProps;
        return React__namespace.createElement(Icon$1, tslib.__assign({}, iconProps, { className: classNames.icon }));
    };
    var renderItemIcon = function (props) {
        var item = props.item, hasIcons = props.hasIcons;
        if (!hasIcons) {
            return null;
        }
        if (item.onRenderIcon) {
            return item.onRenderIcon(props, defaultIconRenderer);
        }
        return defaultIconRenderer(props);
    };
    var renderCheckMarkIcon = function (_a) {
        var onCheckmarkClick = _a.onCheckmarkClick, item = _a.item, classNames = _a.classNames;
        var isItemChecked = getIsChecked(item);
        if (onCheckmarkClick) {
            // Ensures that the item is passed as the first argument to the checkmark click callback.
            var onClick = function (e) { return onCheckmarkClick(item, e); };
            return (React__namespace.createElement(Icon$1, { iconName: item.canCheck !== false && isItemChecked ? 'CheckMark' : '', className: classNames.checkmarkIcon, 
                // eslint-disable-next-line react/jsx-no-bind
                onClick: onClick }));
        }
        return null;
    };
    var renderItemName = function (_a) {
        var item = _a.item, classNames = _a.classNames;
        /* eslint-disable deprecation/deprecation */
        if (item.text || item.name) {
            return React__namespace.createElement("span", { className: classNames.label }, item.text || item.name);
        }
        /* eslint-enable deprecation/deprecation */
        return null;
    };
    var renderSecondaryText = function (_a) {
        var item = _a.item, classNames = _a.classNames;
        if (item.secondaryText) {
            return React__namespace.createElement("span", { className: classNames.secondaryText }, item.secondaryText);
        }
        return null;
    };
    var renderSubMenuIcon = function (_a) {
        var item = _a.item, classNames = _a.classNames, theme = _a.theme;
        if (hasSubmenu(item)) {
            return (React__namespace.createElement(Icon$1, tslib.__assign({ iconName: getRTL(theme) ? 'ChevronLeft' : 'ChevronRight' }, item.submenuIconProps, { className: classNames.subMenuIcon })));
        }
        return null;
    };
    var ContextualMenuItemBase = /** @class */ (function (_super) {
        tslib.__extends(ContextualMenuItemBase, _super);
        function ContextualMenuItemBase(props) {
            var _this = _super.call(this, props) || this;
            _this.openSubMenu = function () {
                var _a = _this.props, item = _a.item, openSubMenu = _a.openSubMenu, getSubmenuTarget = _a.getSubmenuTarget;
                if (getSubmenuTarget) {
                    var submenuTarget = getSubmenuTarget();
                    if (hasSubmenu(item) && openSubMenu && submenuTarget) {
                        openSubMenu(item, submenuTarget);
                    }
                }
            };
            _this.dismissSubMenu = function () {
                var _a = _this.props, item = _a.item, dismissSubMenu = _a.dismissSubMenu;
                if (hasSubmenu(item) && dismissSubMenu) {
                    dismissSubMenu();
                }
            };
            _this.dismissMenu = function (dismissAll) {
                var dismissMenu = _this.props.dismissMenu;
                if (dismissMenu) {
                    dismissMenu(undefined /* ev */, dismissAll);
                }
            };
            initializeComponentRef(_this);
            return _this;
        }
        ContextualMenuItemBase.prototype.render = function () {
            var _a = this.props, item = _a.item, classNames = _a.classNames;
            var renderContent = item.onRenderContent || this._renderLayout;
            return (React__namespace.createElement("div", { className: item.split ? classNames.linkContentMenu : classNames.linkContent }, renderContent(this.props, {
                renderCheckMarkIcon: renderCheckMarkIcon,
                renderItemIcon: renderItemIcon,
                renderItemName: renderItemName,
                renderSecondaryText: renderSecondaryText,
                renderSubMenuIcon: renderSubMenuIcon,
            })));
        };
        ContextualMenuItemBase.prototype._renderLayout = function (props, defaultRenders) {
            return (React__namespace.createElement(React__namespace.Fragment, null,
                defaultRenders.renderCheckMarkIcon(props),
                defaultRenders.renderItemIcon(props),
                defaultRenders.renderItemName(props),
                defaultRenders.renderSecondaryText(props),
                defaultRenders.renderSubMenuIcon(props)));
        };
        return ContextualMenuItemBase;
    }(React__namespace.Component));

    /**
     * @deprecated use getStyles exported from VerticalDivider.styles.ts
     */
    var getDividerClassNames = memoizeFunction(
    // eslint-disable-next-line deprecation/deprecation
    function (theme) {
        return mergeStyleSets({
            wrapper: {
                display: 'inline-flex',
                height: '100%',
                alignItems: 'center',
            },
            divider: {
                width: 1,
                height: '100%',
                backgroundColor: theme.palette.neutralTertiaryAlt,
            },
        });
    });

    var CONTEXTUAL_MENU_ITEM_HEIGHT = 36;
    var MediumScreenSelector$1 = getScreenSelector(0, ScreenWidthMaxMedium);
    var getItemHighContrastStyles = memoizeFunction(function () {
        var _a;
        return {
            selectors: (_a = {},
                _a[HighContrastSelector] = tslib.__assign({ backgroundColor: 'Highlight', borderColor: 'Highlight', color: 'HighlightText' }, getHighContrastNoAdjustStyle()),
                _a),
        };
    });
    var getMenuItemStyles = memoizeFunction(function (theme) {
        var _a, _b, _c, _d, _e, _f, _g;
        var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette;
        var ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;
        var ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;
        var ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;
        var ContextualMenuItemDividerColor = semanticColors.bodyDivider;
        var menuItemStyles = {
            item: [
                fonts.medium,
                {
                    color: semanticColors.bodyText,
                    position: 'relative',
                    boxSizing: 'border-box',
                },
            ],
            divider: {
                display: 'block',
                height: '1px',
                backgroundColor: ContextualMenuItemDividerColor,
                position: 'relative',
            },
            root: [
                getFocusStyle(theme),
                fonts.medium,
                {
                    color: semanticColors.bodyText,
                    backgroundColor: 'transparent',
                    border: 'none',
                    width: '100%',
                    height: CONTEXTUAL_MENU_ITEM_HEIGHT,
                    lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
                    display: 'block',
                    cursor: 'pointer',
                    padding: '0px 8px 0 4px',
                    textAlign: 'left',
                },
            ],
            rootDisabled: {
                color: semanticColors.disabledBodyText,
                cursor: 'default',
                pointerEvents: 'none',
                selectors: (_a = {},
                    _a[HighContrastSelector] = tslib.__assign({ color: 'GrayText', opacity: 1 }, getHighContrastNoAdjustStyle()),
                    _a),
            },
            rootHovered: tslib.__assign({ backgroundColor: ContextualMenuItemBackgroundHoverColor, color: ContextualMenuItemTextHoverColor, selectors: {
                    '.ms-ContextualMenu-icon': {
                        color: palette.themeDarkAlt,
                    },
                    '.ms-ContextualMenu-submenuIcon': {
                        color: palette.neutralPrimary,
                    },
                } }, getItemHighContrastStyles()),
            rootFocused: tslib.__assign({ backgroundColor: palette.white }, getItemHighContrastStyles()),
            rootChecked: tslib.__assign({ selectors: {
                    '.ms-ContextualMenu-checkmarkIcon': {
                        color: palette.neutralPrimary,
                    },
                } }, getItemHighContrastStyles()),
            rootPressed: tslib.__assign({ backgroundColor: ContextualMenuItemBackgroundSelectedColor, selectors: {
                    '.ms-ContextualMenu-icon': {
                        color: palette.themeDark,
                    },
                    '.ms-ContextualMenu-submenuIcon': {
                        color: palette.neutralPrimary,
                    },
                } }, getItemHighContrastStyles()),
            rootExpanded: tslib.__assign({ backgroundColor: ContextualMenuItemBackgroundSelectedColor, color: semanticColors.bodyTextChecked }, getItemHighContrastStyles()),
            linkContent: {
                whiteSpace: 'nowrap',
                height: 'inherit',
                display: 'flex',
                alignItems: 'center',
                maxWidth: '100%',
            },
            anchorLink: {
                padding: '0px 8px 0 4px',
                textRendering: 'auto',
                color: 'inherit',
                letterSpacing: 'normal',
                wordSpacing: 'normal',
                textTransform: 'none',
                textIndent: '0px',
                textShadow: 'none',
                textDecoration: 'none',
                boxSizing: 'border-box',
            },
            label: {
                margin: '0 4px',
                verticalAlign: 'middle',
                display: 'inline-block',
                flexGrow: '1',
                textOverflow: 'ellipsis',
                whiteSpace: 'nowrap',
            },
            secondaryText: {
                color: theme.palette.neutralSecondary,
                paddingLeft: '20px',
                textAlign: 'right',
            },
            icon: {
                display: 'inline-block',
                minHeight: '1px',
                maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
                fontSize: IconFontSizes.medium,
                width: IconFontSizes.medium,
                margin: '0 4px',
                verticalAlign: 'middle',
                flexShrink: '0',
                selectors: (_b = {},
                    _b[MediumScreenSelector$1] = {
                        fontSize: IconFontSizes.large,
                        width: IconFontSizes.large,
                    },
                    _b),
            },
            iconColor: {
                color: semanticColors.menuIcon,
                selectors: (_c = {},
                    _c[HighContrastSelector] = {
                        color: 'inherit',
                    },
                    _c['$root:hover &'] = {
                        selectors: (_d = {},
                            _d[HighContrastSelector] = {
                                color: 'HighlightText',
                            },
                            _d),
                    },
                    _c['$root:focus &'] = {
                        selectors: (_e = {},
                            _e[HighContrastSelector] = {
                                color: 'HighlightText',
                            },
                            _e),
                    },
                    _c),
            },
            iconDisabled: {
                color: semanticColors.disabledBodyText,
            },
            checkmarkIcon: {
                color: semanticColors.bodySubtext,
                selectors: (_f = {},
                    _f[HighContrastSelector] = {
                        color: 'HighlightText',
                    },
                    _f),
            },
            subMenuIcon: {
                height: CONTEXTUAL_MENU_ITEM_HEIGHT,
                lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
                color: palette.neutralSecondary,
                textAlign: 'center',
                display: 'inline-block',
                verticalAlign: 'middle',
                flexShrink: '0',
                fontSize: IconFontSizes.small,
                selectors: (_g = {
                        ':hover': {
                            color: palette.neutralPrimary,
                        },
                        ':active': {
                            color: palette.neutralPrimary,
                        }
                    },
                    _g[MediumScreenSelector$1] = {
                        fontSize: IconFontSizes.medium, // 16px
                    },
                    _g[HighContrastSelector] = {
                        color: 'HighlightText',
                    },
                    _g),
            },
            splitButtonFlexContainer: [
                getFocusStyle(theme),
                {
                    display: 'flex',
                    height: CONTEXTUAL_MENU_ITEM_HEIGHT,
                    flexWrap: 'nowrap',
                    justifyContent: 'center',
                    alignItems: 'flex-start',
                },
            ],
        };
        return concatStyleSets(menuItemStyles);
    });

    var CONTEXTUAL_SPLIT_MENU_MINWIDTH = '28px';
    var MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);
    var getSplitButtonVerticalDividerClassNames = memoizeFunction(
    /* eslint-disable deprecation/deprecation */
    function (theme) {
        var _a;
        return mergeStyleSets(getDividerClassNames(theme), {
            /* eslint-enable deprecation/deprecation */
            wrapper: {
                position: 'absolute',
                right: 28,
                selectors: (_a = {},
                    _a[MediumScreenSelector] = {
                        right: 32, // fontSize of the icon increased from 12px to 16px
                    },
                    _a),
            },
            divider: {
                height: 16,
                width: 1,
            },
        });
    });
    var GlobalClassNames$o = {
        item: 'ms-ContextualMenu-item',
        divider: 'ms-ContextualMenu-divider',
        root: 'ms-ContextualMenu-link',
        isChecked: 'is-checked',
        isExpanded: 'is-expanded',
        isDisabled: 'is-disabled',
        linkContent: 'ms-ContextualMenu-linkContent',
        linkContentMenu: 'ms-ContextualMenu-linkContent',
        icon: 'ms-ContextualMenu-icon',
        iconColor: 'ms-ContextualMenu-iconColor',
        checkmarkIcon: 'ms-ContextualMenu-checkmarkIcon',
        subMenuIcon: 'ms-ContextualMenu-submenuIcon',
        label: 'ms-ContextualMenu-itemText',
        secondaryText: 'ms-ContextualMenu-secondaryText',
        splitMenu: 'ms-ContextualMenu-splitMenu',
        screenReaderText: 'ms-ContextualMenu-screenReaderText',
    };
    /**
     * @deprecated Will be removed in \>= 7.0.
     * This is a package-internal method that has been depended on.
     * It is being kept in this form for backwards compatibility.
     * @internal
     */
    // TODO: Audit perf. impact of and potentially remove memoizeFunction.
    // https://github.com/microsoft/fluentui/issues/5534
    var getItemClassNames = memoizeFunction(function (theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {
        var _a, _b, _c, _d;
        var styles = getMenuItemStyles(theme);
        var classNames = getGlobalClassNames(GlobalClassNames$o, theme);
        return mergeStyleSets({
            item: [classNames.item, styles.item, itemClassName],
            divider: [classNames.divider, styles.divider, dividerClassName],
            root: [
                classNames.root,
                styles.root,
                checked && [classNames.isChecked, styles.rootChecked],
                isAnchorLink && styles.anchorLink,
                expanded && [classNames.isExpanded, styles.rootExpanded],
                disabled && [classNames.isDisabled, styles.rootDisabled],
                !disabled &&
                    !expanded && [
                    {
                        selectors: (_a = {
                                ':hover': styles.rootHovered,
                                ':active': styles.rootPressed
                            },
                            _a["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused,
                            _a["." + IsFocusVisibleClassName + " &:hover"] = { background: 'inherit;' },
                            _a),
                    },
                ],
                className,
            ],
            splitPrimary: [
                styles.root,
                {
                    width: "calc(100% - " + CONTEXTUAL_SPLIT_MENU_MINWIDTH + ")",
                },
                checked && ['is-checked', styles.rootChecked],
                (disabled || primaryDisabled) && ['is-disabled', styles.rootDisabled],
                !(disabled || primaryDisabled) &&
                    !checked && [
                    {
                        selectors: (_b = {
                                ':hover': styles.rootHovered
                            },
                            // when hovering over the splitPrimary also affect the splitMenu
                            _b[":hover ~ ." + classNames.splitMenu] = styles.rootHovered,
                            _b[':active'] = styles.rootPressed,
                            _b["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused,
                            _b["." + IsFocusVisibleClassName + " &:hover"] = { background: 'inherit;' },
                            _b),
                    },
                ],
            ],
            splitMenu: [
                classNames.splitMenu,
                styles.root,
                {
                    flexBasis: '0',
                    padding: '0 8px',
                    minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH,
                },
                expanded && ['is-expanded', styles.rootExpanded],
                disabled && ['is-disabled', styles.rootDisabled],
                !disabled &&
                    !expanded && [
                    {
                        selectors: (_c = {
                                ':hover': styles.rootHovered,
                                ':active': styles.rootPressed
                            },
                            _c["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused,
                            _c["." + IsFocusVisibleClassName + " &:hover"] = { background: 'inherit;' },
                            _c),
                    },
                ],
            ],
            anchorLink: styles.anchorLink,
            linkContent: [classNames.linkContent, styles.linkContent],
            linkContentMenu: [
                classNames.linkContentMenu,
                styles.linkContent,
                {
                    justifyContent: 'center',
                },
            ],
            icon: [
                classNames.icon,
                knownIcon && styles.iconColor,
                styles.icon,
                iconClassName,
                disabled && [classNames.isDisabled, styles.iconDisabled],
            ],
            iconColor: styles.iconColor,
            checkmarkIcon: [classNames.checkmarkIcon, knownIcon && styles.checkmarkIcon, styles.icon, iconClassName],
            subMenuIcon: [
                classNames.subMenuIcon,
                styles.subMenuIcon,
                subMenuClassName,
                expanded && { color: theme.palette.neutralPrimary },
                disabled && [styles.iconDisabled],
            ],
            label: [classNames.label, styles.label],
            secondaryText: [classNames.secondaryText, styles.secondaryText],
            splitContainer: [
                styles.splitButtonFlexContainer,
                !disabled &&
                    !checked && [
                    {
                        selectors: (_d = {},
                            _d["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused,
                            _d),
                    },
                ],
            ],
            screenReaderText: [
                classNames.screenReaderText,
                styles.screenReaderText,
                hiddenContentStyle,
                { visibility: 'hidden' },
            ],
        });
    });
    /**
     * Wrapper function for generating ContextualMenuItem classNames which adheres to
     * the getStyles API, but invokes memoized className generator function with
     * primitive values.
     *
     * @param props the ContextualMenuItem style props used to generate its styles.
     */
    var getItemStyles = function (props) {
        var theme = props.theme, disabled = props.disabled, expanded = props.expanded, checked = props.checked, isAnchorLink = props.isAnchorLink, knownIcon = props.knownIcon, itemClassName = props.itemClassName, dividerClassName = props.dividerClassName, iconClassName = props.iconClassName, subMenuClassName = props.subMenuClassName, primaryDisabled = props.primaryDisabled, className = props.className;
        // eslint-disable-next-line deprecation/deprecation
        return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);
    };

    /**
     * ContextualMenuItem description
     */
    var ContextualMenuItem = styled(ContextualMenuItemBase, getItemStyles, undefined, { scope: 'ContextualMenuItem' });

    var ContextualMenuItemWrapper = /** @class */ (function (_super) {
        tslib.__extends(ContextualMenuItemWrapper, _super);
        function ContextualMenuItemWrapper(props) {
            var _this = _super.call(this, props) || this;
            _this._onItemMouseEnter = function (ev) {
                var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;
                if (onItemMouseEnter) {
                    onItemMouseEnter(item, ev, ev.currentTarget);
                }
            };
            _this._onItemClick = function (ev) {
                var _a = _this.props, item = _a.item, onItemClickBase = _a.onItemClickBase;
                if (onItemClickBase) {
                    onItemClickBase(item, ev, ev.currentTarget);
                }
            };
            _this._onItemMouseLeave = function (ev) {
                var _a = _this.props, item = _a.item, onItemMouseLeave = _a.onItemMouseLeave;
                if (onItemMouseLeave) {
                    onItemMouseLeave(item, ev);
                }
            };
            _this._onItemKeyDown = function (ev) {
                var _a = _this.props, item = _a.item, onItemKeyDown = _a.onItemKeyDown;
                if (onItemKeyDown) {
                    onItemKeyDown(item, ev);
                }
            };
            _this._onItemMouseMove = function (ev) {
                var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;
                if (onItemMouseMove) {
                    onItemMouseMove(item, ev, ev.currentTarget);
                }
            };
            _this._getSubmenuTarget = function () {
                return undefined;
            };
            initializeComponentRef(_this);
            return _this;
        }
        ContextualMenuItemWrapper.prototype.shouldComponentUpdate = function (newProps) {
            return !shallowCompare(newProps, this.props);
        };
        return ContextualMenuItemWrapper;
    }(React__namespace.Component));

    var KTP_PREFIX = 'ktp';
    var KTP_SEPARATOR = '-';
    var DATAKTP_TARGET = 'data-ktp-target';
    var DATAKTP_EXECUTE_TARGET = 'data-ktp-execute-target';
    var KTP_LAYER_ID = 'ktp-layer-id';
    // Events
    var KeytipEvents;
    (function (KeytipEvents) {
        KeytipEvents.KEYTIP_ADDED = 'keytipAdded';
        KeytipEvents.KEYTIP_REMOVED = 'keytipRemoved';
        KeytipEvents.KEYTIP_UPDATED = 'keytipUpdated';
        KeytipEvents.PERSISTED_KEYTIP_ADDED = 'persistedKeytipAdded';
        KeytipEvents.PERSISTED_KEYTIP_REMOVED = 'persistedKeytipRemoved';
        KeytipEvents.PERSISTED_KEYTIP_EXECUTE = 'persistedKeytipExecute';
        KeytipEvents.ENTER_KEYTIP_MODE = 'enterKeytipMode';
        KeytipEvents.EXIT_KEYTIP_MODE = 'exitKeytipMode';
    })(KeytipEvents || (KeytipEvents = {}));

    /**
     * This class is responsible for handling registering, updating, and unregistering of keytips
     */
    var KeytipManager = /** @class */ (function () {
        function KeytipManager() {
            this.keytips = {};
            this.persistedKeytips = {};
            this.sequenceMapping = {};
            // This is (and should be) updated and kept in sync
            // with the inKeytipMode in KeytipLayer.
            this.inKeytipMode = false;
            // Boolean that gets checked before entering keytip mode by the KeytipLayer
            // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)
            this.shouldEnterKeytipMode = true;
            // Boolean to indicate whether to delay firing an event to update subscribers of
            // keytip data changed.
            this.delayUpdatingKeytipChange = false;
        }
        /**
         * Static function to get singleton KeytipManager instance
         *
         * @returns Singleton KeytipManager instance
         */
        KeytipManager.getInstance = function () {
            return this._instance;
        };
        /**
         * Initialization code to set set parameters to define
         * how the KeytipManager handles keytip data.
         *
         * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers
         * of keytip changes
         */
        KeytipManager.prototype.init = function (delayUpdatingKeytipChange) {
            this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;
        };
        /**
         * Registers a keytip
         *
         * @param keytipProps - Keytip to register
         * @param persisted - T/F if this keytip should be persisted, default is false
         * @returns Unique ID for this keytip
         */
        KeytipManager.prototype.register = function (keytipProps, persisted) {
            if (persisted === void 0) { persisted = false; }
            var props = keytipProps;
            if (!persisted) {
                // Add the overflowSetSequence if necessary
                props = this.addParentOverflow(keytipProps);
                this.sequenceMapping[props.keySequences.toString()] = props;
            }
            // Create a unique keytip
            var uniqueKeytip = this._getUniqueKtp(props);
            // Add to dictionary
            persisted
                ? (this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip)
                : (this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip);
            // We only want to add something new if we are currently showing keytip mode
            if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
                var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;
                EventGroup.raise(this, event_1, {
                    keytip: props,
                    uniqueID: uniqueKeytip.uniqueID,
                });
            }
            return uniqueKeytip.uniqueID;
        };
        /**
         * Update a keytip
         *
         * @param keytipProps - Keytip to update
         * @param uniqueID - Unique ID of this keytip
         */
        KeytipManager.prototype.update = function (keytipProps, uniqueID) {
            var newKeytipProps = this.addParentOverflow(keytipProps);
            var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);
            var oldKeyTip = this.keytips[uniqueID];
            if (oldKeyTip) {
                // Update everything except 'visible'
                uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;
                // Update keytip in this.keytips
                this.keytips[uniqueID] = uniqueKeytip;
                // Update the sequence to be up to date
                delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];
                this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;
                // Raise event only if we are currently in keytip mode
                if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
                    EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {
                        keytip: uniqueKeytip.keytip,
                        uniqueID: uniqueKeytip.uniqueID,
                    });
                }
            }
        };
        /**
         * Unregisters a keytip
         *
         * @param keytipToRemove - IKeytipProps of the keytip to remove
         * @param uniqueID - Unique ID of this keytip
         * @param persisted - T/F if this keytip should be persisted, default is false
         */
        KeytipManager.prototype.unregister = function (keytipToRemove, uniqueID, persisted) {
            if (persisted === void 0) { persisted = false; }
            persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];
            !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];
            var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;
            // Update keytips only if we're in keytip mode
            if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
                EventGroup.raise(this, event, {
                    keytip: keytipToRemove,
                    uniqueID: uniqueID,
                });
            }
        };
        /**
         * Manual call to enter keytip mode
         */
        KeytipManager.prototype.enterKeytipMode = function () {
            EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);
        };
        /**
         * Manual call to exit keytip mode
         */
        KeytipManager.prototype.exitKeytipMode = function () {
            EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);
        };
        /**
         * Gets all IKeytipProps from this.keytips
         *
         * @returns All keytips stored in the manager
         */
        KeytipManager.prototype.getKeytips = function () {
            var _this = this;
            return Object.keys(this.keytips).map(function (key) { return _this.keytips[key].keytip; });
        };
        /**
         * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it
         *
         * @param keytipProps - Keytip props to add overflowSetSequence to if necessary
         * @returns - Modified keytip props, if needed to be modified
         */
        KeytipManager.prototype.addParentOverflow = function (keytipProps) {
            var fullSequence = tslib.__spreadArray([], keytipProps.keySequences);
            fullSequence.pop();
            if (fullSequence.length !== 0) {
                var parentKeytip = this.sequenceMapping[fullSequence.toString()];
                if (parentKeytip && parentKeytip.overflowSetSequence) {
                    return tslib.__assign(tslib.__assign({}, keytipProps), { overflowSetSequence: parentKeytip.overflowSetSequence });
                }
            }
            return keytipProps;
        };
        /**
         * Public function to bind for overflow items that have a submenu
         */
        KeytipManager.prototype.menuExecute = function (overflowButtonSequences, keytipSequences) {
            EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {
                overflowButtonSequences: overflowButtonSequences,
                keytipSequences: keytipSequences,
            });
        };
        /**
         * Creates an IUniqueKeytip object
         *
         * @param keytipProps - IKeytipProps
         * @param uniqueID - Unique ID, will default to the next unique ID if not passed
         * @returns IUniqueKeytip object
         */
        KeytipManager.prototype._getUniqueKtp = function (keytipProps, uniqueID) {
            if (uniqueID === void 0) { uniqueID = getId(); }
            return { keytip: tslib.__assign({}, keytipProps), uniqueID: uniqueID };
        };
        KeytipManager._instance = new KeytipManager();
        return KeytipManager;
    }());

    /**
     * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified
     * keySequences should not include the initial keytip 'start' sequence.
     *
     * @param keySequences - Full path of IKeySequences for one keytip.
     * @returns String to use for the keytip ID.
     */
    function sequencesToID(keySequences) {
        return keySequences.reduce(function (prevValue, keySequence) {
            return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);
        }, KTP_PREFIX);
    }
    /**
     * Merges an overflow sequence with a key sequence.
     *
     * @param keySequences - Full sequence for one keytip.
     * @param overflowKeySequences - Full overflow keytip sequence.
     * @returns Sequence that will be used by the keytip when in the overflow.
     */
    function mergeOverflows(keySequences, overflowKeySequences) {
        var overflowSequenceLen = overflowKeySequences.length;
        var overflowSequence = tslib.__spreadArray([], overflowKeySequences).pop();
        var newKeySequences = tslib.__spreadArray([], keySequences);
        return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);
    }
    /**
     * Gets the aria-describedby value to put on the component with this keytip.
     *
     * @param keySequences - KeySequences of the keytip.
     * @returns The aria-describedby value to set on the component with this keytip.
     */
    function getAriaDescribedBy(keySequences) {
        var describedby = ' ' + KTP_LAYER_ID;
        if (!keySequences.length) {
            // Return just the layer ID
            return describedby;
        }
        return describedby + ' ' + sequencesToID(keySequences);
    }

    /**
     * Hook that creates attributes for components which are enabled with Keytip.
     */
    function useKeytipData(options) {
        var uniqueId = React__namespace.useRef();
        var keytipProps = options.keytipProps
            ? tslib.__assign({ disabled: options.disabled }, options.keytipProps) : undefined;
        var keytipManager = useConst(KeytipManager.getInstance());
        var prevOptions = usePrevious(options);
        // useLayoutEffect used to strictly emulate didUpdate/didMount behavior
        useIsomorphicLayoutEffect(function () {
            if (uniqueId.current &&
                keytipProps &&
                ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {
                keytipManager.update(keytipProps, uniqueId.current);
            }
        });
        useIsomorphicLayoutEffect(function () {
            // Register Keytip in KeytipManager
            if (keytipProps) {
                uniqueId.current = keytipManager.register(keytipProps);
            }
            return function () {
                // Unregister Keytip in KeytipManager
                keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);
            };
            // this is meant to run only at mount, and updates are handled separately
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        var nativeKeytipProps = {
            ariaDescribedBy: undefined,
            keytipId: undefined,
        };
        if (keytipProps) {
            nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);
        }
        return nativeKeytipProps;
    }
    /**
     * Gets the aria- and data- attributes to attach to the component
     * @param keytipProps - options for Keytip
     * @param describedByPrepend - ariaDescribedBy value to prepend
     */
    function getKeytipData(keytipManager, keytipProps, describedByPrepend) {
        // Add the parent overflow sequence if necessary
        var newKeytipProps = keytipManager.addParentOverflow(keytipProps);
        // Construct aria-describedby and data-ktp-id attributes
        var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));
        var keySequences = tslib.__spreadArray([], newKeytipProps.keySequences);
        if (newKeytipProps.overflowSetSequence) {
            keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);
        }
        var keytipId = sequencesToID(keySequences);
        return {
            ariaDescribedBy: ariaDescribedBy,
            keytipId: keytipId,
        };
    }

    /**
     * A small element to help the target component correctly read out its aria-describedby for its Keytip
     * {@docCategory Keytips}
     */
    var KeytipData = function (props) {
        var _a;
        var children = props.children, keytipDataProps = tslib.__rest(props, ["children"]);
        var _b = useKeytipData(keytipDataProps), keytipId = _b.keytipId, ariaDescribedBy = _b.ariaDescribedBy;
        return children((_a = {},
            _a[DATAKTP_TARGET] = keytipId,
            _a[DATAKTP_EXECUTE_TARGET] = keytipId,
            _a['aria-describedby'] = ariaDescribedBy,
            _a));
    };

    var ContextualMenuAnchor = /** @class */ (function (_super) {
        tslib.__extends(ContextualMenuAnchor, _super);
        function ContextualMenuAnchor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._anchor = React__namespace.createRef();
            _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {
                return tslib.__assign(tslib.__assign({}, keytipProps), { hasMenu: true });
            });
            _this._getSubmenuTarget = function () {
                return _this._anchor.current ? _this._anchor.current : undefined;
            };
            _this._onItemClick = function (ev) {
                var _a = _this.props, item = _a.item, onItemClick = _a.onItemClick;
                if (onItemClick) {
                    onItemClick(item, ev);
                }
            };
            _this._renderAriaDescription = function (ariaDescription, className) {
                // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan
                return ariaDescription ? (React__namespace.createElement("span", { id: _this._ariaDescriptionId, className: className }, ariaDescription)) : null;
            };
            return _this;
        }
        ContextualMenuAnchor.prototype.render = function () {
            var _this = this;
            var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a.expandedMenuItemKey, onItemClick = _a.onItemClick, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;
            var anchorRel = item.rel;
            if (item.target && item.target.toLowerCase() === '_blank') {
                anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking
            }
            var itemHasSubmenu = hasSubmenu(item);
            var nativeProps = getNativeProps(item, anchorProperties);
            var disabled = isItemDisabled(item);
            var itemProps = item.itemProps, ariaDescription = item.ariaDescription;
            var keytipProps = item.keytipProps;
            if (keytipProps && itemHasSubmenu) {
                keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
            }
            // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with
            // the description in it to be added to ariaDescribedBy
            if (ariaDescription) {
                this._ariaDescriptionId = getId();
            }
            var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : undefined, nativeProps['aria-describedby']);
            var additionalItemProperties = {
                'aria-describedby': ariaDescribedByIds,
            };
            return (React__namespace.createElement("div", null,
                React__namespace.createElement(KeytipData, { keytipProps: item.keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled: disabled }, function (keytipAttributes) { return (React__namespace.createElement("a", tslib.__assign({}, additionalItemProperties, nativeProps, keytipAttributes, { ref: _this._anchor, href: item.href, target: item.target, rel: anchorRel, className: classNames.root, role: "menuitem", "aria-haspopup": itemHasSubmenu || undefined, "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined, "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount, "aria-disabled": isItemDisabled(item), 
                    // eslint-disable-next-line deprecation/deprecation
                    style: item.style, onClick: _this._onItemClick, onMouseEnter: _this._onItemMouseEnter, onMouseLeave: _this._onItemMouseLeave, onMouseMove: _this._onItemMouseMove, onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : undefined }),
                    React__namespace.createElement(ChildrenRenderer, tslib.__assign({ componentRef: item.componentRef, item: item, classNames: classNames, index: index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined, hasIcons: hasIcons, openSubMenu: openSubMenu, dismissSubMenu: dismissSubMenu, dismissMenu: dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
                    _this._renderAriaDescription(ariaDescription, classNames.screenReaderText))); })));
        };
        return ContextualMenuAnchor;
    }(ContextualMenuItemWrapper));

    var ContextualMenuButton = /** @class */ (function (_super) {
        tslib.__extends(ContextualMenuButton, _super);
        function ContextualMenuButton() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._btn = React__namespace.createRef();
            _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {
                return tslib.__assign(tslib.__assign({}, keytipProps), { hasMenu: true });
            });
            _this._renderAriaDescription = function (ariaDescription, className) {
                // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan
                return ariaDescription ? (React__namespace.createElement("span", { id: _this._ariaDescriptionId, className: className }, ariaDescription)) : null;
            };
            _this._getSubmenuTarget = function () {
                return _this._btn.current ? _this._btn.current : undefined;
            };
            return _this;
        }
        ContextualMenuButton.prototype.render = function () {
            var _this = this;
            var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a.expandedMenuItemKey, onItemMouseDown = _a.onItemMouseDown, onItemClick = _a.onItemClick, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;
            var isChecked = getIsChecked(item);
            var canCheck = isChecked !== null;
            var defaultRole = getMenuItemAriaRole(item);
            var itemHasSubmenu = hasSubmenu(item);
            var itemProps = item.itemProps, ariaLabel = item.ariaLabel, ariaDescription = item.ariaDescription;
            var buttonNativeProperties = getNativeProps(item, buttonProperties);
            // Do not add the disabled attribute to the button so that it is focusable
            delete buttonNativeProperties.disabled;
            var itemRole = item.role || defaultRole;
            // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with
            // the description in it to be added to ariaDescribedBy
            if (ariaDescription) {
                this._ariaDescriptionId = getId();
            }
            var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : undefined, buttonNativeProperties['aria-describedby']);
            var itemButtonProperties = {
                className: classNames.root,
                onClick: this._onItemClick,
                onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,
                onMouseEnter: this._onItemMouseEnter,
                onMouseLeave: this._onItemMouseLeave,
                onMouseDown: function (ev) {
                    return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;
                },
                onMouseMove: this._onItemMouseMove,
                href: item.href,
                title: item.title,
                'aria-label': ariaLabel,
                'aria-describedby': ariaDescribedByIds,
                'aria-haspopup': itemHasSubmenu || undefined,
                'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,
                'aria-posinset': focusableElementIndex + 1,
                'aria-setsize': totalItemCount,
                'aria-disabled': isItemDisabled(item),
                'aria-checked': (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,
                'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,
                role: itemRole,
                // eslint-disable-next-line deprecation/deprecation
                style: item.style,
            };
            var keytipProps = item.keytipProps;
            if (keytipProps && itemHasSubmenu) {
                keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
            }
            return (React__namespace.createElement(KeytipData, { keytipProps: keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled: isItemDisabled(item) }, function (keytipAttributes) { return (React__namespace.createElement("button", tslib.__assign({ ref: _this._btn }, buttonNativeProperties, itemButtonProperties, keytipAttributes),
                React__namespace.createElement(ChildrenRenderer, tslib.__assign({ componentRef: item.componentRef, item: item, classNames: classNames, index: index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined, hasIcons: hasIcons, openSubMenu: openSubMenu, dismissSubMenu: dismissSubMenu, dismissMenu: dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
                _this._renderAriaDescription(ariaDescription, classNames.screenReaderText))); }));
        };
        return ContextualMenuButton;
    }(ContextualMenuItemWrapper));

    var getStyles$A = function (props) {
        // eslint-disable-next-line deprecation/deprecation
        var theme = props.theme, getClassNames = props.getClassNames, className = props.className;
        if (!theme) {
            throw new Error('Theme is undefined or null.');
        }
        if (getClassNames) {
            var names = getClassNames(theme);
            return {
                wrapper: [names.wrapper],
                divider: [names.divider],
            };
        }
        return {
            wrapper: [
                {
                    display: 'inline-flex',
                    height: '100%',
                    alignItems: 'center',
                },
                className,
            ],
            divider: [
                {
                    width: 1,
                    height: '100%',
                    backgroundColor: theme.palette.neutralTertiaryAlt,
                },
            ],
        };
    };

    var getClassNames$1k = classNamesFunction();
    var VerticalDividerBase = React__namespace.forwardRef(function (props, ref) {
        // eslint-disable-next-line deprecation/deprecation
        var styles = props.styles, theme = props.theme, deprecatedGetClassNames = props.getClassNames, className = props.className;
        var classNames = getClassNames$1k(styles, { theme: theme, getClassNames: deprecatedGetClassNames, className: className });
        return (React__namespace.createElement("span", { className: classNames.wrapper, ref: ref },
            React__namespace.createElement("span", { className: classNames.divider })));
    });
    VerticalDividerBase.displayName = 'VerticalDividerBase';

    var VerticalDivider = styled(VerticalDividerBase, getStyles$A, undefined, {
        scope: 'VerticalDivider',
    });

    var TouchIdleDelay$2 = 500; /* ms */
    var ContextualMenuSplitButton = /** @class */ (function (_super) {
        tslib.__extends(ContextualMenuSplitButton, _super);
        function ContextualMenuSplitButton(props) {
            var _this = _super.call(this, props) || this;
            _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {
                return tslib.__assign(tslib.__assign({}, keytipProps), { hasMenu: true });
            });
            _this._onItemKeyDown = function (ev) {
                var _a = _this.props, item = _a.item, onItemKeyDown = _a.onItemKeyDown;
                // eslint-disable-next-line deprecation/deprecation
                if (ev.which === KeyCodes.enter) {
                    _this._executeItemClick(ev);
                    ev.preventDefault();
                    ev.stopPropagation();
                }
                else if (onItemKeyDown) {
                    onItemKeyDown(item, ev);
                }
            };
            _this._getSubmenuTarget = function () {
                return _this._splitButton;
            };
            _this._renderAriaDescription = function (ariaDescription, className) {
                // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan
                return ariaDescription ? (React__namespace.createElement("span", { id: _this._ariaDescriptionId, className: className }, ariaDescription)) : null;
            };
            _this._onItemMouseEnterPrimary = function (ev) {
                var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;
                if (onItemMouseEnter) {
                    onItemMouseEnter(tslib.__assign(tslib.__assign({}, item), { subMenuProps: undefined, items: undefined }), ev, _this._splitButton);
                }
            };
            _this._onItemMouseEnterIcon = function (ev) {
                var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;
                if (onItemMouseEnter) {
                    onItemMouseEnter(item, ev, _this._splitButton);
                }
            };
            _this._onItemMouseMovePrimary = function (ev) {
                var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;
                if (onItemMouseMove) {
                    onItemMouseMove(tslib.__assign(tslib.__assign({}, item), { subMenuProps: undefined, items: undefined }), ev, _this._splitButton);
                }
            };
            _this._onItemMouseMoveIcon = function (ev) {
                var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;
                if (onItemMouseMove) {
                    onItemMouseMove(item, ev, _this._splitButton);
                }
            };
            _this._onIconItemClick = function (ev) {
                var _a = _this.props, item = _a.item, onItemClickBase = _a.onItemClickBase;
                if (onItemClickBase) {
                    onItemClickBase(item, ev, (_this._splitButton ? _this._splitButton : ev.currentTarget));
                }
            };
            _this._executeItemClick = function (ev) {
                var _a = _this.props, item = _a.item, executeItemClick = _a.executeItemClick, onItemClick = _a.onItemClick;
                if (item.disabled || item.isDisabled) {
                    return;
                }
                if (_this._processingTouch && onItemClick) {
                    return onItemClick(item, ev);
                }
                if (executeItemClick) {
                    executeItemClick(item, ev);
                }
            };
            _this._onTouchStart = function (ev) {
                if (_this._splitButton && !('onpointerdown' in _this._splitButton)) {
                    _this._handleTouchAndPointerEvent(ev);
                }
            };
            _this._onPointerDown = function (ev) {
                if (ev.pointerType === 'touch') {
                    _this._handleTouchAndPointerEvent(ev);
                    ev.preventDefault();
                    ev.stopImmediatePropagation();
                }
            };
            _this._async = new Async(_this);
            _this._events = new EventGroup(_this);
            return _this;
        }
        ContextualMenuSplitButton.prototype.componentDidMount = function () {
            if (this._splitButton && 'onpointerdown' in this._splitButton) {
                this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);
            }
        };
        ContextualMenuSplitButton.prototype.componentWillUnmount = function () {
            this._async.dispose();
            this._events.dispose();
        };
        ContextualMenuSplitButton.prototype.render = function () {
            var _this = this;
            var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, onItemMouseLeave = _a.onItemMouseLeave, expandedMenuItemKey = _a.expandedMenuItemKey;
            var itemHasSubmenu = hasSubmenu(item);
            var keytipProps = item.keytipProps;
            if (keytipProps) {
                keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
            }
            // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with
            // the description in it to be added to ariaDescribedBy
            var ariaDescription = item.ariaDescription;
            if (ariaDescription) {
                this._ariaDescriptionId = getId();
            }
            return (React__namespace.createElement(KeytipData, { keytipProps: keytipProps, disabled: isItemDisabled(item) }, function (keytipAttributes) { return (React__namespace.createElement("div", { "data-ktp-target": keytipAttributes['data-ktp-target'], ref: function (splitButton) { return (_this._splitButton = splitButton); }, role: getMenuItemAriaRole(item), "aria-label": item.ariaLabel, className: classNames.splitContainer, "aria-disabled": isItemDisabled(item), "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined, "aria-haspopup": true, "aria-describedby": mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes['aria-describedby']), "aria-checked": item.isChecked || item.checked, "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount, onMouseEnter: _this._onItemMouseEnterPrimary, onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, tslib.__assign(tslib.__assign({}, item), { subMenuProps: null, items: null })) : undefined, onMouseMove: _this._onItemMouseMovePrimary, onKeyDown: _this._onItemKeyDown, onClick: _this._executeItemClick, onTouchStart: _this._onTouchStart, tabIndex: 0, "data-is-focusable": true, "aria-roledescription": item['aria-roledescription'] },
                _this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks, hasIcons),
                _this._renderSplitDivider(item),
                _this._renderSplitIconButton(item, classNames, index, keytipAttributes),
                _this._renderAriaDescription(ariaDescription, classNames.screenReaderText))); }));
        };
        ContextualMenuSplitButton.prototype._renderSplitPrimaryButton = function (item, 
        // eslint-disable-next-line deprecation/deprecation
        classNames, index, hasCheckmarks, hasIcons) {
            var _a = this.props, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemClick = _a.onItemClick;
            var itemProps = {
                key: item.key,
                disabled: isItemDisabled(item) || item.primaryDisabled,
                /* eslint-disable deprecation/deprecation */
                name: item.name,
                text: item.text || item.name,
                secondaryText: item.secondaryText,
                /* eslint-enable deprecation/deprecation */
                className: classNames.splitPrimary,
                canCheck: item.canCheck,
                isChecked: item.isChecked,
                checked: item.checked,
                iconProps: item.iconProps,
                onRenderIcon: item.onRenderIcon,
                data: item.data,
                'data-is-focusable': false,
            };
            var itemComponentProps = item.itemProps;
            return (React__namespace.createElement("button", tslib.__assign({}, getNativeProps(itemProps, buttonProperties)),
                React__namespace.createElement(ChildrenRenderer, tslib.__assign({ "data-is-focusable": false, item: itemProps, classNames: classNames, index: index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined, hasIcons: hasIcons }, itemComponentProps))));
        };
        ContextualMenuSplitButton.prototype._renderSplitDivider = function (item) {
            var getDividerClassNames = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;
            return React__namespace.createElement(VerticalDivider, { getClassNames: getDividerClassNames });
        };
        ContextualMenuSplitButton.prototype._renderSplitIconButton = function (item, classNames, // eslint-disable-line deprecation/deprecation
        index, keytipAttributes) {
            var _a = this.props, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemMouseLeave = _a.onItemMouseLeave, onItemMouseDown = _a.onItemMouseDown, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;
            var itemProps = {
                onClick: this._onIconItemClick,
                disabled: isItemDisabled(item),
                className: classNames.splitMenu,
                subMenuProps: item.subMenuProps,
                submenuIconProps: item.submenuIconProps,
                split: true,
                key: item.key,
            };
            var buttonProps = tslib.__assign(tslib.__assign({}, getNativeProps(itemProps, buttonProperties)), {
                onMouseEnter: this._onItemMouseEnterIcon,
                onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,
                onMouseDown: function (ev) {
                    return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;
                },
                onMouseMove: this._onItemMouseMoveIcon,
                'data-is-focusable': false,
                'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],
                'aria-hidden': true,
            });
            var itemComponentProps = item.itemProps;
            return (React__namespace.createElement("button", tslib.__assign({}, buttonProps),
                React__namespace.createElement(ChildrenRenderer, tslib.__assign({ componentRef: item.componentRef, item: itemProps, classNames: classNames, index: index, hasIcons: false, openSubMenu: openSubMenu, dismissSubMenu: dismissSubMenu, dismissMenu: dismissMenu, getSubmenuTarget: this._getSubmenuTarget }, itemComponentProps))));
        };
        ContextualMenuSplitButton.prototype._handleTouchAndPointerEvent = function (ev) {
            var _this = this;
            var onTap = this.props.onTap;
            if (onTap) {
                onTap(ev);
            }
            // If we already have an existing timeout from a previous touch/pointer event
            // cancel that timeout so we can set a new one.
            if (this._lastTouchTimeoutId) {
                this._async.clearTimeout(this._lastTouchTimeoutId);
                this._lastTouchTimeoutId = undefined;
            }
            this._processingTouch = true;
            this._lastTouchTimeoutId = this._async.setTimeout(function () {
                _this._processingTouch = false;
                _this._lastTouchTimeoutId = undefined;
            }, TouchIdleDelay$2);
        };
        return ContextualMenuSplitButton;
    }(ContextualMenuItemWrapper));

    var BaseDecorator = /** @class */ (function (_super) {
        tslib.__extends(BaseDecorator, _super);
        function BaseDecorator(props) {
            var _this = _super.call(this, props) || this;
            _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);
            return _this;
        }
        /**
         * Updates the ref to the component composed by the decorator, which will also take care of hoisting
         * (and unhoisting as appropriate) methods from said component.
         *
         * Pass this method as the argument to the 'ref' property of the composed component.
         */
        BaseDecorator.prototype._updateComposedComponentRef = function (composedComponentInstance) {
            this._composedComponentInstance = composedComponentInstance;
            if (composedComponentInstance) {
                this._hoisted = hoistMethods(this, composedComponentInstance);
            }
            else if (this._hoisted) {
                unhoistMethods(this, this._hoisted);
            }
        };
        return BaseDecorator;
    }(React__namespace.Component));

    var ResponsiveMode;
    (function (ResponsiveMode) {
        /** Width \<= 479px */
        ResponsiveMode[ResponsiveMode["small"] = 0] = "small";
        /** Width \> 479px and \<= 639px */
        ResponsiveMode[ResponsiveMode["medium"] = 1] = "medium";
        /** Width \> 639px and \<= 1023px */
        ResponsiveMode[ResponsiveMode["large"] = 2] = "large";
        /** Width \> 1023px and \<= 1365px */
        ResponsiveMode[ResponsiveMode["xLarge"] = 3] = "xLarge";
        /** Width \> 1365px and \<= 1919px */
        ResponsiveMode[ResponsiveMode["xxLarge"] = 4] = "xxLarge";
        /** Width \> 1919px */
        ResponsiveMode[ResponsiveMode["xxxLarge"] = 5] = "xxxLarge";
        ResponsiveMode[ResponsiveMode["unknown"] = 999] = "unknown";
    })(ResponsiveMode || (ResponsiveMode = {}));
    var RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];
    /**
     * Tracking the last mode we successfully rendered, which allows us to
     * paint initial renders with the correct size.
     */
    var _lastMode;
    function getInitialResponsiveMode() {
        var _a;
        return (_a = _lastMode) !== null && _a !== void 0 ? _a : ResponsiveMode.large;
    }
    /**
     * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or
     * use the `useResponsiveMode` hook within a function component.
     */
    function withResponsiveMode(ComposedComponent) {
        var _a;
        // eslint-disable-next-line deprecation/deprecation
        var resultClass = (_a = /** @class */ (function (_super) {
                tslib.__extends(WithResponsiveMode, _super);
                function WithResponsiveMode(props) {
                    var _this = _super.call(this, props) || this;
                    _this._onResize = function () {
                        var responsiveMode = getResponsiveMode(_this.context.window);
                        if (responsiveMode !== _this.state.responsiveMode) {
                            _this.setState({
                                responsiveMode: responsiveMode,
                            });
                        }
                    };
                    _this._events = new EventGroup(_this);
                    _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);
                    _this.state = {
                        responsiveMode: getInitialResponsiveMode(),
                    };
                    return _this;
                }
                WithResponsiveMode.prototype.componentDidMount = function () {
                    this._events.on(this.context.window, 'resize', this._onResize);
                    this._onResize();
                };
                WithResponsiveMode.prototype.componentWillUnmount = function () {
                    this._events.dispose();
                };
                WithResponsiveMode.prototype.render = function () {
                    var responsiveMode = this.state.responsiveMode;
                    return responsiveMode === ResponsiveMode.unknown ? null : (React__namespace.createElement(ComposedComponent, tslib.__assign({ ref: this._updateComposedComponentRef, responsiveMode: responsiveMode }, this.props)));
                };
                return WithResponsiveMode;
            }(BaseDecorator)),
            _a.contextType = WindowContext,
            _a);
        return hoistStatics(ComposedComponent, resultClass);
    }
    /**
     * Hook to get the current responsive mode (window size category).
     * @param currentWindow - Use this window when determining the responsive mode.
     */
    function getResponsiveMode(currentWindow) {
        var responsiveMode = ResponsiveMode.small;
        if (currentWindow) {
            try {
                while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {
                    responsiveMode++;
                }
            }
            catch (e) {
                // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.
                responsiveMode = getInitialResponsiveMode();
            }
            // Tracking last mode just gives us a better default in future renders,
            // which avoids starting with the wrong value if we've measured once.
            _lastMode = responsiveMode;
        }
        else {
            {
                throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' +
                    'Call setResponsiveMode to define what the responsive mode is.');
            }
        }
        return responsiveMode;
    }

    /**
     * Hook to get the current responsive mode (window size category).
     * @param elementRef - Use this element's parent window when determining the responsive mode.
     * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.
     */
    var useResponsiveMode = function (elementRef, overrideResponsiveMode) {
        var _a = React__namespace.useState(getInitialResponsiveMode()), lastResponsiveMode = _a[0], setLastResponsiveMode = _a[1];
        var onResize = React__namespace.useCallback(function () {
            var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));
            // Setting the same value should not cause a re-render.
            if (lastResponsiveMode !== newResponsiveMode) {
                setLastResponsiveMode(newResponsiveMode);
            }
        }, [elementRef, lastResponsiveMode]);
        var win = useWindow();
        useOnEvent(win, 'resize', onResize);
        // Call resize function initially on mount, or if the override changes from defined to undefined
        // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)
        React__namespace.useEffect(function () {
            if (overrideResponsiveMode === undefined) {
                onResize();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes
        }, [overrideResponsiveMode]);
        return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;
    };

    var MenuContext = React__namespace.createContext({});

    var getClassNames$1j = classNamesFunction();
    var getContextualMenuItemClassNames = classNamesFunction();
    // The default ContextualMenu properties have no items and beak, the default submenu direction is right and top.
    var DEFAULT_PROPS$7 = {
        items: [],
        shouldFocusOnMount: true,
        gapSpace: 0,
        directionalHint: DirectionalHint.bottomAutoEdge,
        beakWidth: 16,
    };
    function getSubmenuItems(item, options) {
        var target = options === null || options === void 0 ? void 0 : options.target;
        // eslint-disable-next-line deprecation/deprecation
        var items = item.subMenuProps ? item.subMenuProps.items : item.items;
        if (items) {
            var overrideItems = [];
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var subItem = items_1[_i];
                if (subItem.preferMenuTargetAsEventTarget) {
                    // For sub-items which need an overridden target, intercept `onClick`
                    var onClick = subItem.onClick, contextItem = tslib.__rest(subItem, ["onClick"]);
                    overrideItems.push(tslib.__assign(tslib.__assign({}, contextItem), { onClick: getOnClickWithOverrideTarget(onClick, target) }));
                }
                else {
                    overrideItems.push(subItem);
                }
            }
            return overrideItems;
        }
    }
    /**
     * Returns true if a list of menu items can contain a checkbox
     */
    function canAnyMenuItemsCheck(items) {
        return items.some(function (item) {
            if (item.canCheck) {
                return true;
            }
            // If the item is a section, check if any of the items in the section can check.
            if (item.sectionProps && item.sectionProps.items.some(function (submenuItem) { return submenuItem.canCheck === true; })) {
                return true;
            }
            return false;
        });
    }
    var NavigationIdleDelay = 250; /* ms */
    var COMPONENT_NAME$c = 'ContextualMenu';
    var _getMenuItemStylesFunction = memoizeFunction(function () {
        var styles = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            styles[_i] = arguments[_i];
        }
        return function (styleProps) {
            return concatStyleSetsWithProps.apply(void 0, tslib.__spreadArray([styleProps, getItemStyles], styles));
        };
    });
    //#region Custom hooks
    function useVisibility(props, targetWindow) {
        var _a = props.hidden, hidden = _a === void 0 ? false : _a, onMenuDismissed = props.onMenuDismissed, onMenuOpened = props.onMenuOpened;
        var previousHidden = usePrevious(hidden);
        var onMenuOpenedRef = React__namespace.useRef(onMenuOpened);
        var onMenuClosedRef = React__namespace.useRef(onMenuDismissed);
        var propsRef = React__namespace.useRef(props);
        onMenuOpenedRef.current = onMenuOpened;
        onMenuClosedRef.current = onMenuDismissed;
        propsRef.current = props;
        React__namespace.useEffect(function () {
            var _a, _b;
            // Don't issue dismissed callbacks on initial mount
            if (hidden && previousHidden === false) {
                (_a = onMenuClosedRef.current) === null || _a === void 0 ? void 0 : _a.call(onMenuClosedRef, propsRef.current);
            }
            else if (!hidden && previousHidden !== false) {
                (_b = onMenuOpenedRef.current) === null || _b === void 0 ? void 0 : _b.call(onMenuOpenedRef, propsRef.current);
            }
        }, [hidden, previousHidden]);
        // Issue onDismissedCallback on unmount
        React__namespace.useEffect(function () { return function () { var _a; return (_a = onMenuClosedRef.current) === null || _a === void 0 ? void 0 : _a.call(onMenuClosedRef, propsRef.current); }; }, []);
    }
    function useSubMenuState(_a, dismiss) {
        var hidden = _a.hidden, items = _a.items, theme = _a.theme, className = _a.className, id = _a.id, menuTarget = _a.target;
        var _b = React__namespace.useState(), expandedMenuItemKey = _b[0], setExpandedMenuItemKey = _b[1];
        var _c = React__namespace.useState(), submenuTarget = _c[0], setSubmenuTarget = _c[1];
        var subMenuId = useId(COMPONENT_NAME$c, id);
        var closeSubMenu = React__namespace.useCallback(function () {
            setExpandedMenuItemKey(undefined);
            setSubmenuTarget(undefined);
        }, []);
        var openSubMenu = React__namespace.useCallback(function (_a, target) {
            var submenuItemKey = _a.key;
            if (expandedMenuItemKey === submenuItemKey) {
                return;
            }
            target.focus();
            setExpandedMenuItemKey(submenuItemKey);
            setSubmenuTarget(target);
        }, [expandedMenuItemKey]);
        React__namespace.useEffect(function () {
            if (hidden) {
                closeSubMenu();
            }
        }, [hidden, closeSubMenu]);
        var onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);
        var getSubmenuProps = function () {
            var item = findItemByKeyFromItems(expandedMenuItemKey, items);
            var submenuProps = null;
            if (item) {
                submenuProps = {
                    items: getSubmenuItems(item, { target: menuTarget }),
                    target: submenuTarget,
                    onDismiss: onSubMenuDismiss,
                    isSubMenu: true,
                    id: subMenuId,
                    shouldFocusOnMount: true,
                    directionalHint: getRTL(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,
                    className: className,
                    gapSpace: 0,
                    isBeakVisible: false,
                };
                if (item.subMenuProps) {
                    assign(submenuProps, item.subMenuProps);
                }
                if (item.preferMenuTargetAsEventTarget) {
                    var onItemClick = item.onItemClick;
                    submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);
                }
            }
            return submenuProps;
        };
        return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss];
    }
    function useShouldUpdateFocusOnMouseMove(_a) {
        var delayUpdateFocusOnHover = _a.delayUpdateFocusOnHover, hidden = _a.hidden;
        var shouldUpdateFocusOnMouseEvent = React__namespace.useRef(!delayUpdateFocusOnHover);
        var gotMouseMove = React__namespace.useRef(false);
        React__namespace.useEffect(function () {
            shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;
            gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;
        }, [delayUpdateFocusOnHover, hidden]);
        var onMenuFocusCapture = React__namespace.useCallback(function () {
            if (delayUpdateFocusOnHover) {
                shouldUpdateFocusOnMouseEvent.current = false;
            }
        }, [delayUpdateFocusOnHover]);
        return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture];
    }
    function usePreviousActiveElement(_a, targetWindow) {
        var hidden = _a.hidden, onRestoreFocus = _a.onRestoreFocus;
        var previousActiveElement = React__namespace.useRef();
        var tryFocusPreviousActiveElement = React__namespace.useCallback(function (options) {
            var _a, _b;
            if (onRestoreFocus) {
                onRestoreFocus(options);
            }
            else if (options === null || options === void 0 ? void 0 : options.documentContainsFocus) {
                // Make sure that the focus method actually exists
                // In some cases the object might exist but not be a real element.
                // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.
                (_b = (_a = previousActiveElement.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
            }
        }, [onRestoreFocus]);
        useIsomorphicLayoutEffect(function () {
            var _a;
            if (!hidden) {
                previousActiveElement.current = targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement;
            }
            else if (previousActiveElement.current) {
                tryFocusPreviousActiveElement({
                    originalElement: previousActiveElement.current,
                    containsFocus: true,
                    documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false,
                });
                previousActiveElement.current = undefined;
            }
        }, [hidden, targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement, tryFocusPreviousActiveElement]);
        return [tryFocusPreviousActiveElement];
    }
    function useKeyHandlers(_a, dismiss, hostElement, openSubMenu) {
        var theme = _a.theme, isSubMenu = _a.isSubMenu, _b = _a.focusZoneProps, _c = _b === void 0 ? {} : _b, checkForNoWrap = _c.checkForNoWrap, _d = _c.direction, focusZoneDirection = _d === void 0 ? FocusZoneDirection.vertical : _d;
        /** True if the most recent keydown event was for alt (option) or meta (command). */
        var lastKeyDownWasAltOrMeta = React__namespace.useRef();
        /**
         * Calls `shouldHandleKey` to determine whether the keyboard event should be handled;
         * if so, stops event propagation and dismisses menu(s).
         * @param ev - The keyboard event.
         * @param shouldHandleKey - Returns whether we should handle this keyboard event.
         * @param dismissAllMenus - If true, dismiss all menus. Otherwise, dismiss only the current menu.
         * Only does anything if `shouldHandleKey` returns true.
         * @returns Whether the event was handled.
         */
        var keyHandler = function (ev, shouldHandleKey, dismissAllMenus) {
            var handled = false;
            if (shouldHandleKey(ev)) {
                dismiss(ev, dismissAllMenus);
                ev.preventDefault();
                ev.stopPropagation();
                handled = true;
            }
            return handled;
        };
        /**
         * Checks if the submenu should be closed
         */
        var shouldCloseSubMenu = function (ev) {
            var submenuCloseKey = getRTL(theme) ? KeyCodes.right : KeyCodes.left;
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which !== submenuCloseKey || !isSubMenu) {
                return false;
            }
            return !!(focusZoneDirection === FocusZoneDirection.vertical ||
                (checkForNoWrap && !shouldWrapFocus(ev.target, 'data-no-horizontal-wrap')));
        };
        var shouldHandleKeyDown = function (ev) {
            return (
            // eslint-disable-next-line deprecation/deprecation
            ev.which === KeyCodes.escape ||
                shouldCloseSubMenu(ev) ||
                // eslint-disable-next-line deprecation/deprecation
                (ev.which === KeyCodes.up && (ev.altKey || ev.metaKey)));
        };
        var onKeyDown = function (ev) {
            // Take note if we are processing an alt (option) or meta (command) keydown.
            // See comment in shouldHandleKeyUp for reasoning.
            lastKeyDownWasAltOrMeta.current = isAltOrMeta$1(ev);
            // On Mac, pressing escape dismisses all levels of native context menus
            // eslint-disable-next-line deprecation/deprecation
            var dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());
            return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);
        };
        /**
         * We close the menu on key up only if ALL of the following are true:
         * - Most recent key down was alt or meta (command)
         * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to
         *   expand/collapse the menu)
         * - We're not on a Mac (or iOS)
         *
         * This is because on Windows, pressing alt moves focus to the application menu bar or similar,
         * closing any open context menus. There is not a similar behavior on Macs.
         */
        var shouldHandleKeyUp = function (ev) {
            var keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta$1(ev);
            lastKeyDownWasAltOrMeta.current = false;
            return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());
        };
        var onKeyUp = function (ev) {
            return keyHandler(ev, shouldHandleKeyUp, true /* dismissAllMenus */);
        };
        var onMenuKeyDown = function (ev) {
            // Mark as handled if onKeyDown returns true (for handling collapse cases)
            // or if we are attempting to expand a submenu
            var handled = onKeyDown(ev);
            if (handled || !hostElement.current) {
                return;
            }
            // If we have a modifier key being pressed, we do not want to move focus.
            // Otherwise, handle up and down keys.
            var hasModifier = !!(ev.altKey || ev.metaKey);
            // eslint-disable-next-line deprecation/deprecation
            var isUp = ev.which === KeyCodes.up;
            // eslint-disable-next-line deprecation/deprecation
            var isDown = ev.which === KeyCodes.down;
            if (!hasModifier && (isUp || isDown)) {
                var elementToFocus = isUp
                    ? getLastFocusable(hostElement.current, hostElement.current.lastChild, true)
                    : getFirstFocusable(hostElement.current, hostElement.current.firstChild, true);
                if (elementToFocus) {
                    elementToFocus.focus();
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
        };
        var onItemKeyDown = function (item, ev) {
            var openKey = getRTL(theme) ? KeyCodes.left : KeyCodes.right;
            if (!item.disabled &&
                // eslint-disable-next-line deprecation/deprecation
                (ev.which === openKey || ev.which === KeyCodes.enter || (ev.which === KeyCodes.down && (ev.altKey || ev.metaKey)))) {
                openSubMenu(item, ev.currentTarget, false);
                ev.preventDefault();
            }
        };
        return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown];
    }
    function useScrollHandler(asyncTracker) {
        var isScrollIdle = React__namespace.useRef(true);
        var scrollIdleTimeoutId = React__namespace.useRef();
        /**
         * Scroll handler for the callout to make sure the mouse events
         * for updating focus are not interacting during scroll
         */
        var onScroll = function () {
            if (!isScrollIdle.current && scrollIdleTimeoutId.current !== undefined) {
                asyncTracker.clearTimeout(scrollIdleTimeoutId.current);
                scrollIdleTimeoutId.current = undefined;
            }
            else {
                isScrollIdle.current = false;
            }
            scrollIdleTimeoutId.current = asyncTracker.setTimeout(function () {
                isScrollIdle.current = true;
            }, NavigationIdleDelay);
        };
        return [onScroll, isScrollIdle];
    }
    function useOnSubmenuDismiss(dismiss, closeSubMenu) {
        var isMountedRef = React__namespace.useRef(false);
        React__namespace.useEffect(function () {
            isMountedRef.current = true;
            return function () {
                isMountedRef.current = false;
            };
        }, []);
        /**
         * This function is called ASYNCHRONOUSLY, and so there is a chance it is called
         * after the component is unmounted. The isMountedRef is added to prevent
         * from calling setState() after unmount. Do NOT copy this pattern in synchronous
         * code.
         */
        var onSubMenuDismiss = function (ev, dismissAll) {
            if (dismissAll) {
                dismiss(ev, dismissAll);
            }
            else if (isMountedRef.current) {
                closeSubMenu();
            }
        };
        return onSubMenuDismiss;
    }
    function useSubmenuEnterTimer(_a, asyncTracker) {
        var _b = _a.subMenuHoverDelay, subMenuHoverDelay = _b === void 0 ? NavigationIdleDelay : _b;
        var enterTimerRef = React__namespace.useRef(undefined);
        var cancelSubMenuTimer = function () {
            if (enterTimerRef.current !== undefined) {
                asyncTracker.clearTimeout(enterTimerRef.current);
                enterTimerRef.current = undefined;
            }
        };
        var startSubmenuTimer = function (onTimerExpired) {
            enterTimerRef.current = asyncTracker.setTimeout(function () {
                onTimerExpired();
                cancelSubMenuTimer();
            }, subMenuHoverDelay);
        };
        return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef];
    }
    function useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss) {
        var menuTarget = props.target;
        var onItemMouseEnterBase = function (item, ev, target) {
            if (shouldUpdateFocusOnMouseEvent.current) {
                gotMouseMove.current = true;
            }
            if (shouldIgnoreMouseEvent()) {
                return;
            }
            updateFocusOnMouseEvent(item, ev, target);
        };
        var onItemMouseMoveBase = function (item, ev, target) {
            var targetElement = ev.currentTarget;
            // Always do this check to make sure we record a mouseMove if needed (even if we are timed out)
            if (shouldUpdateFocusOnMouseEvent.current) {
                gotMouseMove.current = true;
            }
            else {
                return;
            }
            if (!isScrollIdle.current ||
                subMenuEntryTimer.current !== undefined ||
                targetElement === (targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement)) {
                return;
            }
            updateFocusOnMouseEvent(item, ev, target);
        };
        var shouldIgnoreMouseEvent = function () {
            return !isScrollIdle.current || !gotMouseMove.current;
        };
        var onMouseItemLeave = function (item, ev) {
            var _a;
            if (shouldIgnoreMouseEvent()) {
                return;
            }
            cancelSubMenuTimer();
            if (expandedMenuItemKey !== undefined) {
                return;
            }
            /**
             * IE11 focus() method forces parents to scroll to top of element.
             * Edge and IE expose a setActive() function for focusable divs that
             * sets the page focus but does not scroll the parent element.
             */
            if (hostElement.current.setActive) {
                try {
                    hostElement.current.setActive();
                }
                catch (e) {
                    /* no-op */
                }
            }
            else {
                (_a = hostElement.current) === null || _a === void 0 ? void 0 : _a.focus();
            }
        };
        /**
         * Handles updating focus when mouseEnter or mouseMove fire.
         * As part of updating focus, This function will also update
         * the expand/collapse state accordingly.
         */
        var updateFocusOnMouseEvent = function (item, ev, target) {
            var targetElement = target ? target : ev.currentTarget;
            if (item.key === expandedMenuItemKey) {
                return;
            }
            cancelSubMenuTimer();
            // If the menu is not expanded we can update focus without any delay
            if (expandedMenuItemKey === undefined) {
                targetElement.focus();
            }
            // Delay updating expanding/dismissing the submenu
            // and only set focus if we have not already done so
            if (hasSubmenu(item)) {
                ev.stopPropagation();
                startSubmenuTimer(function () {
                    targetElement.focus();
                    openSubMenu(item, targetElement, true);
                });
            }
            else {
                startSubmenuTimer(function () {
                    onSubMenuDismiss(ev);
                    targetElement.focus();
                });
            }
        };
        var onItemClick = function (item, ev) {
            onItemClickBase(item, ev, ev.currentTarget);
        };
        var onItemClickBase = function (item, ev, target) {
            var items = getSubmenuItems(item, { target: menuTarget });
            // Cancel an async menu item hover timeout action from being taken and instead
            // just trigger the click event instead.
            cancelSubMenuTimer();
            if (!hasSubmenu(item) && (!items || !items.length)) {
                // This is an item without a menu. Click it.
                executeItemClick(item, ev);
            }
            else {
                if (item.key !== expandedMenuItemKey) {
                    // This has a collapsed sub menu. Expand it.
                    openSubMenu(item, target, 
                    // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing
                    // "Enter" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates
                    // between a real click event and a keypress event (detail should be the number of mouse clicks).
                    // ...Plot twist! For a real click event in IE 11, detail is always 0 (Edge sets it properly to 1).
                    // So we also check the pointerType property, which both Edge and IE set to "mouse" for real clicks
                    // and "" for pressing "Enter" with Narrator on.
                    ev.nativeEvent.detail !== 0 || ev.nativeEvent.pointerType === 'mouse');
                }
            }
            ev.stopPropagation();
            ev.preventDefault();
        };
        var onAnchorClick = function (item, ev) {
            executeItemClick(item, ev);
            ev.stopPropagation();
        };
        var executeItemClick = function (item, ev) {
            if (item.disabled || item.isDisabled) {
                return;
            }
            if (item.preferMenuTargetAsEventTarget) {
                overrideTarget(ev, menuTarget);
            }
            var shouldDismiss = false;
            if (item.onClick) {
                shouldDismiss = !!item.onClick(ev, item);
            }
            else if (props.onItemClick) {
                shouldDismiss = !!props.onItemClick(ev, item);
            }
            if (shouldDismiss || !ev.defaultPrevented) {
                dismiss(ev, true);
            }
        };
        return [
            onItemMouseEnterBase,
            onItemMouseMoveBase,
            onMouseItemLeave,
            onItemClick,
            onAnchorClick,
            executeItemClick,
            onItemClickBase,
        ];
    }
    //#endregion
    var ContextualMenuBase = React__namespace.memo(React__namespace.forwardRef(function (propsWithoutDefaults, forwardedRef) {
        var _a;
        var _b = getPropsWithDefaults(DEFAULT_PROPS$7, propsWithoutDefaults); _b.ref; var props = tslib.__rest(_b, ["ref"]);
        var hostElement = React__namespace.useRef(null);
        var asyncTracker = useAsync();
        var menuId = useId(COMPONENT_NAME$c, props.id);
        useWarnings({
            name: COMPONENT_NAME$c,
            props: props,
            deprecations: {
                getMenuClassNames: 'styles',
            },
        });
        var dismiss = function (ev, dismissAll) { var _a; return (_a = props.onDismiss) === null || _a === void 0 ? void 0 : _a.call(props, ev, dismissAll); };
        var _c = useTarget(props.target, hostElement), targetRef = _c[0], targetWindow = _c[1];
        var tryFocusPreviousActiveElement = usePreviousActiveElement(props, targetWindow)[0];
        var _d = useSubMenuState(props, dismiss), expandedMenuItemKey = _d[0], openSubMenu = _d[1], getSubmenuProps = _d[2], onSubMenuDismiss = _d[3];
        var _e = useShouldUpdateFocusOnMouseMove(props), shouldUpdateFocusOnMouseEvent = _e[0], gotMouseMove = _e[1], onMenuFocusCapture = _e[2];
        var _f = useScrollHandler(asyncTracker), onScroll = _f[0], isScrollIdle = _f[1];
        var _g = useSubmenuEnterTimer(props, asyncTracker), cancelSubMenuTimer = _g[0], startSubmenuTimer = _g[1], subMenuEntryTimer = _g[2];
        var responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);
        useVisibility(props);
        var _h = useKeyHandlers(props, dismiss, hostElement, openSubMenu), onKeyDown = _h[0], onKeyUp = _h[1], onMenuKeyDown = _h[2], onItemKeyDown = _h[3];
        var _j = useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss), onItemMouseEnterBase = _j[0], onItemMouseMoveBase = _j[1], onMouseItemLeave = _j[2], onItemClick = _j[3], onAnchorClick = _j[4], executeItemClick = _j[5], onItemClickBase = _j[6];
        //#region Render helpers
        var onDefaultRenderMenuList = function (menuListProps, 
        // eslint-disable-next-line deprecation/deprecation
        menuClassNames, defaultRender) {
            var indexCorrection = 0;
            var items = menuListProps.items, totalItemCount = menuListProps.totalItemCount, hasCheckmarks = menuListProps.hasCheckmarks, hasIcons = menuListProps.hasIcons;
            return (React__namespace.createElement("ul", { className: menuClassNames.list, onKeyDown: onKeyDown, onKeyUp: onKeyUp, role: 'presentation' }, items.map(function (item, index) {
                var menuItem = renderMenuItem(item, index, indexCorrection, totalItemCount, hasCheckmarks, hasIcons, menuClassNames);
                if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
                    var indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
                    indexCorrection += indexIncrease;
                }
                return menuItem;
            })));
        };
        var renderFocusZone = function (children, adjustedFocusZoneProps) {
            var _a = props.focusZoneAs, ChildrenRenderer = _a === void 0 ? FocusZone : _a;
            return React__namespace.createElement(ChildrenRenderer, tslib.__assign({}, adjustedFocusZoneProps), children);
        };
        /**
         * !!!IMPORTANT!!! Avoid mutating `item: IContextualMenuItem` argument. It will
         * cause the menu items to always re-render because the component update is based on shallow comparison.
         */
        var renderMenuItem = function (item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons, 
        // eslint-disable-next-line deprecation/deprecation
        menuClassNames) {
            var _a;
            var renderedItems = [];
            var iconProps = item.iconProps || { iconName: 'None' };
            var getItemClassNames = item.getItemClassNames, // eslint-disable-line deprecation/deprecation
            itemProps = item.itemProps;
            var styles = itemProps ? itemProps.styles : undefined;
            // We only send a dividerClassName when the item to be rendered is a divider.
            // For all other cases, the default divider style is used.
            var dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : undefined;
            var subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : '';
            // eslint-disable-next-line deprecation/deprecation
            var itemClassNames;
            // IContextualMenuItem#getItemClassNames for backwards compatibility
            // otherwise uses mergeStyles for class names.
            if (getItemClassNames) {
                itemClassNames = getItemClassNames(props.theme, isItemDisabled(item), expandedMenuItemKey === item.key, !!getIsChecked(item), !!item.href, iconProps.iconName !== 'None', item.className, dividerClassName, iconProps.className, subMenuIconClassName, item.primaryDisabled);
            }
            else {
                var itemStyleProps = {
                    theme: props.theme,
                    disabled: isItemDisabled(item),
                    expanded: expandedMenuItemKey === item.key,
                    checked: !!getIsChecked(item),
                    isAnchorLink: !!item.href,
                    knownIcon: iconProps.iconName !== 'None',
                    itemClassName: item.className,
                    dividerClassName: dividerClassName,
                    iconClassName: iconProps.className,
                    subMenuClassName: subMenuIconClassName,
                    primaryDisabled: item.primaryDisabled,
                };
                // We need to generate default styles then override if styles are provided
                // since the ContextualMenu currently handles item classNames.
                itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a = menuClassNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.menuItem, styles), itemStyleProps);
            }
            // eslint-disable-next-line deprecation/deprecation
            if (item.text === '-' || item.name === '-') {
                item.itemType = ContextualMenuItemType.Divider;
            }
            switch (item.itemType) {
                case ContextualMenuItemType.Divider:
                    renderedItems.push(renderSeparator(index, itemClassNames));
                    break;
                case ContextualMenuItemType.Header:
                    renderedItems.push(renderSeparator(index, itemClassNames));
                    var headerItem = renderHeaderMenuItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons);
                    renderedItems.push(renderListItem(headerItem, item.key || index, itemClassNames, item.title));
                    break;
                case ContextualMenuItemType.Section:
                    renderedItems.push(renderSectionItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons));
                    break;
                default:
                    var defaultRenderNormalItem = function () {
                        return renderNormalItem(item, itemClassNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);
                    };
                    var menuItem = props.onRenderContextualMenuItem
                        ? props.onRenderContextualMenuItem(item, defaultRenderNormalItem)
                        : defaultRenderNormalItem();
                    renderedItems.push(renderListItem(menuItem, item.key || index, itemClassNames, item.title));
                    break;
            }
            // Since multiple nodes *could* be rendered, wrap them all in a fragment with this item's key.
            // This ensures the reconciler handles multi-item output per-node correctly and does not re-mount content.
            return React__namespace.createElement(React__namespace.Fragment, { key: item.key }, renderedItems);
        };
        var defaultMenuItemRenderer = function (item, 
        // eslint-disable-next-line deprecation/deprecation
        menuClassNames) {
            var index = item.index, focusableElementIndex = item.focusableElementIndex, totalItemCount = item.totalItemCount, hasCheckmarks = item.hasCheckmarks, hasIcons = item.hasIcons;
            return renderMenuItem(item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons, menuClassNames);
        };
        var renderSectionItem = function (sectionItem, 
        // eslint-disable-next-line deprecation/deprecation
        itemClassNames, 
        // eslint-disable-next-line deprecation/deprecation
        menuClassNames, index, hasCheckmarks, hasIcons) {
            var sectionProps = sectionItem.sectionProps;
            if (!sectionProps) {
                return;
            }
            var headerItem;
            var groupProps;
            if (sectionProps.title) {
                var headerContextualMenuItem = undefined;
                var ariaLabelledby = '';
                if (typeof sectionProps.title === 'string') {
                    // Since title is a user-facing string, it needs to be stripped
                    // of whitespace in order to build a valid element ID
                    var id_1 = menuId + sectionProps.title.replace(/\s/g, '');
                    headerContextualMenuItem = {
                        key: "section-" + sectionProps.title + "-title",
                        itemType: ContextualMenuItemType.Header,
                        text: sectionProps.title,
                        id: id_1,
                    };
                    ariaLabelledby = id_1;
                }
                else {
                    var id_2 = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\s/g, '');
                    headerContextualMenuItem = tslib.__assign(tslib.__assign({}, sectionProps.title), { id: id_2 });
                    ariaLabelledby = id_2;
                }
                if (headerContextualMenuItem) {
                    groupProps = {
                        role: 'group',
                        'aria-labelledby': ariaLabelledby,
                    };
                    headerItem = renderHeaderMenuItem(headerContextualMenuItem, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons);
                }
            }
            if (sectionProps.items && sectionProps.items.length > 0) {
                return (React__namespace.createElement("li", { role: "presentation", key: sectionProps.key || sectionItem.key || "section-" + index },
                    React__namespace.createElement("div", tslib.__assign({}, groupProps),
                        React__namespace.createElement("ul", { className: menuClassNames.list, role: "presentation" },
                            sectionProps.topDivider && renderSeparator(index, itemClassNames, true, true),
                            headerItem && renderListItem(headerItem, sectionItem.key || index, itemClassNames, sectionItem.title),
                            sectionProps.items.map(function (contextualMenuItem, itemsIndex) {
                                return renderMenuItem(contextualMenuItem, itemsIndex, itemsIndex, sectionProps.items.length, hasCheckmarks, hasIcons, menuClassNames);
                            }),
                            sectionProps.bottomDivider && renderSeparator(index, itemClassNames, false, true)))));
            }
        };
        var renderListItem = function (content, key, classNames, // eslint-disable-line deprecation/deprecation
        title) {
            return (React__namespace.createElement("li", { role: "presentation", title: title, key: key, className: classNames.item }, content));
        };
        var renderSeparator = function (index, classNames, // eslint-disable-line deprecation/deprecation
        top, fromSection) {
            if (fromSection || index > 0) {
                return (React__namespace.createElement("li", { role: "separator", key: 'separator-' + index + (top === undefined ? '' : top ? '-top' : '-bottom'), className: classNames.divider, "aria-hidden": "true" }));
            }
            return null;
        };
        var renderNormalItem = function (item, classNames, // eslint-disable-line deprecation/deprecation
        index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {
            if (item.onRender) {
                return item.onRender(tslib.__assign({ 'aria-posinset': focusableElementIndex + 1, 'aria-setsize': totalItemCount }, item), dismiss);
            }
            var contextualMenuItemAs = props.contextualMenuItemAs;
            var commonProps = {
                item: item,
                classNames: classNames,
                index: index,
                focusableElementIndex: focusableElementIndex,
                totalItemCount: totalItemCount,
                hasCheckmarks: hasCheckmarks,
                hasIcons: hasIcons,
                contextualMenuItemAs: contextualMenuItemAs,
                onItemMouseEnter: onItemMouseEnterBase,
                onItemMouseLeave: onMouseItemLeave,
                onItemMouseMove: onItemMouseMoveBase,
                onItemMouseDown: onItemMouseDown,
                executeItemClick: executeItemClick,
                onItemKeyDown: onItemKeyDown,
                expandedMenuItemKey: expandedMenuItemKey,
                openSubMenu: openSubMenu,
                dismissSubMenu: onSubMenuDismiss,
                dismissMenu: dismiss,
            };
            if (item.href) {
                return React__namespace.createElement(ContextualMenuAnchor, tslib.__assign({}, commonProps, { onItemClick: onAnchorClick }));
            }
            if (item.split && hasSubmenu(item)) {
                return (React__namespace.createElement(ContextualMenuSplitButton, tslib.__assign({}, commonProps, { onItemClick: onItemClick, onItemClickBase: onItemClickBase, onTap: cancelSubMenuTimer })));
            }
            return React__namespace.createElement(ContextualMenuButton, tslib.__assign({}, commonProps, { onItemClick: onItemClick, onItemClickBase: onItemClickBase }));
        };
        var renderHeaderMenuItem = function (item, 
        // eslint-disable-next-line deprecation/deprecation
        itemClassNames, 
        // eslint-disable-next-line deprecation/deprecation
        menuClassNames, index, hasCheckmarks, hasIcons) {
            var _a = props.contextualMenuItemAs, ChildrenRenderer = _a === void 0 ? ContextualMenuItem : _a;
            var itemProps = item.itemProps, id = item.id;
            var divHtmlProperties = itemProps && getNativeProps(itemProps, divProperties);
            return (
            // eslint-disable-next-line deprecation/deprecation
            React__namespace.createElement("div", tslib.__assign({ id: id, className: menuClassNames.header }, divHtmlProperties, { style: item.style }),
                React__namespace.createElement(ChildrenRenderer, tslib.__assign({ item: item, classNames: itemClassNames, index: index, onCheckmarkClick: hasCheckmarks ? onItemClick : undefined, hasIcons: hasIcons }, itemProps))));
        };
        //#endregion
        //#region Main render
        var isBeakVisible = props.isBeakVisible;
        var items = props.items, labelElementId = props.labelElementId, id = props.id, className = props.className, beakWidth = props.beakWidth, directionalHint = props.directionalHint, directionalHintForRTL = props.directionalHintForRTL, alignTargetEdge = props.alignTargetEdge, gapSpace = props.gapSpace, coverTarget = props.coverTarget, ariaLabel = props.ariaLabel, doNotLayer = props.doNotLayer, target = props.target, bounds = props.bounds, useTargetWidth = props.useTargetWidth, useTargetAsMinWidth = props.useTargetAsMinWidth, directionalHintFixed = props.directionalHintFixed, shouldFocusOnMount = props.shouldFocusOnMount, shouldFocusOnContainer = props.shouldFocusOnContainer, title = props.title, styles = props.styles, theme = props.theme, calloutProps = props.calloutProps, _k = props.onRenderSubMenu, onRenderSubMenu = _k === void 0 ? onDefaultRenderSubMenu : _k, _l = props.onRenderMenuList, onRenderMenuList = _l === void 0 ? function (menuListProps, defaultRender) { return onDefaultRenderMenuList(menuListProps, classNames); } : _l, focusZoneProps = props.focusZoneProps, 
        // eslint-disable-next-line deprecation/deprecation
        getMenuClassNames = props.getMenuClassNames;
        var classNames = getMenuClassNames
            ? getMenuClassNames(theme, className)
            : getClassNames$1j(styles, {
                theme: theme,
                className: className,
            });
        var hasIcons = itemsHaveIcons(items);
        function itemsHaveIcons(contextualMenuItems) {
            for (var _i = 0, contextualMenuItems_1 = contextualMenuItems; _i < contextualMenuItems_1.length; _i++) {
                var item = contextualMenuItems_1[_i];
                if (item.iconProps) {
                    return true;
                }
                if (item.itemType === ContextualMenuItemType.Section &&
                    item.sectionProps &&
                    itemsHaveIcons(item.sectionProps.items)) {
                    return true;
                }
            }
            return false;
        }
        var adjustedFocusZoneProps = tslib.__assign(tslib.__assign({ direction: FocusZoneDirection.vertical, handleTabKey: FocusZoneTabbableElements.all, isCircularNavigation: true }, focusZoneProps), { className: css(classNames.root, (_a = props.focusZoneProps) === null || _a === void 0 ? void 0 : _a.className) });
        var hasCheckmarks = canAnyMenuItemsCheck(items);
        var submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;
        isBeakVisible = isBeakVisible === undefined ? responsiveMode <= ResponsiveMode.medium : isBeakVisible;
        /**
         * When useTargetWidth is true, get the width of the target element and apply it for the context menu container
         */
        var contextMenuStyle;
        var targetAsHtmlElement = targetRef.current;
        if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {
            var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();
            var targetWidth = targetBoundingRect.width - 2; /* Accounts for 1px border */
            if (useTargetWidth) {
                contextMenuStyle = {
                    width: targetWidth,
                };
            }
            else if (useTargetAsMinWidth) {
                contextMenuStyle = {
                    minWidth: targetWidth,
                };
            }
        }
        // The menu should only return if items were provided, if no items were provided then it should not appear.
        if (items && items.length > 0) {
            var totalItemCount_1 = 0;
            for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                var item = items_2[_i];
                if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
                    var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
                    totalItemCount_1 += itemCount;
                }
            }
            var calloutStyles_1 = classNames.subComponentStyles
                ? classNames.subComponentStyles.callout
                : undefined;
            return (React__namespace.createElement(MenuContext.Consumer, null, function (menuContext) { return (React__namespace.createElement(Callout$1, tslib.__assign({ styles: calloutStyles_1, onRestoreFocus: tryFocusPreviousActiveElement }, calloutProps, { target: target || menuContext.target, isBeakVisible: isBeakVisible, beakWidth: beakWidth, directionalHint: directionalHint, directionalHintForRTL: directionalHintForRTL, gapSpace: gapSpace, coverTarget: coverTarget, doNotLayer: doNotLayer, className: css('ms-ContextualMenu-Callout', calloutProps && calloutProps.className), setInitialFocus: shouldFocusOnMount, onDismiss: props.onDismiss || menuContext.onDismiss, onScroll: onScroll, bounds: bounds, directionalHintFixed: directionalHintFixed, alignTargetEdge: alignTargetEdge, hidden: props.hidden || menuContext.hidden, ref: forwardedRef }),
                React__namespace.createElement("div", { style: contextMenuStyle, ref: hostElement, id: id, className: classNames.container, tabIndex: shouldFocusOnContainer ? 0 : -1, onKeyDown: onMenuKeyDown, onKeyUp: onKeyUp, onFocusCapture: onMenuFocusCapture, "aria-label": ariaLabel, "aria-labelledby": labelElementId, role: 'menu' },
                    title && React__namespace.createElement("div", { className: classNames.title },
                        " ",
                        title,
                        " "),
                    items && items.length
                        ? renderFocusZone(onRenderMenuList({
                            ariaLabel: ariaLabel,
                            items: items,
                            totalItemCount: totalItemCount_1,
                            hasCheckmarks: hasCheckmarks,
                            hasIcons: hasIcons,
                            defaultMenuItemRenderer: function (item) {
                                return defaultMenuItemRenderer(item, classNames);
                            },
                            labelElementId: labelElementId,
                        }, function (menuListProps, defaultRender) { return onDefaultRenderMenuList(menuListProps, classNames); }), adjustedFocusZoneProps)
                        : null,
                    submenuProps && onRenderSubMenu(submenuProps, onDefaultRenderSubMenu)))); }));
        }
        else {
            return null;
        }
        //#endregion
    }), function (prevProps, newProps) {
        if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {
            // Do not update when hidden.
            return true;
        }
        return shallowCompare(prevProps, newProps);
    });
    ContextualMenuBase.displayName = 'ContextualMenuBase';
    /**
     * Returns true if the key for the event is alt (Mac option) or meta (Mac command).
     */
    function isAltOrMeta$1(ev) {
        // eslint-disable-next-line deprecation/deprecation
        return ev.which === KeyCodes.alt || ev.key === 'Meta';
    }
    function onItemMouseDown(item, ev) {
        var _a;
        (_a = item.onMouseDown) === null || _a === void 0 ? void 0 : _a.call(item, item, ev);
    }
    function onDefaultRenderSubMenu(subMenuProps, defaultRender) {
        throw Error('ContextualMenuBase: onRenderSubMenu callback is null or undefined. ' +
            'Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.');
    }
    /**
     * Returns the item that matches a given key if any.
     * @param key - The key of the item to match
     * @param items - The items to look for the key
     */
    function findItemByKeyFromItems(key, items) {
        for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
            var item = items_3[_i];
            if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {
                var match = findItemByKeyFromItems(key, item.sectionProps.items);
                if (match) {
                    return match;
                }
            }
            else if (item.key && item.key === key) {
                return item;
            }
        }
    }
    function getOnClickWithOverrideTarget(onClick, target) {
        return onClick
            ? function (ev, item) {
                overrideTarget(ev, target);
                return onClick(ev, item);
            }
            : onClick;
    }
    function overrideTarget(ev, target) {
        if (ev && target) {
            ev.persist();
            if (target instanceof Event) {
                ev.target = target.target;
            }
            else if (target instanceof Element) {
                ev.target = target;
            }
        }
    }

    var GlobalClassNames$n = {
        root: 'ms-ContextualMenu',
        container: 'ms-ContextualMenu-container',
        list: 'ms-ContextualMenu-list',
        header: 'ms-ContextualMenu-header',
        title: 'ms-ContextualMenu-title',
        isopen: 'is-open',
    };
    var getStyles$z = function (props) {
        var className = props.className, theme = props.theme;
        var classNames = getGlobalClassNames(GlobalClassNames$n, theme);
        var fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;
        return {
            root: [
                theme.fonts.medium,
                classNames.root,
                classNames.isopen,
                {
                    backgroundColor: semanticColors.menuBackground,
                    minWidth: '180px',
                },
                className,
            ],
            container: [
                classNames.container,
                {
                    selectors: {
                        ':focus': { outline: 0 },
                    },
                },
            ],
            list: [
                classNames.list,
                classNames.isopen,
                {
                    listStyleType: 'none',
                    margin: '0',
                    padding: '0',
                },
            ],
            header: [
                classNames.header,
                fonts.small,
                {
                    fontWeight: FontWeights.semibold,
                    color: semanticColors.menuHeader,
                    background: 'none',
                    backgroundColor: 'transparent',
                    border: 'none',
                    height: CONTEXTUAL_MENU_ITEM_HEIGHT,
                    lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
                    cursor: 'default',
                    padding: '0px 6px',
                    userSelect: 'none',
                    textAlign: 'left',
                },
            ],
            title: [
                classNames.title,
                {
                    fontSize: fonts.mediumPlus.fontSize,
                    paddingRight: '14px',
                    paddingLeft: '14px',
                    paddingBottom: '5px',
                    paddingTop: '5px',
                    backgroundColor: semanticColors.menuItemBackgroundPressed,
                },
            ],
            subComponentStyles: {
                callout: {
                    root: {
                        boxShadow: effects.elevation8,
                    },
                },
                menuItem: {},
            },
        };
    };

    function onRenderSubMenu(subMenuProps) {
        return React__namespace.createElement(LocalContextualMenu, tslib.__assign({}, subMenuProps));
    }
    // This is to prevent cyclic import with ContextualMenu.base.tsx.
    var LocalContextualMenu = styled(ContextualMenuBase, getStyles$z, function (props) { return ({
        onRenderSubMenu: props.onRenderSubMenu
            ? composeRenderFunction(props.onRenderSubMenu, onRenderSubMenu)
            : onRenderSubMenu,
    }); }, { scope: 'ContextualMenu' });
    /**
     * ContextualMenu description
     */
    var ContextualMenu = LocalContextualMenu;
    ContextualMenu.displayName = 'ContextualMenu';

    var ButtonGlobalClassNames = {
        msButton: 'ms-Button',
        msButtonHasMenu: 'ms-Button--hasMenu',
        msButtonIcon: 'ms-Button-icon',
        msButtonMenuIcon: 'ms-Button-menuIcon',
        msButtonLabel: 'ms-Button-label',
        msButtonDescription: 'ms-Button-description',
        msButtonScreenReaderText: 'ms-Button-screenReaderText',
        msButtonFlexContainer: 'ms-Button-flexContainer',
        msButtonTextContainer: 'ms-Button-textContainer',
    };
    var getBaseButtonClassNames = memoizeFunction(function (theme, styles, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {
        var _a, _b;
        var classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});
        var isExpanded = expanded && !isSplit;
        return mergeStyleSets({
            root: [
                classNames.msButton,
                styles.root,
                variantClassName,
                checked && ['is-checked', styles.rootChecked],
                isExpanded && [
                    'is-expanded',
                    styles.rootExpanded,
                    {
                        selectors: (_a = {},
                            _a[":hover ." + classNames.msButtonIcon] = styles.iconExpandedHovered,
                            // menuIcon falls back to rootExpandedHovered to support original behavior
                            _a[":hover ." + classNames.msButtonMenuIcon] = styles.menuIconExpandedHovered || styles.rootExpandedHovered,
                            _a[':hover'] = styles.rootExpandedHovered,
                            _a),
                    },
                ],
                hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu],
                disabled && ['is-disabled', styles.rootDisabled],
                !disabled &&
                    !isExpanded &&
                    !checked && {
                    selectors: (_b = {
                            ':hover': styles.rootHovered
                        },
                        _b[":hover ." + classNames.msButtonLabel] = styles.labelHovered,
                        _b[":hover ." + classNames.msButtonIcon] = styles.iconHovered,
                        _b[":hover ." + classNames.msButtonDescription] = styles.descriptionHovered,
                        _b[":hover ." + classNames.msButtonMenuIcon] = styles.menuIconHovered,
                        _b[':focus'] = styles.rootFocused,
                        _b[':active'] = styles.rootPressed,
                        _b[":active ." + classNames.msButtonIcon] = styles.iconPressed,
                        _b[":active ." + classNames.msButtonDescription] = styles.descriptionPressed,
                        _b[":active ." + classNames.msButtonMenuIcon] = styles.menuIconPressed,
                        _b),
                },
                disabled && checked && [styles.rootCheckedDisabled],
                !disabled &&
                    checked && {
                    selectors: {
                        ':hover': styles.rootCheckedHovered,
                        ':active': styles.rootCheckedPressed,
                    },
                },
                className,
            ],
            flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],
            textContainer: [classNames.msButtonTextContainer, styles.textContainer],
            icon: [
                classNames.msButtonIcon,
                iconClassName,
                styles.icon,
                isExpanded && styles.iconExpanded,
                checked && styles.iconChecked,
                disabled && styles.iconDisabled,
            ],
            label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],
            menuIcon: [
                classNames.msButtonMenuIcon,
                menuIconClassName,
                styles.menuIcon,
                checked && styles.menuIconChecked,
                disabled && !isSplit && styles.menuIconDisabled,
                !disabled &&
                    !isExpanded &&
                    !checked && {
                    selectors: {
                        ':hover': styles.menuIconHovered,
                        ':active': styles.menuIconPressed,
                    },
                },
                isExpanded && ['is-expanded', styles.menuIconExpanded],
            ],
            description: [
                classNames.msButtonDescription,
                styles.description,
                checked && styles.descriptionChecked,
                disabled && styles.descriptionDisabled,
            ],
            screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText],
        });
    });

    var getSplitButtonClassNames = memoizeFunction(function (styles, disabled, expanded, checked, primaryDisabled) {
        return {
            root: mergeStyles(styles.splitButtonMenuButton, expanded && [styles.splitButtonMenuButtonExpanded], disabled && [styles.splitButtonMenuButtonDisabled], checked && !disabled && [styles.splitButtonMenuButtonChecked], primaryDisabled &&
                !disabled && [
                {
                    selectors: {
                        ':focus': styles.splitButtonMenuFocused,
                    },
                },
            ]),
            splitButtonContainer: mergeStyles(styles.splitButtonContainer, !disabled &&
                checked && [
                styles.splitButtonContainerChecked,
                {
                    selectors: {
                        ':hover': styles.splitButtonContainerCheckedHovered,
                    },
                },
            ], !disabled &&
                !checked && [
                {
                    selectors: {
                        ':hover': styles.splitButtonContainerHovered,
                        ':focus': styles.splitButtonContainerFocused,
                    },
                },
            ], disabled && styles.splitButtonContainerDisabled),
            icon: mergeStyles(styles.splitButtonMenuIcon, disabled && styles.splitButtonMenuIconDisabled, !disabled && primaryDisabled && styles.splitButtonMenuIcon),
            flexContainer: mergeStyles(styles.splitButtonFlexContainer),
            divider: mergeStyles(styles.splitButtonDivider, (primaryDisabled || disabled) && styles.splitButtonDividerDisabled),
        };
    });

    var TouchIdleDelay$1 = 500; /* ms */
    var COMPONENT_NAME$b = 'BaseButton';
    /**
     * {@docCategory Button}
     */
    var BaseButton = /** @class */ (function (_super) {
        tslib.__extends(BaseButton, _super);
        function BaseButton(props) {
            var _this = _super.call(this, props) || this;
            _this._buttonElement = React__namespace.createRef();
            _this._splitButtonContainer = React__namespace.createRef();
            _this._mergedRef = createMergedRef();
            _this._renderedVisibleMenu = false;
            _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {
                return tslib.__assign(tslib.__assign({}, keytipProps), { hasMenu: true });
            });
            _this._onRenderIcon = function (buttonProps, defaultRender) {
                var iconProps = _this.props.iconProps;
                if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {
                    var className = iconProps.className, imageProps = iconProps.imageProps, rest = tslib.__rest(iconProps, ["className", "imageProps"]);
                    // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon
                    // do not have this prop.
                    if (iconProps.styles) {
                        return React__namespace.createElement(Icon$1, tslib.__assign({ className: css(_this._classNames.icon, className), imageProps: imageProps }, rest));
                    }
                    if (iconProps.iconName) {
                        return React__namespace.createElement(FontIcon, tslib.__assign({ className: css(_this._classNames.icon, className) }, rest));
                    }
                    if (imageProps) {
                        return React__namespace.createElement(ImageIcon, tslib.__assign({ className: css(_this._classNames.icon, className), imageProps: imageProps }, rest));
                    }
                }
                return null;
            };
            _this._onRenderTextContents = function () {
                var _a = _this.props, text = _a.text, children = _a.children, 
                // eslint-disable-next-line deprecation/deprecation
                _b = _a.secondaryText, 
                // eslint-disable-next-line deprecation/deprecation
                secondaryText = _b === void 0 ? _this.props.description : _b, _c = _a.onRenderText, onRenderText = _c === void 0 ? _this._onRenderText : _c, _d = _a.onRenderDescription, onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;
                if (text || typeof children === 'string' || secondaryText) {
                    return (React__namespace.createElement("span", { className: _this._classNames.textContainer },
                        onRenderText(_this.props, _this._onRenderText),
                        onRenderDescription(_this.props, _this._onRenderDescription)));
                }
                return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];
            };
            _this._onRenderText = function () {
                var text = _this.props.text;
                var children = _this.props.children;
                // For backwards compat, we should continue to take in the text content from children.
                if (text === undefined && typeof children === 'string') {
                    text = children;
                }
                if (_this._hasText()) {
                    return (React__namespace.createElement("span", { key: _this._labelId, className: _this._classNames.label, id: _this._labelId }, text));
                }
                return null;
            };
            _this._onRenderChildren = function () {
                var children = _this.props.children;
                // If children is just a string, either it or the text will be rendered via onRenderLabel
                // If children is another component, it will be rendered after text
                if (typeof children === 'string') {
                    return null;
                }
                return children;
            };
            _this._onRenderDescription = function (props) {
                // eslint-disable-next-line deprecation/deprecation
                var _a = props.secondaryText, secondaryText = _a === void 0 ? _this.props.description : _a;
                // ms-Button-description is only shown when the button type is compound.
                // In other cases it will not be displayed.
                return secondaryText ? (React__namespace.createElement("span", { key: _this._descriptionId, className: _this._classNames.description, id: _this._descriptionId }, secondaryText)) : null;
            };
            _this._onRenderAriaDescription = function () {
                var ariaDescription = _this.props.ariaDescription;
                // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,
                // otherwise it will be assigned to descriptionSpan.
                return ariaDescription ? (React__namespace.createElement("span", { className: _this._classNames.screenReaderText, id: _this._ariaDescriptionId }, ariaDescription)) : null;
            };
            _this._onRenderMenuIcon = function (props) {
                var menuIconProps = _this.props.menuIconProps;
                return React__namespace.createElement(FontIcon, tslib.__assign({ iconName: "ChevronDown" }, menuIconProps, { className: _this._classNames.menuIcon }));
            };
            _this._onRenderMenu = function (menuProps) {
                var MenuType = _this.props.menuAs ? composeComponentAs(_this.props.menuAs, ContextualMenu) : ContextualMenu;
                return React__namespace.createElement(MenuType, tslib.__assign({}, menuProps));
            };
            _this._onDismissMenu = function (ev) {
                var menuProps = _this.props.menuProps;
                if (menuProps && menuProps.onDismiss) {
                    menuProps.onDismiss(ev);
                }
                if (!ev || !ev.defaultPrevented) {
                    _this._dismissMenu();
                }
            };
            _this._dismissMenu = function () {
                _this._menuShouldFocusOnMount = undefined;
                _this._menuShouldFocusOnContainer = undefined;
                _this.setState({ menuHidden: true });
            };
            _this._openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {
                if (shouldFocusOnMount === void 0) { shouldFocusOnMount = true; }
                if (_this.props.menuProps) {
                    _this._menuShouldFocusOnContainer = shouldFocusOnContainer;
                    _this._menuShouldFocusOnMount = shouldFocusOnMount;
                    _this._renderedVisibleMenu = true;
                    _this.setState({ menuHidden: false });
                }
            };
            _this._onToggleMenu = function (shouldFocusOnContainer) {
                var shouldFocusOnMount = true;
                if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {
                    shouldFocusOnMount = false;
                }
                _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();
            };
            _this._onSplitContainerFocusCapture = function (ev) {
                var container = _this._splitButtonContainer.current;
                // If the target is coming from the portal we do not need to set focus on the container.
                if (!container || (ev.target && portalContainsElement(ev.target, container))) {
                    return;
                }
                // We should never be able to focus the individual buttons in a split button. Focus
                // should always remain on the container.
                container.focus();
            };
            _this._onSplitButtonPrimaryClick = function (ev) {
                if (!_this.state.menuHidden) {
                    _this._dismissMenu();
                }
                if (!_this._processingTouch && _this.props.onClick) {
                    _this.props.onClick(ev);
                }
                else if (_this._processingTouch) {
                    _this._onMenuClick(ev);
                }
            };
            _this._onKeyDown = function (ev) {
                // explicity cancelling event so click won't fire after this
                // eslint-disable-next-line deprecation/deprecation
                if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
                else if (!_this.props.disabled) {
                    if (_this.props.menuProps) {
                        _this._onMenuKeyDown(ev);
                    }
                    else if (_this.props.onKeyDown !== undefined) {
                        _this.props.onKeyDown(ev); // not cancelling event because it's not disabled
                    }
                }
            };
            _this._onKeyUp = function (ev) {
                if (!_this.props.disabled && _this.props.onKeyUp !== undefined) {
                    _this.props.onKeyUp(ev); // not cancelling event because it's not disabled
                }
            };
            _this._onKeyPress = function (ev) {
                if (!_this.props.disabled && _this.props.onKeyPress !== undefined) {
                    _this.props.onKeyPress(ev); // not cancelling event because it's not disabled
                }
            };
            _this._onMouseUp = function (ev) {
                if (!_this.props.disabled && _this.props.onMouseUp !== undefined) {
                    _this.props.onMouseUp(ev); // not cancelling event because it's not disabled
                }
            };
            _this._onMouseDown = function (ev) {
                if (!_this.props.disabled && _this.props.onMouseDown !== undefined) {
                    _this.props.onMouseDown(ev); // not cancelling event because it's not disabled
                }
            };
            _this._onClick = function (ev) {
                if (!_this.props.disabled) {
                    if (_this.props.menuProps) {
                        _this._onMenuClick(ev);
                    }
                    else if (_this.props.onClick !== undefined) {
                        _this.props.onClick(ev); // not cancelling event because it's not disabled
                    }
                }
            };
            _this._onSplitButtonContainerKeyDown = function (ev) {
                // eslint-disable-next-line deprecation/deprecation
                if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
                    if (_this._buttonElement.current) {
                        _this._buttonElement.current.click();
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                }
                else {
                    _this._onMenuKeyDown(ev);
                }
            };
            _this._onMenuKeyDown = function (ev) {
                if (_this.props.disabled) {
                    return;
                }
                if (_this.props.onKeyDown) {
                    _this.props.onKeyDown(ev);
                }
                // eslint-disable-next-line deprecation/deprecation
                var isUp = ev.which === KeyCodes.up;
                // eslint-disable-next-line deprecation/deprecation
                var isDown = ev.which === KeyCodes.down;
                if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {
                    var onMenuClick = _this.props.onMenuClick;
                    if (onMenuClick) {
                        onMenuClick(ev, _this.props);
                    }
                    _this._onToggleMenu(false);
                    ev.preventDefault();
                    ev.stopPropagation();
                }
                // eslint-disable-next-line deprecation/deprecation
                if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
                    // We manually set the focus visibility to true if opening via Enter or Space to account for the scenario where
                    // a user clicks on the button, closes the menu and then opens it via keyboard. In this scenario our default logic
                    // for setting focus visibility is not triggered since there is no keyboard navigation present beforehand.
                    setFocusVisibility(true, ev.target);
                }
                if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {
                    // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items
                    // We need to re-render the menu with shouldFocusOnMount as true.
                    if (!_this.state.menuHidden && _this.props.menuProps) {
                        var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== undefined
                            ? _this._menuShouldFocusOnMount
                            : _this.props.menuProps.shouldFocusOnMount;
                        if (!currentShouldFocusOnMount) {
                            ev.preventDefault();
                            ev.stopPropagation();
                            _this._menuShouldFocusOnMount = true;
                            _this.forceUpdate();
                        }
                    }
                }
            };
            _this._onTouchStart = function () {
                if (_this._isSplitButton &&
                    _this._splitButtonContainer.current &&
                    !('onpointerdown' in _this._splitButtonContainer.current)) {
                    _this._handleTouchAndPointerEvent();
                }
            };
            _this._onMenuClick = function (ev) {
                var _a = _this.props, onMenuClick = _a.onMenuClick, menuProps = _a.menuProps;
                if (onMenuClick) {
                    onMenuClick(ev, _this.props);
                }
                if (!ev.defaultPrevented) {
                    _this._onToggleMenu((menuProps === null || menuProps === void 0 ? void 0 : menuProps.shouldFocusOnContainer) || false);
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            };
            initializeComponentRef(_this);
            _this._async = new Async(_this);
            _this._events = new EventGroup(_this);
            warnConditionallyRequiredProps(COMPONENT_NAME$b, props, ['menuProps', 'onClick'], 'split', _this.props.split);
            warnDeprecations(COMPONENT_NAME$b, props, {
                rootProps: undefined,
                description: 'secondaryText',
                toggled: 'checked',
            });
            _this._labelId = getId();
            _this._descriptionId = getId();
            _this._ariaDescriptionId = getId();
            _this.state = {
                menuHidden: true,
            };
            return _this;
        }
        Object.defineProperty(BaseButton.prototype, "_isSplitButton", {
            get: function () {
                return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;
            },
            enumerable: false,
            configurable: true
        });
        BaseButton.prototype.render = function () {
            var _a;
            var _b = this.props, ariaDescription = _b.ariaDescription, ariaLabel = _b.ariaLabel, ariaHidden = _b.ariaHidden, className = _b.className, disabled = _b.disabled, allowDisabledFocus = _b.allowDisabledFocus, primaryDisabled = _b.primaryDisabled, 
            // eslint-disable-next-line deprecation/deprecation
            _c = _b.secondaryText, 
            // eslint-disable-next-line deprecation/deprecation
            secondaryText = _c === void 0 ? this.props.description : _c, href = _b.href, iconProps = _b.iconProps, menuIconProps = _b.menuIconProps, styles = _b.styles, checked = _b.checked, variantClassName = _b.variantClassName, theme = _b.theme, toggle = _b.toggle, getClassNames = _b.getClassNames, role = _b.role;
            var menuHidden = this.state.menuHidden;
            // Button is disabled if the whole button (in case of splitButton is disabled) or if the primary action is disabled
            var isPrimaryButtonDisabled = disabled || primaryDisabled;
            this._classNames = getClassNames
                ? getClassNames(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus)
                : getBaseButtonClassNames(theme, styles, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);
            var _d = this, _ariaDescriptionId = _d._ariaDescriptionId, _labelId = _d._labelId, _descriptionId = _d._descriptionId;
            // Anchor tag cannot be disabled hence in disabled state rendering
            // anchor button as normal button
            var renderAsAnchor = !isPrimaryButtonDisabled && !!href;
            var tag = renderAsAnchor ? 'a' : 'button';
            var nativeProps = getNativeProps(
            // eslint-disable-next-line deprecation/deprecation
            assign(renderAsAnchor ? {} : { type: 'button' }, this.props.rootProps, this.props), renderAsAnchor ? anchorProperties : buttonProperties, [
                'disabled', // let disabled buttons be focused and styled as disabled.
            ]);
            // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props
            var resolvedAriaLabel = ariaLabel || nativeProps['aria-label'];
            // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of
            // aria-describedby. Otherwise default to undefined so property does not appear in output.
            var ariaDescribedBy = undefined;
            if (ariaDescription) {
                ariaDescribedBy = _ariaDescriptionId;
            }
            else if (secondaryText && this.props.onRenderDescription !== nullRender) {
                // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy
                // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy
                ariaDescribedBy = _descriptionId;
            }
            else if (nativeProps['aria-describedby']) {
                ariaDescribedBy = nativeProps['aria-describedby'];
            }
            // If an explicit aria-labelledby is given, use that and we're done.
            // If any kind of description is given (which will end up as an aria-describedby attribute)
            // and no ariaLabel is specified, set the labelledby element.
            // Otherwise, the button is labeled implicitly by the descendent text on the button (if it exists).
            var ariaLabelledBy = undefined;
            if (nativeProps['aria-labelledby']) {
                ariaLabelledBy = nativeProps['aria-labelledby'];
            }
            else if (ariaDescribedBy && !resolvedAriaLabel) {
                ariaLabelledBy = this._hasText() ? _labelId : undefined;
            }
            var dataIsFocusable = this.props['data-is-focusable'] === false || (disabled && !allowDisabledFocus) || this._isSplitButton
                ? false
                : true;
            var isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';
            // if isCheckboxTypeRole, always return a checked value.
            // Otherwise only return checked value if toggle is set to true.
            // This is because role="checkbox" always needs to have an aria-checked value
            // but our checked prop only sets aria-pressed if we mark the button as a toggle="true"
            var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;
            var buttonProps = assign(nativeProps, (_a = {
                    className: this._classNames.root,
                    // eslint-disable-next-line deprecation/deprecation
                    ref: this._mergedRef(this.props.elementRef, this._buttonElement),
                    disabled: isPrimaryButtonDisabled && !allowDisabledFocus,
                    onKeyDown: this._onKeyDown,
                    onKeyPress: this._onKeyPress,
                    onKeyUp: this._onKeyUp,
                    onMouseDown: this._onMouseDown,
                    onMouseUp: this._onMouseUp,
                    onClick: this._onClick,
                    'aria-label': resolvedAriaLabel,
                    'aria-labelledby': ariaLabelledBy,
                    'aria-describedby': ariaDescribedBy,
                    'aria-disabled': isPrimaryButtonDisabled,
                    'data-is-focusable': dataIsFocusable
                },
                // aria-pressed attribute should only be present for toggle buttons
                // aria-checked attribute should only be present for toggle buttons with checkbox type role
                _a[isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed'] = checkedOrPressedValue,
                _a));
            if (ariaHidden) {
                buttonProps['aria-hidden'] = true;
            }
            if (this._isSplitButton) {
                return this._onRenderSplitButtonContent(tag, buttonProps);
            }
            else if (this.props.menuProps) {
                var _e = this.props.menuProps.id, id = _e === void 0 ? this._labelId + "-menu" : _e;
                assign(buttonProps, {
                    'aria-expanded': !menuHidden,
                    'aria-controls': !menuHidden ? id : null,
                    'aria-haspopup': true,
                });
            }
            return this._onRenderContent(tag, buttonProps);
        };
        BaseButton.prototype.componentDidMount = function () {
            // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the
            // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,
            // because React does not support Pointer events yet.
            if (this._isSplitButton && this._splitButtonContainer.current) {
                if ('onpointerdown' in this._splitButtonContainer.current) {
                    this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);
                }
                if ('onpointerup' in this._splitButtonContainer.current && this.props.onPointerUp) {
                    this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);
                }
            }
        };
        BaseButton.prototype.componentDidUpdate = function (prevProps, prevState) {
            // If Button's menu was closed, run onAfterMenuDismiss.
            if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {
                this.props.onAfterMenuDismiss();
            }
        };
        BaseButton.prototype.componentWillUnmount = function () {
            this._async.dispose();
            this._events.dispose();
        };
        BaseButton.prototype.focus = function () {
            if (this._isSplitButton && this._splitButtonContainer.current) {
                setFocusVisibility(true);
                this._splitButtonContainer.current.focus();
            }
            else if (this._buttonElement.current) {
                setFocusVisibility(true);
                this._buttonElement.current.focus();
            }
        };
        BaseButton.prototype.dismissMenu = function () {
            this._dismissMenu();
        };
        BaseButton.prototype.openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {
            this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);
        };
        BaseButton.prototype._onRenderContent = function (tag, buttonProps) {
            var _this = this;
            var props = this.props;
            var Tag = tag;
            var menuIconProps = props.menuIconProps, menuProps = props.menuProps, _a = props.onRenderIcon, onRenderIcon = _a === void 0 ? this._onRenderIcon : _a, _b = props.onRenderAriaDescription, onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b, _c = props.onRenderChildren, onRenderChildren = _c === void 0 ? this._onRenderChildren : _c, 
            // eslint-disable-next-line deprecation/deprecation
            _d = props.onRenderMenu, 
            // eslint-disable-next-line deprecation/deprecation
            onRenderMenu = _d === void 0 ? this._onRenderMenu : _d, _e = props.onRenderMenuIcon, onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e, disabled = props.disabled;
            var keytipProps = props.keytipProps;
            if (keytipProps && menuProps) {
                keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
            }
            var Button = function (keytipAttributes) { return (React__namespace.createElement(Tag, tslib.__assign({}, buttonProps, keytipAttributes),
                React__namespace.createElement("span", { className: _this._classNames.flexContainer, "data-automationid": "splitbuttonprimary" },
                    onRenderIcon(props, _this._onRenderIcon),
                    _this._onRenderTextContents(),
                    onRenderAriaDescription(props, _this._onRenderAriaDescription),
                    onRenderChildren(props, _this._onRenderChildren),
                    !_this._isSplitButton &&
                        (menuProps || menuIconProps || _this.props.onRenderMenuIcon) &&
                        onRenderMenuIcon(_this.props, _this._onRenderMenuIcon),
                    menuProps &&
                        !menuProps.doNotLayer &&
                        _this._shouldRenderMenu() &&
                        onRenderMenu(_this._getMenuProps(menuProps), _this._onRenderMenu)))); };
            var Content = keytipProps ? (
            // If we're making a split button, we won't put the keytip here
            React__namespace.createElement(KeytipData, { keytipProps: !this._isSplitButton ? keytipProps : undefined, ariaDescribedBy: buttonProps['aria-describedby'], disabled: disabled }, function (keytipAttributes) { return Button(keytipAttributes); })) : (Button());
            if (menuProps && menuProps.doNotLayer) {
                return (React__namespace.createElement(React__namespace.Fragment, null,
                    Content,
                    this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)));
            }
            return (React__namespace.createElement(React__namespace.Fragment, null,
                Content,
                React__namespace.createElement(FocusRects, null)));
        };
        /**
         * Method to help determine if the menu's component tree should
         * be rendered. It takes into account whether the menu is expanded,
         * whether it is a persisted menu and whether it has been shown to the user.
         */
        BaseButton.prototype._shouldRenderMenu = function () {
            var menuHidden = this.state.menuHidden;
            // eslint-disable-next-line deprecation/deprecation
            var _a = this.props, persistMenu = _a.persistMenu, renderPersistedMenuHiddenOnMount = _a.renderPersistedMenuHiddenOnMount;
            if (!menuHidden) {
                // Always should render a menu when it is expanded
                return true;
            }
            else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {
                // _renderedVisibleMenu ensures that the first rendering of
                // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.
                return true;
            }
            return false;
        };
        BaseButton.prototype._hasText = function () {
            // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText
            // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.
            // text to be undefined in order for props.children to be used as a fallback.
            // Purely a code maintainability/reuse issue, but logged as Issue #4979.
            return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');
        };
        BaseButton.prototype._getMenuProps = function (menuProps) {
            var persistMenu = this.props.persistMenu;
            var menuHidden = this.state.menuHidden;
            // the accessible menu label (accessible name) has a relationship to the button.
            // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,
            // AND the button has text, we'll set the menu aria-labelledBy to the text element id.
            if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {
                menuProps = tslib.__assign(tslib.__assign({}, menuProps), { labelElementId: this._labelId });
            }
            return tslib.__assign(tslib.__assign({ id: this._labelId + '-menu', directionalHint: DirectionalHint.bottomLeftEdge }, menuProps), { shouldFocusOnContainer: this._menuShouldFocusOnContainer, shouldFocusOnMount: this._menuShouldFocusOnMount, hidden: persistMenu ? menuHidden : undefined, className: css('ms-BaseButton-menuhost', menuProps.className), target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current, onDismiss: this._onDismissMenu });
        };
        BaseButton.prototype._onRenderSplitButtonContent = function (tag, buttonProps) {
            var _this = this;
            var _a = this.props, _b = _a.styles, styles = _b === void 0 ? {} : _b, disabled = _a.disabled, allowDisabledFocus = _a.allowDisabledFocus, checked = _a.checked, getSplitButtonClassNames$1 = _a.getSplitButtonClassNames, primaryDisabled = _a.primaryDisabled, menuProps = _a.menuProps, toggle = _a.toggle, role = _a.role, primaryActionButtonProps = _a.primaryActionButtonProps;
            var keytipProps = this.props.keytipProps;
            var menuHidden = this.state.menuHidden;
            var classNames = getSplitButtonClassNames$1
                ? getSplitButtonClassNames$1(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus)
                : styles && getSplitButtonClassNames(styles, !!disabled, !menuHidden, !!checked, !!primaryDisabled);
            assign(buttonProps, {
                onClick: undefined,
                onPointerDown: undefined,
                onPointerUp: undefined,
                tabIndex: -1,
                'data-is-focusable': false,
            });
            if (keytipProps && menuProps) {
                keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
            }
            var containerProps = getNativeProps(buttonProps, [], ['disabled']);
            // Add additional props to apply on primary action button
            if (primaryActionButtonProps) {
                assign(buttonProps, primaryActionButtonProps);
            }
            var SplitButton = function (keytipAttributes) { return (React__namespace.createElement("div", tslib.__assign({}, containerProps, { "data-ktp-target": keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined, role: role ? role : 'button', "aria-disabled": disabled, "aria-haspopup": true, "aria-expanded": !menuHidden, "aria-pressed": toggle ? !!checked : undefined, "aria-describedby": mergeAriaAttributeValues(buttonProps['aria-describedby'], keytipAttributes ? keytipAttributes['aria-describedby'] : undefined), className: classNames && classNames.splitButtonContainer, onKeyDown: _this._onSplitButtonContainerKeyDown, onTouchStart: _this._onTouchStart, ref: _this._splitButtonContainer, "data-is-focusable": true, onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : undefined, tabIndex: (!disabled && !primaryDisabled) || allowDisabledFocus ? 0 : undefined, "aria-roledescription": buttonProps['aria-roledescription'], onFocusCapture: _this._onSplitContainerFocusCapture }),
                React__namespace.createElement("span", { style: { display: 'flex' } },
                    _this._onRenderContent(tag, buttonProps),
                    _this._onRenderSplitButtonMenuButton(classNames, keytipAttributes),
                    _this._onRenderSplitButtonDivider(classNames)))); };
            return keytipProps ? (React__namespace.createElement(KeytipData, { keytipProps: keytipProps, disabled: disabled }, function (keytipAttributes) { return SplitButton(keytipAttributes); })) : (SplitButton());
        };
        BaseButton.prototype._onRenderSplitButtonDivider = function (classNames) {
            if (classNames && classNames.divider) {
                var onClick = function (ev) {
                    ev.stopPropagation();
                };
                return React__namespace.createElement("span", { className: classNames.divider, "aria-hidden": true, onClick: onClick });
            }
            return null;
        };
        BaseButton.prototype._onRenderSplitButtonMenuButton = function (classNames, keytipAttributes) {
            var _a = this.props, allowDisabledFocus = _a.allowDisabledFocus, checked = _a.checked, disabled = _a.disabled, splitButtonMenuProps = _a.splitButtonMenuProps, splitButtonAriaLabel = _a.splitButtonAriaLabel, primaryDisabled = _a.primaryDisabled;
            var menuHidden = this.state.menuHidden;
            var menuIconProps = this.props.menuIconProps;
            if (menuIconProps === undefined) {
                menuIconProps = {
                    iconName: 'ChevronDown',
                };
            }
            var splitButtonProps = tslib.__assign(tslib.__assign({}, splitButtonMenuProps), { styles: classNames, checked: checked, disabled: disabled, allowDisabledFocus: allowDisabledFocus, onClick: this._onMenuClick, menuProps: undefined, iconProps: tslib.__assign(tslib.__assign({}, menuIconProps), { className: this._classNames.menuIcon }), ariaLabel: splitButtonAriaLabel, 'aria-haspopup': true, 'aria-expanded': !menuHidden, 'data-is-focusable': false });
            // Add data-ktp-execute-target to the split button if the keytip is defined
            return (React__namespace.createElement(BaseButton, tslib.__assign({}, splitButtonProps, { "data-ktp-execute-target": keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes, onMouseDown: this._onMouseDown, tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1 })));
        };
        BaseButton.prototype._onPointerDown = function (ev) {
            var onPointerDown = this.props.onPointerDown;
            if (onPointerDown) {
                onPointerDown(ev);
            }
            if (ev.pointerType === 'touch') {
                this._handleTouchAndPointerEvent();
                ev.preventDefault();
                ev.stopImmediatePropagation();
            }
        };
        BaseButton.prototype._handleTouchAndPointerEvent = function () {
            var _this = this;
            // If we already have an existing timeout from a previous touch and pointer event
            // cancel that timeout so we can set a new one.
            if (this._lastTouchTimeoutId !== undefined) {
                this._async.clearTimeout(this._lastTouchTimeoutId);
                this._lastTouchTimeoutId = undefined;
            }
            this._processingTouch = true;
            this._lastTouchTimeoutId = this._async.setTimeout(function () {
                _this._processingTouch = false;
                _this._lastTouchTimeoutId = undefined;
                // Touch and pointer events don't focus the button naturally,
                // so adding an imperative focus call to guarantee this behavior.
                _this.focus();
            }, TouchIdleDelay$1);
        };
        /**
         * Returns if the user hits a valid keyboard key to open the menu
         * @param ev - the keyboard event
         * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.
         */
        BaseButton.prototype._isValidMenuOpenKey = function (ev) {
            if (this.props.menuTriggerKeyCode) {
                // eslint-disable-next-line deprecation/deprecation
                return ev.which === this.props.menuTriggerKeyCode;
            }
            else if (this.props.menuProps) {
                // eslint-disable-next-line deprecation/deprecation
                return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);
            }
            // Note: When enter is pressed, we will let the event continue to propagate
            // to trigger the onClick event on the button
            return false;
        };
        BaseButton.defaultProps = {
            baseClassName: 'ms-Button',
            styles: {},
            split: false,
        };
        return BaseButton;
    }(React__namespace.Component));

    var noOutline = {
        outline: 0,
    };
    var iconStyle = function (fontSize) {
        return {
            fontSize: fontSize,
            margin: '0 4px',
            height: '16px',
            lineHeight: '16px',
            textAlign: 'center',
            flexShrink: 0,
        };
    };
    /**
     * Gets the base button styles. Note: because it is a base class to be used with the `mergeRules`
     * helper, it should have values for all class names in the interface. This let `mergeRules` optimize
     * mixing class names together.
     */
    var getStyles$y = memoizeFunction(function (theme) {
        var _a, _b;
        var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
        var border = semanticColors.buttonBorder;
        var disabledBackground = semanticColors.disabledBackground;
        var disabledText = semanticColors.disabledText;
        var buttonHighContrastFocus = {
            left: -2,
            top: -2,
            bottom: -2,
            right: -2,
            outlineColor: 'ButtonText',
        };
        return {
            root: [
                getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),
                theme.fonts.medium,
                {
                    boxSizing: 'border-box',
                    border: '1px solid ' + border,
                    userSelect: 'none',
                    display: 'inline-block',
                    textDecoration: 'none',
                    textAlign: 'center',
                    cursor: 'pointer',
                    padding: '0 16px',
                    borderRadius: effects.roundedCorner2,
                    selectors: {
                        // IE11 workaround for preventing shift of child elements of a button when active.
                        ':active > *': {
                            position: 'relative',
                            left: 0,
                            top: 0,
                        },
                    },
                },
            ],
            rootDisabled: [
                getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),
                {
                    backgroundColor: disabledBackground,
                    borderColor: disabledBackground,
                    color: disabledText,
                    cursor: 'default',
                    selectors: {
                        ':hover': noOutline,
                        ':focus': noOutline,
                    },
                },
            ],
            iconDisabled: {
                color: disabledText,
                selectors: (_a = {},
                    _a[HighContrastSelector] = {
                        color: 'GrayText',
                    },
                    _a),
            },
            menuIconDisabled: {
                color: disabledText,
                selectors: (_b = {},
                    _b[HighContrastSelector] = {
                        color: 'GrayText',
                    },
                    _b),
            },
            flexContainer: {
                display: 'flex',
                height: '100%',
                flexWrap: 'nowrap',
                justifyContent: 'center',
                alignItems: 'center',
            },
            description: {
                display: 'block',
            },
            textContainer: {
                flexGrow: 1,
                display: 'block',
            },
            icon: iconStyle(fonts.mediumPlus.fontSize),
            menuIcon: iconStyle(fonts.small.fontSize),
            label: {
                margin: '0 4px',
                lineHeight: '100%',
                display: 'block',
            },
            screenReaderText: hiddenContentStyle,
        };
    });

    var getStyles$x = memoizeFunction(function (theme, customStyles) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
        var buttonHighContrastFocus = {
            left: -2,
            top: -2,
            bottom: -2,
            right: -2,
            border: 'none',
        };
        var splitButtonDividerBaseStyles = {
            position: 'absolute',
            width: 1,
            right: 31,
            top: 8,
            bottom: 8,
        };
        var splitButtonStyles = {
            splitButtonContainer: [
                getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }),
                {
                    display: 'inline-flex',
                    selectors: {
                        '.ms-Button--default': {
                            borderTopRightRadius: '0',
                            borderBottomRightRadius: '0',
                            borderRight: 'none',
                        },
                        '.ms-Button--primary': {
                            borderTopRightRadius: '0',
                            borderBottomRightRadius: '0',
                            border: 'none',
                            selectors: (_a = {},
                                _a[HighContrastSelector] = tslib.__assign({ color: 'WindowText', backgroundColor: 'Window', border: '1px solid WindowText', borderRightWidth: '0' }, getHighContrastNoAdjustStyle()),
                                _a),
                        },
                        '.ms-Button--primary + .ms-Button': {
                            border: 'none',
                            selectors: (_b = {},
                                _b[HighContrastSelector] = {
                                    border: '1px solid WindowText',
                                    borderLeftWidth: '0',
                                },
                                _b),
                        },
                    },
                },
            ],
            splitButtonContainerHovered: {
                selectors: {
                    '.ms-Button--primary': {
                        selectors: (_c = {},
                            _c[HighContrastSelector] = {
                                color: 'Window',
                                backgroundColor: 'Highlight',
                            },
                            _c),
                    },
                    '.ms-Button.is-disabled': {
                        color: semanticColors.buttonTextDisabled,
                        selectors: (_d = {},
                            _d[HighContrastSelector] = {
                                color: 'GrayText',
                                borderColor: 'GrayText',
                                backgroundColor: 'Window',
                            },
                            _d),
                    },
                },
            },
            splitButtonContainerChecked: {
                selectors: {
                    '.ms-Button--primary': {
                        selectors: (_e = {},
                            _e[HighContrastSelector] = tslib.__assign({ color: 'Window', backgroundColor: 'WindowText' }, getHighContrastNoAdjustStyle()),
                            _e),
                    },
                },
            },
            splitButtonContainerCheckedHovered: {
                selectors: {
                    '.ms-Button--primary': {
                        selectors: (_f = {},
                            _f[HighContrastSelector] = tslib.__assign({ color: 'Window', backgroundColor: 'WindowText' }, getHighContrastNoAdjustStyle()),
                            _f),
                    },
                },
            },
            splitButtonContainerFocused: {
                outline: 'none!important',
            },
            splitButtonMenuButton: (_g = {
                    padding: 6,
                    height: 'auto',
                    boxSizing: 'border-box',
                    borderRadius: 0,
                    borderTopRightRadius: effects.roundedCorner2,
                    borderBottomRightRadius: effects.roundedCorner2,
                    border: "1px solid " + palette.neutralSecondaryAlt,
                    borderLeft: 'none',
                    outline: 'transparent',
                    userSelect: 'none',
                    display: 'inline-block',
                    textDecoration: 'none',
                    textAlign: 'center',
                    cursor: 'pointer',
                    verticalAlign: 'top',
                    width: 32,
                    marginLeft: -1,
                    marginTop: 0,
                    marginRight: 0,
                    marginBottom: 0
                },
                _g[HighContrastSelector] = {
                    '.ms-Button-menuIcon': {
                        color: 'WindowText',
                    },
                },
                _g),
            splitButtonDivider: tslib.__assign(tslib.__assign({}, splitButtonDividerBaseStyles), { selectors: (_h = {},
                    _h[HighContrastSelector] = {
                        backgroundColor: 'WindowText',
                    },
                    _h) }),
            splitButtonDividerDisabled: tslib.__assign(tslib.__assign({}, splitButtonDividerBaseStyles), { selectors: (_j = {},
                    _j[HighContrastSelector] = {
                        backgroundColor: 'GrayText',
                    },
                    _j) }),
            splitButtonMenuButtonDisabled: {
                pointerEvents: 'none',
                border: 'none',
                selectors: (_k = {
                        ':hover': {
                            cursor: 'default',
                        },
                        '.ms-Button--primary': {
                            selectors: (_l = {},
                                _l[HighContrastSelector] = {
                                    color: 'GrayText',
                                    borderColor: 'GrayText',
                                    backgroundColor: 'Window',
                                },
                                _l),
                        },
                        '.ms-Button-menuIcon': {
                            selectors: (_m = {},
                                _m[HighContrastSelector] = {
                                    color: 'GrayText',
                                },
                                _m),
                        }
                    },
                    _k[HighContrastSelector] = {
                        color: 'GrayText',
                        border: '1px solid GrayText',
                        backgroundColor: 'Window',
                    },
                    _k),
            },
            splitButtonFlexContainer: {
                display: 'flex',
                height: '100%',
                flexWrap: 'nowrap',
                justifyContent: 'center',
                alignItems: 'center',
            },
            splitButtonContainerDisabled: {
                outline: 'none',
                border: 'none',
                selectors: (_o = {},
                    _o[HighContrastSelector] = tslib.__assign({ color: 'GrayText', borderColor: 'GrayText', backgroundColor: 'Window' }, getHighContrastNoAdjustStyle()),
                    _o),
            },
            splitButtonMenuFocused: tslib.__assign({}, getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 })),
        };
        return concatStyleSets(splitButtonStyles, customStyles);
    });

    var splitButtonDividerBaseStyles = function () {
        return {
            position: 'absolute',
            width: 1,
            right: 31,
            top: 8,
            bottom: 8,
        };
    };
    function standardStyles(theme) {
        var _a, _b, _c, _d, _e;
        var s = theme.semanticColors, p = theme.palette;
        var buttonBackground = s.buttonBackground;
        var buttonBackgroundPressed = s.buttonBackgroundPressed;
        var buttonBackgroundHovered = s.buttonBackgroundHovered;
        var buttonBackgroundDisabled = s.buttonBackgroundDisabled;
        var buttonText = s.buttonText;
        var buttonTextHovered = s.buttonTextHovered;
        var buttonTextDisabled = s.buttonTextDisabled;
        var buttonTextChecked = s.buttonTextChecked;
        var buttonTextCheckedHovered = s.buttonTextCheckedHovered;
        return {
            root: {
                backgroundColor: buttonBackground,
                color: buttonText,
            },
            rootHovered: {
                backgroundColor: buttonBackgroundHovered,
                color: buttonTextHovered,
                selectors: (_a = {},
                    _a[HighContrastSelector] = {
                        borderColor: 'Highlight',
                        color: 'Highlight',
                    },
                    _a),
            },
            rootPressed: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextChecked,
            },
            rootExpanded: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextChecked,
            },
            rootChecked: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextChecked,
            },
            rootCheckedHovered: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextCheckedHovered,
            },
            rootDisabled: {
                color: buttonTextDisabled,
                backgroundColor: buttonBackgroundDisabled,
                selectors: (_b = {},
                    _b[HighContrastSelector] = {
                        color: 'GrayText',
                        borderColor: 'GrayText',
                        backgroundColor: 'Window',
                    },
                    _b),
            },
            // Split button styles
            splitButtonContainer: {
                selectors: (_c = {},
                    _c[HighContrastSelector] = {
                        border: 'none',
                    },
                    _c),
            },
            splitButtonMenuButton: {
                color: p.white,
                backgroundColor: 'transparent',
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralLight,
                        selectors: (_d = {},
                            _d[HighContrastSelector] = {
                                color: 'Highlight',
                            },
                            _d),
                    },
                },
            },
            splitButtonMenuButtonDisabled: {
                backgroundColor: s.buttonBackgroundDisabled,
                selectors: {
                    ':hover': {
                        backgroundColor: s.buttonBackgroundDisabled,
                    },
                },
            },
            splitButtonDivider: tslib.__assign(tslib.__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p.neutralTertiaryAlt, selectors: (_e = {},
                    _e[HighContrastSelector] = {
                        backgroundColor: 'WindowText',
                    },
                    _e) }),
            splitButtonDividerDisabled: {
                backgroundColor: theme.palette.neutralTertiaryAlt,
            },
            splitButtonMenuButtonChecked: {
                backgroundColor: p.neutralQuaternaryAlt,
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralQuaternaryAlt,
                    },
                },
            },
            splitButtonMenuButtonExpanded: {
                backgroundColor: p.neutralQuaternaryAlt,
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralQuaternaryAlt,
                    },
                },
            },
            splitButtonMenuIcon: {
                color: s.buttonText,
            },
            splitButtonMenuIconDisabled: {
                color: s.buttonTextDisabled,
            },
        };
    }
    function primaryStyles(theme) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var p = theme.palette, s = theme.semanticColors;
        return {
            root: {
                backgroundColor: s.primaryButtonBackground,
                border: "1px solid " + s.primaryButtonBackground,
                color: s.primaryButtonText,
                selectors: (_a = {},
                    _a[HighContrastSelector] = tslib.__assign({ color: 'Window', backgroundColor: 'WindowText', borderColor: 'WindowText' }, getHighContrastNoAdjustStyle()),
                    _a["." + IsFocusVisibleClassName + " &:focus"] = {
                        selectors: {
                            ':after': {
                                border: "none",
                                outlineColor: p.white,
                            },
                        },
                    },
                    _a),
            },
            rootHovered: {
                backgroundColor: s.primaryButtonBackgroundHovered,
                border: "1px solid " + s.primaryButtonBackgroundHovered,
                color: s.primaryButtonTextHovered,
                selectors: (_b = {},
                    _b[HighContrastSelector] = {
                        color: 'Window',
                        backgroundColor: 'Highlight',
                        borderColor: 'Highlight',
                    },
                    _b),
            },
            rootPressed: {
                backgroundColor: s.primaryButtonBackgroundPressed,
                border: "1px solid " + s.primaryButtonBackgroundPressed,
                color: s.primaryButtonTextPressed,
                selectors: (_c = {},
                    _c[HighContrastSelector] = tslib.__assign({ color: 'Window', backgroundColor: 'WindowText', borderColor: 'WindowText' }, getHighContrastNoAdjustStyle()),
                    _c),
            },
            rootExpanded: {
                backgroundColor: s.primaryButtonBackgroundPressed,
                color: s.primaryButtonTextPressed,
            },
            rootChecked: {
                backgroundColor: s.primaryButtonBackgroundPressed,
                color: s.primaryButtonTextPressed,
            },
            rootCheckedHovered: {
                backgroundColor: s.primaryButtonBackgroundPressed,
                color: s.primaryButtonTextPressed,
            },
            rootDisabled: {
                color: s.primaryButtonTextDisabled,
                backgroundColor: s.primaryButtonBackgroundDisabled,
                selectors: (_d = {},
                    _d[HighContrastSelector] = {
                        color: 'GrayText',
                        borderColor: 'GrayText',
                        backgroundColor: 'Window',
                    },
                    _d),
            },
            // Split button styles
            splitButtonContainer: {
                selectors: (_e = {},
                    _e[HighContrastSelector] = {
                        border: 'none',
                    },
                    _e),
            },
            splitButtonDivider: tslib.__assign(tslib.__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p.white, selectors: (_f = {},
                    _f[HighContrastSelector] = {
                        backgroundColor: 'Window',
                    },
                    _f) }),
            splitButtonMenuButton: {
                backgroundColor: s.primaryButtonBackground,
                color: s.primaryButtonText,
                selectors: (_g = {},
                    _g[HighContrastSelector] = {
                        backgroundColor: 'WindowText',
                    },
                    _g[':hover'] = {
                        backgroundColor: s.primaryButtonBackgroundHovered,
                        selectors: (_h = {},
                            _h[HighContrastSelector] = {
                                color: 'Highlight',
                            },
                            _h),
                    },
                    _g),
            },
            splitButtonMenuButtonDisabled: {
                backgroundColor: s.primaryButtonBackgroundDisabled,
                selectors: {
                    ':hover': {
                        backgroundColor: s.primaryButtonBackgroundDisabled,
                    },
                },
            },
            splitButtonMenuButtonChecked: {
                backgroundColor: s.primaryButtonBackgroundPressed,
                selectors: {
                    ':hover': {
                        backgroundColor: s.primaryButtonBackgroundPressed,
                    },
                },
            },
            splitButtonMenuButtonExpanded: {
                backgroundColor: s.primaryButtonBackgroundPressed,
                selectors: {
                    ':hover': {
                        backgroundColor: s.primaryButtonBackgroundPressed,
                    },
                },
            },
            splitButtonMenuIcon: {
                color: s.primaryButtonText,
            },
            splitButtonMenuIconDisabled: {
                color: p.neutralTertiary,
                selectors: (_j = {},
                    _j[HighContrastSelector] = {
                        color: 'GrayText',
                    },
                    _j),
            },
        };
    }

    var DEFAULT_BUTTON_HEIGHT$1 = '32px';
    var DEFAULT_BUTTON_MIN_WIDTH = '80px';
    var getStyles$w = memoizeFunction(function (theme, customStyles, primary) {
        var baseButtonStyles = getStyles$y(theme);
        var splitButtonStyles = getStyles$x(theme);
        var defaultButtonStyles = {
            root: {
                minWidth: DEFAULT_BUTTON_MIN_WIDTH,
                height: DEFAULT_BUTTON_HEIGHT$1,
            },
            label: {
                fontWeight: FontWeights.semibold,
            },
        };
        return concatStyleSets(baseButtonStyles, defaultButtonStyles, primary ? primaryStyles(theme) : standardStyles(theme), splitButtonStyles, customStyles);
    });

    /**
     * {@docCategory Button}
     */
    var DefaultButton = /** @class */ (function (_super) {
        tslib.__extends(DefaultButton, _super);
        function DefaultButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DefaultButton.prototype.render = function () {
            var _a = this.props, _b = _a.primary, primary = _b === void 0 ? false : _b, styles = _a.styles, theme = _a.theme;
            return (React__namespace.createElement(BaseButton, tslib.__assign({}, this.props, { variantClassName: primary ? 'ms-Button--primary' : 'ms-Button--default', styles: getStyles$w(theme, styles, primary), onRenderDescription: nullRender })));
        };
        DefaultButton = tslib.__decorate([
            customizable('DefaultButton', ['theme', 'styles'], true)
        ], DefaultButton);
        return DefaultButton;
    }(React__namespace.Component));

    var DEFAULT_BUTTON_HEIGHT = '40px';
    var DEFAULT_PADDING = '0 4px';
    var getStyles$v = memoizeFunction(function (theme, customStyles) {
        var _a, _b, _c;
        var baseButtonStyles = getStyles$y(theme);
        var actionButtonStyles = {
            root: {
                padding: DEFAULT_PADDING,
                height: DEFAULT_BUTTON_HEIGHT,
                color: theme.palette.neutralPrimary,
                backgroundColor: 'transparent',
                border: '1px solid transparent',
                selectors: (_a = {},
                    _a[HighContrastSelector] = {
                        borderColor: 'Window',
                    },
                    _a),
            },
            rootHovered: {
                color: theme.palette.themePrimary,
                selectors: (_b = {},
                    _b[HighContrastSelector] = {
                        color: 'Highlight',
                    },
                    _b),
            },
            iconHovered: {
                color: theme.palette.themePrimary,
            },
            rootPressed: {
                color: theme.palette.black,
            },
            rootExpanded: {
                color: theme.palette.themePrimary,
            },
            iconPressed: {
                color: theme.palette.themeDarker,
            },
            rootDisabled: {
                color: theme.palette.neutralTertiary,
                backgroundColor: 'transparent',
                borderColor: 'transparent',
                selectors: (_c = {},
                    _c[HighContrastSelector] = {
                        color: 'GrayText',
                    },
                    _c),
            },
            rootChecked: {
                color: theme.palette.black,
            },
            iconChecked: {
                color: theme.palette.themeDarker,
            },
            flexContainer: {
                justifyContent: 'flex-start',
            },
            icon: {
                color: theme.palette.themeDarkAlt,
            },
            iconDisabled: {
                color: 'inherit',
            },
            menuIcon: {
                color: theme.palette.neutralSecondary,
            },
            textContainer: {
                flexGrow: 0,
            },
        };
        return concatStyleSets(baseButtonStyles, actionButtonStyles, customStyles);
    });

    /**
     * {@docCategory Button}
     */
    var ActionButton$1 = /** @class */ (function (_super) {
        tslib.__extends(ActionButton, _super);
        function ActionButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActionButton.prototype.render = function () {
            var _a = this.props, styles = _a.styles, theme = _a.theme;
            return (React__namespace.createElement(BaseButton, tslib.__assign({}, this.props, { variantClassName: "ms-Button--action ms-Button--command", styles: getStyles$v(theme, styles), onRenderDescription: nullRender })));
        };
        ActionButton = tslib.__decorate([
            customizable('ActionButton', ['theme', 'styles'], true)
        ], ActionButton);
        return ActionButton;
    }(React__namespace.Component));

    var getStyles$u = memoizeFunction(function (theme, customStyles) {
        var _a;
        var baseButtonStyles = getStyles$y(theme);
        var splitButtonStyles = getStyles$x(theme);
        var palette = theme.palette, semanticColors = theme.semanticColors;
        var iconButtonStyles = {
            root: {
                padding: '0 4px',
                width: '32px',
                height: '32px',
                backgroundColor: 'transparent',
                border: 'none',
                color: semanticColors.link,
            },
            rootHovered: {
                color: palette.themeDarkAlt,
                backgroundColor: palette.neutralLighter,
                selectors: (_a = {},
                    _a[HighContrastSelector] = {
                        borderColor: 'Highlight',
                        color: 'Highlight',
                    },
                    _a),
            },
            rootHasMenu: {
                width: 'auto',
            },
            rootPressed: {
                color: palette.themeDark,
                backgroundColor: palette.neutralLight,
            },
            rootExpanded: {
                color: palette.themeDark,
                backgroundColor: palette.neutralLight,
            },
            rootChecked: {
                color: palette.themeDark,
                backgroundColor: palette.neutralLight,
            },
            rootCheckedHovered: {
                color: palette.themeDark,
                backgroundColor: palette.neutralQuaternaryAlt,
            },
            rootDisabled: {
                color: palette.neutralTertiaryAlt,
            },
        };
        return concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles);
    });

    /**
     * {@docCategory Button}
     */
    var IconButton$1 = /** @class */ (function (_super) {
        tslib.__extends(IconButton, _super);
        function IconButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IconButton.prototype.render = function () {
            var _a = this.props, styles = _a.styles, theme = _a.theme;
            return (React__namespace.createElement(BaseButton, tslib.__assign({}, this.props, { variantClassName: "ms-Button--icon", styles: getStyles$u(theme, styles), onRenderText: nullRender, onRenderDescription: nullRender })));
        };
        IconButton = tslib.__decorate([
            customizable('IconButton', ['theme', 'styles'], true)
        ], IconButton);
        return IconButton;
    }(React__namespace.Component));

    /**
     * {@docCategory Button}
     */
    var CommandButton = ActionButton$1;

    /**
     * The days of the week
     * {@docCategory DateTimeUtilities}
     */
    exports.DayOfWeek = void 0;
    (function (DayOfWeek) {
        DayOfWeek[DayOfWeek["Sunday"] = 0] = "Sunday";
        DayOfWeek[DayOfWeek["Monday"] = 1] = "Monday";
        DayOfWeek[DayOfWeek["Tuesday"] = 2] = "Tuesday";
        DayOfWeek[DayOfWeek["Wednesday"] = 3] = "Wednesday";
        DayOfWeek[DayOfWeek["Thursday"] = 4] = "Thursday";
        DayOfWeek[DayOfWeek["Friday"] = 5] = "Friday";
        DayOfWeek[DayOfWeek["Saturday"] = 6] = "Saturday";
    })(exports.DayOfWeek || (exports.DayOfWeek = {}));
    /**
     * The months
     * {@docCategory DateTimeUtilities}
     */
    var MonthOfYear;
    (function (MonthOfYear) {
        MonthOfYear[MonthOfYear["January"] = 0] = "January";
        MonthOfYear[MonthOfYear["February"] = 1] = "February";
        MonthOfYear[MonthOfYear["March"] = 2] = "March";
        MonthOfYear[MonthOfYear["April"] = 3] = "April";
        MonthOfYear[MonthOfYear["May"] = 4] = "May";
        MonthOfYear[MonthOfYear["June"] = 5] = "June";
        MonthOfYear[MonthOfYear["July"] = 6] = "July";
        MonthOfYear[MonthOfYear["August"] = 7] = "August";
        MonthOfYear[MonthOfYear["September"] = 8] = "September";
        MonthOfYear[MonthOfYear["October"] = 9] = "October";
        MonthOfYear[MonthOfYear["November"] = 10] = "November";
        MonthOfYear[MonthOfYear["December"] = 11] = "December";
    })(MonthOfYear || (MonthOfYear = {}));
    /**
     * First week of the year settings types
     * {@docCategory DateTimeUtilities}
     */
    exports.FirstWeekOfYear = void 0;
    (function (FirstWeekOfYear) {
        FirstWeekOfYear[FirstWeekOfYear["FirstDay"] = 0] = "FirstDay";
        FirstWeekOfYear[FirstWeekOfYear["FirstFullWeek"] = 1] = "FirstFullWeek";
        FirstWeekOfYear[FirstWeekOfYear["FirstFourDayWeek"] = 2] = "FirstFourDayWeek";
    })(exports.FirstWeekOfYear || (exports.FirstWeekOfYear = {}));
    /**
     * The supported date range types
     * {@docCategory DateTimeUtilities}
     */
    var DateRangeType;
    (function (DateRangeType) {
        DateRangeType[DateRangeType["Day"] = 0] = "Day";
        DateRangeType[DateRangeType["Week"] = 1] = "Week";
        DateRangeType[DateRangeType["Month"] = 2] = "Month";
        DateRangeType[DateRangeType["WorkWeek"] = 3] = "WorkWeek";
    })(DateRangeType || (DateRangeType = {}));
    var DAYS_IN_WEEK = 7;

    var TimeConstants = {
        MillisecondsInOneDay: 86400000,
        MillisecondsIn1Sec: 1000,
        MillisecondsIn1Min: 60000,
        MillisecondsIn30Mins: 1800000,
        MillisecondsIn1Hour: 3600000,
        MinutesInOneDay: 1440,
        MinutesInOneHour: 60,
        DaysInOneWeek: 7,
        MonthInOneYear: 12,
        HoursInOneDay: 24,
        SecondsInOneMinute: 60,
        OffsetTo24HourFormat: 12,
        /**
         * Matches a time string. Groups:
         * 1. hours (with or without leading 0)
         * 2. minutes
         * 3. seconds (optional)
         * 4. meridiem (am/pm, case-insensitive, optional)
         */
        TimeFormatRegex: /^(\d\d?):(\d\d):?(\d\d)? ?([ap]m)?/i,
    };

    /**
     * Returns a date offset from the given date by the specified number of days.
     * @param date - The origin date
     * @param days - The number of days to offset. 'days' can be negative.
     * @returns A new Date object offset from the origin date by the given number of days
     */
    function addDays(date, days) {
        var result = new Date(date.getTime());
        result.setDate(result.getDate() + days);
        return result;
    }
    /**
     * Returns a date offset from the given date by the specified number of weeks.
     * @param date - The origin date
     * @param weeks - The number of weeks to offset. 'weeks' can be negative.
     * @returns A new Date object offset from the origin date by the given number of weeks
     */
    function addWeeks(date, weeks) {
        return addDays(date, weeks * TimeConstants.DaysInOneWeek);
    }
    /**
     * Returns a date offset from the given date by the specified number of months.
     * The method tries to preserve the day-of-month; however, if the new month does not have enough days
     * to contain the original day-of-month, we'll use the last day of the new month.
     * @param date - The origin date
     * @param months - The number of months to offset. 'months' can be negative.
     * @returns A new Date object offset from the origin date by the given number of months
     */
    function addMonths(date, months) {
        var result = new Date(date.getTime());
        var newMonth = result.getMonth() + months;
        result.setMonth(newMonth);
        // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.
        // Loop until we back up to a day the new month has.
        // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)
        if (result.getMonth() !==
            ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {
            result = addDays(result, -result.getDate());
        }
        return result;
    }
    /**
     * Returns a date offset from the given date by the specified number of years.
     * The method tries to preserve the day-of-month; however, if the new month does not have enough days
     * to contain the original day-of-month, we'll use the last day of the new month.
     * @param date - The origin date
     * @param years - The number of years to offset. 'years' can be negative.
     * @returns A new Date object offset from the origin date by the given number of years
     */
    function addYears(date, years) {
        var result = new Date(date.getTime());
        result.setFullYear(date.getFullYear() + years);
        // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.
        // Loop until we back up to a day the new month has.
        // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)
        if (result.getMonth() !==
            ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {
            result = addDays(result, -result.getDate());
        }
        return result;
    }
    /**
     * Returns a date that is the first day of the month of the provided date.
     * @param date - The origin date
     * @returns A new Date object with the day set to the first day of the month.
     */
    function getMonthStart(date) {
        return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);
    }
    /**
     * Returns a date that is the last day of the month of the provided date.
     * @param date - The origin date
     * @returns A new Date object with the day set to the last day of the month.
     */
    function getMonthEnd(date) {
        return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);
    }
    /**
     * Returns a date that is the first day of the year of the provided date.
     * @param date - The origin date
     * @returns A new Date object with the day set to the first day of the year.
     */
    function getYearStart(date) {
        return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);
    }
    /**
     * Returns a date that is the last day of the year of the provided date.
     * @param date - The origin date
     * @returns A new Date object with the day set to the last day of the year.
     */
    function getYearEnd(date) {
        return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);
    }
    /**
     * Returns a date that is a copy of the given date, aside from the month changing to the given month.
     *  The method tries to preserve the day-of-month; however, if the new month does not have enough days
     * to contain the original day-of-month, we'll use the last day of the new month.
     * @param date - The origin date
     * @param month - The 0-based index of the month to set on the date.
     * @returns A new Date object with the given month set.
     */
    function setMonth(date, month) {
        return addMonths(date, month - date.getMonth());
    }
    /**
     * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.
     * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.
     */
    function compareDates(date1, date2) {
        if (!date1 && !date2) {
            return true;
        }
        else if (!date1 || !date2) {
            return false;
        }
        else {
            return (date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate());
        }
    }
    /**
     * Compare the date parts of two dates
     * @param date1 - The first date to compare
     * @param date2 - The second date to compare
     * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value
     * if date1 is later than date2.
     */
    function compareDatePart(date1, date2) {
        return getDatePartHashValue(date1) - getDatePartHashValue(date2);
    }
    /**
     * Gets the date range array including the specified date. The date range array is calculated as the list
     * of dates accounting for the specified first day of the week and date range type.
     * @param date - The input date
     * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.
     * @param firstDayOfWeek - The first day of the week.
     * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.
     * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day
     * for multiday view. Defaults to 1
     * @returns An array of dates representing the date range containing the specified date.
     */
    function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView) {
        if (daysToSelectInDayView === void 0) { daysToSelectInDayView = 1; }
        var datesArray = [];
        var startDate;
        var endDate = null;
        if (!workWeekDays) {
            workWeekDays = [exports.DayOfWeek.Monday, exports.DayOfWeek.Tuesday, exports.DayOfWeek.Wednesday, exports.DayOfWeek.Thursday, exports.DayOfWeek.Friday];
        }
        daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);
        switch (dateRangeType) {
            case DateRangeType.Day:
                startDate = getDatePart(date);
                endDate = addDays(startDate, daysToSelectInDayView);
                break;
            case DateRangeType.Week:
            case DateRangeType.WorkWeek:
                startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);
                endDate = addDays(startDate, TimeConstants.DaysInOneWeek);
                break;
            case DateRangeType.Month:
                startDate = new Date(date.getFullYear(), date.getMonth(), 1);
                endDate = addMonths(startDate, 1);
                break;
            default:
                throw new Error('Unexpected object: ' + dateRangeType);
        }
        // Populate the dates array with the dates in range
        var nextDate = startDate;
        do {
            if (dateRangeType !== DateRangeType.WorkWeek) {
                // push all days not in work week view
                datesArray.push(nextDate);
            }
            else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {
                datesArray.push(nextDate);
            }
            nextDate = addDays(nextDate, 1);
        } while (!compareDates(nextDate, endDate));
        return datesArray;
    }
    /**
     * Checks whether the specified date is in the given date range.
     * @param date - The origin date
     * @param dateRange - An array of dates to do the lookup on
     * @returns True if the date matches one of the dates in the specified array, false otherwise.
     */
    function isInDateRangeArray(date, dateRange) {
        for (var _i = 0, dateRange_1 = dateRange; _i < dateRange_1.length; _i++) {
            var dateInRange = dateRange_1[_i];
            if (compareDates(date, dateInRange)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Returns the week number for a date.
     * Week numbers are 1 - 52 (53) in a year
     * @param navigatedDate - A date to find the week number for.
     * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)
     * @param firstWeekOfYear - The first week of the year (1-2)
     * @returns The weeks number array for the current month.
     */
    function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {
        var selectedYear = navigatedDate.getFullYear();
        var selectedMonth = navigatedDate.getMonth();
        var dayOfMonth = 1;
        var fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);
        var endOfFirstWeek = dayOfMonth +
            (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -
            adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());
        var endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);
        dayOfMonth = endOfWeekRange.getDate();
        var weeksArray = [];
        for (var i = 0; i < weeksInMonth; i++) {
            // Get week number for end of week
            weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));
            dayOfMonth += TimeConstants.DaysInOneWeek;
            endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);
        }
        return weeksArray;
    }
    /**
     * Returns the week number for a date.
     * Week numbers are 1 - 52 (53) in a year
     * @param date - A date to find the week number for.
     * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)
     * @param firstWeekOfYear - The first week of the year (1-2)
     * @returns The week's number in the year.
     */
    function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {
        // First four-day week of the year - minumum days count
        var fourDayWeek = 4;
        switch (firstWeekOfYear) {
            case exports.FirstWeekOfYear.FirstFullWeek:
                return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);
            case exports.FirstWeekOfYear.FirstFourDayWeek:
                return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);
            default:
                return getFirstDayWeekOfYear(date, firstDayOfWeek);
        }
    }
    /**
     * Gets the date for the first day of the week based on the given date assuming
     * the specified first day of the week.
     * @param date - The date to find the beginning of the week date for.
     * @returns A new date object representing the first day of the week containing the input date.
     */
    function getStartDateOfWeek(date, firstDayOfWeek) {
        var daysOffset = firstDayOfWeek - date.getDay();
        if (daysOffset > 0) {
            // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.
            daysOffset -= TimeConstants.DaysInOneWeek;
        }
        return addDays(date, daysOffset);
    }
    /**
     * Gets a new date with the time portion zeroed out, i.e., set to midnight
     * @param date - The origin date
     * @returns A new date with the time set to midnight
     */
    function getDatePart(date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }
    /**
     * Helper function to assist in date comparisons
     */
    function getDatePartHashValue(date) {
        // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.
        // eslint-disable-next-line no-bitwise
        return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);
    }
    /**
     * Helper function for `getWeekNumber`.
     * Returns week number for a date.
     * @param date - current selected date.
     * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)
     * @param numberOfFullDays - week settings.
     * @returns The week's number in the year.
     */
    function getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {
        var dayOfYear = getDayOfYear(date) - 1;
        var num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);
        var lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);
        var daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;
        var num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;
        if (num2 !== 0 && num2 >= numberOfFullDays) {
            num2 -= TimeConstants.DaysInOneWeek;
        }
        var num3 = dayOfYear - num2;
        if (num3 < 0) {
            num -= daysInYear % TimeConstants.DaysInOneWeek;
            num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;
            if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {
                num2 -= TimeConstants.DaysInOneWeek;
            }
            num3 = daysInYear - num2;
        }
        return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);
    }
    /**
     * Helper function for `getWeekNumber`.
     * Returns week number for a date.
     * @param date - current selected date.
     * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)
     * @returns The week's number in the year.
     */
    function getFirstDayWeekOfYear(date, firstDayOfWeek) {
        var num = getDayOfYear(date) - 1;
        var num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);
        var num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;
        return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);
    }
    /**
     * Helper function for `getWeekNumber`.
     * Returns adjusted week day number when `firstDayOfWeek` is other than Sunday.
     * For Week Day Number comparison checks
     * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)
     * @param dateWeekDay - shifts number forward to 1 week in case passed as true
     * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),
     * Sunday becomes 7.
     */
    function adjustWeekDay(firstDayOfWeek, dateWeekDay) {
        return firstDayOfWeek !== exports.DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek
            ? dateWeekDay + TimeConstants.DaysInOneWeek
            : dateWeekDay;
    }
    /**
     * Returns the day number for a date in a year:
     * the number of days since January 1st in the particular year.
     * @param date - A date to find the day number for.
     * @returns The day's number in the year.
     */
    function getDayOfYear(date) {
        var month = date.getMonth();
        var year = date.getFullYear();
        var daysUntilDate = 0;
        for (var i = 0; i < month; i++) {
            daysUntilDate += daysInMonth(i + 1, year);
        }
        daysUntilDate += date.getDate();
        return daysUntilDate;
    }
    /**
     * Returns the number of days in the month
     * @param month - The month number to target (months 1-12).
     * @param year - The year to target.
     * @returns The number of days in the month.
     */
    function daysInMonth(month, year) {
        return new Date(year, month, 0).getDate();
    }

    /**
     * Format date to a day string representation
     * @param date - input date to format
     */
    var formatDay = function (date) { return date.getDate().toString(); };
    /**
     * Format date to a month-day-year string
     * @param date - input date to format
     * @param strings - localized strings
     */
    var formatMonthDayYear = function (date, strings) {
        return strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
    };
    /**
     * Format date to a month-year string
     * @param date - input date to format
     * @param strings - localized strings
     */
    var formatMonthYear = function (date, strings) {
        return strings.months[date.getMonth()] + ' ' + date.getFullYear();
    };
    /**
     * Format date to a month string
     * @param date - input date to format
     * @param strings - localized strings
     */
    var formatMonth = function (date, strings) { return strings.months[date.getMonth()]; };
    /**
     * Format date to a year string representation
     * @param date - input date to format
     */
    var formatYear = function (date) { return date.getFullYear().toString(); };
    var DEFAULT_DATE_GRID_STRINGS = {
        months: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ],
        shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
    };
    var DEFAULT_DATE_FORMATTING = {
        formatDay: formatDay,
        formatMonth: formatMonth,
        formatYear: formatYear,
        formatMonthDayYear: formatMonthDayYear,
        formatMonthYear: formatMonthYear,
    };
    var DEFAULT_CALENDAR_STRINGS = tslib.__assign(tslib.__assign({}, DEFAULT_DATE_GRID_STRINGS), { goToToday: 'Go to today', weekNumberFormatString: 'Week number {0}', prevMonthAriaLabel: 'Previous month', nextMonthAriaLabel: 'Next month', prevYearAriaLabel: 'Previous year', nextYearAriaLabel: 'Next year', prevYearRangeAriaLabel: 'Previous year range', nextYearRangeAriaLabel: 'Next year range', closeButtonAriaLabel: 'Close', selectedDateFormatString: 'Selected date {0}', todayDateFormatString: "Today's date {0}", monthPickerHeaderAriaLabel: '{0}, change year', yearPickerHeaderAriaLabel: '{0}, change month', dayMarkedAriaLabel: 'marked' });

    /**
     * Checks if `date` happens earlier than min date
     * @param date - date to check
     * @param options - object with min date to check against
     */
    var isBeforeMinDate = function (date, options) {
        var minDate = options.minDate;
        return minDate ? compareDatePart(minDate, date) >= 1 : false;
    };

    /**
     * Checks if `date` happens later than max date
     * @param date - date to check
     * @param options - object with max date to check against
     */
    var isAfterMaxDate = function (date, options) {
        var maxDate = options.maxDate;
        return maxDate ? compareDatePart(date, maxDate) >= 1 : false;
    };

    /**
     * Checks if `date` falls into the restricted `options`
     * @param date - date to check
     * @param options - restriction options (min date, max date and list of restricted dates)
     */
    var isRestrictedDate = function (date, options) {
        var restrictedDates = options.restrictedDates, minDate = options.minDate, maxDate = options.maxDate;
        if (!restrictedDates && !minDate && !maxDate) {
            return false;
        }
        var inRestrictedDates = restrictedDates && restrictedDates.some(function (rd) { return compareDates(rd, date); });
        return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);
    };

    /**
     * Returns closest available date given the restriction `options`, or undefined otherwise
     * @param options - list of search options
     */
    var findAvailableDate = function (options) {
        var targetDate = options.targetDate, initialDate = options.initialDate, direction = options.direction, restrictedDateOptions = tslib.__rest(options, ["targetDate", "initialDate", "direction"]);
        var availableDate = targetDate;
        // if the target date is available, return it immediately
        if (!isRestrictedDate(targetDate, restrictedDateOptions)) {
            return targetDate;
        }
        while (compareDatePart(initialDate, availableDate) !== 0 &&
            isRestrictedDate(availableDate, restrictedDateOptions) &&
            !isAfterMaxDate(availableDate, restrictedDateOptions) &&
            !isBeforeMinDate(availableDate, restrictedDateOptions)) {
            availableDate = addDays(availableDate, direction);
        }
        if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {
            return availableDate;
        }
        return undefined;
    };

    /**
     * Generates a list of dates, bounded by min and max dates
     * @param dateRange - input date range
     * @param minDate - min date to limit the range
     * @param maxDate - max date to limit the range
     */
    var getBoundedDateRange = function (dateRange, minDate, maxDate) {
        var boundedDateRange = tslib.__spreadArray([], dateRange);
        if (minDate) {
            boundedDateRange = boundedDateRange.filter(function (date) { return compareDatePart(date, minDate) >= 0; });
        }
        if (maxDate) {
            boundedDateRange = boundedDateRange.filter(function (date) { return compareDatePart(date, maxDate) <= 0; });
        }
        return boundedDateRange;
    };

    /**
     * Returns whether provided week days are contiguous.
     * @param days - list of days in a week
     * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not
     * @param firstDayOfWeek - decides which day of week is the first one in the order.
     */
    var isContiguous = function (days, isSingleWeek, firstDayOfWeek) {
        var daySet = new Set(days);
        var amountOfNoNeighbors = 0;
        for (var _i = 0, days_1 = days; _i < days_1.length; _i++) {
            var day = days_1[_i];
            var nextDay = (day + 1) % 7;
            if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {
                amountOfNoNeighbors++;
            }
        }
        // In case the full week is provided, then each day has a neighbor
        //, otherwise the last day does not have a neighbor.
        return amountOfNoNeighbors < 2;
    };

    /**
     * Return corrected date range type, given `dateRangeType` and list of working days.
     * For non-contiguous working days and working week range type, returns general week range type.
     * For other cases returns input date range type.
     * @param dateRangeType - input type of range
     * @param workWeekDays - list of working days in a week
     */
    var getDateRangeTypeToUse$1 = function (dateRangeType, workWeekDays, firstDayOfWeek) {
        if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {
            if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {
                return DateRangeType.Week;
            }
        }
        return dateRangeType;
    };

    /**
     * Generates a grid of days, given the `options`.
     * Returns one additional week at the begining from the previous range
     * and one at the end from the future range
     * @param options - parameters to specify date related restrictions for the resulting grid
     */
    var getDayGrid = function (options) {
        var selectedDate = options.selectedDate, dateRangeType = options.dateRangeType, firstDayOfWeek = options.firstDayOfWeek, today = options.today, minDate = options.minDate, maxDate = options.maxDate, weeksToShow = options.weeksToShow, workWeekDays = options.workWeekDays, daysToSelectInDayView = options.daysToSelectInDayView, restrictedDates = options.restrictedDates, markedDays = options.markedDays;
        var restrictedDateOptions = { minDate: minDate, maxDate: maxDate, restrictedDates: restrictedDates };
        var todaysDate = today || new Date();
        var navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;
        var date;
        if (weeksToShow && weeksToShow <= 4) {
            // if showing less than a full month, just use date == navigatedDate
            date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());
        }
        else {
            date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);
        }
        var weeks = [];
        // Cycle the date backwards to get to the first day of the week.
        while (date.getDay() !== firstDayOfWeek) {
            date.setDate(date.getDate() - 1);
        }
        // add the transition week as last week of previous range
        date = addDays(date, -DAYS_IN_WEEK);
        // a flag to indicate whether all days of the week are outside the month
        var isAllDaysOfWeekOutOfMonth = false;
        // in work week view if the days aren't contiguous we use week view instead
        var selectedDateRangeType = getDateRangeTypeToUse$1(dateRangeType, workWeekDays, firstDayOfWeek);
        var selectedDates = [];
        if (selectedDate) {
            selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);
            selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);
        }
        var shouldGetWeeks = true;
        for (var weekIndex = 0; shouldGetWeeks; weekIndex++) {
            var week = [];
            isAllDaysOfWeekOutOfMonth = true;
            var _loop_1 = function (dayIndex) {
                var originalDate = new Date(date.getTime());
                var dayInfo = {
                    key: date.toString(),
                    date: date.getDate().toString(),
                    originalDate: originalDate,
                    isInMonth: date.getMonth() === navigatedDate.getMonth(),
                    isToday: compareDates(todaysDate, date),
                    isSelected: isInDateRangeArray(date, selectedDates),
                    isInBounds: !isRestrictedDate(date, restrictedDateOptions),
                    isMarked: (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some(function (markedDay) { return compareDates(originalDate, markedDay); })) || false,
                };
                week.push(dayInfo);
                if (dayInfo.isInMonth) {
                    isAllDaysOfWeekOutOfMonth = false;
                }
                date.setDate(date.getDate() + 1);
            };
            for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {
                _loop_1(dayIndex);
            }
            // We append the condition of the loop depending upon the showSixWeeksByDefault prop.
            shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;
            // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state
            weeks.push(week);
        }
        return weeks;
    };

    var CalendarMonthHeaderRow = function (props) {
        var showWeekNumbers = props.showWeekNumbers, strings = props.strings, firstDayOfWeek = props.firstDayOfWeek, allFocusable = props.allFocusable, weeksToShow = props.weeksToShow, weeks = props.weeks, classNames = props.classNames;
        var dayLabels = strings.shortDays.slice();
        var firstOfMonthIndex = findIndex(weeks[1], function (day) { return day.originalDate.getDate() === 1; });
        if (weeksToShow === 1 && firstOfMonthIndex >= 0) {
            // if we only show one week, replace the header with short month name
            var firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;
            dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks[1][firstOfMonthIndex].originalDate.getMonth()];
        }
        return (React__namespace.createElement("tr", null,
            showWeekNumbers && React__namespace.createElement("th", { className: classNames.dayCell }),
            dayLabels.map(function (val, index) {
                var i = (index + firstDayOfWeek) % DAYS_IN_WEEK;
                var label = index === firstOfMonthIndex ? strings.days[i] + ' ' + dayLabels[i] : strings.days[i];
                return (React__namespace.createElement("th", { className: css(classNames.dayCell, classNames.weekDayLabelCell), scope: "col", key: dayLabels[i] + ' ' + index, title: label, "aria-label": label, "data-is-focusable": allFocusable ? true : undefined }, dayLabels[i]));
            })));
    };

    var CalendarGridDayCell = function (props) {
        var _a;
        var navigatedDate = props.navigatedDate, dateTimeFormatter = props.dateTimeFormatter, allFocusable = props.allFocusable, strings = props.strings, activeDescendantId = props.activeDescendantId, navigatedDayRef = props.navigatedDayRef, calculateRoundedStyles = props.calculateRoundedStyles, weeks = props.weeks, classNames = props.classNames, day = props.day, dayIndex = props.dayIndex, weekIndex = props.weekIndex, weekCorners = props.weekCorners, ariaHidden = props.ariaHidden, customDayCellRef = props.customDayCellRef, dateRangeType = props.dateRangeType, daysToSelectInDayView = props.daysToSelectInDayView, onSelectDate = props.onSelectDate, restrictedDates = props.restrictedDates, minDate = props.minDate, maxDate = props.maxDate, onNavigateDate = props.onNavigateDate, getDayInfosInRangeOfDay = props.getDayInfosInRangeOfDay, getRefsFromDayInfos = props.getRefsFromDayInfos;
        var cornerStyle = (_a = weekCorners === null || weekCorners === void 0 ? void 0 : weekCorners[weekIndex + '_' + dayIndex]) !== null && _a !== void 0 ? _a : '';
        var isNavigatedDate = compareDates(navigatedDate, day.originalDate);
        var navigateMonthEdge = function (ev, date) {
            var targetDate = undefined;
            var direction = 1; // by default search forward
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.up) {
                targetDate = addWeeks(date, -1);
                direction = -1;
                // eslint-disable-next-line deprecation/deprecation
            }
            else if (ev.which === KeyCodes.down) {
                targetDate = addWeeks(date, 1);
                // eslint-disable-next-line deprecation/deprecation
            }
            else if (ev.which === getRTLSafeKeyCode(KeyCodes.left)) {
                targetDate = addDays(date, -1);
                direction = -1;
                // eslint-disable-next-line deprecation/deprecation
            }
            else if (ev.which === getRTLSafeKeyCode(KeyCodes.right)) {
                targetDate = addDays(date, 1);
            }
            if (!targetDate) {
                // if we couldn't find a target date at all, do nothing
                return;
            }
            var findAvailableDateOptions = {
                initialDate: date,
                targetDate: targetDate,
                direction: direction,
                restrictedDates: restrictedDates,
                minDate: minDate,
                maxDate: maxDate,
            };
            // target date is restricted, search in whatever direction until finding the next possible date,
            // stopping at boundaries
            var nextDate = findAvailableDate(findAvailableDateOptions);
            if (!nextDate) {
                // if no dates available in initial direction, try going backwards
                findAvailableDateOptions.direction = -direction;
                nextDate = findAvailableDate(findAvailableDateOptions);
            }
            // if the nextDate is still inside the same focusZone area, let the focusZone handle setting the focus so we
            // don't jump the view unnecessarily
            var isInCurrentView = weeks &&
                nextDate &&
                weeks.slice(1, weeks.length - 1).some(function (week) {
                    return week.some(function (dayToCompare) {
                        return compareDates(dayToCompare.originalDate, nextDate);
                    });
                });
            if (isInCurrentView) {
                return;
            }
            // else, fire navigation on the date to change the view to show it
            if (nextDate) {
                onNavigateDate(nextDate, true);
                ev.preventDefault();
            }
        };
        var onMouseOverDay = function (ev) {
            var dayInfos = getDayInfosInRangeOfDay(day);
            var dayRefs = getRefsFromDayInfos(dayInfos);
            dayRefs.forEach(function (dayRef, index) {
                var _a;
                if (dayRef) {
                    dayRef.classList.add('ms-CalendarDay-hoverStyle');
                    if (!dayInfos[index].isSelected &&
                        dateRangeType === DateRangeType.Day &&
                        daysToSelectInDayView &&
                        daysToSelectInDayView > 1) {
                        // remove the static classes first to overwrite them
                        dayRef.classList.remove(classNames.bottomLeftCornerDate, classNames.bottomRightCornerDate, classNames.topLeftCornerDate, classNames.topRightCornerDate);
                        var classNamesToAdd = calculateRoundedStyles(classNames, false, false, index > 0, index < dayRefs.length - 1).trim();
                        if (classNamesToAdd) {
                            (_a = dayRef.classList).add.apply(_a, classNamesToAdd.split(' '));
                        }
                    }
                }
            });
        };
        var onMouseDownDay = function (ev) {
            var dayInfos = getDayInfosInRangeOfDay(day);
            var dayRefs = getRefsFromDayInfos(dayInfos);
            dayRefs.forEach(function (dayRef) {
                if (dayRef) {
                    dayRef.classList.add('ms-CalendarDay-pressedStyle');
                }
            });
        };
        var onMouseUpDay = function (ev) {
            var dayInfos = getDayInfosInRangeOfDay(day);
            var dayRefs = getRefsFromDayInfos(dayInfos);
            dayRefs.forEach(function (dayRef) {
                if (dayRef) {
                    dayRef.classList.remove('ms-CalendarDay-pressedStyle');
                }
            });
        };
        var onMouseOutDay = function (ev) {
            var dayInfos = getDayInfosInRangeOfDay(day);
            var dayRefs = getRefsFromDayInfos(dayInfos);
            dayRefs.forEach(function (dayRef, index) {
                var _a;
                if (dayRef) {
                    dayRef.classList.remove('ms-CalendarDay-hoverStyle');
                    dayRef.classList.remove('ms-CalendarDay-pressedStyle');
                    if (!dayInfos[index].isSelected &&
                        dateRangeType === DateRangeType.Day &&
                        daysToSelectInDayView &&
                        daysToSelectInDayView > 1) {
                        var classNamesToAdd = calculateRoundedStyles(classNames, false, false, index > 0, index < dayRefs.length - 1).trim();
                        if (classNamesToAdd) {
                            (_a = dayRef.classList).remove.apply(_a, classNamesToAdd.split(' '));
                        }
                    }
                }
            });
        };
        var onDayKeyDown = function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.enter) {
                onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(day.originalDate);
            }
            else {
                navigateMonthEdge(ev, day.originalDate);
            }
        };
        var ariaLabel = day.originalDate.getDate() +
            ', ' +
            strings.months[day.originalDate.getMonth()] +
            ', ' +
            day.originalDate.getFullYear();
        if (day.isMarked) {
            ariaLabel = ariaLabel + ', ' + strings.dayMarkedAriaLabel;
        }
        return (React__namespace.createElement("td", { className: css(classNames.dayCell, weekCorners && cornerStyle, day.isSelected && classNames.daySelected, day.isSelected && 'ms-CalendarDay-daySelected', !day.isInBounds && classNames.dayOutsideBounds, !day.isInMonth && classNames.dayOutsideNavigatedMonth), ref: function (element) {
                customDayCellRef === null || customDayCellRef === void 0 ? void 0 : customDayCellRef(element, day.originalDate, classNames);
                day.setRef(element);
                isNavigatedDate && (navigatedDayRef.current = element);
            }, "aria-hidden": ariaHidden, "aria-disabled": !ariaHidden && !day.isInBounds, onClick: day.isInBounds && !ariaHidden ? day.onSelected : undefined, onMouseOver: !ariaHidden ? onMouseOverDay : undefined, onMouseDown: !ariaHidden ? onMouseDownDay : undefined, onMouseUp: !ariaHidden ? onMouseUpDay : undefined, onMouseOut: !ariaHidden ? onMouseOutDay : undefined, onKeyDown: !ariaHidden ? onDayKeyDown : undefined, role: "gridcell", tabIndex: isNavigatedDate ? 0 : undefined, "aria-current": day.isSelected ? 'date' : undefined, "aria-selected": day.isInBounds ? day.isSelected : undefined, "data-is-focusable": !ariaHidden && (allFocusable || (day.isInBounds ? true : undefined)) },
            React__namespace.createElement("button", { key: day.key + 'button', "aria-hidden": ariaHidden, className: css(classNames.dayButton, day.isToday && classNames.dayIsToday, day.isToday && 'ms-CalendarDay-dayIsToday'), "aria-label": ariaLabel, id: isNavigatedDate ? activeDescendantId : undefined, disabled: !ariaHidden && !day.isInBounds, type: "button", tabIndex: -1, "data-is-focusable": "false" },
                React__namespace.createElement("span", { "aria-hidden": "true" }, dateTimeFormatter.formatDay(day.originalDate)),
                day.isMarked && React__namespace.createElement("div", { "aria-hidden": "true", className: classNames.dayMarker }))));
    };

    var CalendarGridRow = function (props) {
        var classNames = props.classNames, week = props.week, weeks = props.weeks, weekIndex = props.weekIndex, rowClassName = props.rowClassName, ariaRole = props.ariaRole, showWeekNumbers = props.showWeekNumbers, firstDayOfWeek = props.firstDayOfWeek, firstWeekOfYear = props.firstWeekOfYear, navigatedDate = props.navigatedDate, strings = props.strings;
        var weekNumbers = showWeekNumbers
            ? getWeekNumbersInMonth(weeks.length, firstDayOfWeek, firstWeekOfYear, navigatedDate)
            : null;
        var titleString = weekNumbers
            ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex])
            : '';
        return (React__namespace.createElement("tr", { role: ariaRole, className: rowClassName, key: weekIndex + '_' + week[0].key },
            showWeekNumbers && weekNumbers && (React__namespace.createElement("th", { className: classNames.weekNumberCell, key: weekIndex, title: titleString, "aria-label": titleString, scope: "row" },
                React__namespace.createElement("span", null, weekNumbers[weekIndex]))),
            week.map(function (day, dayIndex) { return (React__namespace.createElement(CalendarGridDayCell, tslib.__assign({}, props, { key: day.key, day: day, dayIndex: dayIndex }))); })));
    };

    var getClassNames$1i = classNamesFunction();
    function useDayRefs() {
        var daysRef = React__namespace.useRef({});
        var getSetRefCallback = function (dayKey) { return function (element) {
            if (element === null) {
                delete daysRef.current[dayKey];
            }
            else {
                daysRef.current[dayKey] = element;
            }
        }; };
        return [daysRef, getSetRefCallback];
    }
    function useWeeks(props, onSelectDate, getSetRefCallback) {
        /**
         * Initial parsing of the given props to generate IDayInfo two dimensional array, which contains a representation
         * of every day in the grid. Convenient for helping with conversions between day refs and Date objects in callbacks.
         */
        var weeks = React__namespace.useMemo(function () {
            var _a;
            var weeksGrid = getDayGrid(props);
            var firstVisibleDay = weeksGrid[1][0].originalDate;
            var lastVisibleDay = weeksGrid[weeksGrid.length - 1][6].originalDate;
            var markedDays = ((_a = props.getMarkedDays) === null || _a === void 0 ? void 0 : _a.call(props, firstVisibleDay, lastVisibleDay)) || [];
            /**
             * Weeks is a 2D array. Weeks[0] contains the last week of the prior range,
             * Weeks[weeks.length - 1] contains first week of next range. These are for transition states.
             *
             * Weeks[1... weeks.length - 2] contains the actual visible data
             */
            var returnValue = [];
            for (var weekIndex = 0; weekIndex < weeksGrid.length; weekIndex++) {
                var week = [];
                var _loop_1 = function (dayIndex) {
                    var day = weeksGrid[weekIndex][dayIndex];
                    var dayInfo = tslib.__assign(tslib.__assign({ onSelected: function () { return onSelectDate(day.originalDate); }, setRef: getSetRefCallback(day.key) }, day), { isMarked: day.isMarked || (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some(function (markedDay) { return compareDates(day.originalDate, markedDay); })) });
                    week.push(dayInfo);
                };
                for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {
                    _loop_1(dayIndex);
                }
                returnValue.push(week);
            }
            return returnValue;
            // TODO: this is missing deps on getSetRefCallback and onSelectDate (and depending on the entire
            // props object may not be a good idea due to likely frequent mutation). It would be easy to
            // fix getSetRefCallback to not mutate every render, but onSelectDate is passed down from
            // Calendar and trying to fix it requires a huge cascade of changes.
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [props]);
        return weeks;
    }
    /**
     * Hook to determine whether to animate the CalendarDayGrid forwards or backwards
     * @returns true if the grid should animate backwards; false otherwise
     */
    function useAnimateBackwards$2(weeks) {
        var previousNavigatedDate = usePrevious(weeks[0][0].originalDate);
        if (!previousNavigatedDate || previousNavigatedDate.getTime() === weeks[0][0].originalDate.getTime()) {
            return undefined;
        }
        else if (previousNavigatedDate <= weeks[0][0].originalDate) {
            return false;
        }
        else {
            return true;
        }
    }
    function useWeekCornerStyles(props) {
        /**
         *
         * Section for setting the rounded corner styles on individual day cells. Individual day cells need different
         * corners to be rounded depending on which date range type and where the cell is located in the current grid.
         * If we just round all of the corners, there isn't a good overlap and we get gaps between contiguous day boxes
         * in Edge browser.
         *
         */
        var getWeekCornerStyles = function (classNames, initialWeeks) {
            var weekCornersStyled = {};
            /* need to handle setting all of the corners on arbitrarily shaped blobs
                  __
               __|A |
              |B |C |__
              |D |E |F |
        
              in this case, A needs top left rounded, top right rounded
              B needs top left rounded
              C doesn't need any rounding
              D needs bottom left rounded
              E doesn't need any rounding
              F needs top right rounding
            */
            // cut off the animation transition weeks
            var weeks = initialWeeks.slice(1, initialWeeks.length - 1);
            // if there's an item above, lose both top corners. Item below, lose both bottom corners, etc.
            weeks.forEach(function (week, weekIndex) {
                week.forEach(function (day, dayIndex) {
                    var above = weeks[weekIndex - 1] &&
                        weeks[weekIndex - 1][dayIndex] &&
                        isInSameHoverRange(weeks[weekIndex - 1][dayIndex].originalDate, day.originalDate, weeks[weekIndex - 1][dayIndex].isSelected, day.isSelected);
                    var below = weeks[weekIndex + 1] &&
                        weeks[weekIndex + 1][dayIndex] &&
                        isInSameHoverRange(weeks[weekIndex + 1][dayIndex].originalDate, day.originalDate, weeks[weekIndex + 1][dayIndex].isSelected, day.isSelected);
                    var left = weeks[weekIndex][dayIndex - 1] &&
                        isInSameHoverRange(weeks[weekIndex][dayIndex - 1].originalDate, day.originalDate, weeks[weekIndex][dayIndex - 1].isSelected, day.isSelected);
                    var right = weeks[weekIndex][dayIndex + 1] &&
                        isInSameHoverRange(weeks[weekIndex][dayIndex + 1].originalDate, day.originalDate, weeks[weekIndex][dayIndex + 1].isSelected, day.isSelected);
                    var style = [];
                    style.push(calculateRoundedStyles(classNames, above, below, left, right));
                    style.push(calculateBorderStyles(classNames, above, below, left, right));
                    weekCornersStyled[weekIndex + '_' + dayIndex] = style.join(' ');
                });
            });
            return weekCornersStyled;
        };
        var calculateRoundedStyles = function (classNames, above, below, left, right) {
            var style = [];
            var roundedTopLeft = !above && !left;
            var roundedTopRight = !above && !right;
            var roundedBottomLeft = !below && !left;
            var roundedBottomRight = !below && !right;
            if (roundedTopLeft) {
                style.push(getRTL() ? classNames.topRightCornerDate : classNames.topLeftCornerDate);
            }
            if (roundedTopRight) {
                style.push(getRTL() ? classNames.topLeftCornerDate : classNames.topRightCornerDate);
            }
            if (roundedBottomLeft) {
                style.push(getRTL() ? classNames.bottomRightCornerDate : classNames.bottomLeftCornerDate);
            }
            if (roundedBottomRight) {
                style.push(getRTL() ? classNames.bottomLeftCornerDate : classNames.bottomRightCornerDate);
            }
            return style.join(' ');
        };
        var calculateBorderStyles = function (classNames, above, below, left, right) {
            var style = [];
            if (!above) {
                style.push(classNames.datesAbove);
            }
            if (!below) {
                style.push(classNames.datesBelow);
            }
            if (!left) {
                style.push(getRTL() ? classNames.datesRight : classNames.datesLeft);
            }
            if (!right) {
                style.push(getRTL() ? classNames.datesLeft : classNames.datesRight);
            }
            return style.join(' ');
        };
        var isInSameHoverRange = function (date1, date2, date1Selected, date2Selected) {
            var dateRangeType = props.dateRangeType, firstDayOfWeek = props.firstDayOfWeek, workWeekDays = props.workWeekDays;
            // The hover state looks weird with non-contiguous days in work week view. In work week, show week hover state
            var dateRangeHoverType = dateRangeType === DateRangeType.WorkWeek ? DateRangeType.Week : dateRangeType;
            // we do not pass daysToSelectInDayView because we handle setting those styles dyanamically in onMouseOver
            var dateRange = getDateRangeArray(date1, dateRangeHoverType, firstDayOfWeek, workWeekDays);
            if (date1Selected !== date2Selected) {
                // if one is selected and the other is not, they can't be in the same range
                return false;
            }
            else if (date1Selected && date2Selected) {
                // if they're both selected at the same time they must be in the same range
                return true;
            }
            // otherwise, both must be unselected, so check the dateRange
            return dateRange.filter(function (date) { return date.getTime() === date2.getTime(); }).length > 0;
        };
        return [getWeekCornerStyles, calculateRoundedStyles];
    }
    var CalendarDayGridBase = function (props) {
        var navigatedDayRef = React__namespace.useRef(null);
        var activeDescendantId = useId();
        var onSelectDate = function (selectedDate) {
            var _a, _b;
            var firstDayOfWeek = props.firstDayOfWeek, minDate = props.minDate, maxDate = props.maxDate, workWeekDays = props.workWeekDays, daysToSelectInDayView = props.daysToSelectInDayView, restrictedDates = props.restrictedDates;
            var restrictedDatesOptions = { minDate: minDate, maxDate: maxDate, restrictedDates: restrictedDates };
            var dateRange = getDateRangeArray(selectedDate, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);
            dateRange = getBoundedDateRange(dateRange, minDate, maxDate);
            dateRange = dateRange.filter(function (d) {
                return !isRestrictedDate(d, restrictedDatesOptions);
            });
            (_a = props.onSelectDate) === null || _a === void 0 ? void 0 : _a.call(props, selectedDate, dateRange);
            (_b = props.onNavigateDate) === null || _b === void 0 ? void 0 : _b.call(props, selectedDate, true);
        };
        var _a = useDayRefs(), daysRef = _a[0], getSetRefCallback = _a[1];
        var weeks = useWeeks(props, onSelectDate, getSetRefCallback);
        var animateBackwards = useAnimateBackwards$2(weeks);
        var _b = useWeekCornerStyles(props), getWeekCornerStyles = _b[0], calculateRoundedStyles = _b[1];
        React__namespace.useImperativeHandle(props.componentRef, function () { return ({
            focus: function () {
                var _a, _b;
                (_b = (_a = navigatedDayRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
            },
        }); }, []);
        /**
         *
         * Section for setting hover/pressed styles. Because we want arbitrary blobs of days to be selectable, to support
         * highlighting every day in the month for month view, css :hover style isn't enough, so we need mouse callbacks
         * to set classnames on all relevant child refs to apply the styling
         *
         */
        var getDayInfosInRangeOfDay = function (dayToCompare) {
            // The hover state looks weird with non-contiguous days in work week view. In work week, show week hover state
            var dateRangeHoverType = getDateRangeTypeToUse(props.dateRangeType, props.workWeekDays);
            // gets all the dates for the given date range type that are in the same date range as the given day
            var dateRange = getDateRangeArray(dayToCompare.originalDate, dateRangeHoverType, props.firstDayOfWeek, props.workWeekDays, props.daysToSelectInDayView).map(function (date) { return date.getTime(); });
            // gets all the day refs for the given dates
            var dayInfosInRange = weeks.reduce(function (accumulatedValue, currentWeek) {
                return accumulatedValue.concat(currentWeek.filter(function (weekDay) { return dateRange.indexOf(weekDay.originalDate.getTime()) !== -1; }));
            }, []);
            return dayInfosInRange;
        };
        var getRefsFromDayInfos = function (dayInfosInRange) {
            var dayRefs = [];
            dayRefs = dayInfosInRange.map(function (dayInfo) { return daysRef.current[dayInfo.key]; });
            return dayRefs;
        };
        var styles = props.styles, theme = props.theme, className = props.className, dateRangeType = props.dateRangeType, showWeekNumbers = props.showWeekNumbers, labelledBy = props.labelledBy, lightenDaysOutsideNavigatedMonth = props.lightenDaysOutsideNavigatedMonth, animationDirection = props.animationDirection;
        var classNames = getClassNames$1i(styles, {
            theme: theme,
            className: className,
            dateRangeType: dateRangeType,
            showWeekNumbers: showWeekNumbers,
            lightenDaysOutsideNavigatedMonth: lightenDaysOutsideNavigatedMonth === undefined ? true : lightenDaysOutsideNavigatedMonth,
            animationDirection: animationDirection,
            animateBackwards: animateBackwards,
        });
        // When the month is highlighted get the corner dates so that styles can be added to them
        var weekCorners = getWeekCornerStyles(classNames, weeks);
        var partialWeekProps = {
            weeks: weeks,
            navigatedDayRef: navigatedDayRef,
            calculateRoundedStyles: calculateRoundedStyles,
            activeDescendantId: activeDescendantId,
            classNames: classNames,
            weekCorners: weekCorners,
            getDayInfosInRangeOfDay: getDayInfosInRangeOfDay,
            getRefsFromDayInfos: getRefsFromDayInfos,
        };
        return (React__namespace.createElement(FocusZone, { className: classNames.wrapper },
            React__namespace.createElement("table", { className: classNames.table, "aria-multiselectable": "false", "aria-labelledby": labelledBy, "aria-activedescendant": activeDescendantId, role: "grid" },
                React__namespace.createElement("tbody", null,
                    React__namespace.createElement(CalendarMonthHeaderRow, tslib.__assign({}, props, { classNames: classNames, weeks: weeks })),
                    React__namespace.createElement(CalendarGridRow, tslib.__assign({}, props, partialWeekProps, { week: weeks[0], weekIndex: -1, rowClassName: classNames.firstTransitionWeek, ariaRole: "presentation", ariaHidden: true })),
                    weeks.slice(1, weeks.length - 1).map(function (week, weekIndex) { return (React__namespace.createElement(CalendarGridRow, tslib.__assign({}, props, partialWeekProps, { key: weekIndex, week: week, weekIndex: weekIndex, rowClassName: classNames.weekRow }))); }),
                    React__namespace.createElement(CalendarGridRow, tslib.__assign({}, props, partialWeekProps, { week: weeks[weeks.length - 1], weekIndex: -2, rowClassName: classNames.lastTransitionWeek, ariaRole: "presentation", ariaHidden: true }))))));
    };
    CalendarDayGridBase.displayName = 'CalendarDayGridBase';
    /**
     * When given work week, if the days are non-contiguous, the hover states look really weird. So for non-contiguous
     * work weeks, we'll just show week view instead.
     */
    function getDateRangeTypeToUse(dateRangeType, workWeekDays) {
        if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {
            var sortedWWDays = workWeekDays.slice().sort();
            var isContiguous = true;
            for (var i = 1; i < sortedWWDays.length; i++) {
                if (sortedWWDays[i] !== sortedWWDays[i - 1] + 1) {
                    isContiguous = false;
                    break;
                }
            }
            if (!isContiguous || workWeekDays.length === 0) {
                return DateRangeType.Week;
            }
        }
        return dateRangeType;
    }

    /**
     * {@docCategory Calendar}
     */
    var AnimationDirection;
    (function (AnimationDirection) {
        /**
         * Grid will transition out and in horizontally
         */
        AnimationDirection[AnimationDirection["Horizontal"] = 0] = "Horizontal";
        /**
         * Grid will transition out and in vertically
         */
        AnimationDirection[AnimationDirection["Vertical"] = 1] = "Vertical";
    })(AnimationDirection || (AnimationDirection = {}));

    var GlobalClassNames$m = {
        hoverStyle: 'ms-CalendarDay-hoverStyle',
        pressedStyle: 'ms-CalendarDay-pressedStyle',
        dayIsTodayStyle: 'ms-CalendarDay-dayIsToday',
        daySelectedStyle: 'ms-CalendarDay-daySelected',
    };
    var transitionRowDisappearance = keyframes({
        '100%': {
            width: 0,
            height: 0,
            overflow: 'hidden',
        },
        '99.9%': {
            width: '100%',
            height: 28,
            overflow: 'visible',
        },
        '0%': {
            width: '100%',
            height: 28,
            overflow: 'visible',
        },
    });
    var styles$3 = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var theme = props.theme, dateRangeType = props.dateRangeType, showWeekNumbers = props.showWeekNumbers, lightenDaysOutsideNavigatedMonth = props.lightenDaysOutsideNavigatedMonth, animateBackwards = props.animateBackwards, animationDirection = props.animationDirection;
        var palette = theme.palette;
        var classNames = getGlobalClassNames(GlobalClassNames$m, theme);
        var rowAnimationStyle = {};
        if (animateBackwards !== undefined) {
            if (animationDirection === AnimationDirection.Horizontal) {
                rowAnimationStyle = animateBackwards ? AnimationStyles.slideRightIn20 : AnimationStyles.slideLeftIn20;
            }
            else {
                rowAnimationStyle = animateBackwards ? AnimationStyles.slideDownIn20 : AnimationStyles.slideUpIn20;
            }
        }
        var firstTransitionRowAnimationStyle = {};
        var lastTransitionRowAnimationStyle = {};
        if (animateBackwards !== undefined) {
            if (animationDirection !== AnimationDirection.Horizontal) {
                firstTransitionRowAnimationStyle = animateBackwards ? { animationName: '' } : AnimationStyles.slideUpOut20;
                lastTransitionRowAnimationStyle = animateBackwards ? AnimationStyles.slideDownOut20 : { animationName: '' };
            }
        }
        var disabledStyle = {
            selectors: {
                '&, &:disabled, & button': {
                    color: palette.neutralTertiaryAlt,
                    pointerEvents: 'none',
                },
            },
        };
        return {
            wrapper: {
                paddingBottom: 10,
            },
            table: [
                {
                    textAlign: 'center',
                    borderCollapse: 'collapse',
                    borderSpacing: '0',
                    tableLayout: 'fixed',
                    fontSize: 'inherit',
                    marginTop: 4,
                    width: 196,
                    position: 'relative',
                    paddingBottom: 10,
                },
                showWeekNumbers && {
                    width: 226,
                },
            ],
            dayCell: {
                margin: 0,
                padding: 0,
                width: 28,
                height: 28,
                lineHeight: 28,
                fontSize: FontSizes.small,
                fontWeight: FontWeights.regular,
                color: palette.neutralPrimary,
                cursor: 'pointer',
                position: 'relative',
                selectors: (_a = {},
                    _a[HighContrastSelector] = tslib.__assign({ color: 'WindowText', backgroundColor: 'Window', zIndex: 0 }, getHighContrastNoAdjustStyle()),
                    _a['&.' + classNames.hoverStyle] = {
                        backgroundColor: palette.neutralLighter,
                        selectors: (_b = {},
                            _b[HighContrastSelector] = {
                                zIndex: 3,
                                backgroundColor: 'Window',
                                outline: '1px solid Highlight',
                            },
                            _b),
                    },
                    _a['&.' + classNames.pressedStyle] = {
                        backgroundColor: palette.neutralLight,
                        selectors: (_c = {},
                            _c[HighContrastSelector] = {
                                borderColor: 'Highlight',
                                color: 'Highlight',
                                backgroundColor: 'Window',
                            },
                            _c),
                    },
                    _a['&.' + classNames.pressedStyle + '.' + classNames.hoverStyle] = {
                        selectors: (_d = {},
                            _d[HighContrastSelector] = {
                                backgroundColor: 'Window',
                                outline: '1px solid Highlight',
                            },
                            _d),
                    },
                    _a),
            },
            daySelected: [
                dateRangeType !== DateRangeType.Month && {
                    backgroundColor: palette.neutralLight + '!important',
                    selectors: (_e = {
                            '&:after': {
                                content: '""',
                                position: 'absolute',
                                top: 0,
                                bottom: 0,
                                left: 0,
                                right: 0,
                            }
                        },
                        _e['&:hover, &.' + classNames.hoverStyle + ', &.' + classNames.pressedStyle] = (_f = {
                                backgroundColor: palette.neutralLight + '!important'
                            },
                            _f[HighContrastSelector] = {
                                color: 'HighlightText!important',
                                background: 'Highlight!important',
                            },
                            _f),
                        _e[HighContrastSelector] = tslib.__assign({ background: 'Highlight!important', color: 'HighlightText!important', borderColor: 'Highlight!important' }, getHighContrastNoAdjustStyle()),
                        _e),
                },
            ],
            weekRow: rowAnimationStyle,
            weekDayLabelCell: AnimationStyles.fadeIn200,
            weekNumberCell: {
                margin: 0,
                padding: 0,
                borderRight: '1px solid',
                borderColor: palette.neutralLight,
                backgroundColor: palette.neutralLighterAlt,
                color: palette.neutralSecondary,
                boxSizing: 'border-box',
                width: 28,
                height: 28,
                fontWeight: FontWeights.regular,
                fontSize: FontSizes.small,
            },
            dayOutsideBounds: disabledStyle,
            dayOutsideNavigatedMonth: lightenDaysOutsideNavigatedMonth && {
                color: palette.neutralSecondary,
                fontWeight: FontWeights.regular,
            },
            dayButton: [
                getFocusStyle(theme, { inset: -3 }),
                {
                    width: 24,
                    height: 24,
                    lineHeight: 24,
                    fontSize: FontSizes.small,
                    fontWeight: 'inherit',
                    borderRadius: 2,
                    border: 'none',
                    padding: 0,
                    color: 'inherit',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                    overflow: 'visible',
                    selectors: {
                        span: {
                            height: 'inherit',
                            lineHeight: 'inherit',
                        },
                    },
                },
            ],
            dayIsToday: {
                backgroundColor: palette.themePrimary + '!important',
                borderRadius: '100%',
                color: palette.white + '!important',
                fontWeight: (FontWeights.semibold + '!important'),
                selectors: (_g = {},
                    _g[HighContrastSelector] = tslib.__assign({ background: 'WindowText!important', color: 'Window!important', borderColor: 'WindowText!important' }, getHighContrastNoAdjustStyle()),
                    _g),
            },
            firstTransitionWeek: tslib.__assign(tslib.__assign({ position: 'absolute', opacity: 0, width: 0, height: 0, overflow: 'hidden' }, firstTransitionRowAnimationStyle), { animationName: firstTransitionRowAnimationStyle.animationName + ',' + transitionRowDisappearance }),
            lastTransitionWeek: tslib.__assign(tslib.__assign({ position: 'absolute', opacity: 0, width: 0, height: 0, overflow: 'hidden', marginTop: -28 }, lastTransitionRowAnimationStyle), { animationName: lastTransitionRowAnimationStyle.animationName + ',' + transitionRowDisappearance }),
            dayMarker: {
                width: 4,
                height: 4,
                backgroundColor: palette.neutralSecondary,
                borderRadius: '100%',
                bottom: 1,
                left: 0,
                right: 0,
                position: 'absolute',
                margin: 'auto',
                selectors: (_h = {},
                    _h['.' + classNames.dayIsTodayStyle + ' &'] = {
                        backgroundColor: palette.white,
                        selectors: (_j = {},
                            _j[HighContrastSelector] = {
                                backgroundColor: 'Window',
                            },
                            _j),
                    },
                    _h['.' + classNames.daySelectedStyle + ' &'] = {
                        selectors: (_k = {},
                            _k[HighContrastSelector] = {
                                backgroundColor: 'HighlightText',
                            },
                            _k),
                    },
                    _h[HighContrastSelector] = tslib.__assign({ backgroundColor: 'WindowText' }, getHighContrastNoAdjustStyle()),
                    _h),
            },
            topRightCornerDate: {
                borderTopRightRadius: '2px',
            },
            topLeftCornerDate: {
                borderTopLeftRadius: '2px',
            },
            bottomRightCornerDate: {
                borderBottomRightRadius: '2px',
            },
            bottomLeftCornerDate: {
                borderBottomLeftRadius: '2px',
            },
            datesAbove: {
                '&:after': {
                    borderTop: "1px solid " + palette.neutralSecondary,
                },
            },
            datesBelow: {
                '&:after': {
                    borderBottom: "1px solid " + palette.neutralSecondary,
                },
            },
            datesLeft: {
                '&:after': {
                    borderLeft: "1px solid " + palette.neutralSecondary,
                },
            },
            datesRight: {
                '&:after': {
                    borderRight: "1px solid " + palette.neutralSecondary,
                },
            },
        };
    };

    var CalendarDayGrid = styled(CalendarDayGridBase, styles$3, undefined, { scope: 'CalendarDayGrid' });

    var getClassNames$1h = classNamesFunction();
    var CalendarDayBase = function (props) {
        var dayGrid = React__namespace.useRef(null);
        React__namespace.useImperativeHandle(props.componentRef, function () { return ({
            focus: function () {
                var _a, _b;
                (_b = (_a = dayGrid.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
            },
        }); }, []);
        var strings = props.strings, navigatedDate = props.navigatedDate, dateTimeFormatter = props.dateTimeFormatter, styles = props.styles, theme = props.theme, className = props.className, onHeaderSelect = props.onHeaderSelect, showSixWeeksByDefault = props.showSixWeeksByDefault, minDate = props.minDate, maxDate = props.maxDate, restrictedDates = props.restrictedDates, onNavigateDate = props.onNavigateDate, showWeekNumbers = props.showWeekNumbers, dateRangeType = props.dateRangeType, animationDirection = props.animationDirection;
        var monthAndYearId = useId();
        var classNames = getClassNames$1h(styles, {
            theme: theme,
            className: className,
            headerIsClickable: !!onHeaderSelect,
            showWeekNumbers: showWeekNumbers,
            animationDirection: animationDirection,
        });
        var monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);
        var HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';
        var headerAriaLabel = strings.yearPickerHeaderAriaLabel
            ? format(strings.yearPickerHeaderAriaLabel, monthAndYear)
            : monthAndYear;
        return (React__namespace.createElement("div", { className: classNames.root },
            React__namespace.createElement("div", { className: classNames.header },
                React__namespace.createElement(HeaderButtonComponentType
                // if this component rerenders when text changes, aria-live will not be announced, so make key consistent
                , { "aria-live": "polite", "aria-atomic": "true", "aria-label": onHeaderSelect ? headerAriaLabel : undefined, key: monthAndYear, className: classNames.monthAndYear, onClick: onHeaderSelect, "data-is-focusable": !!onHeaderSelect, tabIndex: onHeaderSelect ? 0 : -1, onKeyDown: onButtonKeyDown$1(onHeaderSelect), type: "button" },
                    React__namespace.createElement("span", { id: monthAndYearId }, monthAndYear)),
                React__namespace.createElement(CalendarDayNavigationButtons, tslib.__assign({}, props, { classNames: classNames }))),
            React__namespace.createElement(CalendarDayGrid, tslib.__assign({}, props, { styles: styles, componentRef: dayGrid, strings: strings, navigatedDate: navigatedDate, weeksToShow: showSixWeeksByDefault ? 6 : undefined, dateTimeFormatter: dateTimeFormatter, minDate: minDate, maxDate: maxDate, restrictedDates: restrictedDates, onNavigateDate: onNavigateDate, labelledBy: monthAndYearId, dateRangeType: dateRangeType }))));
    };
    CalendarDayBase.displayName = 'CalendarDayBase';
    var CalendarDayNavigationButtons = function (props) {
        var _a, _b;
        var minDate = props.minDate, maxDate = props.maxDate, navigatedDate = props.navigatedDate, allFocusable = props.allFocusable, strings = props.strings, navigationIcons = props.navigationIcons, showCloseButton = props.showCloseButton, classNames = props.classNames, onNavigateDate = props.onNavigateDate, onDismiss = props.onDismiss;
        var onSelectNextMonth = function () {
            onNavigateDate(addMonths(navigatedDate, 1), false);
        };
        var onSelectPrevMonth = function () {
            onNavigateDate(addMonths(navigatedDate, -1), false);
        };
        var leftNavigationIcon = navigationIcons.leftNavigation;
        var rightNavigationIcon = navigationIcons.rightNavigation;
        var closeNavigationIcon = navigationIcons.closeIcon;
        // determine if previous/next months are in bounds
        var prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;
        var nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true;
        // use aria-disabled instead of disabled so focus is not lost
        // when a prev/next button becomes disabled after being clicked
        return (React__namespace.createElement("div", { className: classNames.monthComponents },
            React__namespace.createElement("button", { className: css(classNames.headerIconButton, (_a = {},
                    _a[classNames.disabledStyle] = !prevMonthInBounds,
                    _a)), tabIndex: prevMonthInBounds ? undefined : allFocusable ? 0 : -1, "aria-disabled": !prevMonthInBounds, onClick: prevMonthInBounds ? onSelectPrevMonth : undefined, onKeyDown: prevMonthInBounds ? onButtonKeyDown$1(onSelectPrevMonth) : undefined, title: strings.prevMonthAriaLabel
                    ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()]
                    : undefined, type: "button" },
                React__namespace.createElement(Icon$1, { iconName: leftNavigationIcon })),
            React__namespace.createElement("button", { className: css(classNames.headerIconButton, (_b = {},
                    _b[classNames.disabledStyle] = !nextMonthInBounds,
                    _b)), tabIndex: nextMonthInBounds ? undefined : allFocusable ? 0 : -1, "aria-disabled": !nextMonthInBounds, onClick: nextMonthInBounds ? onSelectNextMonth : undefined, onKeyDown: nextMonthInBounds ? onButtonKeyDown$1(onSelectNextMonth) : undefined, title: strings.nextMonthAriaLabel
                    ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()]
                    : undefined, type: "button" },
                React__namespace.createElement(Icon$1, { iconName: rightNavigationIcon })),
            showCloseButton && (React__namespace.createElement("button", { className: css(classNames.headerIconButton), onClick: onDismiss, onKeyDown: onButtonKeyDown$1(onDismiss), title: strings.closeButtonAriaLabel, type: "button" },
                React__namespace.createElement(Icon$1, { iconName: closeNavigationIcon })))));
    };
    CalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';
    var onButtonKeyDown$1 = function (callback) { return function (ev) {
        // eslint-disable-next-line deprecation/deprecation
        switch (ev.which) {
            case KeyCodes.enter:
                callback === null || callback === void 0 ? void 0 : callback();
                break;
        }
    }; };

    var styles$2 = function (props) {
        var _a;
        var className = props.className, theme = props.theme, headerIsClickable = props.headerIsClickable, showWeekNumbers = props.showWeekNumbers;
        var palette = theme.palette;
        var disabledStyle = {
            selectors: (_a = {
                    '&, &:disabled, & button': {
                        color: palette.neutralTertiaryAlt,
                        pointerEvents: 'none',
                    }
                },
                _a[HighContrastSelector] = {
                    color: 'GrayText',
                    forcedColorAdjust: 'none',
                },
                _a),
        };
        return {
            root: [
                normalize$1,
                {
                    width: 196,
                    padding: 12,
                    boxSizing: 'content-box',
                },
                showWeekNumbers && {
                    width: 226,
                },
                className,
            ],
            header: {
                position: 'relative',
                display: 'inline-flex',
                height: 28,
                lineHeight: 44,
                width: '100%',
            },
            monthAndYear: [
                getFocusStyle(theme, { inset: 1 }),
                tslib.__assign(tslib.__assign({}, AnimationStyles.fadeIn200), { alignItems: 'center', fontSize: FontSizes.medium, fontFamily: 'inherit', color: palette.neutralPrimary, display: 'inline-block', flexGrow: 1, fontWeight: FontWeights.semibold, padding: '0 4px 0 10px', border: 'none', backgroundColor: 'transparent', borderRadius: 2, lineHeight: 28, overflow: 'hidden', whiteSpace: 'nowrap', textAlign: 'left', textOverflow: 'ellipsis' }),
                headerIsClickable && {
                    selectors: {
                        '&:hover': {
                            cursor: 'pointer',
                            background: palette.neutralLight,
                            color: palette.black,
                        },
                    },
                },
            ],
            monthComponents: {
                display: 'inline-flex',
                alignSelf: 'flex-end',
            },
            headerIconButton: [
                getFocusStyle(theme, { inset: -1 }),
                {
                    width: 28,
                    height: 28,
                    display: 'block',
                    textAlign: 'center',
                    lineHeight: 28,
                    fontSize: FontSizes.small,
                    fontFamily: 'inherit',
                    color: palette.neutralPrimary,
                    borderRadius: 2,
                    position: 'relative',
                    backgroundColor: 'transparent',
                    border: 'none',
                    padding: 0,
                    overflow: 'visible',
                    selectors: {
                        '&:hover': {
                            color: palette.neutralDark,
                            backgroundColor: palette.neutralLight,
                            cursor: 'pointer',
                            outline: '1px solid transparent',
                        },
                    },
                },
            ],
            disabledStyle: disabledStyle,
        };
    };

    var CalendarDay = styled(CalendarDayBase, styles$2, undefined, {
        scope: 'CalendarDay',
    });

    var getStyles$t = function (props) {
        var _a, _b, _c, _d, _e, _f, _g;
        var className = props.className, theme = props.theme, hasHeaderClickCallback = props.hasHeaderClickCallback, highlightCurrent = props.highlightCurrent, highlightSelected = props.highlightSelected, animateBackwards = props.animateBackwards, animationDirection = props.animationDirection;
        var palette = theme.palette;
        var animationStyle = {};
        if (animateBackwards !== undefined) {
            if (animationDirection === AnimationDirection.Horizontal) {
                animationStyle = animateBackwards ? AnimationStyles.slideRightIn20 : AnimationStyles.slideLeftIn20;
            }
            else {
                animationStyle = animateBackwards ? AnimationStyles.slideDownIn20 : AnimationStyles.slideUpIn20;
            }
        }
        var headerAnimationStyle = animateBackwards !== undefined ? AnimationStyles.fadeIn200 : {};
        return {
            root: [
                normalize$1,
                {
                    width: 196,
                    padding: 12,
                    boxSizing: 'content-box',
                    overflow: 'hidden',
                },
                className,
            ],
            headerContainer: {
                display: 'flex',
            },
            currentItemButton: [
                getFocusStyle(theme, { inset: -1 }),
                tslib.__assign(tslib.__assign({}, headerAnimationStyle), { fontSize: FontSizes.medium, fontWeight: FontWeights.semibold, fontFamily: 'inherit', textAlign: 'left', color: 'inherit', backgroundColor: 'transparent', flexGrow: 1, padding: '0 4px 0 10px', border: 'none', overflow: 'visible' }),
                hasHeaderClickCallback && {
                    selectors: {
                        '&:hover, &:active': {
                            cursor: !hasHeaderClickCallback ? 'default' : 'pointer',
                            color: palette.neutralDark,
                            outline: '1px solid transparent',
                            backgroundColor: palette.neutralLight,
                        },
                    },
                },
            ],
            navigationButtonsContainer: {
                display: 'flex',
                alignItems: 'center',
            },
            navigationButton: [
                getFocusStyle(theme, { inset: -1 }),
                {
                    fontFamily: 'inherit',
                    width: 28,
                    minWidth: 28,
                    height: 28,
                    minHeight: 28,
                    display: 'block',
                    textAlign: 'center',
                    lineHeight: 28,
                    fontSize: FontSizes.small,
                    color: palette.neutralPrimary,
                    borderRadius: 2,
                    position: 'relative',
                    backgroundColor: 'transparent',
                    border: 'none',
                    padding: 0,
                    overflow: 'visible',
                    selectors: {
                        '&:hover': {
                            color: palette.neutralDark,
                            cursor: 'pointer',
                            outline: '1px solid transparent',
                            backgroundColor: palette.neutralLight,
                        },
                    },
                },
            ],
            gridContainer: {
                marginTop: 4,
            },
            buttonRow: tslib.__assign(tslib.__assign({}, animationStyle), { marginBottom: 16, selectors: {
                    '&:nth-child(n + 3)': {
                        marginBottom: 0,
                    },
                } }),
            itemButton: [
                getFocusStyle(theme, { inset: -1 }),
                {
                    width: 40,
                    height: 40,
                    minWidth: 40,
                    minHeight: 40,
                    lineHeight: 40,
                    fontSize: FontSizes.small,
                    fontFamily: 'inherit',
                    padding: 0,
                    margin: '0 12px 0 0',
                    color: palette.neutralPrimary,
                    backgroundColor: 'transparent',
                    border: 'none',
                    borderRadius: 2,
                    overflow: 'visible',
                    selectors: {
                        '&:nth-child(4n + 4)': {
                            marginRight: 0,
                        },
                        '&:nth-child(n + 9)': {
                            marginBottom: 0,
                        },
                        '& div': {
                            fontWeight: FontWeights.regular,
                        },
                        '&:hover': {
                            color: palette.neutralDark,
                            backgroundColor: palette.neutralLight,
                            cursor: 'pointer',
                            outline: '1px solid transparent',
                            selectors: (_a = {},
                                _a[HighContrastSelector] = tslib.__assign({ background: 'Window', color: 'WindowText', outline: '1px solid Highlight' }, getHighContrastNoAdjustStyle()),
                                _a),
                        },
                        '&:active': {
                            backgroundColor: palette.themeLight,
                            selectors: (_b = {},
                                _b[HighContrastSelector] = tslib.__assign({ background: 'Window', color: 'Highlight' }, getHighContrastNoAdjustStyle()),
                                _b),
                        },
                    },
                },
            ],
            current: highlightCurrent
                ? {
                    color: palette.white,
                    backgroundColor: palette.themePrimary,
                    selectors: (_c = {
                            '& div': {
                                fontWeight: FontWeights.semibold,
                            },
                            '&:hover': {
                                backgroundColor: palette.themePrimary,
                                selectors: (_d = {},
                                    _d[HighContrastSelector] = tslib.__assign({ backgroundColor: 'WindowText', color: 'Window' }, getHighContrastNoAdjustStyle()),
                                    _d),
                            }
                        },
                        _c[HighContrastSelector] = tslib.__assign({ backgroundColor: 'WindowText', color: 'Window' }, getHighContrastNoAdjustStyle()),
                        _c),
                }
                : {},
            selected: highlightSelected
                ? {
                    color: palette.neutralPrimary,
                    backgroundColor: palette.themeLight,
                    fontWeight: FontWeights.semibold,
                    selectors: (_e = {
                            '& div': {
                                fontWeight: FontWeights.semibold,
                            },
                            '&:hover, &:active': {
                                backgroundColor: palette.themeLight,
                                selectors: (_f = {},
                                    _f[HighContrastSelector] = tslib.__assign({ color: 'Window', background: 'Highlight' }, getHighContrastNoAdjustStyle()),
                                    _f),
                            }
                        },
                        _e[HighContrastSelector] = tslib.__assign({ background: 'Highlight', color: 'Window' }, getHighContrastNoAdjustStyle()),
                        _e),
                }
                : {},
            disabled: {
                selectors: (_g = {
                        '&, &:disabled, & button': {
                            color: palette.neutralTertiaryAlt,
                            pointerEvents: 'none',
                        }
                    },
                    _g[HighContrastSelector] = {
                        color: 'GrayText',
                        forcedColorAdjust: 'none',
                    },
                    _g),
            },
        };
    };

    var getStyles$s = function (props) {
        /*  Return styles from the base class.
         *  If this component has extra styles not in the base, apply them here i.e.:
         *  const myStyle: IStyle = {
         *    display: "block"
         *  };     *
         *  return {...getPickerStyles(props), myStyle};
         */
        return getStyles$t(props);
    };

    var getStyles$r = function (props) {
        /*  Return styles from the base class.
         *  If this component has extra styles not in the base, apply them here i.e.:
         *  const myStyle: IStyle = {
         *    display: "block"
         *  };
         *  return {...getPickerStyles(props), myStyle};
         */
        return getStyles$t(props);
    };

    var defaultCalendarStrings = DEFAULT_CALENDAR_STRINGS;
    var defaultCalendarNavigationIcons = {
        leftNavigation: 'Up',
        rightNavigation: 'Down',
        closeIcon: 'CalculatorMultiply',
    };

    var getClassNames$1g = classNamesFunction();
    var CELL_COUNT = 12;
    var CELLS_PER_ROW = 4;
    var DefaultCalendarYearStrings = {
        prevRangeAriaLabel: undefined,
        nextRangeAriaLabel: undefined,
    };
    var CalendarYearGridCell = function (props) {
        var _a;
        var _b;
        var styles = props.styles, theme = props.theme, className = props.className, highlightCurrentYear = props.highlightCurrentYear, highlightSelectedYear = props.highlightSelectedYear, year = props.year, selected = props.selected, disabled = props.disabled, componentRef = props.componentRef, onSelectYear = props.onSelectYear, onRenderYear = props.onRenderYear;
        var buttonRef = React__namespace.useRef(null);
        React__namespace.useImperativeHandle(componentRef, function () { return ({
            focus: function () {
                var _a, _b;
                (_b = (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
            },
        }); }, []);
        var onClick = function () {
            onSelectYear === null || onSelectYear === void 0 ? void 0 : onSelectYear(year);
        };
        var onKeyDown = function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.enter) {
                onSelectYear === null || onSelectYear === void 0 ? void 0 : onSelectYear(year);
            }
        };
        var classNames = getClassNames$1g(styles, {
            theme: theme,
            className: className,
            highlightCurrent: highlightCurrentYear,
            highlightSelected: highlightSelectedYear,
        });
        return (React__namespace.createElement("button", { className: css(classNames.itemButton, (_a = {},
                _a[classNames.selected] = selected,
                _a[classNames.disabled] = disabled,
                _a)), type: "button", role: "gridcell", onClick: !disabled ? onClick : undefined, onKeyDown: !disabled ? onKeyDown : undefined, disabled: disabled, "aria-selected": selected, ref: buttonRef }, (_b = onRenderYear === null || onRenderYear === void 0 ? void 0 : onRenderYear(year)) !== null && _b !== void 0 ? _b : year));
    };
    CalendarYearGridCell.displayName = 'CalendarYearGridCell';
    var CalendarYearGrid = function (props) {
        var styles = props.styles, theme = props.theme, className = props.className, fromYear = props.fromYear, toYear = props.toYear, animationDirection = props.animationDirection, animateBackwards = props.animateBackwards, minYear = props.minYear, maxYear = props.maxYear, onSelectYear = props.onSelectYear, selectedYear = props.selectedYear, componentRef = props.componentRef;
        var selectedCellRef = React__namespace.useRef(null);
        var currentCellRef = React__namespace.useRef(null);
        React__namespace.useImperativeHandle(componentRef, function () { return ({
            focus: function () {
                var _a, _b;
                (_b = (_a = (selectedCellRef.current || currentCellRef.current)) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
            },
        }); }, []);
        var renderCell = function (yearToRender) {
            var selected = yearToRender === selectedYear;
            var disabled = (minYear !== undefined && yearToRender < minYear) || (maxYear !== undefined && yearToRender > maxYear);
            var current = yearToRender === new Date().getFullYear();
            return (React__namespace.createElement(CalendarYearGridCell, tslib.__assign({}, props, { key: yearToRender, year: yearToRender, selected: selected, current: current, disabled: disabled, onSelectYear: onSelectYear, componentRef: selected ? selectedCellRef : current ? currentCellRef : undefined, theme: theme })));
        };
        var classNames = getClassNames$1g(styles, {
            theme: theme,
            className: className,
            animateBackwards: animateBackwards,
            animationDirection: animationDirection,
        });
        var onRenderYear = function (value) {
            var _a, _b;
            return (_b = (_a = props.onRenderYear) === null || _a === void 0 ? void 0 : _a.call(props, value)) !== null && _b !== void 0 ? _b : value;
        };
        var gridAriaLabel = onRenderYear(fromYear) + " - " + onRenderYear(toYear);
        var year = fromYear;
        var cells = [];
        for (var i = 0; i < (toYear - fromYear + 1) / CELLS_PER_ROW; i++) {
            cells.push([]);
            for (var j = 0; j < CELLS_PER_ROW; j++) {
                cells[i].push(renderCell(year));
                year++;
            }
        }
        return (React__namespace.createElement(FocusZone, null,
            React__namespace.createElement("div", { className: classNames.gridContainer, role: "grid", "aria-label": gridAriaLabel }, cells.map(function (cellRow, index) {
                return (React__namespace.createElement("div", { key: 'yearPickerRow_' + index + '_' + fromYear, role: "row", className: classNames.buttonRow }, cellRow));
            }))));
    };
    CalendarYearGrid.displayName = 'CalendarYearGrid';
    var CalendarYearNavDirection;
    (function (CalendarYearNavDirection) {
        CalendarYearNavDirection[CalendarYearNavDirection["Previous"] = 0] = "Previous";
        CalendarYearNavDirection[CalendarYearNavDirection["Next"] = 1] = "Next";
    })(CalendarYearNavDirection || (CalendarYearNavDirection = {}));
    var CalendarYearNavArrow = function (props) {
        var _a;
        var styles = props.styles, theme = props.theme, className = props.className, _b = props.navigationIcons, navigationIcons = _b === void 0 ? defaultCalendarNavigationIcons : _b, _c = props.strings, strings = _c === void 0 ? DefaultCalendarYearStrings : _c, direction = props.direction, onSelectPrev = props.onSelectPrev, onSelectNext = props.onSelectNext, fromYear = props.fromYear, toYear = props.toYear, maxYear = props.maxYear, minYear = props.minYear;
        var classNames = getClassNames$1g(styles, {
            theme: theme,
            className: className,
        });
        var ariaLabel = direction === CalendarYearNavDirection.Previous ? strings.prevRangeAriaLabel : strings.nextRangeAriaLabel;
        var newRangeOffset = direction === CalendarYearNavDirection.Previous ? -CELL_COUNT : CELL_COUNT;
        var newRange = { fromYear: fromYear + newRangeOffset, toYear: toYear + newRangeOffset };
        var ariaLabelString = ariaLabel ? (typeof ariaLabel === 'string' ? ariaLabel : ariaLabel(newRange)) : undefined;
        var disabled = direction === CalendarYearNavDirection.Previous
            ? minYear !== undefined && fromYear < minYear
            : maxYear !== undefined && props.fromYear + CELL_COUNT > maxYear;
        var onNavigate = function () {
            direction === CalendarYearNavDirection.Previous ? onSelectPrev === null || onSelectPrev === void 0 ? void 0 : onSelectPrev() : onSelectNext === null || onSelectNext === void 0 ? void 0 : onSelectNext();
        };
        var onKeyDown = function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.enter) {
                onNavigate();
            }
        };
        // can be condensed, but leaving verbose for clarity due to regressions
        var isLeftNavigation = getRTL()
            ? direction === CalendarYearNavDirection.Next
            : direction === CalendarYearNavDirection.Previous;
        return (React__namespace.createElement("button", { className: css(classNames.navigationButton, (_a = {},
                _a[classNames.disabled] = disabled,
                _a)), onClick: !disabled ? onNavigate : undefined, onKeyDown: !disabled ? onKeyDown : undefined, type: "button", title: ariaLabelString, disabled: disabled },
            React__namespace.createElement(Icon$1, { iconName: isLeftNavigation ? navigationIcons.leftNavigation : navigationIcons.rightNavigation })));
    };
    CalendarYearNavArrow.displayName = 'CalendarYearNavArrow';
    var CalendarYearNav = function (props) {
        var styles = props.styles, theme = props.theme, className = props.className;
        var classNames = getClassNames$1g(styles, {
            theme: theme,
            className: className,
        });
        return (React__namespace.createElement("div", { className: classNames.navigationButtonsContainer },
            React__namespace.createElement(CalendarYearNavArrow, tslib.__assign({}, props, { direction: CalendarYearNavDirection.Previous })),
            React__namespace.createElement(CalendarYearNavArrow, tslib.__assign({}, props, { direction: CalendarYearNavDirection.Next }))));
    };
    CalendarYearNav.displayName = 'CalendarYearNav';
    var CalendarYearTitle = function (props) {
        var styles = props.styles, theme = props.theme, className = props.className, fromYear = props.fromYear, toYear = props.toYear, _a = props.strings, strings = _a === void 0 ? DefaultCalendarYearStrings : _a, animateBackwards = props.animateBackwards, animationDirection = props.animationDirection;
        var onHeaderSelect = function () {
            var _a;
            (_a = props.onHeaderSelect) === null || _a === void 0 ? void 0 : _a.call(props, true);
        };
        var onHeaderKeyDown = function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
                onHeaderSelect();
            }
        };
        var onRenderYear = function (year) {
            var _a, _b;
            return (_b = (_a = props.onRenderYear) === null || _a === void 0 ? void 0 : _a.call(props, year)) !== null && _b !== void 0 ? _b : year;
        };
        var classNames = getClassNames$1g(styles, {
            theme: theme,
            className: className,
            hasHeaderClickCallback: !!props.onHeaderSelect,
            animateBackwards: animateBackwards,
            animationDirection: animationDirection,
        });
        if (props.onHeaderSelect) {
            var rangeAriaLabel = strings.rangeAriaLabel;
            var headerAriaLabelFormatString = strings.headerAriaLabelFormatString;
            var currentDateRange = rangeAriaLabel
                ? typeof rangeAriaLabel === 'string'
                    ? rangeAriaLabel
                    : rangeAriaLabel(props)
                : undefined;
            var ariaLabel = headerAriaLabelFormatString
                ? format(headerAriaLabelFormatString, currentDateRange)
                : currentDateRange;
            return (React__namespace.createElement("button", { className: classNames.currentItemButton, onClick: onHeaderSelect, onKeyDown: onHeaderKeyDown, "aria-label": ariaLabel, role: "button", type: "button", "aria-atomic": true, "aria-live": "polite" },
                onRenderYear(fromYear),
                " - ",
                onRenderYear(toYear)));
        }
        return (React__namespace.createElement("div", { className: classNames.current },
            onRenderYear(fromYear),
            " - ",
            onRenderYear(toYear)));
    };
    CalendarYearTitle.displayName = 'CalendarYearTitle';
    var CalendarYearHeader = function (props) {
        var _a;
        var styles = props.styles, theme = props.theme, className = props.className, animateBackwards = props.animateBackwards, animationDirection = props.animationDirection, onRenderTitle = props.onRenderTitle;
        var classNames = getClassNames$1g(styles, {
            theme: theme,
            className: className,
            hasHeaderClickCallback: !!props.onHeaderSelect,
            animateBackwards: animateBackwards,
            animationDirection: animationDirection,
        });
        return (React__namespace.createElement("div", { className: classNames.headerContainer }, (_a = onRenderTitle === null || onRenderTitle === void 0 ? void 0 : onRenderTitle(props)) !== null && _a !== void 0 ? _a : React__namespace.createElement(CalendarYearTitle, tslib.__assign({}, props)),
            React__namespace.createElement(CalendarYearNav, tslib.__assign({}, props))));
    };
    CalendarYearHeader.displayName = 'CalendarYearHeader';
    function useAnimateBackwards$1(_a) {
        var selectedYear = _a.selectedYear, navigatedYear = _a.navigatedYear;
        var rangeYear = selectedYear || navigatedYear || new Date().getFullYear();
        var fromYear = Math.floor(rangeYear / 10) * 10;
        var previousFromYear = usePrevious(fromYear);
        if (!previousFromYear || previousFromYear === fromYear) {
            return undefined;
        }
        else if (previousFromYear > fromYear) {
            return true;
        }
        else {
            return false;
        }
    }
    var NavigationDirection;
    (function (NavigationDirection) {
        NavigationDirection[NavigationDirection["Previous"] = 0] = "Previous";
        NavigationDirection[NavigationDirection["Next"] = 1] = "Next";
    })(NavigationDirection || (NavigationDirection = {}));
    function useYearRangeState(_a) {
        var selectedYear = _a.selectedYear, navigatedYear = _a.navigatedYear;
        var _b = React__namespace.useReducer(function (state, action) {
            return state + (action === NavigationDirection.Next ? CELL_COUNT : -CELL_COUNT);
        }, undefined, function () {
            var rangeYear = selectedYear || navigatedYear || new Date().getFullYear();
            return Math.floor(rangeYear / 10) * 10;
        }), fromYear = _b[0], navigate = _b[1];
        var toYear = fromYear + CELL_COUNT - 1;
        var onNavNext = function () { return navigate(NavigationDirection.Next); };
        var onNavPrevious = function () { return navigate(NavigationDirection.Previous); };
        return [fromYear, toYear, onNavNext, onNavPrevious];
    }
    var CalendarYearBase = function (props) {
        var animateBackwards = useAnimateBackwards$1(props);
        var _a = useYearRangeState(props), fromYear = _a[0], toYear = _a[1], onNavNext = _a[2], onNavPrevious = _a[3];
        var gridRef = React__namespace.useRef(null);
        React__namespace.useImperativeHandle(props.componentRef, function () { return ({
            focus: function () {
                var _a, _b;
                (_b = (_a = gridRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
            },
        }); });
        var styles = props.styles, theme = props.theme, className = props.className;
        var classNames = getClassNames$1g(styles, {
            theme: theme,
            className: className,
        });
        return (React__namespace.createElement("div", { className: classNames.root },
            React__namespace.createElement(CalendarYearHeader, tslib.__assign({}, props, { fromYear: fromYear, toYear: toYear, onSelectPrev: onNavPrevious, onSelectNext: onNavNext, animateBackwards: animateBackwards })),
            React__namespace.createElement(CalendarYearGrid, tslib.__assign({}, props, { fromYear: fromYear, toYear: toYear, animateBackwards: animateBackwards, componentRef: gridRef }))));
    };
    CalendarYearBase.displayName = 'CalendarYearBase';

    var CalendarYear = styled(CalendarYearBase, getStyles$r, undefined, { scope: 'CalendarYear' });

    var MONTHS_PER_ROW = 4;
    var getClassNames$1f = classNamesFunction();
    var DEFAULT_PROPS$6 = {
        styles: getStyles$s,
        strings: undefined,
        navigationIcons: defaultCalendarNavigationIcons,
        dateTimeFormatter: DEFAULT_DATE_FORMATTING,
        yearPickerHidden: false,
    };
    function useAnimateBackwards(_a) {
        var navigatedDate = _a.navigatedDate;
        var currentYear = navigatedDate.getFullYear();
        var previousYear = usePrevious(currentYear);
        if (previousYear === undefined || previousYear === currentYear) {
            return undefined;
        }
        else {
            return previousYear > currentYear;
        }
    }
    function useFocusLogic$2(_a) {
        var componentRef = _a.componentRef;
        var navigatedMonthRef = React__namespace.useRef(null);
        var calendarYearRef = React__namespace.useRef(null);
        var focusOnUpdate = React__namespace.useRef(false);
        var focus = React__namespace.useCallback(function () {
            if (calendarYearRef.current) {
                calendarYearRef.current.focus();
            }
            else if (navigatedMonthRef.current) {
                navigatedMonthRef.current.focus();
            }
        }, []);
        React__namespace.useImperativeHandle(componentRef, function () { return ({ focus: focus }); }, [focus]);
        React__namespace.useEffect(function () {
            if (focusOnUpdate.current) {
                focus();
                focusOnUpdate.current = false;
            }
        });
        var focusOnNextUpdate = function () {
            focusOnUpdate.current = true;
        };
        return [navigatedMonthRef, calendarYearRef, focusOnNextUpdate];
    }
    var CalendarMonthBase = function (propsWithoutDefaults) {
        var _a, _b;
        var props = getPropsWithDefaults(DEFAULT_PROPS$6, propsWithoutDefaults);
        var _c = useFocusLogic$2(props), navigatedMonthRef = _c[0], calendarYearRef = _c[1], focusOnNextUpdate = _c[2];
        var _d = React__namespace.useState(false), isYearPickerVisible = _d[0], setIsYearPickerVisible = _d[1];
        var animateBackwards = useAnimateBackwards(props);
        var navigatedDate = props.navigatedDate, selectedDate = props.selectedDate, strings = props.strings, _e = props.today, today = _e === void 0 ? new Date() : _e, navigationIcons = props.navigationIcons, dateTimeFormatter = props.dateTimeFormatter, minDate = props.minDate, maxDate = props.maxDate, theme = props.theme, styles = props.styles, className = props.className, allFocusable = props.allFocusable, highlightCurrentMonth = props.highlightCurrentMonth, highlightSelectedMonth = props.highlightSelectedMonth, animationDirection = props.animationDirection, yearPickerHidden = props.yearPickerHidden, onNavigateDate = props.onNavigateDate;
        var selectMonthCallback = function (newMonth) {
            return function () { return onSelectMonth(newMonth); };
        };
        var onSelectNextYear = function () {
            onNavigateDate(addYears(navigatedDate, 1), false);
        };
        var onSelectPrevYear = function () {
            onNavigateDate(addYears(navigatedDate, -1), false);
        };
        var onSelectMonth = function (newMonth) {
            var _a;
            // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked
            (_a = props.onHeaderSelect) === null || _a === void 0 ? void 0 : _a.call(props);
            onNavigateDate(setMonth(navigatedDate, newMonth), true);
        };
        var onHeaderSelect = function () {
            var _a;
            if (!yearPickerHidden) {
                focusOnNextUpdate();
                setIsYearPickerVisible(true);
            }
            else {
                (_a = props.onHeaderSelect) === null || _a === void 0 ? void 0 : _a.call(props);
            }
        };
        var onSelectYear = function (selectedYear) {
            focusOnNextUpdate();
            var navYear = navigatedDate.getFullYear();
            if (navYear !== selectedYear) {
                var newNavigationDate = new Date(navigatedDate.getTime());
                newNavigationDate.setFullYear(selectedYear);
                // for min and max dates, adjust the new navigation date - perhaps this should be
                // checked on the master navigation date handler (i.e. in Calendar)
                if (maxDate && newNavigationDate > maxDate) {
                    newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());
                }
                else if (minDate && newNavigationDate < minDate) {
                    newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());
                }
                onNavigateDate(newNavigationDate, true);
            }
            setIsYearPickerVisible(false);
        };
        var onYearPickerHeaderSelect = function (focus) {
            focusOnNextUpdate();
            setIsYearPickerVisible(false);
        };
        // navigationIcons has a default value in defaultProps, but typescript doesn't recognize this
        var leftNavigationIcon = navigationIcons.leftNavigation;
        var rightNavigationIcon = navigationIcons.rightNavigation;
        var dateFormatter = dateTimeFormatter;
        // determine if previous/next years are in bounds
        var isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;
        var isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;
        var classNames = getClassNames$1f(styles, {
            theme: theme,
            className: className,
            hasHeaderClickCallback: !!props.onHeaderSelect || !yearPickerHidden,
            highlightCurrent: highlightCurrentMonth,
            highlightSelected: highlightSelectedMonth,
            animateBackwards: animateBackwards,
            animationDirection: animationDirection,
        });
        if (isYearPickerVisible) {
            var _f = getYearStrings(props), onRenderYear = _f[0], yearStrings = _f[1];
            // use navigated date for the year picker
            return (React__namespace.createElement(CalendarYear, { key: 'calendarYear', minYear: minDate ? minDate.getFullYear() : undefined, maxYear: maxDate ? maxDate.getFullYear() : undefined, 
                // eslint-disable-next-line react/jsx-no-bind
                onSelectYear: onSelectYear, navigationIcons: navigationIcons, 
                // eslint-disable-next-line react/jsx-no-bind
                onHeaderSelect: onYearPickerHeaderSelect, selectedYear: selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : undefined, onRenderYear: onRenderYear, strings: yearStrings, componentRef: calendarYearRef, styles: styles, highlightCurrentYear: highlightCurrentMonth, highlightSelectedYear: highlightSelectedMonth, animationDirection: animationDirection }));
        }
        var rowIndexes = [];
        for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {
            rowIndexes.push(i);
        }
        var yearString = dateFormatter.formatYear(navigatedDate);
        var headerAriaLabel = strings.monthPickerHeaderAriaLabel
            ? format(strings.monthPickerHeaderAriaLabel, yearString)
            : yearString;
        return (React__namespace.createElement("div", { className: classNames.root },
            React__namespace.createElement("div", { className: classNames.headerContainer },
                React__namespace.createElement("button", { className: classNames.currentItemButton, onClick: onHeaderSelect, onKeyDown: onButtonKeyDown(onHeaderSelect), "aria-label": headerAriaLabel, "data-is-focusable": !!props.onHeaderSelect || !yearPickerHidden, tabIndex: !!props.onHeaderSelect || !yearPickerHidden ? 0 : -1, type: "button", "aria-atomic": true, "aria-live": "polite" }, yearString),
                React__namespace.createElement("div", { className: classNames.navigationButtonsContainer },
                    React__namespace.createElement("button", { className: css(classNames.navigationButton, (_a = {},
                            _a[classNames.disabled] = !isPrevYearInBounds,
                            _a)), "aria-disabled": !isPrevYearInBounds, tabIndex: isPrevYearInBounds ? undefined : allFocusable ? 0 : -1, onClick: isPrevYearInBounds ? onSelectPrevYear : undefined, onKeyDown: isPrevYearInBounds ? onButtonKeyDown(onSelectPrevYear) : undefined, title: strings.prevYearAriaLabel
                            ? strings.prevYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, -1))
                            : undefined, type: "button" },
                        React__namespace.createElement(Icon$1, { iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon })),
                    React__namespace.createElement("button", { className: css(classNames.navigationButton, (_b = {},
                            _b[classNames.disabled] = !isNextYearInBounds,
                            _b)), "aria-disabled": !isNextYearInBounds, tabIndex: isNextYearInBounds ? undefined : allFocusable ? 0 : -1, onClick: isNextYearInBounds ? onSelectNextYear : undefined, onKeyDown: isNextYearInBounds ? onButtonKeyDown(onSelectNextYear) : undefined, title: strings.nextYearAriaLabel
                            ? strings.nextYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, 1))
                            : undefined, type: "button" },
                        React__namespace.createElement(Icon$1, { iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon })))),
            React__namespace.createElement(FocusZone, null,
                React__namespace.createElement("div", { className: classNames.gridContainer, role: "grid", "aria-label": yearString }, rowIndexes.map(function (rowNum) {
                    var monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);
                    return (React__namespace.createElement("div", { key: 'monthRow_' + rowNum + navigatedDate.getFullYear(), role: "row", className: classNames.buttonRow }, monthsForRow.map(function (month, index) {
                        var _a;
                        var monthIndex = rowNum * MONTHS_PER_ROW + index;
                        var indexedMonth = setMonth(navigatedDate, monthIndex);
                        var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;
                        var isSelectedMonth = selectedDate.getMonth() === monthIndex;
                        var isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();
                        var isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) &&
                            (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);
                        return (React__namespace.createElement("button", { ref: isNavigatedMonth ? navigatedMonthRef : undefined, role: 'gridcell', className: css(classNames.itemButton, (_a = {},
                                _a[classNames.current] = highlightCurrentMonth && isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today),
                                _a[classNames.selected] = highlightSelectedMonth && isSelectedMonth && isSelectedYear,
                                _a[classNames.disabled] = !isInBounds,
                                _a)), disabled: !allFocusable && !isInBounds, key: monthIndex, onClick: isInBounds ? selectMonthCallback(monthIndex) : undefined, onKeyDown: isInBounds ? onButtonKeyDown(selectMonthCallback(monthIndex)) : undefined, "aria-label": dateFormatter.formatMonth(indexedMonth, strings), "aria-selected": isNavigatedMonth, "data-is-focusable": isInBounds ? true : undefined, type: "button" }, month));
                    })));
                })))));
    };
    CalendarMonthBase.displayName = 'CalendarMonthBase';
    function getYearStrings(_a) {
        var strings = _a.strings, navigatedDate = _a.navigatedDate, dateTimeFormatter = _a.dateTimeFormatter;
        var yearToString = function (year) {
            if (dateTimeFormatter) {
                // create a date based on the current nav date
                var yearFormattingDate = new Date(navigatedDate.getTime());
                yearFormattingDate.setFullYear(year);
                return dateTimeFormatter.formatYear(yearFormattingDate);
            }
            return String(year);
        };
        var yearRangeToString = function (yearRange) {
            return yearToString(yearRange.fromYear) + " - " + yearToString(yearRange.toYear);
        };
        var yearRangeToNextDecadeLabel = function (yearRange) {
            return strings.nextYearRangeAriaLabel ? strings.nextYearRangeAriaLabel + " " + yearRangeToString(yearRange) : '';
        };
        var yearRangeToPrevDecadeLabel = function (yearRange) {
            return strings.prevYearRangeAriaLabel ? strings.prevYearRangeAriaLabel + " " + yearRangeToString(yearRange) : '';
        };
        return [
            yearToString,
            {
                rangeAriaLabel: yearRangeToString,
                prevRangeAriaLabel: yearRangeToPrevDecadeLabel,
                nextRangeAriaLabel: yearRangeToNextDecadeLabel,
                headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel,
            },
        ];
    }
    function isCurrentMonth(month, year, today) {
        return today.getFullYear() === year && today.getMonth() === month;
    }
    function onButtonKeyDown(callback) {
        return function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            switch (ev.which) {
                case KeyCodes.enter:
                    callback();
                    break;
            }
        };
    }

    var CalendarMonth = styled(CalendarMonthBase, getStyles$s, undefined, { scope: 'CalendarMonth' });

    var MIN_SIZE_FORCE_OVERLAY = 440;
    var getClassNames$1e = classNamesFunction();
    var defaultWorkWeekDays = [
        exports.DayOfWeek.Monday,
        exports.DayOfWeek.Tuesday,
        exports.DayOfWeek.Wednesday,
        exports.DayOfWeek.Thursday,
        exports.DayOfWeek.Friday,
    ];
    var DEFAULT_PROPS$5 = {
        isMonthPickerVisible: true,
        isDayPickerVisible: true,
        showMonthPickerAsOverlay: false,
        today: new Date(),
        firstDayOfWeek: exports.DayOfWeek.Sunday,
        dateRangeType: DateRangeType.Day,
        showGoToToday: true,
        strings: DEFAULT_CALENDAR_STRINGS,
        highlightCurrentMonth: false,
        highlightSelectedMonth: false,
        navigationIcons: defaultCalendarNavigationIcons,
        showWeekNumbers: false,
        firstWeekOfYear: exports.FirstWeekOfYear.FirstDay,
        dateTimeFormatter: DEFAULT_DATE_FORMATTING,
        showSixWeeksByDefault: false,
        workWeekDays: defaultWorkWeekDays,
        showCloseButton: false,
        allFocusable: false,
    };
    function useDateState(_a) {
        var value = _a.value, _b = _a.today, today = _b === void 0 ? new Date() : _b, onSelectDate = _a.onSelectDate;
        /** The currently selected date in the calendar */
        var _c = useControllableValue(value, today), _d = _c[0], selectedDate = _d === void 0 ? today : _d, setSelectedDate = _c[1];
        /** The currently focused date in the day picker, but not necessarily selected */
        var _e = React__namespace.useState(value), _f = _e[0], navigatedDay = _f === void 0 ? today : _f, setNavigatedDay = _e[1];
        /** The currently focused date in the month picker, but not necessarily selected */
        var _g = React__namespace.useState(value), _h = _g[0], navigatedMonth = _h === void 0 ? today : _h, setNavigatedMonth = _g[1];
        /** If using a controlled value, when that value changes, navigate to that date */
        var _j = React__namespace.useState(value), _k = _j[0], lastSelectedDate = _k === void 0 ? today : _k, setLastSelectedDate = _j[1];
        if (value && lastSelectedDate.valueOf() !== value.valueOf()) {
            setNavigatedDay(value);
            setNavigatedMonth(value);
            setLastSelectedDate(value);
        }
        var navigateMonth = function (date) {
            setNavigatedMonth(date);
        };
        var navigateDay = function (date) {
            setNavigatedMonth(date);
            setNavigatedDay(date);
        };
        var onDateSelected = function (date, selectedDateRangeArray) {
            setNavigatedMonth(date);
            setNavigatedDay(date);
            setSelectedDate(date);
            onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date, selectedDateRangeArray);
        };
        return [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth];
    }
    function useVisibilityState(props) {
        /** State used to show/hide month picker */
        var _a = useControllableValue(getShowMonthPickerAsOverlay(props) ? undefined : props.isMonthPickerVisible, false), _b = _a[0], isMonthPickerVisible = _b === void 0 ? true : _b, setIsMonthPickerVisible = _a[1];
        /** State used to show/hide day picker */
        var _c = useControllableValue(getShowMonthPickerAsOverlay(props) ? undefined : props.isDayPickerVisible, true), _d = _c[0], isDayPickerVisible = _d === void 0 ? true : _d, setIsDayPickerVisible = _c[1];
        var toggleDayMonthPickerVisibility = function () {
            setIsMonthPickerVisible(!isMonthPickerVisible);
            setIsDayPickerVisible(!isDayPickerVisible);
        };
        return [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility];
    }
    function useFocusLogic$1(_a, isDayPickerVisible, isMonthPickerVisible) {
        var componentRef = _a.componentRef;
        var dayPicker = React__namespace.useRef(null);
        var monthPicker = React__namespace.useRef(null);
        var focusOnUpdate = React__namespace.useRef(false);
        var focus = React__namespace.useCallback(function () {
            if (isDayPickerVisible && dayPicker.current) {
                focusAsync(dayPicker.current);
            }
            else if (isMonthPickerVisible && monthPicker.current) {
                focusAsync(monthPicker.current);
            }
        }, [isDayPickerVisible, isMonthPickerVisible]);
        React__namespace.useImperativeHandle(componentRef, function () { return ({ focus: focus }); }, [focus]);
        React__namespace.useEffect(function () {
            if (focusOnUpdate.current) {
                focus();
                focusOnUpdate.current = false;
            }
        });
        var focusOnNextUpdate = function () {
            focusOnUpdate.current = true;
        };
        return [dayPicker, monthPicker, focusOnNextUpdate];
    }
    var CalendarBase = React__namespace.forwardRef(function (propsWithoutDefaults, forwardedRef) {
        var props = getPropsWithDefaults(DEFAULT_PROPS$5, propsWithoutDefaults);
        var _a = useDateState(props), selectedDate = _a[0], navigatedDay = _a[1], navigatedMonth = _a[2], onDateSelected = _a[3], navigateDay = _a[4], navigateMonth = _a[5];
        var _b = useVisibilityState(props), isMonthPickerVisible = _b[0], isDayPickerVisible = _b[1], toggleDayMonthPickerVisibility = _b[2];
        var _c = useFocusLogic$1(props, isDayPickerVisible, isMonthPickerVisible), dayPicker = _c[0], monthPicker = _c[1], focusOnNextUpdate = _c[2];
        var renderGoToTodayButton = function () {
            var goTodayEnabled = showGoToToday;
            if (goTodayEnabled && today) {
                goTodayEnabled =
                    navigatedDay.getFullYear() !== today.getFullYear() ||
                        navigatedDay.getMonth() !== today.getMonth() ||
                        navigatedMonth.getFullYear() !== today.getFullYear() ||
                        navigatedMonth.getMonth() !== today.getMonth();
            }
            return (showGoToToday && (React__namespace.createElement("button", { className: css('js-goToday', classes.goTodayButton), onClick: onGotoToday, onKeyDown: onButtonKeyDown(onGotoToday), type: "button", disabled: !goTodayEnabled }, strings.goToToday)));
        };
        var onNavigateDayDate = function (date, focusOnNavigatedDay) {
            navigateDay(date);
            if (focusOnNavigatedDay) {
                focusOnNextUpdate();
            }
        };
        var onNavigateMonthDate = function (date, focusOnNavigatedDay) {
            if (focusOnNavigatedDay) {
                focusOnNextUpdate();
            }
            if (!focusOnNavigatedDay) {
                navigateMonth(date);
                return;
            }
            if (monthPickerOnly) {
                onDateSelected(date);
            }
            navigateDay(date);
        };
        var onHeaderSelect = getShowMonthPickerAsOverlay(props)
            ? function () {
                toggleDayMonthPickerVisibility();
                focusOnNextUpdate();
            }
            : undefined;
        var onGotoToday = function () {
            navigateDay(today);
            focusOnNextUpdate();
        };
        var onButtonKeyDown = function (callback) {
            return function (ev) {
                // eslint-disable-next-line deprecation/deprecation
                switch (ev.which) {
                    case KeyCodes.enter:
                    case KeyCodes.space:
                        callback();
                        break;
                }
            };
        };
        var onDatePickerPopupKeyDown = function (ev) {
            var _a;
            // eslint-disable-next-line deprecation/deprecation
            switch (ev.which) {
                case KeyCodes.enter:
                    ev.preventDefault();
                    break;
                case KeyCodes.backspace:
                    ev.preventDefault();
                    break;
                case KeyCodes.escape:
                    (_a = props.onDismiss) === null || _a === void 0 ? void 0 : _a.call(props);
                    break;
                case KeyCodes.pageUp:
                    if (ev.ctrlKey) {
                        // go to next year
                        navigateDay(addYears(navigatedDay, 1));
                    }
                    else {
                        // go to next month
                        navigateDay(addMonths(navigatedDay, 1));
                    }
                    ev.preventDefault();
                    break;
                case KeyCodes.pageDown:
                    if (ev.ctrlKey) {
                        // go to previous year
                        navigateDay(addYears(navigatedDay, -1));
                    }
                    else {
                        // go to previous month
                        navigateDay(addMonths(navigatedDay, -1));
                    }
                    ev.preventDefault();
                    break;
            }
        };
        var rootClass = 'ms-DatePicker';
        var firstDayOfWeek = props.firstDayOfWeek, dateRangeType = props.dateRangeType, strings = props.strings, showGoToToday = props.showGoToToday, highlightCurrentMonth = props.highlightCurrentMonth, highlightSelectedMonth = props.highlightSelectedMonth, navigationIcons = props.navigationIcons, minDate = props.minDate, maxDate = props.maxDate, restrictedDates = props.restrictedDates, className = props.className, showCloseButton = props.showCloseButton, allFocusable = props.allFocusable, styles = props.styles, showWeekNumbers = props.showWeekNumbers, theme = props.theme, calendarDayProps = props.calendarDayProps, calendarMonthProps = props.calendarMonthProps, dateTimeFormatter = props.dateTimeFormatter, _d = props.today, today = _d === void 0 ? new Date() : _d;
        var showMonthPickerAsOverlay = getShowMonthPickerAsOverlay(props);
        var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;
        var overlaidWithButton = showMonthPickerAsOverlay && showGoToToday;
        var classes = getClassNames$1e(styles, {
            theme: theme,
            className: className,
            isMonthPickerVisible: isMonthPickerVisible,
            isDayPickerVisible: isDayPickerVisible,
            monthPickerOnly: monthPickerOnly,
            showMonthPickerAsOverlay: showMonthPickerAsOverlay,
            overlaidWithButton: overlaidWithButton,
            overlayedWithButton: overlaidWithButton,
            showGoToToday: showGoToToday,
            showWeekNumbers: showWeekNumbers,
        });
        var todayDateString = '';
        var selectedDateString = '';
        if (dateTimeFormatter && strings.todayDateFormatString) {
            todayDateString = format(strings.todayDateFormatString, dateTimeFormatter.formatMonthDayYear(today, strings));
        }
        if (dateTimeFormatter && strings.selectedDateFormatString) {
            selectedDateString = format(strings.selectedDateFormatString, dateTimeFormatter.formatMonthDayYear(selectedDate, strings));
        }
        var selectionAndTodayString = selectedDateString + ', ' + todayDateString;
        return (React__namespace.createElement("div", { ref: forwardedRef, role: "group", "aria-label": selectionAndTodayString, className: css(rootClass, classes.root, className, 'ms-slideDownIn10'), onKeyDown: onDatePickerPopupKeyDown },
            React__namespace.createElement("div", { className: classes.liveRegion, "aria-live": "polite", "aria-atomic": "true" },
                React__namespace.createElement("span", null, selectedDateString)),
            isDayPickerVisible && (React__namespace.createElement(CalendarDay, tslib.__assign({ selectedDate: selectedDate, navigatedDate: navigatedDay, today: props.today, onSelectDate: onDateSelected, 
                // eslint-disable-next-line react/jsx-no-bind
                onNavigateDate: onNavigateDayDate, onDismiss: props.onDismiss, firstDayOfWeek: firstDayOfWeek, dateRangeType: dateRangeType, strings: strings, 
                // eslint-disable-next-line react/jsx-no-bind
                onHeaderSelect: onHeaderSelect, navigationIcons: navigationIcons, showWeekNumbers: props.showWeekNumbers, firstWeekOfYear: props.firstWeekOfYear, dateTimeFormatter: props.dateTimeFormatter, showSixWeeksByDefault: props.showSixWeeksByDefault, minDate: minDate, maxDate: maxDate, restrictedDates: restrictedDates, workWeekDays: props.workWeekDays, componentRef: dayPicker, showCloseButton: showCloseButton, allFocusable: allFocusable }, calendarDayProps))),
            isDayPickerVisible && isMonthPickerVisible && React__namespace.createElement("div", { className: classes.divider }),
            isMonthPickerVisible ? (React__namespace.createElement("div", { className: classes.monthPickerWrapper },
                React__namespace.createElement(CalendarMonth, tslib.__assign({ navigatedDate: navigatedMonth, selectedDate: navigatedDay, strings: strings, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onNavigateDate: onNavigateMonthDate, today: props.today, highlightCurrentMonth: highlightCurrentMonth, highlightSelectedMonth: highlightSelectedMonth, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onHeaderSelect: onHeaderSelect, navigationIcons: navigationIcons, dateTimeFormatter: props.dateTimeFormatter, minDate: minDate, maxDate: maxDate, componentRef: monthPicker }, calendarMonthProps)),
                renderGoToTodayButton())) : (renderGoToTodayButton()),
            React__namespace.createElement(FocusRects, null)));
    });
    CalendarBase.displayName = 'CalendarBase';
    function getShowMonthPickerAsOverlay(props) {
        var win = getWindow();
        return props.showMonthPickerAsOverlay || (win && win.innerWidth <= MIN_SIZE_FORCE_OVERLAY);
    }

    var styles$1 = function (props) {
        var className = props.className, theme = props.theme, isDayPickerVisible = props.isDayPickerVisible, isMonthPickerVisible = props.isMonthPickerVisible, showWeekNumbers = props.showWeekNumbers;
        var palette = theme.palette;
        var totalWidth = isDayPickerVisible && isMonthPickerVisible ? 440 : 220;
        if (showWeekNumbers && isDayPickerVisible) {
            totalWidth += 30;
        }
        return {
            root: [
                normalize$1,
                {
                    display: 'flex',
                    width: totalWidth,
                },
                !isMonthPickerVisible && {
                    flexDirection: 'column',
                },
                className,
            ],
            divider: {
                top: 0,
                borderRight: '1px solid',
                borderColor: palette.neutralLight,
            },
            monthPickerWrapper: [
                {
                    display: 'flex',
                    flexDirection: 'column',
                },
            ],
            goTodayButton: [
                getFocusStyle(theme, { inset: -1 }),
                {
                    bottom: 0,
                    color: palette.neutralPrimary,
                    height: 30,
                    lineHeight: 30,
                    backgroundColor: 'transparent',
                    border: 'none',
                    boxSizing: 'content-box',
                    padding: '0 4px',
                    alignSelf: 'flex-end',
                    marginRight: 16,
                    marginTop: 3,
                    fontSize: FontSizes.small,
                    fontFamily: 'inherit',
                    overflow: 'visible',
                    selectors: {
                        '& div': {
                            fontSize: FontSizes.small,
                        },
                        '&:hover': {
                            color: palette.themePrimary,
                            backgroundColor: 'transparent',
                            cursor: 'pointer',
                        },
                        '&:active': {
                            color: palette.themeDark,
                        },
                        '&:disabled': {
                            color: palette.neutralTertiaryAlt,
                            pointerEvents: 'none',
                        },
                    },
                },
            ],
            liveRegion: {
                border: 0,
                height: '1px',
                margin: '-1px',
                overflow: 'hidden',
                padding: 0,
                width: '1px',
                position: 'absolute',
            },
        };
    };

    var Calendar = styled(CalendarBase, styles$1, undefined, {
        scope: 'Calendar',
    });

    var getClassNames$1d = classNamesFunction();
    var CheckBase = React__namespace.forwardRef(function (props, ref) {
        var _a = props.checked, checked = _a === void 0 ? false : _a, className = props.className, theme = props.theme, styles = props.styles, _b = props.useFastIcons, useFastIcons = _b === void 0 ? true : _b;
        var classNames = getClassNames$1d(styles, { theme: theme, className: className, checked: checked });
        var IconComponent = useFastIcons ? FontIcon : Icon$1;
        return (React__namespace.createElement("div", { className: classNames.root, ref: ref },
            React__namespace.createElement(IconComponent, { iconName: "CircleRing", className: classNames.circle }),
            React__namespace.createElement(IconComponent, { iconName: "StatusCircleCheckmark", className: classNames.check })));
    });
    CheckBase.displayName = 'CheckBase';

    var CheckGlobalClassNames = {
        root: 'ms-Check',
        circle: 'ms-Check-circle',
        check: 'ms-Check-check',
        /** Must be manually applied to the parent element of the check. */
        checkHost: 'ms-Check-checkHost',
    };
    var getStyles$q = function (props) {
        var _a, _b, _c, _d, _e;
        // eslint-disable-next-line deprecation/deprecation
        var _f = props.height, height = _f === void 0 ? props.checkBoxHeight || '18px' : _f, checked = props.checked, className = props.className, theme = props.theme;
        var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
        var isRTL = getRTL(theme);
        var classNames = getGlobalClassNames(CheckGlobalClassNames, theme);
        var sharedCircleCheck = {
            fontSize: height,
            position: 'absolute',
            left: 0,
            top: 0,
            width: height,
            height: height,
            textAlign: 'center',
            // inline-flex prevents the check from shifting with custom line height styles
            display: 'inline-flex',
            alignItems: 'center',
            justifyContent: 'center',
            verticalAlign: 'middle',
        };
        return {
            root: [
                classNames.root,
                fonts.medium,
                {
                    // lineHeight currently needs to be a string to output without 'px'
                    lineHeight: '1',
                    width: height,
                    height: height,
                    verticalAlign: 'top',
                    position: 'relative',
                    userSelect: 'none',
                    selectors: (_a = {
                            ':before': {
                                content: '""',
                                position: 'absolute',
                                top: '1px',
                                right: '1px',
                                bottom: '1px',
                                left: '1px',
                                borderRadius: '50%',
                                opacity: 1,
                                background: semanticColors.bodyBackground,
                            }
                        },
                        _a["." + classNames.checkHost + ":hover &, ." + classNames.checkHost + ":focus &, &:hover, &:focus"] = {
                            opacity: 1,
                        },
                        _a),
                },
                checked && [
                    'is-checked',
                    {
                        selectors: {
                            ':before': {
                                background: palette.themePrimary,
                                opacity: 1,
                                selectors: (_b = {},
                                    _b[HighContrastSelector] = {
                                        background: 'Window',
                                    },
                                    _b),
                            },
                        },
                    },
                ],
                className,
            ],
            circle: [
                classNames.circle,
                sharedCircleCheck,
                {
                    color: palette.neutralSecondary,
                    selectors: (_c = {},
                        _c[HighContrastSelector] = {
                            color: 'WindowText',
                        },
                        _c),
                },
                checked && {
                    color: palette.white,
                },
            ],
            check: [
                classNames.check,
                sharedCircleCheck,
                {
                    opacity: 0,
                    color: palette.neutralSecondary,
                    fontSize: IconFontSizes.medium,
                    left: isRTL ? '-0.5px' : '.5px',
                    top: '-1px',
                    selectors: (_d = {
                            ':hover': {
                                opacity: 1,
                            }
                        },
                        _d[HighContrastSelector] = tslib.__assign({}, getHighContrastNoAdjustStyle()),
                        _d),
                },
                checked && {
                    opacity: 1,
                    color: palette.white,
                    fontWeight: 900,
                    selectors: (_e = {},
                        _e[HighContrastSelector] = {
                            border: 'none',
                            color: 'WindowText',
                        },
                        _e),
                },
            ],
            checkHost: classNames.checkHost,
        };
    };

    var Check = styled(CheckBase, getStyles$q, undefined, {
        scope: 'Check',
    }, true);

    var getClassNames$1c = classNamesFunction();
    var CheckboxBase = React__namespace.forwardRef(function (props, forwardedRef) {
        var disabled = props.disabled, required = props.required, inputProps = props.inputProps, name = props.name, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, ariaPositionInSet = props.ariaPositionInSet, ariaSetSize = props.ariaSetSize, title = props.title, checkmarkIconProps = props.checkmarkIconProps, styles = props.styles, theme = props.theme, className = props.className, _a = props.boxSide, boxSide = _a === void 0 ? 'start' : _a;
        var id = useId('checkbox-', props.id);
        var rootRef = React__namespace.useRef(null);
        var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);
        var inputRef = React__namespace.useRef(null);
        var _b = useControllableValue(props.checked, props.defaultChecked, props.onChange), isChecked = _b[0], setIsChecked = _b[1];
        var _c = useControllableValue(props.indeterminate, props.defaultIndeterminate), isIndeterminate = _c[0], setIsIndeterminate = _c[1];
        useFocusRects(rootRef);
        useDebugWarning$1(props);
        useComponentRef$4(props, isChecked, isIndeterminate, inputRef);
        var classNames = getClassNames$1c(styles, {
            theme: theme,
            className: className,
            disabled: disabled,
            indeterminate: isIndeterminate,
            checked: isChecked,
            reversed: boxSide !== 'start',
            isUsingCustomLabelRender: !!props.onRenderLabel,
        });
        var onChange = function (ev) {
            if (isIndeterminate) {
                // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if
                // controlled, lets the consumer know to change it by calling onChange). It doesn't
                // change the checked state.
                setIsChecked(!!isChecked, ev);
                setIsIndeterminate(false);
            }
            else {
                setIsChecked(!isChecked, ev);
            }
        };
        var defaultLabelRenderer = React__namespace.useCallback(function (checkboxProps) {
            if (!checkboxProps) {
                return null;
            }
            return checkboxProps.label ? (React__namespace.createElement("span", { className: classNames.text, title: checkboxProps.title }, checkboxProps.label)) : null;
        }, [classNames.text]);
        var onRenderLabel = props.onRenderLabel || defaultLabelRenderer;
        var ariaChecked = isIndeterminate
            ? 'mixed'
            : undefined;
        var mergedInputProps = tslib.__assign(tslib.__assign({ className: classNames.input, type: 'checkbox' }, inputProps), { checked: !!isChecked, disabled: disabled, required: required, name: name, id: id, title: title, onChange: onChange, 'aria-disabled': disabled, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, 'aria-describedby': ariaDescribedBy, 'aria-posinset': ariaPositionInSet, 'aria-setsize': ariaSetSize, 'aria-checked': ariaChecked });
        return (React__namespace.createElement("div", { className: classNames.root, title: title, ref: mergedRootRefs },
            React__namespace.createElement("input", tslib.__assign({}, mergedInputProps, { ref: inputRef, title: title, "data-ktp-execute-target": true })),
            React__namespace.createElement("label", { className: classNames.label, htmlFor: id },
                React__namespace.createElement("div", { className: classNames.checkbox, "data-ktp-target": true },
                    React__namespace.createElement(Icon$1, tslib.__assign({ iconName: "CheckMark" }, checkmarkIconProps, { className: classNames.checkmark }))),
                onRenderLabel(props, defaultLabelRenderer))));
    });
    CheckboxBase.displayName = 'CheckboxBase';
    function useDebugWarning$1(props) {
        {
            // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional
            useWarnings({
                name: 'Checkbox',
                props: props,
                mutuallyExclusive: {
                    checked: 'defaultChecked',
                    indeterminate: 'defaultIndeterminate',
                },
            });
        }
    }
    function useComponentRef$4(props, isChecked, isIndeterminate, checkBoxRef) {
        React__namespace.useImperativeHandle(props.componentRef, function () { return ({
            get checked() {
                return !!isChecked;
            },
            get indeterminate() {
                return !!isIndeterminate;
            },
            focus: function () {
                if (checkBoxRef.current) {
                    checkBoxRef.current.focus();
                }
            },
        }); }, [checkBoxRef, isChecked, isIndeterminate]);
    }

    var GlobalClassNames$l = {
        root: 'ms-Checkbox',
        label: 'ms-Checkbox-label',
        checkbox: 'ms-Checkbox-checkbox',
        checkmark: 'ms-Checkbox-checkmark',
        text: 'ms-Checkbox-text',
    };
    var MS_CHECKBOX_LABEL_SIZE = '20px';
    var MS_CHECKBOX_TRANSITION_DURATION = '200ms';
    var MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';
    var getStyles$p = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        var className = props.className, theme = props.theme, reversed = props.reversed, checked = props.checked, disabled = props.disabled, isUsingCustomLabelRender = props.isUsingCustomLabelRender, indeterminate = props.indeterminate;
        var semanticColors = theme.semanticColors, effects = theme.effects, palette = theme.palette, fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$l, theme);
        var checkmarkFontColor = semanticColors.inputForegroundChecked;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder
        var checkmarkFontColorHovered = palette.neutralSecondary;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder
        var checkboxBorderColor = palette.neutralPrimary;
        var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;
        var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;
        var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;
        var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;
        var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;
        var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;
        // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be
        // semanticColors.inputBackgroundCheckedHovered
        var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;
        var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;
        var checkboxHoveredTextColor = semanticColors.inputTextHovered;
        var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;
        var checkboxTextColor = semanticColors.bodyText;
        var checkboxTextColorDisabled = semanticColors.disabledText;
        var indeterminateDotStyles = [
            (_a = {
                    content: '""',
                    borderRadius: effects.roundedCorner2,
                    position: 'absolute',
                    width: 10,
                    height: 10,
                    top: 4,
                    left: 4,
                    boxSizing: 'border-box',
                    borderWidth: 5,
                    borderStyle: 'solid',
                    borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,
                    transitionProperty: 'border-width, border, border-color',
                    transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,
                    transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING
                },
                _a[HighContrastSelector] = {
                    borderColor: 'WindowText',
                },
                _a),
        ];
        return {
            root: [
                classNames.root,
                {
                    position: 'relative',
                    display: 'flex',
                },
                reversed && 'reversed',
                checked && 'is-checked',
                !disabled && 'is-enabled',
                disabled && 'is-disabled',
                !disabled && [
                    !checked && (_b = {},
                        _b[":hover ." + classNames.checkbox] = (_c = {
                                borderColor: checkboxBorderHoveredColor
                            },
                            _c[HighContrastSelector] = {
                                borderColor: 'Highlight',
                            },
                            _c),
                        _b[":focus ." + classNames.checkbox] = { borderColor: checkboxBorderHoveredColor },
                        _b[":hover ." + classNames.checkmark] = (_d = {
                                color: checkmarkFontColorHovered,
                                opacity: '1'
                            },
                            _d[HighContrastSelector] = {
                                color: 'Highlight',
                            },
                            _d),
                        _b),
                    checked &&
                        !indeterminate && (_e = {},
                        _e[":hover ." + classNames.checkbox] = {
                            background: checkboxBackgroundCheckedHovered,
                            borderColor: checkboxBorderColorCheckedHovered,
                        },
                        _e[":focus ." + classNames.checkbox] = {
                            background: checkboxBackgroundCheckedHovered,
                            borderColor: checkboxBorderColorCheckedHovered,
                        },
                        _e[HighContrastSelector] = (_f = {},
                            _f[":hover ." + classNames.checkbox] = {
                                background: 'Highlight',
                                borderColor: 'Highlight',
                            },
                            _f[":focus ." + classNames.checkbox] = {
                                background: 'Highlight',
                            },
                            _f[":focus:hover ." + classNames.checkbox] = {
                                background: 'Highlight',
                            },
                            _f[":focus:hover ." + classNames.checkmark] = {
                                color: 'Window',
                            },
                            _f[":hover ." + classNames.checkmark] = {
                                color: 'Window',
                            },
                            _f),
                        _e),
                    indeterminate && (_g = {},
                        _g[":hover ." + classNames.checkbox + ", :hover ." + classNames.checkbox + ":after"] = (_h = {
                                borderColor: checkboxBorderIndeterminateHoveredColor
                            },
                            _h[HighContrastSelector] = {
                                borderColor: 'WindowText',
                            },
                            _h),
                        _g[":focus ." + classNames.checkbox] = {
                            borderColor: checkboxBorderIndeterminateHoveredColor,
                        },
                        _g[":hover ." + classNames.checkmark] = {
                            opacity: '0',
                        },
                        _g),
                    (_j = {},
                        _j[":hover ." + classNames.text + ", :focus ." + classNames.text] = (_k = {
                                color: checkboxHoveredTextColor
                            },
                            _k[HighContrastSelector] = {
                                color: disabled ? 'GrayText' : 'WindowText',
                            },
                            _k),
                        _j),
                ],
                className,
            ],
            input: (_l = {
                    position: 'absolute',
                    background: 'none',
                    opacity: 0
                },
                _l["." + IsFocusVisibleClassName + " &:focus + label::before"] = (_m = {
                        outline: '1px solid ' + theme.palette.neutralSecondary,
                        outlineOffset: '2px'
                    },
                    _m[HighContrastSelector] = {
                        outline: '1px solid WindowText',
                    },
                    _m),
                _l),
            label: [
                classNames.label,
                theme.fonts.medium,
                {
                    display: 'flex',
                    alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',
                    cursor: disabled ? 'default' : 'pointer',
                    position: 'relative',
                    userSelect: 'none',
                },
                reversed && {
                    flexDirection: 'row-reverse',
                    justifyContent: 'flex-end',
                },
                {
                    '&::before': {
                        position: 'absolute',
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0,
                        content: '""',
                        pointerEvents: 'none',
                    },
                },
            ],
            checkbox: [
                classNames.checkbox,
                (_o = {
                        position: 'relative',
                        display: 'flex',
                        flexShrink: 0,
                        alignItems: 'center',
                        justifyContent: 'center',
                        height: MS_CHECKBOX_LABEL_SIZE,
                        width: MS_CHECKBOX_LABEL_SIZE,
                        border: "1px solid " + checkboxBorderColor,
                        borderRadius: effects.roundedCorner2,
                        boxSizing: 'border-box',
                        transitionProperty: 'background, border, border-color',
                        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,
                        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,
                        /* in case the icon is bigger than the box */
                        overflow: 'hidden',
                        ':after': indeterminate ? indeterminateDotStyles : null
                    },
                    _o[HighContrastSelector] = tslib.__assign({ borderColor: 'WindowText' }, getHighContrastNoAdjustStyle()),
                    _o),
                indeterminate && {
                    borderColor: checkboxBorderIndeterminateColor,
                },
                !reversed
                    ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender
                        // is used, there will be only a 4px margin from checkbox to label. The label by default would have
                        // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two
                        // (and move it into the text) to not incur a breaking change for everyone using custom render atm.
                        {
                            marginRight: 4,
                        }
                    : {
                        marginLeft: 4,
                    },
                !disabled &&
                    !indeterminate &&
                    checked && (_p = {
                        background: checkboxBackgroundChecked,
                        borderColor: checkboxBorderColorChecked
                    },
                    _p[HighContrastSelector] = {
                        background: 'Highlight',
                        borderColor: 'Highlight',
                    },
                    _p),
                disabled && (_q = {
                        borderColor: checkboxBorderColorDisabled
                    },
                    _q[HighContrastSelector] = {
                        borderColor: 'GrayText',
                    },
                    _q),
                checked &&
                    disabled && (_r = {
                        background: checkboxBackgroundDisabledChecked,
                        borderColor: checkboxBorderColorDisabled
                    },
                    _r[HighContrastSelector] = {
                        background: 'Window',
                    },
                    _r),
            ],
            checkmark: [
                classNames.checkmark,
                (_s = {
                        opacity: checked && !indeterminate ? '1' : '0',
                        color: checkmarkFontColor
                    },
                    _s[HighContrastSelector] = tslib.__assign({ color: disabled ? 'GrayText' : 'Window' }, getHighContrastNoAdjustStyle()),
                    _s),
            ],
            text: [
                classNames.text,
                (_t = {
                        color: disabled ? checkboxTextColorDisabled : checkboxTextColor,
                        fontSize: fonts.medium.fontSize,
                        lineHeight: '20px'
                    },
                    _t[HighContrastSelector] = tslib.__assign({ color: disabled ? 'GrayText' : 'WindowText' }, getHighContrastNoAdjustStyle()),
                    _t),
                !reversed
                    ? {
                        marginLeft: 4,
                    }
                    : {
                        marginRight: 4,
                    },
            ],
        };
    };

    var Checkbox = styled(CheckboxBase, getStyles$p, undefined, { scope: 'Checkbox' });

    var getClassNames$1b = classNamesFunction({
        // Label is used a lot by other components.
        // It's likely to see expected cases which pass different className to the Label.
        // Therefore setting a larger cache size.
        cacheSize: 100,
    });
    var LabelBase = /** @class */ (function (_super) {
        tslib.__extends(LabelBase, _super);
        function LabelBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LabelBase.prototype.render = function () {
            var _a = this.props, _b = _a.as, RootType = _b === void 0 ? 'label' : _b, children = _a.children, className = _a.className, disabled = _a.disabled, styles = _a.styles, required = _a.required, theme = _a.theme;
            var classNames = getClassNames$1b(styles, {
                className: className,
                disabled: disabled,
                required: required,
                theme: theme,
            });
            return (React__namespace.createElement(RootType, tslib.__assign({}, getNativeProps(this.props, divProperties), { className: classNames.root }), children));
        };
        return LabelBase;
    }(React__namespace.Component));

    var getStyles$o = function (props) {
        var _a;
        var theme = props.theme, className = props.className, disabled = props.disabled, required = props.required;
        var semanticColors = theme.semanticColors;
        // Tokens
        var labelFontWeight = FontWeights.semibold;
        var labelColor = semanticColors.bodyText;
        var labelDisabledColor = semanticColors.disabledBodyText;
        var labelRequiredStarColor = semanticColors.errorText;
        return {
            root: [
                'ms-Label',
                theme.fonts.medium,
                {
                    fontWeight: labelFontWeight,
                    color: labelColor,
                    boxSizing: 'border-box',
                    boxShadow: 'none',
                    margin: 0,
                    display: 'block',
                    padding: '5px 0',
                    wordWrap: 'break-word',
                    overflowWrap: 'break-word',
                },
                disabled && {
                    color: labelDisabledColor,
                    selectors: (_a = {},
                        _a[HighContrastSelector] = tslib.__assign({ color: 'GrayText' }, getHighContrastNoAdjustStyle()),
                        _a),
                },
                required && {
                    selectors: {
                        '::after': {
                            content: "' *'",
                            color: labelRequiredStarColor,
                            paddingRight: 12,
                        },
                    },
                },
                className,
            ],
        };
    };

    var Label = styled(LabelBase, getStyles$o, undefined, {
        scope: 'Label',
    });

    var getClassNames$1a = classNamesFunction();
    var LARGE_IMAGE_SIZE = 71;
    var DEFAULT_PROPS$4 = {
        // This ensures default imageSize value doesn't mutate. Mutation can cause style re-calcuation.
        imageSize: { width: 32, height: 32 },
    };
    var ChoiceGroupOptionBase = function (propsWithoutDefaults) {
        // Mix the `key` prop back in since custom render functions may be expecting it
        // (React uses `key` internally rather than passing it through to the component)
        var props = getPropsWithDefaults(tslib.__assign(tslib.__assign({}, DEFAULT_PROPS$4), { key: propsWithoutDefaults.itemKey }), propsWithoutDefaults);
        var ariaLabel = props.ariaLabel, focused = props.focused, required = props.required, theme = props.theme, iconProps = props.iconProps, imageSrc = props.imageSrc, imageSize = props.imageSize, disabled = props.disabled, checked = props.checked, id = props.id, styles = props.styles, name = props.name, rest = tslib.__rest(props, ["ariaLabel", "focused", "required", "theme", "iconProps", "imageSrc", "imageSize", "disabled", "checked", "id", "styles", "name"]);
        var classNames = getClassNames$1a(styles, {
            theme: theme,
            hasIcon: !!iconProps,
            hasImage: !!imageSrc,
            checked: checked,
            disabled: disabled,
            imageIsLarge: !!imageSrc && (imageSize.width > LARGE_IMAGE_SIZE || imageSize.height > LARGE_IMAGE_SIZE),
            imageSize: imageSize,
            focused: focused,
        });
        var _a = getNativeProps(rest, inputProperties), className = _a.className, nativeProps = tslib.__rest(_a, ["className"]);
        var defaultOnRenderLabel = function () {
            return (React__namespace.createElement("span", { id: props.labelId, className: "ms-ChoiceFieldLabel" }, props.text));
        };
        var defaultOnRenderField = function () {
            var _a = props.imageAlt, imageAlt = _a === void 0 ? '' : _a, selectedImageSrc = props.selectedImageSrc;
            var onRenderLabel = props.onRenderLabel
                ? composeRenderFunction(props.onRenderLabel, defaultOnRenderLabel)
                : defaultOnRenderLabel;
            var label = onRenderLabel(props);
            return (React__namespace.createElement("label", { htmlFor: id, className: classNames.field },
                imageSrc && (React__namespace.createElement("div", { className: classNames.innerField },
                    React__namespace.createElement("div", { className: classNames.imageWrapper },
                        React__namespace.createElement(Image$1, tslib.__assign({ src: imageSrc, alt: imageAlt }, imageSize))),
                    React__namespace.createElement("div", { className: classNames.selectedImageWrapper },
                        React__namespace.createElement(Image$1, tslib.__assign({ src: selectedImageSrc, alt: imageAlt }, imageSize))))),
                iconProps && (React__namespace.createElement("div", { className: classNames.innerField },
                    React__namespace.createElement("div", { className: classNames.iconWrapper },
                        React__namespace.createElement(Icon$1, tslib.__assign({}, iconProps))))),
                imageSrc || iconProps ? React__namespace.createElement("div", { className: classNames.labelWrapper }, label) : label));
        };
        var _b = props.onRenderField, onRenderField = _b === void 0 ? defaultOnRenderField : _b;
        var onChange = function (evt) {
            var _a;
            (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, evt, props);
        };
        var onBlur = function (evt) {
            var _a;
            (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, evt);
        };
        var onFocus = function (evt) {
            var _a;
            (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, evt, props);
        };
        return (React__namespace.createElement("div", { className: classNames.root },
            React__namespace.createElement("div", { className: classNames.choiceFieldWrapper },
                React__namespace.createElement("input", tslib.__assign({ "aria-label": ariaLabel, id: id, className: css(classNames.input, className), type: "radio", name: name, disabled: disabled, checked: checked, required: required }, nativeProps, { onChange: onChange, onFocus: onFocus, onBlur: onBlur })),
                onRenderField(props, defaultOnRenderField))));
    };
    ChoiceGroupOptionBase.displayName = 'ChoiceGroupOption';

    var GlobalClassNames$k = {
        root: 'ms-ChoiceField',
        choiceFieldWrapper: 'ms-ChoiceField-wrapper',
        input: 'ms-ChoiceField-input',
        field: 'ms-ChoiceField-field',
        innerField: 'ms-ChoiceField-innerField',
        imageWrapper: 'ms-ChoiceField-imageWrapper',
        iconWrapper: 'ms-ChoiceField-iconWrapper',
        labelWrapper: 'ms-ChoiceField-labelWrapper',
        checked: 'is-checked',
    };
    var labelWrapperLineHeight = 15;
    var labelWrapperHeight = labelWrapperLineHeight * 2 + 2; // adding 2px height to ensure text doesn't get cutoff
    var iconSize = 32;
    var choiceFieldSize = 20;
    var choiceFieldTransitionDuration = '200ms';
    var choiceFieldTransitionTiming = 'cubic-bezier(.4, 0, .23, 1)';
    var radioButtonSpacing = 3;
    var radioButtonInnerSize = 5;
    function getChoiceGroupFocusStyle(focusBorderColor, hasIconOrImage) {
        var _a, _b;
        return [
            'is-inFocus',
            {
                selectors: (_a = {},
                    _a["." + IsFocusVisibleClassName + " &"] = {
                        position: 'relative',
                        outline: 'transparent',
                        selectors: {
                            '::-moz-focus-inner': {
                                border: 0,
                            },
                            ':after': {
                                content: '""',
                                top: -2,
                                right: -2,
                                bottom: -2,
                                left: -2,
                                pointerEvents: 'none',
                                border: "1px solid " + focusBorderColor,
                                position: 'absolute',
                                selectors: (_b = {},
                                    _b[HighContrastSelector] = {
                                        borderColor: 'WindowText',
                                        borderWidth: hasIconOrImage ? 1 : 2,
                                    },
                                    _b),
                            },
                        },
                    },
                    _a),
            },
        ];
    }
    function getImageWrapperStyle(isSelectedImageWrapper, className, checked) {
        return [
            className,
            {
                paddingBottom: 2,
                transitionProperty: 'opacity',
                transitionDuration: choiceFieldTransitionDuration,
                transitionTimingFunction: 'ease',
                selectors: {
                    '.ms-Image': {
                        display: 'inline-block',
                        borderStyle: 'none',
                    },
                },
            },
            (checked ? !isSelectedImageWrapper : isSelectedImageWrapper) && [
                'is-hidden',
                {
                    position: 'absolute',
                    left: 0,
                    top: 0,
                    width: '100%',
                    height: '100%',
                    overflow: 'hidden',
                    opacity: 0,
                },
            ],
        ];
    }
    var getStyles$n = function (props) {
        var _a, _b, _c, _d, _e;
        var theme = props.theme, hasIcon = props.hasIcon, hasImage = props.hasImage, checked = props.checked, disabled = props.disabled, imageIsLarge = props.imageIsLarge, focused = props.focused, imageSize = props.imageSize;
        var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$k, theme);
        // Tokens
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder
        var circleBorderColor = palette.neutralPrimary;
        var circleHoveredBorderColor = semanticColors.inputBorderHovered;
        var circleCheckedBorderColor = semanticColors.inputBackgroundChecked;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered
        var circleCheckedHoveredBorderColor = palette.themeDark;
        var circleDisabledBorderColor = semanticColors.disabledBodySubtext;
        var circleBackgroundColor = semanticColors.bodyBackground;
        var dotUncheckedHoveredColor = palette.neutralSecondary;
        var dotCheckedColor = semanticColors.inputBackgroundChecked;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered
        var dotCheckedHoveredColor = palette.themeDark;
        var dotDisabledColor = semanticColors.disabledBodySubtext;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.bodyTextChecked
        var labelHoverFocusColor = palette.neutralDark;
        var focusBorderColor = semanticColors.focusBorder;
        var iconOrImageChoiceBorderUncheckedHoveredColor = semanticColors.inputBorderHovered;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered
        var iconOrImageChoiceBorderCheckedColor = semanticColors.inputBackgroundChecked;
        var iconOrImageChoiceBorderCheckedHoveredColor = palette.themeDark;
        var iconOrImageChoiceBackgroundColor = palette.neutralLighter;
        var fieldHoverOrFocusProperties = {
            selectors: {
                '.ms-ChoiceFieldLabel': {
                    color: labelHoverFocusColor,
                },
                ':before': {
                    borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,
                },
                ':after': [
                    !hasIcon &&
                        !hasImage &&
                        !checked && {
                        content: '""',
                        transitionProperty: 'background-color',
                        left: 5,
                        top: 5,
                        width: 10,
                        height: 10,
                        backgroundColor: dotUncheckedHoveredColor,
                    },
                    checked && {
                        borderColor: dotCheckedHoveredColor,
                        background: dotCheckedHoveredColor,
                    },
                ],
            },
        };
        var enabledFieldWithImageHoverOrFocusProperties = {
            borderColor: checked ? iconOrImageChoiceBorderCheckedHoveredColor : iconOrImageChoiceBorderUncheckedHoveredColor,
            selectors: {
                ':before': {
                    opacity: 1,
                    borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,
                },
            },
        };
        var circleAreaProperties = [
            {
                content: '""',
                display: 'inline-block',
                backgroundColor: circleBackgroundColor,
                borderWidth: 1,
                borderStyle: 'solid',
                borderColor: circleBorderColor,
                width: choiceFieldSize,
                height: choiceFieldSize,
                fontWeight: 'normal',
                position: 'absolute',
                top: 0,
                left: 0,
                boxSizing: 'border-box',
                transitionProperty: 'border-color',
                transitionDuration: choiceFieldTransitionDuration,
                transitionTimingFunction: choiceFieldTransitionTiming,
                borderRadius: '50%',
            },
            disabled && {
                borderColor: circleDisabledBorderColor,
                selectors: (_a = {},
                    _a[HighContrastSelector] = tslib.__assign({ borderColor: 'GrayText', background: 'Window' }, getHighContrastNoAdjustStyle()),
                    _a),
            },
            checked && {
                borderColor: disabled ? circleDisabledBorderColor : circleCheckedBorderColor,
                selectors: (_b = {},
                    _b[HighContrastSelector] = {
                        borderColor: 'Highlight',
                        background: 'Window',
                        forcedColorAdjust: 'none',
                    },
                    _b),
            },
            (hasIcon || hasImage) && {
                top: radioButtonSpacing,
                right: radioButtonSpacing,
                left: 'auto',
                opacity: checked ? 1 : 0,
            },
        ];
        var dotAreaProperties = [
            {
                content: '""',
                width: 0,
                height: 0,
                borderRadius: '50%',
                position: 'absolute',
                left: choiceFieldSize / 2,
                right: 0,
                transitionProperty: 'border-width',
                transitionDuration: choiceFieldTransitionDuration,
                transitionTimingFunction: choiceFieldTransitionTiming,
                boxSizing: 'border-box',
            },
            checked && {
                borderWidth: 5,
                borderStyle: 'solid',
                borderColor: disabled ? dotDisabledColor : dotCheckedColor,
                background: dotCheckedColor,
                left: 5,
                top: 5,
                width: 10,
                height: 10,
                selectors: (_c = {},
                    _c[HighContrastSelector] = {
                        borderColor: 'Highlight',
                        forcedColorAdjust: 'none',
                    },
                    _c),
            },
            checked &&
                (hasIcon || hasImage) && {
                top: radioButtonSpacing + radioButtonInnerSize,
                right: radioButtonSpacing + radioButtonInnerSize,
                left: 'auto', // To reset the value of 'left' to its default value, so that 'right' works
            },
        ];
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                {
                    display: 'flex',
                    alignItems: 'center',
                    boxSizing: 'border-box',
                    color: semanticColors.bodyText,
                    minHeight: 26,
                    border: 'none',
                    position: 'relative',
                    marginTop: 8,
                    selectors: {
                        '.ms-ChoiceFieldLabel': {
                            display: 'inline-block',
                        },
                    },
                },
                !hasIcon &&
                    !hasImage && {
                    selectors: {
                        '.ms-ChoiceFieldLabel': {
                            paddingLeft: '26px',
                        },
                    },
                },
                hasImage && 'ms-ChoiceField--image',
                hasIcon && 'ms-ChoiceField--icon',
                (hasIcon || hasImage) && {
                    display: 'inline-flex',
                    fontSize: 0,
                    margin: '0 4px 4px 0',
                    paddingLeft: 0,
                    backgroundColor: iconOrImageChoiceBackgroundColor,
                    height: '100%',
                },
            ],
            choiceFieldWrapper: [
                classNames.choiceFieldWrapper,
                focused && getChoiceGroupFocusStyle(focusBorderColor, hasIcon || hasImage),
            ],
            // The hidden input
            input: [
                classNames.input,
                {
                    position: 'absolute',
                    opacity: 0,
                    top: 0,
                    right: 0,
                    width: '100%',
                    height: '100%',
                    margin: 0,
                },
                disabled && 'is-disabled',
            ],
            field: [
                classNames.field,
                checked && classNames.checked,
                {
                    display: 'inline-block',
                    cursor: 'pointer',
                    marginTop: 0,
                    position: 'relative',
                    verticalAlign: 'top',
                    userSelect: 'none',
                    minHeight: 20,
                    selectors: {
                        ':hover': !disabled && fieldHoverOrFocusProperties,
                        ':focus': !disabled && fieldHoverOrFocusProperties,
                        // The circle
                        ':before': circleAreaProperties,
                        // The dot
                        ':after': dotAreaProperties,
                    },
                },
                hasIcon && 'ms-ChoiceField--icon',
                hasImage && 'ms-ChoiceField-field--image',
                (hasIcon || hasImage) && {
                    boxSizing: 'content-box',
                    cursor: 'pointer',
                    paddingTop: 22,
                    margin: 0,
                    textAlign: 'center',
                    transitionProperty: 'all',
                    transitionDuration: choiceFieldTransitionDuration,
                    transitionTimingFunction: 'ease',
                    border: '1px solid transparent',
                    justifyContent: 'center',
                    alignItems: 'center',
                    display: 'flex',
                    flexDirection: 'column',
                },
                checked && {
                    borderColor: iconOrImageChoiceBorderCheckedColor,
                },
                (hasIcon || hasImage) &&
                    !disabled && {
                    selectors: {
                        ':hover': enabledFieldWithImageHoverOrFocusProperties,
                        ':focus': enabledFieldWithImageHoverOrFocusProperties,
                    },
                },
                disabled && {
                    cursor: 'default',
                    selectors: {
                        '.ms-ChoiceFieldLabel': {
                            color: semanticColors.disabledBodyText,
                            selectors: (_d = {},
                                _d[HighContrastSelector] = tslib.__assign({ color: 'GrayText' }, getHighContrastNoAdjustStyle()),
                                _d),
                        },
                    },
                },
                checked &&
                    disabled && {
                    borderColor: iconOrImageChoiceBackgroundColor,
                },
            ],
            innerField: [
                classNames.innerField,
                hasImage && {
                    // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.
                    height: imageSize.height,
                    width: imageSize.width,
                },
                (hasIcon || hasImage) && {
                    position: 'relative',
                    display: 'inline-block',
                    paddingLeft: 30,
                    paddingRight: 30,
                },
                (hasIcon || hasImage) &&
                    imageIsLarge && {
                    paddingLeft: 24,
                    paddingRight: 24,
                },
                (hasIcon || hasImage) &&
                    disabled && {
                    opacity: 0.25,
                    selectors: (_e = {},
                        _e[HighContrastSelector] = {
                            color: 'GrayText',
                            opacity: 1,
                        },
                        _e),
                },
            ],
            imageWrapper: getImageWrapperStyle(false, classNames.imageWrapper, checked),
            selectedImageWrapper: getImageWrapperStyle(true, classNames.imageWrapper, checked),
            iconWrapper: [
                classNames.iconWrapper,
                {
                    fontSize: iconSize,
                    lineHeight: iconSize,
                    height: iconSize,
                },
            ],
            labelWrapper: [
                classNames.labelWrapper,
                fonts.medium,
                (hasIcon || hasImage) && {
                    display: 'block',
                    position: 'relative',
                    margin: '4px 8px 2px 8px',
                    height: labelWrapperHeight,
                    lineHeight: labelWrapperLineHeight,
                    // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.
                    maxWidth: imageSize.width * 2,
                    overflow: 'hidden',
                    whiteSpace: 'pre-wrap',
                },
            ],
        };
    };

    var ChoiceGroupOption = styled(ChoiceGroupOptionBase, getStyles$n, undefined, { scope: 'ChoiceGroupOption' });

    var getClassNames$19 = classNamesFunction();
    var getOptionId = function (option, id) {
        return id + "-" + option.key;
    };
    var findOption = function (options, key) {
        return key === undefined ? undefined : find(options, function (value) { return value.key === key; });
    };
    var focusSelectedOption = function (options, keyChecked, id) {
        var optionToFocus = findOption(options, keyChecked) || options.filter(function (option) { return !option.disabled; })[0];
        var elementToFocus = optionToFocus && document.getElementById(getOptionId(optionToFocus, id));
        if (elementToFocus) {
            elementToFocus.focus();
            setFocusVisibility(true, elementToFocus);
        }
    };
    var focusFromFocusTrapZone = function (evt) {
        return evt.relatedTarget instanceof HTMLElement && evt.relatedTarget.dataset.isFocusTrapZoneBumper === 'true';
    };
    var useComponentRef$3 = function (options, keyChecked, id, componentRef) {
        React__namespace.useImperativeHandle(componentRef, function () { return ({
            get checkedOption() {
                return findOption(options, keyChecked);
            },
            focus: function () {
                focusSelectedOption(options, keyChecked, id);
            },
        }); }, [options, keyChecked, id]);
    };
    var COMPONENT_NAME$a = 'ChoiceGroup';
    var ChoiceGroupBase = React__namespace.forwardRef(function (props, forwardedRef) {
        var className = props.className, theme = props.theme, styles = props.styles, _a = props.options, options = _a === void 0 ? [] : _a, label = props.label, required = props.required, disabled = props.disabled, name = props.name, defaultSelectedKey = props.defaultSelectedKey, componentRef = props.componentRef, onChange = props.onChange;
        var id = useId('ChoiceGroup');
        var labelId = useId('ChoiceGroupLabel');
        var divProps = getNativeProps(props, divProperties, [
            'onChange',
            'className',
            'required',
        ]);
        var classNames = getClassNames$19(styles, {
            theme: theme,
            className: className,
            optionsContainIconOrImage: options.some(function (option) { return !!(option.iconProps || option.imageSrc); }),
        });
        var ariaLabelledBy = props.ariaLabelledBy || (label ? labelId : props['aria-labelledby']);
        var _b = useControllableValue(props.selectedKey, defaultSelectedKey), keyChecked = _b[0], setKeyChecked = _b[1];
        var _c = React__namespace.useState(), keyFocused = _c[0], setKeyFocused = _c[1];
        var rootRef = React__namespace.useRef(null);
        var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);
        useDebugWarnings$1(props);
        useComponentRef$3(options, keyChecked, id, componentRef);
        useFocusRects(rootRef);
        var onFocus = React__namespace.useCallback(function (ev, option) {
            var _a;
            if (option) {
                setKeyFocused(option.itemKey);
                (_a = option.onFocus) === null || _a === void 0 ? void 0 : _a.call(option, ev);
            }
        }, []);
        var onBlur = React__namespace.useCallback(function (ev, option) {
            var _a;
            setKeyFocused(undefined);
            (_a = option === null || option === void 0 ? void 0 : option.onBlur) === null || _a === void 0 ? void 0 : _a.call(option, ev);
        }, []);
        var onOptionChange = React__namespace.useCallback(function (evt, option) {
            var _a;
            if (!option) {
                return;
            }
            setKeyChecked(option.itemKey);
            (_a = option.onChange) === null || _a === void 0 ? void 0 : _a.call(option, evt);
            onChange === null || onChange === void 0 ? void 0 : onChange(evt, findOption(options, option.itemKey));
        }, [onChange, options, setKeyChecked]);
        var onRadioFocus = React__namespace.useCallback(function (evt) {
            // Handles scenarios like this bug: https://github.com/microsoft/fluentui/issues/20173
            if (focusFromFocusTrapZone(evt)) {
                focusSelectedOption(options, keyChecked, id);
            }
        }, [options, keyChecked, id]);
        return (React__namespace.createElement("div", tslib.__assign({ className: classNames.root }, divProps, { ref: mergedRootRefs }),
            React__namespace.createElement("div", tslib.__assign({ role: "radiogroup" }, (ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy }), { onFocus: onRadioFocus }),
                label && (React__namespace.createElement(Label, { className: classNames.label, required: required, id: labelId, disabled: disabled }, label)),
                React__namespace.createElement("div", { className: classNames.flexContainer }, options.map(function (option) {
                    return (React__namespace.createElement(ChoiceGroupOption, tslib.__assign({ itemKey: option.key }, option, { key: option.key, onBlur: onBlur, onFocus: onFocus, onChange: onOptionChange, focused: option.key === keyFocused, checked: option.key === keyChecked, disabled: option.disabled || disabled, id: getOptionId(option, id), labelId: option.labelId || labelId + "-" + option.key, name: name || id, required: required })));
                })))));
    });
    ChoiceGroupBase.displayName = COMPONENT_NAME$a;
    function useDebugWarnings$1(props) {
        {
            // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional
            useWarnings({
                name: COMPONENT_NAME$a,
                props: props,
                mutuallyExclusive: {
                    selectedKey: 'defaultSelectedKey',
                },
            });
        }
    }

    var GlobalClassNames$j = {
        root: 'ms-ChoiceFieldGroup',
        flexContainer: 'ms-ChoiceFieldGroup-flexContainer',
    };
    var getStyles$m = function (props) {
        var className = props.className, optionsContainIconOrImage = props.optionsContainIconOrImage, theme = props.theme;
        var classNames = getGlobalClassNames(GlobalClassNames$j, theme);
        return {
            root: [
                className,
                classNames.root,
                theme.fonts.medium,
                {
                    display: 'block',
                },
            ],
            flexContainer: [
                classNames.flexContainer,
                optionsContainIconOrImage && {
                    display: 'flex',
                    flexDirection: 'row',
                    flexWrap: 'wrap',
                },
            ],
        };
    };

    var ChoiceGroup = styled(ChoiceGroupBase, getStyles$m, undefined, { scope: 'ChoiceGroup' });

    var getClassNames$18 = classNamesFunction();
    var DEFAULT_STATE_VALUE = '';
    var COMPONENT_NAME$9 = 'TextField';
    var REVEAL_ICON_NAME = 'RedEye';
    var HIDE_ICON_NAME = 'Hide';
    var TextFieldBase = /** @class */ (function (_super) {
        tslib.__extends(TextFieldBase, _super);
        function TextFieldBase(props) {
            var _this = _super.call(this, props) || this;
            _this._textElement = React__namespace.createRef();
            _this._onFocus = function (ev) {
                if (_this.props.onFocus) {
                    _this.props.onFocus(ev);
                }
                _this.setState({ isFocused: true }, function () {
                    if (_this.props.validateOnFocusIn) {
                        _this._validate(_this.value);
                    }
                });
            };
            _this._onBlur = function (ev) {
                if (_this.props.onBlur) {
                    _this.props.onBlur(ev);
                }
                _this.setState({ isFocused: false }, function () {
                    if (_this.props.validateOnFocusOut) {
                        _this._validate(_this.value);
                    }
                });
            };
            _this._onRenderLabel = function (props) {
                var label = props.label, required = props.required;
                // IProcessedStyleSet definition requires casting for what Label expects as its styles prop
                var labelStyles = _this._classNames.subComponentStyles
                    ? _this._classNames.subComponentStyles.label
                    : undefined;
                if (label) {
                    return (React__namespace.createElement(Label, { required: required, htmlFor: _this._id, styles: labelStyles, disabled: props.disabled, id: _this._labelId }, props.label));
                }
                return null;
            };
            _this._onRenderDescription = function (props) {
                if (props.description) {
                    return React__namespace.createElement("span", { className: _this._classNames.description }, props.description);
                }
                return null;
            };
            _this._onRevealButtonClick = function (event) {
                _this.setState(function (prevState) { return ({ isRevealingPassword: !prevState.isRevealingPassword }); });
            };
            _this._onInputChange = function (event) {
                // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,
                // which have *probably* been fixed now:
                // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)
                // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)
                var _a, _b;
                // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for
                // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.
                var element = event.target;
                var value = element.value;
                // Ignore this event if any of the following are true:
                // - the value is undefined (in case one of the IE bugs comes back)
                // - it's a duplicate event (important since onInputChange is called twice per actual user event)
                // - it's the same as the previous value
                var previousValue = _getValue(_this.props, _this.state) || '';
                if (value === undefined || value === _this._lastChangeValue || value === previousValue) {
                    _this._lastChangeValue = undefined;
                    return;
                }
                _this._lastChangeValue = value;
                (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, event, value);
                if (!_this._isControlled) {
                    // ONLY if this is an uncontrolled component, update the displayed value.
                    // (Controlled components must update the `value` prop from `onChange`.)
                    _this.setState({ uncontrolledValue: value });
                }
            };
            initializeComponentRef(_this);
            _this._async = new Async(_this);
            {
                warnMutuallyExclusive(COMPONENT_NAME$9, props, {
                    errorMessage: 'onGetErrorMessage',
                });
            }
            _this._fallbackId = getId(COMPONENT_NAME$9);
            _this._descriptionId = getId(COMPONENT_NAME$9 + 'Description');
            _this._labelId = getId(COMPONENT_NAME$9 + 'Label');
            _this._prefixId = getId(COMPONENT_NAME$9 + 'Prefix');
            _this._suffixId = getId(COMPONENT_NAME$9 + 'Suffix');
            _this._warnControlledUsage();
            var _a = props.defaultValue, defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;
            if (typeof defaultValue === 'number') {
                // This isn't allowed per the props, but happens anyway.
                defaultValue = String(defaultValue);
            }
            _this.state = {
                uncontrolledValue: _this._isControlled ? undefined : defaultValue,
                isFocused: false,
                errorMessage: '',
            };
            _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);
            _this._lastValidation = 0;
            return _this;
        }
        Object.defineProperty(TextFieldBase.prototype, "value", {
            /**
             * Gets the current value of the text field.
             */
            get: function () {
                return _getValue(this.props, this.state);
            },
            enumerable: false,
            configurable: true
        });
        TextFieldBase.prototype.componentDidMount = function () {
            this._adjustInputHeight();
            if (this.props.validateOnLoad) {
                this._validate(this.value);
            }
        };
        TextFieldBase.prototype.componentWillUnmount = function () {
            this._async.dispose();
        };
        TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {
            return {
                selection: [this.selectionStart, this.selectionEnd],
            };
        };
        TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {
            var props = this.props;
            var _a = (snapshot || {}).selection, selection = _a === void 0 ? [null, null] : _a;
            var start = selection[0], end = selection[1];
            if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {
                // The text field has just changed between single- and multi-line, so we need to reset focus
                // and selection/cursor.
                this.focus();
                if (start !== null && end !== null && start >= 0 && end >= 0) {
                    this.setSelectionRange(start, end);
                }
            }
            if (prevProps.value !== props.value) {
                // Only if the value in props changed, reset the record of the last value seen by a
                // change/input event (don't do this if the value in state changed, since at least in tests
                // the state update may happen before the second event in a series)
                this._lastChangeValue = undefined;
            }
            var prevValue = _getValue(prevProps, prevState);
            var value = this.value;
            if (prevValue !== value) {
                // Handle controlled/uncontrolled warnings and status
                this._warnControlledUsage(prevProps);
                // Clear error message if needed
                // TODO: is there any way to do this without an extra render?
                if (this.state.errorMessage && !props.errorMessage) {
                    this.setState({ errorMessage: '' });
                }
                // Adjust height if needed based on new value
                this._adjustInputHeight();
                // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.
                // This seems a bit odd and hard to integrate with the new approach.
                // (Starting to think we should just put the validation logic in a separate wrapper component...?)
                if (_shouldValidateAllChanges(props)) {
                    this._delayedValidate(value);
                }
            }
        };
        TextFieldBase.prototype.render = function () {
            var _a = this.props, borderless = _a.borderless, className = _a.className, disabled = _a.disabled, invalid = _a.invalid, iconProps = _a.iconProps, inputClassName = _a.inputClassName, label = _a.label, multiline = _a.multiline, required = _a.required, underlined = _a.underlined, prefix = _a.prefix, resizable = _a.resizable, suffix = _a.suffix, theme = _a.theme, styles = _a.styles, autoAdjustHeight = _a.autoAdjustHeight, canRevealPassword = _a.canRevealPassword, revealPasswordAriaLabel = _a.revealPasswordAriaLabel, type = _a.type, _b = _a.onRenderPrefix, onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b, _c = _a.onRenderSuffix, onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c, _d = _a.onRenderLabel, onRenderLabel = _d === void 0 ? this._onRenderLabel : _d, _e = _a.onRenderDescription, onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;
            var _f = this.state, isFocused = _f.isFocused, isRevealingPassword = _f.isRevealingPassword;
            var errorMessage = this._errorMessage;
            var isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;
            var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();
            var classNames = (this._classNames = getClassNames$18(styles, {
                theme: theme,
                className: className,
                disabled: disabled,
                focused: isFocused,
                required: required,
                multiline: multiline,
                hasLabel: !!label,
                hasErrorMessage: isInvalid,
                borderless: borderless,
                resizable: resizable,
                hasIcon: !!iconProps,
                underlined: underlined,
                inputClassName: inputClassName,
                autoAdjustHeight: autoAdjustHeight,
                hasRevealButton: hasRevealButton,
            }));
            return (
            // eslint-disable-next-line deprecation/deprecation
            React__namespace.createElement("div", { ref: this.props.elementRef, className: classNames.root },
                React__namespace.createElement("div", { className: classNames.wrapper },
                    onRenderLabel(this.props, this._onRenderLabel),
                    React__namespace.createElement("div", { className: classNames.fieldGroup },
                        (prefix !== undefined || this.props.onRenderPrefix) && (React__namespace.createElement("div", { className: classNames.prefix, id: this._prefixId }, onRenderPrefix(this.props, this._onRenderPrefix))),
                        multiline ? this._renderTextArea() : this._renderInput(),
                        iconProps && React__namespace.createElement(Icon$1, tslib.__assign({ className: classNames.icon }, iconProps)),
                        hasRevealButton && (
                        // Explicitly set type="button" since the default button type within a form is "submit"
                        React__namespace.createElement("button", { "aria-label": revealPasswordAriaLabel, className: classNames.revealButton, onClick: this._onRevealButtonClick, "aria-pressed": !!isRevealingPassword, type: "button" },
                            React__namespace.createElement("span", { className: classNames.revealSpan },
                                React__namespace.createElement(Icon$1, { className: classNames.revealIcon, iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME })))),
                        (suffix !== undefined || this.props.onRenderSuffix) && (React__namespace.createElement("div", { className: classNames.suffix, id: this._suffixId }, onRenderSuffix(this.props, this._onRenderSuffix))))),
                this._isDescriptionAvailable && (React__namespace.createElement("span", { id: this._descriptionId },
                    onRenderDescription(this.props, this._onRenderDescription),
                    errorMessage && (React__namespace.createElement("div", { role: "alert" },
                        React__namespace.createElement(DelayedRender, null, this._renderErrorMessage())))))));
        };
        /**
         * Sets focus on the text field
         */
        TextFieldBase.prototype.focus = function () {
            if (this._textElement.current) {
                this._textElement.current.focus();
            }
        };
        /**
         * Blurs the text field.
         */
        TextFieldBase.prototype.blur = function () {
            if (this._textElement.current) {
                this._textElement.current.blur();
            }
        };
        /**
         * Selects the text field
         */
        TextFieldBase.prototype.select = function () {
            if (this._textElement.current) {
                this._textElement.current.select();
            }
        };
        /**
         * Sets the selection start of the text field to a specified value
         */
        TextFieldBase.prototype.setSelectionStart = function (value) {
            if (this._textElement.current) {
                this._textElement.current.selectionStart = value;
            }
        };
        /**
         * Sets the selection end of the text field to a specified value
         */
        TextFieldBase.prototype.setSelectionEnd = function (value) {
            if (this._textElement.current) {
                this._textElement.current.selectionEnd = value;
            }
        };
        Object.defineProperty(TextFieldBase.prototype, "selectionStart", {
            /**
             * Gets the selection start of the text field
             */
            get: function () {
                return this._textElement.current ? this._textElement.current.selectionStart : -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TextFieldBase.prototype, "selectionEnd", {
            /**
             * Gets the selection end of the text field
             */
            get: function () {
                return this._textElement.current ? this._textElement.current.selectionEnd : -1;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Sets the start and end positions of a selection in a text field.
         * @param start - Index of the start of the selection.
         * @param end - Index of the end of the selection.
         */
        TextFieldBase.prototype.setSelectionRange = function (start, end) {
            if (this._textElement.current) {
                this._textElement.current.setSelectionRange(start, end);
            }
        };
        TextFieldBase.prototype._warnControlledUsage = function (prevProps) {
            // Show warnings if props are being used in an invalid way
            warnControlledUsage({
                componentId: this._id,
                componentName: COMPONENT_NAME$9,
                props: this.props,
                oldProps: prevProps,
                valueProp: 'value',
                defaultValueProp: 'defaultValue',
                onChangeProp: 'onChange',
                readOnlyProp: 'readOnly',
            });
            if (this.props.value === null && !this._hasWarnedNullValue) {
                this._hasWarnedNullValue = true;
                warn("Warning: 'value' prop on '" + COMPONENT_NAME$9 + "' should not be null. Consider using an " +
                    'empty string to clear the component or undefined to indicate an uncontrolled component.');
            }
        };
        Object.defineProperty(TextFieldBase.prototype, "_id", {
            /** Returns `props.id` if available, or a fallback if not. */
            get: function () {
                return this.props.id || this._fallbackId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TextFieldBase.prototype, "_isControlled", {
            get: function () {
                return isControlled(this.props, 'value');
            },
            enumerable: false,
            configurable: true
        });
        TextFieldBase.prototype._onRenderPrefix = function (props) {
            var prefix = props.prefix;
            return React__namespace.createElement("span", { style: { paddingBottom: '1px' } }, prefix);
        };
        TextFieldBase.prototype._onRenderSuffix = function (props) {
            var suffix = props.suffix;
            return React__namespace.createElement("span", { style: { paddingBottom: '1px' } }, suffix);
        };
        Object.defineProperty(TextFieldBase.prototype, "_errorMessage", {
            /**
             * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.
             *
             * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.
             * - If we have done the validation and there is validation error, errorMessage is the validation error message.
             */
            get: function () {
                var _a = this.props.errorMessage, errorMessage = _a === void 0 ? this.state.errorMessage : _a;
                return errorMessage || '';
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Renders error message based on the type of the message.
         *
         * - If error message is string, it will render using the built in styles.
         * - If error message is an element, user has full control over how it's rendered.
         */
        TextFieldBase.prototype._renderErrorMessage = function () {
            var errorMessage = this._errorMessage;
            return errorMessage ? (typeof errorMessage === 'string' ? (React__namespace.createElement("p", { className: this._classNames.errorMessage },
                React__namespace.createElement("span", { "data-automation-id": "error-message" }, errorMessage))) : (React__namespace.createElement("div", { className: this._classNames.errorMessage, "data-automation-id": "error-message" }, errorMessage))) : null;
        };
        Object.defineProperty(TextFieldBase.prototype, "_isDescriptionAvailable", {
            /**
             * If a custom description render function is supplied then treat description as always available.
             * Otherwise defer to the presence of description or error message text.
             */
            get: function () {
                var props = this.props;
                return !!(props.onRenderDescription || props.description || this._errorMessage);
            },
            enumerable: false,
            configurable: true
        });
        TextFieldBase.prototype._renderTextArea = function () {
            var _a = this.props.invalid, invalid = _a === void 0 ? !!this._errorMessage : _a;
            var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);
            var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);
            return (React__namespace.createElement("textarea", tslib.__assign({ id: this._id }, textAreaProps, { ref: this._textElement, value: this.value || '', onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, "aria-labelledby": ariaLabelledBy, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'], "aria-invalid": invalid, "aria-label": this.props.ariaLabel, readOnly: this.props.readOnly, onFocus: this._onFocus, onBlur: this._onBlur })));
        };
        TextFieldBase.prototype._renderInput = function () {
            var _a = this.props, ariaLabel = _a.ariaLabel, _b = _a.invalid, invalid = _b === void 0 ? !!this._errorMessage : _b, onRenderPrefix = _a.onRenderPrefix, onRenderSuffix = _a.onRenderSuffix, prefix = _a.prefix, suffix = _a.suffix, _c = _a.type, type = _c === void 0 ? 'text' : _c, label = _a.label;
            // build aria-labelledby list from label, prefix, and suffix
            var labelIds = [];
            label && labelIds.push(this._labelId);
            (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);
            (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);
            var inputProps = tslib.__assign(tslib.__assign({ type: this.state.isRevealingPassword ? 'text' : type, id: this._id }, getNativeProps(this.props, inputProperties, ['defaultValue', 'type'])), { 'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined), ref: this._textElement, value: this.value || '', onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, 'aria-label': ariaLabel, 'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'], 'aria-invalid': invalid, onFocus: this._onFocus, onBlur: this._onBlur });
            var defaultRender = function (updatedInputProps) {
                return React__namespace.createElement("input", tslib.__assign({}, updatedInputProps));
            };
            var onRenderInput = this.props.onRenderInput || defaultRender;
            return onRenderInput(inputProps, defaultRender);
        };
        TextFieldBase.prototype._validate = function (value) {
            var _this = this;
            // In case _validate is called again while validation promise is executing
            if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {
                return;
            }
            this._latestValidateValue = value;
            var onGetErrorMessage = this.props.onGetErrorMessage;
            var result = onGetErrorMessage && onGetErrorMessage(value || '');
            if (result !== undefined) {
                if (typeof result === 'string' || !('then' in result)) {
                    this.setState({ errorMessage: result });
                    this._notifyAfterValidate(value, result);
                }
                else {
                    var currentValidation_1 = ++this._lastValidation;
                    result.then(function (errorMessage) {
                        if (currentValidation_1 === _this._lastValidation) {
                            _this.setState({ errorMessage: errorMessage });
                        }
                        _this._notifyAfterValidate(value, errorMessage);
                    });
                }
            }
            else {
                this._notifyAfterValidate(value, '');
            }
        };
        TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {
            if (value === this.value && this.props.onNotifyValidationResult) {
                this.props.onNotifyValidationResult(errorMessage, value);
            }
        };
        TextFieldBase.prototype._adjustInputHeight = function () {
            if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {
                var textField = this._textElement.current;
                textField.style.height = '';
                textField.style.height = textField.scrollHeight + 'px';
            }
        };
        TextFieldBase.defaultProps = {
            resizable: true,
            deferredValidationTime: 200,
            validateOnLoad: true,
        };
        return TextFieldBase;
    }(React__namespace.Component));
    /** Get the value from the given state and props (converting from number to string if needed) */
    function _getValue(props, state) {
        var _a = props.value, value = _a === void 0 ? state.uncontrolledValue : _a;
        if (typeof value === 'number') {
            // not allowed per typings, but happens anyway
            return String(value);
        }
        return value;
    }
    /**
     * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.
     * Otherwise, validation should run on every change.
     */
    function _shouldValidateAllChanges(props) {
        return !(props.validateOnFocusIn || props.validateOnFocusOut);
    }
    // Only calculate this once across all TextFields, since will stay the same
    var __browserNeedsRevealButton;
    function _browserNeedsRevealButton() {
        if (typeof __browserNeedsRevealButton !== 'boolean') {
            var win = getWindow();
            if (win === null || win === void 0 ? void 0 : win.navigator) {
                // Edge, Chromium Edge
                var isEdge = /^Edg/.test(win.navigator.userAgent || '');
                __browserNeedsRevealButton = !(isIE11() || isEdge);
            }
            else {
                __browserNeedsRevealButton = true;
            }
        }
        return __browserNeedsRevealButton;
    }

    var globalClassNames$2 = {
        root: 'ms-TextField',
        description: 'ms-TextField-description',
        errorMessage: 'ms-TextField-errorMessage',
        field: 'ms-TextField-field',
        fieldGroup: 'ms-TextField-fieldGroup',
        prefix: 'ms-TextField-prefix',
        suffix: 'ms-TextField-suffix',
        wrapper: 'ms-TextField-wrapper',
        revealButton: 'ms-TextField-reveal',
        multiline: 'ms-TextField--multiline',
        borderless: 'ms-TextField--borderless',
        underlined: 'ms-TextField--underlined',
        unresizable: 'ms-TextField--unresizable',
        required: 'is-required',
        disabled: 'is-disabled',
        active: 'is-active',
    };
    function getLabelStyles(props) {
        var underlined = props.underlined, disabled = props.disabled, focused = props.focused, theme = props.theme;
        var palette = theme.palette, fonts = theme.fonts;
        return function () {
            var _a;
            return ({
                root: [
                    underlined &&
                        disabled && {
                        color: palette.neutralTertiary,
                    },
                    underlined && {
                        fontSize: fonts.medium.fontSize,
                        marginRight: 8,
                        paddingLeft: 12,
                        paddingRight: 0,
                        lineHeight: '22px',
                        height: 32,
                    },
                    underlined &&
                        focused && {
                        selectors: (_a = {},
                            _a[HighContrastSelector] = {
                                height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px
                            },
                            _a),
                    },
                ],
            });
        };
    }
    function getStyles$l(props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var theme = props.theme, className = props.className, disabled = props.disabled, focused = props.focused, required = props.required, multiline = props.multiline, hasLabel = props.hasLabel, borderless = props.borderless, underlined = props.underlined, hasIcon = props.hasIcon, resizable = props.resizable, hasErrorMessage = props.hasErrorMessage, inputClassName = props.inputClassName, autoAdjustHeight = props.autoAdjustHeight, hasRevealButton = props.hasRevealButton;
        var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
        var classNames = getGlobalClassNames(globalClassNames$2, theme);
        var fieldPrefixSuffix = {
            // Suffix/Prefix are not editable so the disabled slot perfectly fits.
            background: semanticColors.disabledBackground,
            color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,
            display: 'flex',
            alignItems: 'center',
            padding: '0 10px',
            lineHeight: 1,
            whiteSpace: 'nowrap',
            flexShrink: 0,
            selectors: (_a = {},
                _a[HighContrastSelector] = {
                    background: 'Window',
                    color: disabled ? 'GrayText' : 'WindowText',
                },
                _a),
        };
        // placeholder style constants
        var placeholderStyles = [
            {
                color: semanticColors.inputPlaceholderText,
                opacity: 1,
                selectors: (_b = {},
                    _b[HighContrastSelector] = {
                        color: 'GrayText',
                    },
                    _b),
            },
        ];
        var disabledPlaceholderStyles = {
            color: semanticColors.disabledText,
            selectors: (_c = {},
                _c[HighContrastSelector] = {
                    color: 'GrayText',
                },
                _c),
        };
        return {
            root: [
                classNames.root,
                fonts.medium,
                required && classNames.required,
                disabled && classNames.disabled,
                focused && classNames.active,
                multiline && classNames.multiline,
                borderless && classNames.borderless,
                underlined && classNames.underlined,
                normalize$1,
                {
                    position: 'relative',
                },
                className,
            ],
            wrapper: [
                classNames.wrapper,
                underlined && [
                    {
                        display: 'flex',
                        borderBottom: "1px solid " + (!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText),
                        width: '100%',
                    },
                    disabled && {
                        borderBottomColor: semanticColors.disabledBackground,
                        selectors: (_d = {},
                            _d[HighContrastSelector] = tslib.__assign({ borderColor: 'GrayText' }, getHighContrastNoAdjustStyle()),
                            _d),
                    },
                    !disabled && {
                        selectors: {
                            ':hover': {
                                borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,
                                selectors: (_e = {},
                                    _e[HighContrastSelector] = tslib.__assign({ borderBottomColor: 'Highlight' }, getHighContrastNoAdjustStyle()),
                                    _e),
                            },
                        },
                    },
                    focused && [
                        {
                            position: 'relative',
                        },
                        getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, 0, 'borderBottom'),
                    ],
                ],
            ],
            fieldGroup: [
                classNames.fieldGroup,
                normalize$1,
                {
                    border: "1px solid " + semanticColors.inputBorder,
                    borderRadius: effects.roundedCorner2,
                    background: semanticColors.inputBackground,
                    cursor: 'text',
                    height: 32,
                    display: 'flex',
                    flexDirection: 'row',
                    alignItems: 'stretch',
                    position: 'relative',
                },
                multiline && {
                    minHeight: '60px',
                    height: 'auto',
                    display: 'flex',
                },
                !focused &&
                    !disabled && {
                    selectors: {
                        ':hover': {
                            borderColor: semanticColors.inputBorderHovered,
                            selectors: (_f = {},
                                _f[HighContrastSelector] = tslib.__assign({ borderColor: 'Highlight' }, getHighContrastNoAdjustStyle()),
                                _f),
                        },
                    },
                },
                focused &&
                    !underlined &&
                    getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, effects.roundedCorner2),
                disabled && {
                    borderColor: semanticColors.disabledBackground,
                    selectors: (_g = {},
                        _g[HighContrastSelector] = tslib.__assign({ borderColor: 'GrayText' }, getHighContrastNoAdjustStyle()),
                        _g),
                    cursor: 'default',
                },
                borderless && {
                    border: 'none',
                },
                borderless &&
                    focused && {
                    border: 'none',
                    selectors: {
                        ':after': {
                            border: 'none',
                        },
                    },
                },
                underlined && {
                    flex: '1 1 0px',
                    border: 'none',
                    textAlign: 'left',
                },
                underlined &&
                    disabled && {
                    backgroundColor: 'transparent',
                },
                hasErrorMessage &&
                    !underlined && {
                    borderColor: semanticColors.errorText,
                    selectors: {
                        '&:hover': {
                            borderColor: semanticColors.errorText,
                        },
                    },
                },
                !hasLabel &&
                    required && {
                    selectors: (_h = {
                            ':before': {
                                content: "'*'",
                                color: semanticColors.errorText,
                                position: 'absolute',
                                top: -5,
                                right: -10,
                            }
                        },
                        _h[HighContrastSelector] = {
                            selectors: {
                                ':before': {
                                    color: 'WindowText',
                                    right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.
                                },
                            },
                        },
                        _h),
                },
            ],
            field: [
                fonts.medium,
                classNames.field,
                normalize$1,
                {
                    borderRadius: 0,
                    border: 'none',
                    background: 'none',
                    backgroundColor: 'transparent',
                    color: semanticColors.inputText,
                    padding: '0 8px',
                    width: '100%',
                    minWidth: 0,
                    textOverflow: 'ellipsis',
                    outline: 0,
                    selectors: (_j = {
                            '&:active, &:focus, &:hover': { outline: 0 },
                            '::-ms-clear': {
                                display: 'none',
                            }
                        },
                        _j[HighContrastSelector] = {
                            background: 'Window',
                            color: disabled ? 'GrayText' : 'WindowText',
                        },
                        _j),
                },
                getPlaceholderStyles(placeholderStyles),
                multiline &&
                    !resizable && [
                    classNames.unresizable,
                    {
                        resize: 'none',
                    },
                ],
                multiline && {
                    minHeight: 'inherit',
                    lineHeight: 17,
                    flexGrow: 1,
                    paddingTop: 6,
                    paddingBottom: 6,
                    overflow: 'auto',
                    width: '100%',
                },
                multiline &&
                    autoAdjustHeight && {
                    overflow: 'hidden',
                },
                hasIcon &&
                    !hasRevealButton && {
                    paddingRight: 24,
                },
                multiline &&
                    hasIcon && {
                    paddingRight: 40,
                },
                disabled && [
                    {
                        backgroundColor: semanticColors.disabledBackground,
                        color: semanticColors.disabledText,
                        borderColor: semanticColors.disabledBackground,
                    },
                    getPlaceholderStyles(disabledPlaceholderStyles),
                ],
                underlined && {
                    textAlign: 'left',
                },
                focused &&
                    !borderless && {
                    selectors: (_k = {},
                        _k[HighContrastSelector] = {
                            paddingLeft: 11,
                            paddingRight: 11,
                        },
                        _k),
                },
                focused &&
                    multiline &&
                    !borderless && {
                    selectors: (_l = {},
                        _l[HighContrastSelector] = {
                            paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).
                        },
                        _l),
                },
                inputClassName,
            ],
            icon: [
                multiline && {
                    paddingRight: 24,
                    alignItems: 'flex-end',
                },
                {
                    pointerEvents: 'none',
                    position: 'absolute',
                    bottom: 6,
                    right: 8,
                    top: 'auto',
                    fontSize: IconFontSizes.medium,
                    lineHeight: 18,
                },
                disabled && {
                    color: semanticColors.disabledText,
                },
            ],
            description: [
                classNames.description,
                {
                    color: semanticColors.bodySubtext,
                    fontSize: fonts.xSmall.fontSize,
                },
            ],
            errorMessage: [
                classNames.errorMessage,
                AnimationClassNames.slideDownIn20,
                fonts.small,
                {
                    color: semanticColors.errorText,
                    margin: 0,
                    paddingTop: 5,
                    display: 'flex',
                    alignItems: 'center',
                },
            ],
            prefix: [classNames.prefix, fieldPrefixSuffix],
            suffix: [classNames.suffix, fieldPrefixSuffix],
            revealButton: [
                classNames.revealButton,
                'ms-Button',
                'ms-Button--icon',
                getFocusStyle(theme, { inset: 1 }),
                {
                    height: 30,
                    width: 32,
                    border: 'none',
                    padding: '0px 4px',
                    backgroundColor: 'transparent',
                    color: semanticColors.link,
                    selectors: {
                        ':hover': {
                            outline: 0,
                            color: semanticColors.primaryButtonBackgroundHovered,
                            backgroundColor: semanticColors.buttonBackgroundHovered,
                            selectors: (_m = {},
                                _m[HighContrastSelector] = {
                                    borderColor: 'Highlight',
                                    color: 'Highlight',
                                },
                                _m),
                        },
                        ':focus': { outline: 0 },
                    },
                },
                hasIcon && {
                    marginRight: 28,
                },
            ],
            revealSpan: {
                display: 'flex',
                height: '100%',
                alignItems: 'center',
            },
            revealIcon: {
                margin: '0px 4px',
                pointerEvents: 'none',
                bottom: 6,
                right: 8,
                top: 'auto',
                fontSize: IconFontSizes.medium,
                lineHeight: 18,
            },
            subComponentStyles: {
                label: getLabelStyles(props),
            },
        };
    }

    var TextField$1 = styled(TextFieldBase, getStyles$l, undefined, {
        scope: 'TextField',
    });

    var DEFAULT_MASK_FORMAT_CHARS = {
        '9': /[0-9]/,
        a: /[a-zA-Z]/,
        '*': /[a-zA-Z0-9]/,
    };
    /**
     * Takes in the mask string and the formatCharacters and returns an array of MaskValues
     * Example:
     * mask = 'Phone Number: (999) - 9999'
     * return = [
     *    { value: undefined, displayIndex: 16, format: /[0-9]/ },
     *    { value: undefined, displayIndex: 17, format: /[0-9]/ },
     *    { value: undefined, displayIndex: 18, format: /[0-9]/ },
     *    { value: undefined, displayIndex: 22, format: /[0-9]/ },
     * ]
     *
     * @param mask The string use to define the format of the displayed maskedValue.
     * @param formatChars An object defining how certain characters in the mask should accept input.
     */
    function parseMask(mask, formatChars) {
        if (formatChars === void 0) { formatChars = DEFAULT_MASK_FORMAT_CHARS; }
        if (!mask) {
            return [];
        }
        var maskCharData = [];
        // Count the escape characters in the mask string.
        var escapedChars = 0;
        for (var i = 0; i + escapedChars < mask.length; i++) {
            var maskChar = mask.charAt(i + escapedChars);
            if (maskChar === '\\') {
                escapedChars++;
            }
            else {
                // Check if the maskChar is a format character.
                var maskFormat = formatChars[maskChar];
                if (maskFormat) {
                    maskCharData.push({
                        /**
                         * Do not add escapedChars to the displayIndex.
                         * The index refers to a position in the mask's displayValue.
                         * Since the backslashes don't appear in the displayValue,
                         * we do not add them to the charData displayIndex.
                         */
                        displayIndex: i,
                        format: maskFormat,
                    });
                }
            }
        }
        return maskCharData;
    }
    /**
     * Takes in the mask string, an array of MaskValues, and the maskCharacter
     * returns the mask string formatted with the input values and maskCharacter.
     * If the maskChar is undefined, the maskDisplay is truncated to the last filled format character.
     * Example:
     * mask = 'Phone Number: (999) 999 - 9999'
     * maskCharData = '12345'
     * maskChar = '_'
     * return = 'Phone Number: (123) 45_ - ___'
     *
     * Example:
     * mask = 'Phone Number: (999) 999 - 9999'
     * value = '12345'
     * maskChar = undefined
     * return = 'Phone Number: (123) 45'
     *
     * @param mask The string use to define the format of the displayed maskedValue.
     * @param maskCharData The input values to insert into the mask string for displaying.
     * @param maskChar? A character to display in place of unfilled mask format characters.
     */
    function getMaskDisplay(mask, maskCharData, maskChar) {
        var maskDisplay = mask;
        if (!maskDisplay) {
            return '';
        }
        // Remove all backslashes
        maskDisplay = maskDisplay.replace(/\\/g, '');
        // lastDisplayIndex is is used to truncate the string if necessary.
        var lastDisplayIndex = 0;
        if (maskCharData.length > 0) {
            lastDisplayIndex = maskCharData[0].displayIndex - 1;
        }
        /**
         * For each input value, replace the character in the maskDisplay with the value.
         * If there is no value set for the format character, use the maskChar.
         */
        for (var _i = 0, maskCharData_1 = maskCharData; _i < maskCharData_1.length; _i++) {
            var charData = maskCharData_1[_i];
            var nextChar = ' ';
            if (charData.value) {
                nextChar = charData.value;
                if (charData.displayIndex > lastDisplayIndex) {
                    lastDisplayIndex = charData.displayIndex;
                }
            }
            else {
                if (maskChar) {
                    nextChar = maskChar;
                }
            }
            // Insert the character into the maskdisplay at its corresponding index
            maskDisplay = maskDisplay.slice(0, charData.displayIndex) + nextChar + maskDisplay.slice(charData.displayIndex + 1);
        }
        // Cut off all mask characters after the last filled format value
        if (!maskChar) {
            maskDisplay = maskDisplay.slice(0, lastDisplayIndex + 1);
        }
        return maskDisplay;
    }
    /**
     * Get the next format index right of or at a specified index.
     * If no index exists, returns the rightmost index.
     * @param maskCharData
     * @param index
     */
    function getRightFormatIndex(maskCharData, index) {
        for (var i = 0; i < maskCharData.length; i++) {
            if (maskCharData[i].displayIndex >= index) {
                return maskCharData[i].displayIndex;
            }
        }
        return maskCharData[maskCharData.length - 1].displayIndex;
    }
    /**
     * Get the next format index left of a specified index.
     * If no index exists, returns the leftmost index.
     * @param maskCharData
     * @param index
     */
    function getLeftFormatIndex(maskCharData, index) {
        for (var i = maskCharData.length - 1; i >= 0; i--) {
            if (maskCharData[i].displayIndex < index) {
                return maskCharData[i].displayIndex;
            }
        }
        return maskCharData[0].displayIndex;
    }
    /**
     * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.
     * maskCharData is modified inline and also returned.
     * @param maskCharData
     * @param selectionStart
     * @param selectionCount
     */
    function clearRange(maskCharData, selectionStart, selectionCount) {
        for (var i = 0; i < maskCharData.length; i++) {
            if (maskCharData[i].displayIndex >= selectionStart) {
                if (maskCharData[i].displayIndex >= selectionStart + selectionCount) {
                    break;
                }
                maskCharData[i].value = undefined;
            }
        }
        return maskCharData;
    }
    /**
     * Deletes the input character at or after a specified index and returns the new array of charData
     * maskCharData is modified inline and also returned.
     * @param maskCharData
     * @param selectionStart
     */
    function clearNext(maskCharData, selectionStart) {
        for (var i = 0; i < maskCharData.length; i++) {
            if (maskCharData[i].displayIndex >= selectionStart) {
                maskCharData[i].value = undefined;
                break;
            }
        }
        return maskCharData;
    }
    /**
     * Deletes the input character before a specified index and returns the new array of charData
     * maskCharData is modified inline and also returned.
     * @param maskCharData
     * @param selectionStart
     */
    function clearPrev(maskCharData, selectionStart) {
        for (var i = maskCharData.length - 1; i >= 0; i--) {
            if (maskCharData[i].displayIndex < selectionStart) {
                maskCharData[i].value = undefined;
                break;
            }
        }
        return maskCharData;
    }
    /**
     * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.
     * Modifies the maskCharData inplace with the passed string and returns the display index of the
     * next format character after the inserted string.
     * @param maskCharData
     * @param selectionStart
     * @param selectionCount
     * @return The displayIndex of the next format character
     */
    function insertString(maskCharData, selectionStart, newString) {
        var stringIndex = 0;
        var nextIndex = 0;
        var isStringInserted = false;
        // Iterate through _maskCharData finding values with a displayIndex after the specified range start
        for (var i = 0; i < maskCharData.length && stringIndex < newString.length; i++) {
            if (maskCharData[i].displayIndex >= selectionStart) {
                isStringInserted = true;
                nextIndex = maskCharData[i].displayIndex;
                // Find the next character in the newString that matches the format
                while (stringIndex < newString.length) {
                    // If the character matches the format regexp, set the maskCharData to the new character
                    if (maskCharData[i].format.test(newString.charAt(stringIndex))) {
                        maskCharData[i].value = newString.charAt(stringIndex++);
                        // Set the nextIndex to the display index of the next mask format character.
                        if (i + 1 < maskCharData.length) {
                            nextIndex = maskCharData[i + 1].displayIndex;
                        }
                        else {
                            nextIndex++;
                        }
                        break;
                    }
                    stringIndex++;
                }
            }
        }
        return isStringInserted ? nextIndex : selectionStart;
    }

    var COMPONENT_NAME$8 = 'MaskedTextField';
    var useComponentRef$2 = function (componentRef, internalState, textField) {
        React__namespace.useImperativeHandle(componentRef, function () { return ({
            get value() {
                var value = '';
                for (var i = 0; i < internalState.maskCharData.length; i++) {
                    if (!internalState.maskCharData[i].value) {
                        return undefined;
                    }
                    value += internalState.maskCharData[i].value;
                }
                return value;
            },
            get selectionStart() {
                return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;
            },
            get selectionEnd() {
                return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;
            },
            focus: function () {
                textField.current && textField.current.focus();
            },
            blur: function () {
                textField.current && textField.current.blur();
            },
            select: function () {
                textField.current && textField.current.select();
            },
            setSelectionStart: function (value) {
                textField.current && textField.current.setSelectionStart(value);
            },
            setSelectionEnd: function (value) {
                textField.current && textField.current.setSelectionEnd(value);
            },
            setSelectionRange: function (start, end) {
                textField.current && textField.current.setSelectionRange(start, end);
            },
        }); }, [internalState, textField]);
    };
    var DEFAULT_MASK_CHAR = '_';
    var MaskedTextField = React__namespace.forwardRef(function (props, ref) {
        var textField = React__namespace.useRef(null);
        var componentRef = props.componentRef, onFocus = props.onFocus, onBlur = props.onBlur, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, onChange = props.onChange, onPaste = props.onPaste, onKeyDown = props.onKeyDown, mask = props.mask, _a = props.maskChar, maskChar = _a === void 0 ? DEFAULT_MASK_CHAR : _a, _b = props.maskFormat, maskFormat = _b === void 0 ? DEFAULT_MASK_FORMAT_CHARS : _b, value = props.value;
        var internalState = useConst(function () { return ({
            maskCharData: parseMask(mask, maskFormat),
            isFocused: false,
            moveCursorOnMouseUp: false,
            changeSelectionData: null,
        }); });
        /** The index into the rendered value of the first unfilled format character */
        var _c = React__namespace.useState(), maskCursorPosition = _c[0], setMaskCursorPosition = _c[1];
        /**
         * The mask string formatted with the input value.
         * This is what is displayed inside the TextField
         * @example
         *  `Phone Number: 12_ - 4___`
         */
        var _d = React__namespace.useState(function () {
            return getMaskDisplay(mask, internalState.maskCharData, maskChar);
        }), displayValue = _d[0], setDisplayValue = _d[1];
        var setValue = React__namespace.useCallback(function (newValue) {
            var valueIndex = 0;
            var charDataIndex = 0;
            while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {
                // Test if the next character in the new value fits the next format character
                var testVal = newValue[valueIndex];
                if (internalState.maskCharData[charDataIndex].format.test(testVal)) {
                    internalState.maskCharData[charDataIndex].value = testVal;
                    charDataIndex++;
                }
                valueIndex++;
            }
        }, [internalState]);
        var handleFocus = React__namespace.useCallback(function (ev) {
            onFocus === null || onFocus === void 0 ? void 0 : onFocus(ev);
            internalState.isFocused = true;
            // Move the cursor position to the leftmost unfilled position
            for (var i = 0; i < internalState.maskCharData.length; i++) {
                if (!internalState.maskCharData[i].value) {
                    setMaskCursorPosition(internalState.maskCharData[i].displayIndex);
                    break;
                }
            }
        }, [internalState, onFocus]);
        var handleBlur = React__namespace.useCallback(function (ev) {
            onBlur === null || onBlur === void 0 ? void 0 : onBlur(ev);
            internalState.isFocused = false;
            internalState.moveCursorOnMouseUp = true;
        }, [internalState, onBlur]);
        var handleMouseDown = React__namespace.useCallback(function (ev) {
            onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(ev);
            if (!internalState.isFocused) {
                internalState.moveCursorOnMouseUp = true;
            }
        }, [internalState, onMouseDown]);
        var handleMouseUp = React__namespace.useCallback(function (ev) {
            onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(ev);
            // Move the cursor on mouseUp after focusing the textField
            if (internalState.moveCursorOnMouseUp) {
                internalState.moveCursorOnMouseUp = false;
                // Move the cursor position to the rightmost unfilled position
                for (var i = 0; i < internalState.maskCharData.length; i++) {
                    if (!internalState.maskCharData[i].value) {
                        setMaskCursorPosition(internalState.maskCharData[i].displayIndex);
                        break;
                    }
                }
            }
        }, [internalState, onMouseUp]);
        var handleInputChange = React__namespace.useCallback(function (ev, inputValue) {
            if (internalState.changeSelectionData === null && textField.current) {
                internalState.changeSelectionData = {
                    changeType: 'default',
                    selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,
                    selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1,
                };
            }
            if (!internalState.changeSelectionData) {
                return;
            }
            // The initial value of cursorPos does not matter
            var cursorPos = 0;
            var _a = internalState.changeSelectionData, changeType = _a.changeType, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;
            if (changeType === 'textPasted') {
                var charsSelected = selectionEnd - selectionStart;
                var charCount = inputValue.length + charsSelected - displayValue.length;
                var startPos = selectionStart;
                var pastedString = inputValue.substr(startPos, charCount);
                // Clear any selected characters
                if (charsSelected) {
                    internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);
                }
                cursorPos = insertString(internalState.maskCharData, startPos, pastedString);
            }
            else if (changeType === 'delete' || changeType === 'backspace') {
                // isDel is true If the characters are removed LTR, otherwise RTL
                var isDel = changeType === 'delete';
                var charCount = selectionEnd - selectionStart;
                if (charCount) {
                    // charCount is > 0 if range was deleted
                    internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);
                    cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);
                }
                else {
                    // If charCount === 0, there was no selection and a single character was deleted
                    if (isDel) {
                        internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);
                        cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);
                    }
                    else {
                        internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);
                        cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);
                    }
                }
            }
            else if (inputValue.length > displayValue.length) {
                // This case is if the user added characters
                var charCount = inputValue.length - displayValue.length;
                var startPos = selectionEnd - charCount;
                var enteredString = inputValue.substr(startPos, charCount);
                cursorPos = insertString(internalState.maskCharData, startPos, enteredString);
            }
            else if (inputValue.length <= displayValue.length) {
                /**
                 * This case is reached only if the user has selected a block of 1 or more
                 * characters and input a character replacing the characters they've selected.
                 */
                var charCount = 1;
                var selectCount = displayValue.length + charCount - inputValue.length;
                var startPos = selectionEnd - charCount;
                var enteredString = inputValue.substr(startPos, charCount);
                // Clear the selected range
                internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);
                // Insert the printed character
                cursorPos = insertString(internalState.maskCharData, startPos, enteredString);
            }
            internalState.changeSelectionData = null;
            var newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);
            setDisplayValue(newValue);
            setMaskCursorPosition(cursorPos);
            // Perform onChange after input has been processed. Return value is expected to be the displayed text
            onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);
        }, [displayValue.length, internalState, mask, maskChar, onChange]);
        var handleKeyDown = React__namespace.useCallback(function (ev) {
            onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);
            internalState.changeSelectionData = null;
            if (textField.current && textField.current.value) {
                // eslint-disable-next-line deprecation/deprecation
                var keyCode = ev.keyCode, ctrlKey = ev.ctrlKey, metaKey = ev.metaKey;
                // Ignore ctrl and meta keydown
                if (ctrlKey || metaKey) {
                    return;
                }
                // On backspace or delete, store the selection and the keyCode
                if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {
                    var selectionStart = ev.target.selectionStart;
                    var selectionEnd = ev.target.selectionEnd;
                    // Check if backspace or delete press is valid.
                    if (!(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&
                        !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)) {
                        return;
                    }
                    internalState.changeSelectionData = {
                        changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',
                        selectionStart: selectionStart !== null ? selectionStart : -1,
                        selectionEnd: selectionEnd !== null ? selectionEnd : -1,
                    };
                }
            }
        }, [internalState, onKeyDown]);
        var handlePaste = React__namespace.useCallback(function (ev) {
            onPaste === null || onPaste === void 0 ? void 0 : onPaste(ev);
            var selectionStart = ev.target.selectionStart;
            var selectionEnd = ev.target.selectionEnd;
            // Store the paste selection range
            internalState.changeSelectionData = {
                changeType: 'textPasted',
                selectionStart: selectionStart !== null ? selectionStart : -1,
                selectionEnd: selectionEnd !== null ? selectionEnd : -1,
            };
        }, [internalState, onPaste]);
        // Updates the display value if mask or value props change.
        React__namespace.useEffect(function () {
            internalState.maskCharData = parseMask(mask, maskFormat);
            value !== undefined && setValue(value);
            setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));
            // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.
        }, [mask, value]);
        // Run before browser paint to avoid flickering from selection reset.
        useIsomorphicLayoutEffect(function () {
            // Move the cursor to position before paint.
            if (maskCursorPosition !== undefined && textField.current) {
                textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);
            }
        }, [maskCursorPosition]);
        // Run after browser paint.
        React__namespace.useEffect(function () {
            // Move the cursor to the start of the mask format after values update.
            if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {
                textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);
            }
        });
        useComponentRef$2(componentRef, internalState, textField);
        return (React__namespace.createElement(TextField$1, tslib.__assign({}, props, { elementRef: ref, onFocus: handleFocus, onBlur: handleBlur, onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onChange: handleInputChange, onKeyDown: handleKeyDown, onPaste: handlePaste, value: displayValue || '', componentRef: textField })));
    });
    MaskedTextField.displayName = COMPONENT_NAME$8;

    var _a$4, _b$3;
    var ComboBoxHeight = 32;
    var ComboBoxLineHeight = 30;
    var ComboBoxCaretDownWidth = 32;
    var ComboBoxOptionHeight = 36;
    var getDisabledStyles = memoizeFunction(function (theme) {
        var _a;
        var semanticColors = theme.semanticColors;
        return {
            backgroundColor: semanticColors.disabledBackground,
            color: semanticColors.disabledText,
            cursor: 'default',
            selectors: (_a = {
                    ':after': {
                        borderColor: semanticColors.disabledBackground,
                    }
                },
                _a[HighContrastSelector] = {
                    color: 'GrayText',
                    selectors: {
                        ':after': {
                            borderColor: 'GrayText',
                        },
                    },
                },
                _a),
        };
    });
    var listOptionHighContrastStyles = {
        selectors: (_a$4 = {},
            _a$4[HighContrastSelector] = tslib.__assign({ backgroundColor: 'Highlight', borderColor: 'Highlight', color: 'HighlightText' }, getHighContrastNoAdjustStyle()),
            _a$4),
    };
    var inputHighContrastStyles = {
        selectors: (_b$3 = {},
            _b$3[HighContrastSelector] = tslib.__assign({ color: 'WindowText', backgroundColor: 'Window' }, getHighContrastNoAdjustStyle()),
            _b$3),
    };
    var getOptionStyles = memoizeFunction(function (theme, customStylesForAllOptions, customOptionStylesForCurrentOption, isPending, isHidden, isSelected) {
        var _a;
        var palette = theme.palette, semanticColors = theme.semanticColors;
        var option = {
            textHoveredColor: semanticColors.menuItemTextHovered,
            textSelectedColor: palette.neutralDark,
            textDisabledColor: semanticColors.disabledText,
            backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,
            backgroundPressedColor: semanticColors.menuItemBackgroundPressed,
        };
        var optionStyles = {
            root: [
                theme.fonts.medium,
                {
                    backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',
                    boxSizing: 'border-box',
                    cursor: 'pointer',
                    display: isHidden ? 'none' : 'block',
                    width: '100%',
                    height: 'auto',
                    minHeight: ComboBoxOptionHeight,
                    lineHeight: '20px',
                    padding: '0 8px',
                    position: 'relative',
                    borderWidth: '1px',
                    borderStyle: 'solid',
                    borderColor: 'transparent',
                    borderRadius: 0,
                    wordWrap: 'break-word',
                    overflowWrap: 'break-word',
                    textAlign: 'left',
                    selectors: tslib.__assign(tslib.__assign((_a = {}, _a[HighContrastSelector] = {
                        border: 'none',
                        borderColor: 'Background',
                    }, _a), (!isHidden && {
                        '&.ms-Checkbox': {
                            display: 'flex',
                            alignItems: 'center',
                        },
                    })), { '&.ms-Button--command:hover:active': {
                            backgroundColor: option.backgroundPressedColor,
                        }, '.ms-Checkbox-label': {
                            width: '100%',
                        } }),
                },
                isSelected
                    ? [
                        {
                            backgroundColor: 'transparent',
                            color: option.textSelectedColor,
                            selectors: {
                                ':hover': [
                                    {
                                        backgroundColor: option.backgroundHoveredColor,
                                    },
                                    listOptionHighContrastStyles,
                                ],
                            },
                        },
                        getFocusStyle(theme, { inset: -1, isFocusedOnly: false }),
                        listOptionHighContrastStyles,
                    ]
                    : [],
            ],
            rootHovered: {
                backgroundColor: option.backgroundHoveredColor,
                color: option.textHoveredColor,
            },
            rootFocused: {
                backgroundColor: option.backgroundHoveredColor,
            },
            rootDisabled: {
                color: option.textDisabledColor,
                cursor: 'default',
            },
            optionText: {
                overflow: 'hidden',
                whiteSpace: 'nowrap',
                textOverflow: 'ellipsis',
                minWidth: '0px',
                maxWidth: '100%',
                wordWrap: 'break-word',
                overflowWrap: 'break-word',
                display: 'inline-block',
            },
            optionTextWrapper: {
                maxWidth: '100%',
                display: 'flex',
                alignItems: 'center',
            },
        };
        return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);
    });
    var getCaretDownButtonStyles = memoizeFunction(function (theme, customStyles) {
        var _a, _b;
        var semanticColors = theme.semanticColors, fonts = theme.fonts;
        var caret = {
            buttonTextColor: semanticColors.bodySubtext,
            buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,
            buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,
            buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,
            buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered,
        };
        var buttonHighContrastStyles = {
            selectors: (_a = {},
                _a[HighContrastSelector] = tslib.__assign({ backgroundColor: 'Highlight', borderColor: 'Highlight', color: 'HighlightText' }, getHighContrastNoAdjustStyle()),
                _a),
        };
        var styles = {
            root: {
                color: caret.buttonTextColor,
                fontSize: fonts.small.fontSize,
                position: 'absolute',
                top: 0,
                height: '100%',
                lineHeight: ComboBoxLineHeight,
                width: ComboBoxCaretDownWidth,
                textAlign: 'center',
                cursor: 'default',
                selectors: (_b = {},
                    _b[HighContrastSelector] = tslib.__assign({ backgroundColor: 'ButtonFace', borderColor: 'ButtonText', color: 'ButtonText' }, getHighContrastNoAdjustStyle()),
                    _b),
            },
            icon: {
                fontSize: fonts.small.fontSize,
            },
            rootHovered: [
                {
                    backgroundColor: caret.buttonBackgroundHoveredColor,
                    color: caret.buttonTextHoveredCheckedColor,
                    cursor: 'pointer',
                },
                buttonHighContrastStyles,
            ],
            rootPressed: [
                {
                    backgroundColor: caret.buttonBackgroundCheckedColor,
                    color: caret.buttonTextHoveredCheckedColor,
                },
                buttonHighContrastStyles,
            ],
            rootChecked: [
                {
                    backgroundColor: caret.buttonBackgroundCheckedColor,
                    color: caret.buttonTextHoveredCheckedColor,
                },
                buttonHighContrastStyles,
            ],
            rootCheckedHovered: [
                {
                    backgroundColor: caret.buttonBackgroundCheckedHoveredColor,
                    color: caret.buttonTextHoveredCheckedColor,
                },
                buttonHighContrastStyles,
            ],
            rootDisabled: [
                getDisabledStyles(theme),
                {
                    position: 'absolute',
                },
            ],
        };
        return concatStyleSets(styles, customStyles);
    });
    var getStyles$k = memoizeFunction(function (theme, customStyles, comboBoxOptionWidth) {
        var _a, _b, _c, _d, _e, _f;
        var semanticColors = theme.semanticColors, fonts = theme.fonts, effects = theme.effects;
        var root = {
            textColor: semanticColors.inputText,
            borderColor: semanticColors.inputBorder,
            borderHoveredColor: semanticColors.inputBorderHovered,
            borderPressedColor: semanticColors.inputFocusBorderAlt,
            borderFocusedColor: semanticColors.inputFocusBorderAlt,
            backgroundColor: semanticColors.inputBackground,
            erroredColor: semanticColors.errorText,
        };
        var option = {
            headerTextColor: semanticColors.menuHeader,
            dividerBorderColor: semanticColors.bodyDivider,
        };
        // placeholder style variables
        var placeholderHighContrastStyles = {
            selectors: (_a = {},
                _a[HighContrastSelector] = {
                    color: 'GrayText',
                },
                _a),
        };
        var placeholderStyles = [
            {
                color: semanticColors.inputPlaceholderText,
            },
            placeholderHighContrastStyles,
        ];
        var placeholderStylesHovered = [
            {
                color: semanticColors.inputTextHovered,
            },
            placeholderHighContrastStyles,
        ];
        var disabledPlaceholderStyles = [
            {
                color: semanticColors.disabledText,
            },
            placeholderHighContrastStyles,
        ];
        var ComboBoxRootHighContrastFocused = tslib.__assign(tslib.__assign({ color: 'HighlightText', backgroundColor: 'Window' }, getHighContrastNoAdjustStyle()), { selectors: {
                ':after': {
                    borderColor: 'Highlight',
                },
            } });
        var focusBorderStyles = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);
        var styles = {
            container: {},
            label: {},
            labelDisabled: {},
            root: [
                theme.fonts.medium,
                {
                    boxShadow: 'none',
                    marginLeft: '0',
                    paddingRight: ComboBoxCaretDownWidth,
                    paddingLeft: 9,
                    color: root.textColor,
                    position: 'relative',
                    outline: '0',
                    userSelect: 'none',
                    backgroundColor: root.backgroundColor,
                    cursor: 'text',
                    display: 'block',
                    height: ComboBoxHeight,
                    whiteSpace: 'nowrap',
                    textOverflow: 'ellipsis',
                    boxSizing: 'border-box',
                    selectors: {
                        '.ms-Label': {
                            display: 'inline-block',
                            marginBottom: '8px',
                        },
                        '&.is-open': {
                            selectors: (_b = {},
                                _b[HighContrastSelector] = ComboBoxRootHighContrastFocused,
                                _b),
                        },
                        // setting border using pseudo-element here in order to
                        // prevent chevron button to overlap ComboBox border under certain resolutions
                        ':after': {
                            pointerEvents: 'none',
                            content: "''",
                            position: 'absolute',
                            left: 0,
                            top: 0,
                            bottom: 0,
                            right: 0,
                            borderWidth: '1px',
                            borderStyle: 'solid',
                            borderColor: root.borderColor,
                            borderRadius: effects.roundedCorner2,
                        },
                    },
                },
            ],
            rootHovered: {
                selectors: (_c = {
                        ':after': {
                            borderColor: root.borderHoveredColor,
                        },
                        '.ms-ComboBox-Input': [
                            {
                                color: semanticColors.inputTextHovered,
                            },
                            getPlaceholderStyles(placeholderStylesHovered),
                            inputHighContrastStyles,
                        ]
                    },
                    _c[HighContrastSelector] = tslib.__assign(tslib.__assign({ color: 'HighlightText', backgroundColor: 'Window' }, getHighContrastNoAdjustStyle()), { selectors: {
                            ':after': {
                                borderColor: 'Highlight',
                            },
                        } }),
                    _c),
            },
            rootPressed: [
                {
                    position: 'relative',
                    selectors: (_d = {},
                        _d[HighContrastSelector] = ComboBoxRootHighContrastFocused,
                        _d),
                },
            ],
            rootFocused: [
                {
                    selectors: (_e = {
                            '.ms-ComboBox-Input': [
                                {
                                    color: semanticColors.inputTextHovered,
                                },
                                inputHighContrastStyles,
                            ]
                        },
                        _e[HighContrastSelector] = ComboBoxRootHighContrastFocused,
                        _e),
                },
                focusBorderStyles,
            ],
            rootDisabled: getDisabledStyles(theme),
            rootError: {
                selectors: {
                    ':after': {
                        borderColor: root.erroredColor,
                    },
                    ':hover:after': {
                        borderColor: semanticColors.inputBorderHovered,
                    },
                },
            },
            rootDisallowFreeForm: {},
            input: [
                getPlaceholderStyles(placeholderStyles),
                {
                    backgroundColor: root.backgroundColor,
                    color: root.textColor,
                    boxSizing: 'border-box',
                    width: '100%',
                    height: '100%',
                    borderStyle: 'none',
                    outline: 'none',
                    font: 'inherit',
                    textOverflow: 'ellipsis',
                    padding: '0',
                    selectors: {
                        '::-ms-clear': {
                            display: 'none',
                        },
                    },
                },
                inputHighContrastStyles,
            ],
            inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],
            errorMessage: [
                theme.fonts.small,
                {
                    color: root.erroredColor,
                    marginTop: '5px',
                },
            ],
            callout: {
                boxShadow: effects.elevation8,
            },
            optionsContainerWrapper: {
                width: comboBoxOptionWidth,
            },
            optionsContainer: {
                display: 'block',
            },
            screenReaderText: hiddenContentStyle,
            header: [
                fonts.medium,
                {
                    fontWeight: FontWeights.semibold,
                    color: option.headerTextColor,
                    backgroundColor: 'none',
                    borderStyle: 'none',
                    height: ComboBoxOptionHeight,
                    lineHeight: ComboBoxOptionHeight,
                    cursor: 'default',
                    padding: '0 8px',
                    userSelect: 'none',
                    textAlign: 'left',
                    selectors: (_f = {},
                        _f[HighContrastSelector] = tslib.__assign({ color: 'GrayText' }, getHighContrastNoAdjustStyle()),
                        _f),
                },
            ],
            divider: {
                height: 1,
                backgroundColor: option.dividerBorderColor,
            },
        };
        return concatStyleSets(styles, customStyles);
    });

    var getClassNames$17 = memoizeFunction(function (styles, className, isOpen, disabled, required, focused, allowFreeForm, hasErrorMessage) {
        return {
            container: mergeStyles('ms-ComboBox-container', className, styles.container),
            label: mergeStyles(styles.label, disabled && styles.labelDisabled),
            root: mergeStyles('ms-ComboBox', hasErrorMessage ? styles.rootError : isOpen && 'is-open', required && 'is-required', styles.root, !allowFreeForm && styles.rootDisallowFreeForm, hasErrorMessage && !focused ? styles.rootError : !disabled && focused && styles.rootFocused, !disabled && {
                selectors: {
                    ':hover': hasErrorMessage ? styles.rootError : !isOpen && !focused && styles.rootHovered,
                    ':active': hasErrorMessage ? styles.rootError : styles.rootPressed,
                    ':focus': hasErrorMessage ? styles.rootError : styles.rootFocused,
                },
            }, disabled && ['is-disabled', styles.rootDisabled]),
            input: mergeStyles('ms-ComboBox-Input', styles.input, disabled && styles.inputDisabled),
            errorMessage: mergeStyles(styles.errorMessage),
            callout: mergeStyles('ms-ComboBox-callout', styles.callout),
            optionsContainerWrapper: mergeStyles('ms-ComboBox-optionsContainerWrapper', styles.optionsContainerWrapper),
            optionsContainer: mergeStyles('ms-ComboBox-optionsContainer', styles.optionsContainer),
            header: mergeStyles('ms-ComboBox-header', styles.header),
            divider: mergeStyles('ms-ComboBox-divider', styles.divider),
            screenReaderText: mergeStyles(styles.screenReaderText),
        };
    });
    var getComboBoxOptionClassNames = memoizeFunction(function (styles) {
        return {
            optionText: mergeStyles('ms-ComboBox-optionText', styles.optionText),
            root: mergeStyles('ms-ComboBox-option', styles.root, {
                selectors: {
                    ':hover': styles.rootHovered,
                    ':focus': styles.rootFocused,
                    ':active': styles.rootPressed,
                },
            }),
            optionTextWrapper: mergeStyles(styles.optionTextWrapper),
        };
    });

    function getAllSelectedOptions(options, selectedIndices) {
        var selectedOptions = [];
        for (var _i = 0, selectedIndices_1 = selectedIndices; _i < selectedIndices_1.length; _i++) {
            var index = selectedIndices_1[_i];
            var option = options[index];
            if (option) {
                selectedOptions.push(option);
            }
        }
        return selectedOptions;
    }

    var SelectableOptionMenuItemType;
    (function (SelectableOptionMenuItemType) {
        SelectableOptionMenuItemType[SelectableOptionMenuItemType["Normal"] = 0] = "Normal";
        SelectableOptionMenuItemType[SelectableOptionMenuItemType["Divider"] = 1] = "Divider";
        SelectableOptionMenuItemType[SelectableOptionMenuItemType["Header"] = 2] = "Header";
        SelectableOptionMenuItemType[SelectableOptionMenuItemType["SelectAll"] = 3] = "SelectAll";
    })(SelectableOptionMenuItemType || (SelectableOptionMenuItemType = {}));

    var SearchDirection;
    (function (SearchDirection) {
        SearchDirection[SearchDirection["backward"] = -1] = "backward";
        SearchDirection[SearchDirection["none"] = 0] = "none";
        SearchDirection[SearchDirection["forward"] = 1] = "forward";
    })(SearchDirection || (SearchDirection = {}));
    var HoverStatus;
    (function (HoverStatus) {
        /** Used when the user was hovering and has since moused out of the menu items */
        HoverStatus[HoverStatus["clearAll"] = -2] = "clearAll";
        /** Default "normal" state, when no hover has happened or a hover is in progress */
        HoverStatus[HoverStatus["default"] = -1] = "default";
    })(HoverStatus || (HoverStatus = {}));
    var ScrollIdleDelay = 250; /* ms */
    var TouchIdleDelay = 500; /* ms */
    /**
     * This is used to clear any pending autocomplete text (used when autocomplete is true and
     * allowFreeform is false)
     */
    var ReadOnlyPendingAutoCompleteTimeout = 1000; /* ms */
    /**
     * Internal component that is used to wrap all ComboBox options.
     * This is used to customize when we want to re-render components,
     * so we don't re-render every option every time render is executed.
     */
    var ComboBoxOptionWrapper = React__namespace.memo(function (_a) {
        var render = _a.render;
        return render();
    }, function (_a, _b) {
        _a.render; var oldProps = tslib.__rest(_a, ["render"]);
        _b.render; var newProps = tslib.__rest(_b, ["render"]);
        // The render function will always be different, so we ignore that prop
        return shallowCompare(oldProps, newProps);
    });
    var COMPONENT_NAME$7 = 'ComboBox';
    var DEFAULT_PROPS$3 = {
        options: [],
        allowFreeform: false,
        autoComplete: 'on',
        buttonIconProps: { iconName: 'ChevronDown' },
    };
    function useOptionsState(_a) {
        var options = _a.options, defaultSelectedKey = _a.defaultSelectedKey, selectedKey = _a.selectedKey;
        /** The currently selected indices */
        var _b = React__namespace.useState(function () {
            return getSelectedIndices(options, buildDefaultSelectedKeys(defaultSelectedKey, selectedKey));
        }), selectedIndices = _b[0], setSelectedIndices = _b[1];
        /** The options currently available for the callout */
        var _c = React__namespace.useState(options), currentOptions = _c[0], setCurrentOptions = _c[1];
        /** This value is used for the autocomplete hint value */
        var _d = React__namespace.useState(), suggestedDisplayValue = _d[0], setSuggestedDisplayValue = _d[1];
        React__namespace.useEffect(function () {
            if (selectedKey !== undefined) {
                var selectedKeys = buildSelectedKeys(selectedKey);
                var indices = getSelectedIndices(options, selectedKeys);
                setSelectedIndices(indices);
            }
            setCurrentOptions(options);
        }, [options, selectedKey]);
        React__namespace.useEffect(function () {
            if (selectedKey === null) {
                setSuggestedDisplayValue(undefined);
            }
        }, [selectedKey]);
        return [
            selectedIndices,
            setSelectedIndices,
            currentOptions,
            setCurrentOptions,
            suggestedDisplayValue,
            setSuggestedDisplayValue,
        ];
    }
    var ComboBox$1 = React__namespace.forwardRef(function (propsWithoutDefaults, forwardedRef) {
        var _a = getPropsWithDefaults(DEFAULT_PROPS$3, propsWithoutDefaults); _a.ref; var props = tslib.__rest(_a, ["ref"]);
        var rootRef = React__namespace.useRef(null);
        var mergedRootRef = useMergedRefs(rootRef, forwardedRef);
        var _b = useOptionsState(props), selectedIndices = _b[0], setSelectedIndices = _b[1], currentOptions = _b[2], setCurrentOptions = _b[3], suggestedDisplayValue = _b[4], setSuggestedDisplayValue = _b[5];
        return (React__namespace.createElement(ComboBoxInternal, tslib.__assign({}, props, { hoisted: {
                mergedRootRef: mergedRootRef,
                rootRef: rootRef,
                selectedIndices: selectedIndices,
                setSelectedIndices: setSelectedIndices,
                currentOptions: currentOptions,
                setCurrentOptions: setCurrentOptions,
                suggestedDisplayValue: suggestedDisplayValue,
                setSuggestedDisplayValue: setSuggestedDisplayValue,
            } })));
    });
    ComboBox$1.displayName = COMPONENT_NAME$7;
    var ComboBoxInternal = /** @class */ (function (_super) {
        tslib.__extends(ComboBoxInternal, _super);
        function ComboBoxInternal(props) {
            var _this = _super.call(this, props) || this;
            /** The input aspect of the combo box */
            _this._autofill = React__namespace.createRef();
            /** The wrapping div of the input and button */
            _this._comboBoxWrapper = React__namespace.createRef();
            /** The callout element */
            _this._comboBoxMenu = React__namespace.createRef();
            /** The menu item element that is currently selected */
            _this._selectedElement = React__namespace.createRef();
            /**
             * {@inheritdoc}
             */
            _this.focus = function (shouldOpenOnFocus, useFocusAsync) {
                if (_this.props.disabled) {
                    return;
                }
                if (_this._autofill.current) {
                    if (useFocusAsync) {
                        focusAsync(_this._autofill.current);
                    }
                    else {
                        _this._autofill.current.focus();
                    }
                    if (shouldOpenOnFocus) {
                        _this.setState({
                            isOpen: true,
                        });
                    }
                }
                // Programmatically setting focus means that there is nothing else that needs to be done
                // Focus is now contained
                if (!_this._hasFocus()) {
                    _this.setState({ focusState: 'focused' });
                }
            };
            /**
             * Close menu callout if it is open
             */
            _this.dismissMenu = function () {
                var isOpen = _this.state.isOpen;
                isOpen && _this.setState({ isOpen: false });
            };
            /**
             * componentWillReceiveProps handler for the auto fill component
             * Checks/updates the input value to set, if needed
             * @param defaultVisibleValue - the defaultVisibleValue that got passed
             *  in to the auto fill's componentWillReceiveProps
             * @returns - the updated value to set, if needed
             */
            _this._onUpdateValueInAutofillWillReceiveProps = function () {
                var comboBox = _this._autofill.current;
                if (!comboBox) {
                    return null;
                }
                if (comboBox.value === null || comboBox.value === undefined) {
                    return null;
                }
                var visibleValue = normalizeToString(_this._currentVisibleValue);
                if (comboBox.value !== visibleValue) {
                    return visibleValue;
                }
                return comboBox.value;
            };
            _this._renderComboBoxWrapper = function (multiselectAccessibleText, errorMessageId) {
                var _a = _this.props, label = _a.label, disabled = _a.disabled, ariaLabel = _a.ariaLabel, _b = _a.ariaDescribedBy, ariaDescribedBy = _b === void 0 ? _this.props['aria-describedby'] : _b, required = _a.required, errorMessage = _a.errorMessage, buttonIconProps = _a.buttonIconProps, _c = _a.isButtonAriaHidden, isButtonAriaHidden = _c === void 0 ? true : _c, title = _a.title, placeholderProp = _a.placeholder, tabIndex = _a.tabIndex, autofill = _a.autofill, iconButtonProps = _a.iconButtonProps, suggestedDisplayValue = _a.hoisted.suggestedDisplayValue;
                var isOpen = _this.state.isOpen;
                // If the combo box has focus, is multiselect, and has a display string, then use that placeholder
                // so that the selected items don't appear to vanish. This is not ideal but it's the only reasonable way
                // to correct the behavior where the input is cleared so the user can type. If a full refactor is done, then this
                // should be removed and the multiselect combo box should behave like a picker.
                var placeholder = _this._hasFocus() && _this.props.multiSelect && multiselectAccessibleText
                    ? multiselectAccessibleText
                    : placeholderProp;
                var labelledBy = [_this.props['aria-labelledby'], label && _this._id + '-label'].join(' ').trim();
                return (React__namespace.createElement("div", { "data-ktp-target": true, ref: _this._comboBoxWrapper, id: _this._id + 'wrapper', className: _this._classNames.root, "aria-owns": isOpen ? _this._id + '-list' : undefined },
                    React__namespace.createElement(Autofill, tslib.__assign({ "data-ktp-execute-target": true, "data-is-interactable": !disabled, componentRef: _this._autofill, id: _this._id + '-input', className: _this._classNames.input, type: "text", onFocus: _this._onFocus, onBlur: _this._onBlur, onKeyDown: _this._onInputKeyDown, onKeyUp: _this._onInputKeyUp, onClick: _this._onAutofillClick, onTouchStart: _this._onTouchStart, onInputValueChange: _this._onInputChange, "aria-expanded": isOpen, "aria-autocomplete": _this._getAriaAutoCompleteValue(), role: "combobox", readOnly: disabled, "aria-labelledby": labelledBy ? labelledBy : undefined, "aria-label": ariaLabel && !label ? ariaLabel : undefined, "aria-describedby": errorMessage !== undefined ? mergeAriaAttributeValues(ariaDescribedBy, errorMessageId) : ariaDescribedBy, "aria-activedescendant": _this._getAriaActiveDescendantValue(), "aria-required": required, "aria-disabled": disabled, "aria-controls": isOpen ? _this._id + '-list' : undefined, spellCheck: false, defaultVisibleValue: _this._currentVisibleValue, suggestedDisplayValue: suggestedDisplayValue, updateValueInWillReceiveProps: _this._onUpdateValueInAutofillWillReceiveProps, shouldSelectFullInputValueInComponentDidUpdate: _this._onShouldSelectFullInputValueInAutofillComponentDidUpdate, title: title, preventValueSelection: !_this._hasFocus(), placeholder: placeholder, tabIndex: disabled ? -1 : tabIndex }, autofill)),
                    React__namespace.createElement(IconButton$1, tslib.__assign({ className: 'ms-ComboBox-CaretDown-button', styles: _this._getCaretButtonStyles(), role: "presentation", "aria-hidden": isButtonAriaHidden, "data-is-focusable": false, tabIndex: -1, onClick: _this._onComboBoxClick, onBlur: _this._onBlur, iconProps: buttonIconProps, disabled: disabled, checked: isOpen }, iconButtonProps))));
            };
            /**
             * componentDidUpdate handler for the auto fill component
             *
             * @param defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate
             * @param suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate
             * @returns - should the full value of the input be selected?
             * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise
             */
            _this._onShouldSelectFullInputValueInAutofillComponentDidUpdate = function () {
                return _this._currentVisibleValue === _this.props.hoisted.suggestedDisplayValue;
            };
            /**
             * Get the correct value to pass to the input
             * to show to the user based off of the current props and state
             * @returns the value to pass to the input
             */
            _this._getVisibleValue = function () {
                var _a = _this.props, text = _a.text, allowFreeform = _a.allowFreeform, autoComplete = _a.autoComplete, _b = _a.hoisted, suggestedDisplayValue = _b.suggestedDisplayValue, selectedIndices = _b.selectedIndices, currentOptions = _b.currentOptions;
                var _c = _this.state, currentPendingValueValidIndex = _c.currentPendingValueValidIndex, currentPendingValue = _c.currentPendingValue, isOpen = _c.isOpen;
                var currentPendingIndexValid = indexWithinBounds(currentOptions, currentPendingValueValidIndex);
                // If the user passed is a value prop, use that
                // unless we are open and have a valid current pending index
                if (!(isOpen && currentPendingIndexValid) &&
                    text &&
                    (currentPendingValue === null || currentPendingValue === undefined)) {
                    return text;
                }
                if (_this.props.multiSelect) {
                    // Multi-select
                    if (_this._hasFocus()) {
                        var index = -1;
                        if (autoComplete === 'on' && currentPendingIndexValid) {
                            index = currentPendingValueValidIndex;
                        }
                        return _this._getPendingString(currentPendingValue, currentOptions, index);
                    }
                    else {
                        return _this._getMultiselectDisplayString(selectedIndices, currentOptions, suggestedDisplayValue);
                    }
                }
                else {
                    // Single-select
                    var index = _this._getFirstSelectedIndex();
                    if (allowFreeform) {
                        // If we are allowing freeform and autocomplete is also true
                        // and we've got a pending value that matches an option, remember
                        // the matched option's index
                        if (autoComplete === 'on' && currentPendingIndexValid) {
                            index = currentPendingValueValidIndex;
                        }
                        // Since we are allowing freeform, if there is currently a pending value, use that
                        // otherwise use the index determined above (falling back to '' if we did not get a valid index)
                        return _this._getPendingString(currentPendingValue, currentOptions, index);
                    }
                    else {
                        // If we are not allowing freeform and have a valid index that matches the pending value,
                        // we know we will need some version of the pending value
                        if (currentPendingIndexValid && autoComplete === 'on') {
                            // If autoComplete is on, return the raw pending value, otherwise remember
                            // the matched option's index
                            index = currentPendingValueValidIndex;
                            return normalizeToString(currentPendingValue);
                        }
                        else if (!_this.state.isOpen && currentPendingValue) {
                            return indexWithinBounds(currentOptions, index)
                                ? currentPendingValue
                                : normalizeToString(suggestedDisplayValue);
                        }
                        else {
                            return indexWithinBounds(currentOptions, index)
                                ? getPreviewText(currentOptions[index])
                                : normalizeToString(suggestedDisplayValue);
                        }
                    }
                }
            };
            /**
             * Handler for typing changes on the input
             * @param updatedValue - the newly changed value
             */
            _this._onInputChange = function (updatedValue) {
                if (_this.props.disabled) {
                    _this._handleInputWhenDisabled(null /* event */);
                    return;
                }
                if (_this.props.onInputValueChange) {
                    _this.props.onInputValueChange(updatedValue);
                }
                _this.props.allowFreeform
                    ? _this._processInputChangeWithFreeform(updatedValue)
                    : _this._processInputChangeWithoutFreeform(updatedValue);
            };
            /**
             * Focus (and select) the content of the input
             * and set the focused state
             */
            _this._onFocus = function () {
                var _a, _b;
                (_b = (_a = _this._autofill.current) === null || _a === void 0 ? void 0 : _a.inputElement) === null || _b === void 0 ? void 0 : _b.select();
                if (!_this._hasFocus()) {
                    _this.setState({ focusState: 'focusing' });
                }
            };
            /**
             * Callback issued when the options should be resolved, if they have been updated or
             * if they need to be passed in the first time. This only does work if an onResolveOptions
             * callback was passed in
             */
            _this._onResolveOptions = function () {
                if (_this.props.onResolveOptions) {
                    // get the options
                    var newOptions_1 = _this.props.onResolveOptions(tslib.__spreadArray([], _this.props.hoisted.currentOptions));
                    // Check to see if the returned value is an array, if it is update the state
                    // If the returned value is not an array then check to see if it's a promise or PromiseLike.
                    // If it is then resolve it asynchronously.
                    if (Array.isArray(newOptions_1)) {
                        _this.props.hoisted.setCurrentOptions(newOptions_1);
                    }
                    else if (newOptions_1 && newOptions_1.then) {
                        // Ensure that the promise will only use the callback if it was the most recent one
                        // and update the state when the promise returns
                        _this._currentPromise = newOptions_1;
                        newOptions_1.then(function (newOptionsFromPromise) {
                            if (newOptions_1 === _this._currentPromise) {
                                _this.props.hoisted.setCurrentOptions(newOptionsFromPromise);
                            }
                        });
                    }
                }
            };
            /**
             * OnBlur handler. Set the focused state to false
             * and submit any pending value
             */
            // eslint-disable-next-line deprecation/deprecation
            _this._onBlur = function (event) {
                var _a, _b;
                // Do nothing if the blur is coming from something
                // inside the comboBox root or the comboBox menu since
                // it we are not really blurring from the whole comboBox
                var relatedTarget = event.relatedTarget;
                if (event.relatedTarget === null) {
                    // In IE11, due to lack of support, event.relatedTarget is always
                    // null making every onBlur call to be "outside" of the ComboBox
                    // even when it's not. Using document.activeElement is another way
                    // for us to be able to get what the relatedTarget without relying
                    // on the event
                    relatedTarget = document.activeElement;
                }
                if (relatedTarget) {
                    var isBlurFromComboBoxTitle = (_a = _this.props.hoisted.rootRef.current) === null || _a === void 0 ? void 0 : _a.contains(relatedTarget);
                    var isBlurFromComboBoxMenu = (_b = _this._comboBoxMenu.current) === null || _b === void 0 ? void 0 : _b.contains(relatedTarget);
                    var isBlurFromComboBoxMenuAncestor = _this._comboBoxMenu.current &&
                        findElementRecursive(_this._comboBoxMenu.current, function (element) { return element === relatedTarget; });
                    if (isBlurFromComboBoxTitle || isBlurFromComboBoxMenu || isBlurFromComboBoxMenuAncestor) {
                        if (isBlurFromComboBoxMenuAncestor &&
                            _this._hasFocus() &&
                            (!_this.props.multiSelect || _this.props.allowFreeform)) {
                            _this._submitPendingValue(event);
                        }
                        event.preventDefault();
                        event.stopPropagation();
                        return;
                    }
                }
                if (_this._hasFocus()) {
                    _this.setState({ focusState: 'none' });
                    if (!_this.props.multiSelect || _this.props.allowFreeform) {
                        _this._submitPendingValue(event);
                    }
                }
            };
            // Render Callout container and pass in list
            _this._onRenderContainer = function (props, defaultRender) {
                var onRenderList = props.onRenderList, calloutProps = props.calloutProps, dropdownWidth = props.dropdownWidth, dropdownMaxWidth = props.dropdownMaxWidth, _a = props.onRenderUpperContent, onRenderUpperContent = _a === void 0 ? _this._onRenderUpperContent : _a, _b = props.onRenderLowerContent, onRenderLowerContent = _b === void 0 ? _this._onRenderLowerContent : _b, useComboBoxAsMenuWidth = props.useComboBoxAsMenuWidth, persistMenu = props.persistMenu, _c = props.shouldRestoreFocus, shouldRestoreFocus = _c === void 0 ? true : _c;
                var isOpen = _this.state.isOpen;
                var id = _this._id;
                var comboBoxMenuWidth = useComboBoxAsMenuWidth && _this._comboBoxWrapper.current
                    ? _this._comboBoxWrapper.current.clientWidth + 2
                    : undefined;
                return (React__namespace.createElement(Callout$1, tslib.__assign({ isBeakVisible: false, gapSpace: 0, doNotLayer: false, directionalHint: DirectionalHint.bottomLeftEdge, directionalHintFixed: false }, calloutProps, { onLayerMounted: _this._onLayerMounted, className: css(_this._classNames.callout, calloutProps === null || calloutProps === void 0 ? void 0 : calloutProps.className), target: _this._comboBoxWrapper.current, onDismiss: _this._onDismiss, onMouseDown: _this._onCalloutMouseDown, onScroll: _this._onScroll, setInitialFocus: false, calloutWidth: useComboBoxAsMenuWidth && _this._comboBoxWrapper.current
                        ? comboBoxMenuWidth && comboBoxMenuWidth
                        : dropdownWidth, calloutMaxWidth: dropdownMaxWidth ? dropdownMaxWidth : comboBoxMenuWidth, hidden: persistMenu ? !isOpen : undefined, shouldRestoreFocus: shouldRestoreFocus }),
                    onRenderUpperContent(_this.props, _this._onRenderUpperContent),
                    React__namespace.createElement("div", { className: _this._classNames.optionsContainerWrapper, ref: _this._comboBoxMenu }, onRenderList === null || onRenderList === void 0 ? void 0 : onRenderList(tslib.__assign(tslib.__assign({}, props), { id: id }), _this._onRenderList)),
                    onRenderLowerContent(_this.props, _this._onRenderLowerContent)));
            };
            _this._onLayerMounted = function () {
                _this._onCalloutLayerMounted();
                // need to call this again here to get the correct scroll parent dimensions
                // when the callout is first opened
                _this._async.setTimeout(function () {
                    _this._scrollIntoView();
                }, 0);
                if (_this.props.calloutProps && _this.props.calloutProps.onLayerMounted) {
                    _this.props.calloutProps.onLayerMounted();
                }
            };
            _this._onRenderLabel = function (onRenderLabelProps) {
                var _a = onRenderLabelProps.props, label = _a.label, disabled = _a.disabled, required = _a.required;
                if (label) {
                    return (React__namespace.createElement(Label, { id: _this._id + '-label', disabled: disabled, required: required, className: _this._classNames.label },
                        label,
                        onRenderLabelProps.multiselectAccessibleText && (React__namespace.createElement("span", { className: _this._classNames.screenReaderText }, onRenderLabelProps.multiselectAccessibleText))));
                }
                return null;
            };
            // Render List of items
            _this._onRenderList = function (props) {
                var _a = props.onRenderItem, onRenderItem = _a === void 0 ? _this._onRenderItem : _a, label = props.label, ariaLabel = props.ariaLabel, multiSelect = props.multiSelect;
                var queue = { items: [] };
                var renderedList = [];
                var emptyQueue = function () {
                    var newGroup = queue.id
                        ? [
                            React__namespace.createElement("div", { role: "group", key: queue.id, "aria-labelledby": queue.id }, queue.items),
                        ]
                        : queue.items;
                    renderedList = tslib.__spreadArray(tslib.__spreadArray([], renderedList), newGroup);
                    // Flush items and id
                    queue = { items: [] };
                };
                var placeRenderedOptionIntoQueue = function (item, index) {
                    /*
                      Case Header
                        empty queue if it's not already empty
                        ensure unique ID for header and set queue ID
                        push header into queue
                      Case Divider
                        push divider into queue if not first item
                        empty queue if not already empty
                      Default
                        push item into queue
                    */
                    switch (item.itemType) {
                        case SelectableOptionMenuItemType.Header:
                            queue.items.length > 0 && emptyQueue();
                            var id_1 = _this._id + item.key;
                            queue.items.push(onRenderItem(tslib.__assign(tslib.__assign({ id: id_1 }, item), { index: index }), _this._onRenderItem));
                            queue.id = id_1;
                            break;
                        case SelectableOptionMenuItemType.Divider:
                            index > 0 && queue.items.push(onRenderItem(tslib.__assign(tslib.__assign({}, item), { index: index }), _this._onRenderItem));
                            queue.items.length > 0 && emptyQueue();
                            break;
                        default:
                            queue.items.push(onRenderItem(tslib.__assign(tslib.__assign({}, item), { index: index }), _this._onRenderItem));
                    }
                };
                // Place options into the queue. Queue will be emptied anytime a Header or Divider is encountered
                props.options.forEach(function (item, index) {
                    placeRenderedOptionIntoQueue(item, index);
                });
                // Push remaining items into all renderedList
                queue.items.length > 0 && emptyQueue();
                var id = _this._id;
                return (React__namespace.createElement("div", { id: id + '-list', className: _this._classNames.optionsContainer, "aria-labelledby": label && id + '-label', "aria-label": ariaLabel && !label ? ariaLabel : undefined, "aria-multiselectable": multiSelect ? 'true' : undefined, role: "listbox" }, renderedList));
            };
            // Render items
            _this._onRenderItem = function (item) {
                switch (item.itemType) {
                    case SelectableOptionMenuItemType.Divider:
                        return _this._renderSeparator(item);
                    case SelectableOptionMenuItemType.Header:
                        return _this._renderHeader(item);
                    default:
                        return _this._renderOption(item);
                }
            };
            // Default _onRenderLowerContent function returns nothing
            _this._onRenderLowerContent = function () {
                return null;
            };
            // Default _onRenderUpperContent function returns nothing
            _this._onRenderUpperContent = function () {
                return null;
            };
            _this._renderOption = function (item) {
                var _a = _this.props.onRenderOption, onRenderOption = _a === void 0 ? _this._onRenderOptionContent : _a;
                var id = _this._id;
                var isSelected = _this._isOptionSelected(item.index);
                var isChecked = _this._isOptionChecked(item.index);
                var isIndeterminate = _this._isOptionIndeterminate(item.index);
                var optionStyles = _this._getCurrentOptionStyles(item);
                var optionClassNames = getComboBoxOptionClassNames(_this._getCurrentOptionStyles(item));
                var title = item.title;
                var onRenderCheckboxLabel = function () { return onRenderOption(item, _this._onRenderOptionContent); };
                var getOptionComponent = function () {
                    return !_this.props.multiSelect ? (React__namespace.createElement(CommandButton, { id: id + '-list' + item.index, key: item.key, "data-index": item.index, styles: optionStyles, checked: isSelected, className: 'ms-ComboBox-option', onClick: _this._onItemClick(item), 
                        // eslint-disable-next-line react/jsx-no-bind
                        onMouseEnter: _this._onOptionMouseEnter.bind(_this, item.index), 
                        // eslint-disable-next-line react/jsx-no-bind
                        onMouseMove: _this._onOptionMouseMove.bind(_this, item.index), onMouseLeave: _this._onOptionMouseLeave, role: "option", "aria-selected": isSelected ? 'true' : 'false', ariaLabel: item.ariaLabel, disabled: item.disabled, title: title }, React__namespace.createElement("span", { className: optionClassNames.optionTextWrapper, ref: isSelected ? _this._selectedElement : undefined }, onRenderOption(item, _this._onRenderOptionContent)))) : (React__namespace.createElement(Checkbox, { id: id + '-list' + item.index, ariaLabel: item.ariaLabel, key: item.key, styles: optionStyles, className: 'ms-ComboBox-option', onChange: _this._onItemClick(item), label: item.text, checked: isChecked, indeterminate: isIndeterminate, title: title, disabled: item.disabled, 
                        // eslint-disable-next-line react/jsx-no-bind
                        onRenderLabel: onRenderCheckboxLabel, inputProps: tslib.__assign({ 
                            // aria-selected should only be applied to checked items, not hovered items
                            'aria-selected': isChecked ? 'true' : 'false', role: 'option' }, {
                            'data-index': item.index,
                            'data-is-focusable': true,
                        }) }));
                };
                return (React__namespace.createElement(ComboBoxOptionWrapper, { key: item.key, index: item.index, disabled: item.disabled, isSelected: isSelected, isChecked: isChecked, isIndeterminate: isIndeterminate, text: item.text, 
                    // eslint-disable-next-line react/jsx-no-bind
                    render: getOptionComponent, data: item.data }));
            };
            /**
             * Mouse clicks to headers, dividers and scrollbar should not make input lose focus
             */
            _this._onCalloutMouseDown = function (ev) {
                ev.preventDefault();
            };
            /**
             * Scroll handler for the callout to make sure the mouse events
             * for updating focus are not interacting during scroll
             */
            _this._onScroll = function () {
                if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {
                    _this._async.clearTimeout(_this._scrollIdleTimeoutId);
                    _this._scrollIdleTimeoutId = undefined;
                }
                else {
                    _this._isScrollIdle = false;
                }
                _this._scrollIdleTimeoutId = _this._async.setTimeout(function () {
                    _this._isScrollIdle = true;
                }, ScrollIdleDelay);
            };
            _this._onRenderOptionContent = function (item) {
                var optionClassNames = getComboBoxOptionClassNames(_this._getCurrentOptionStyles(item));
                return React__namespace.createElement("span", { className: optionClassNames.optionText }, item.text);
            };
            /**
             * Handles dismissing (cancelling) the menu
             */
            _this._onDismiss = function () {
                var onMenuDismiss = _this.props.onMenuDismiss;
                if (onMenuDismiss) {
                    onMenuDismiss();
                }
                // In persistMode we need to simulate callout layer mount
                // since that only happens once. We do it on dismiss since
                // it works either way.
                if (_this.props.persistMenu) {
                    _this._onCalloutLayerMounted();
                }
                // close the menu
                _this._setOpenStateAndFocusOnClose(false /* isOpen */, false /* focusInputAfterClose */);
                // reset the selected index
                // to the last value state
                _this._resetSelectedIndex();
            };
            _this._onAfterClearPendingInfo = function () {
                _this._processingClearPendingInfo = false;
            };
            /**
             * Handle keydown on the input
             * @param ev - The keyboard event that was fired
             */
            _this._onInputKeyDown = function (ev) {
                var _a = _this.props, disabled = _a.disabled, allowFreeform = _a.allowFreeform, autoComplete = _a.autoComplete, currentOptions = _a.hoisted.currentOptions;
                var _b = _this.state, isOpen = _b.isOpen, currentPendingValueValidIndexOnHover = _b.currentPendingValueValidIndexOnHover;
                // Take note if we are processing an alt (option) or meta (command) keydown.
                // See comment in _onInputKeyUp for reasoning.
                _this._lastKeyDownWasAltOrMeta = isAltOrMeta(ev);
                if (disabled) {
                    _this._handleInputWhenDisabled(ev);
                    return;
                }
                var index = _this._getPendingSelectedIndex(false /* includeCurrentPendingValue */);
                // eslint-disable-next-line deprecation/deprecation
                switch (ev.which) {
                    case KeyCodes.enter:
                        if (_this._autofill.current && _this._autofill.current.inputElement) {
                            _this._autofill.current.inputElement.select();
                        }
                        _this._submitPendingValue(ev);
                        if (_this.props.multiSelect && isOpen) {
                            _this.setState({
                                currentPendingValueValidIndex: index,
                            });
                        }
                        else {
                            // On enter submit the pending value
                            if (isOpen ||
                                ((!allowFreeform ||
                                    _this.state.currentPendingValue === undefined ||
                                    _this.state.currentPendingValue === null ||
                                    _this.state.currentPendingValue.length <= 0) &&
                                    _this.state.currentPendingValueValidIndex < 0)) {
                                // if we are open or
                                // if we are not allowing freeform or
                                // our we have no pending value
                                // and no valid pending index
                                // flip the open state
                                _this.setState({
                                    isOpen: !isOpen,
                                });
                            }
                        }
                        break;
                    case KeyCodes.tab:
                        // On enter submit the pending value
                        if (!_this.props.multiSelect) {
                            _this._submitPendingValue(ev);
                        }
                        // If we are not allowing freeform
                        // or the combo box is open, flip the open state
                        if (isOpen) {
                            _this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);
                        }
                        // Allow TAB to propagate
                        return;
                    case KeyCodes.escape:
                        // reset the selected index
                        _this._resetSelectedIndex();
                        // Close the menu if opened
                        if (isOpen) {
                            _this.setState({
                                isOpen: false,
                            });
                        }
                        else {
                            return;
                        }
                        break;
                    case KeyCodes.up:
                        // if we are in clearAll state (e.g. the user as hovering
                        // and has since mousedOut of the menu items),
                        // go to the last index
                        if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {
                            index = _this.props.hoisted.currentOptions.length;
                        }
                        if (ev.altKey || ev.metaKey) {
                            // Close the menu if it is open and break so
                            // that the event get stopPropagation and prevent default.
                            // Otherwise, we need to let the event continue to propagate
                            if (isOpen) {
                                _this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);
                                break;
                            }
                            return;
                        }
                        // do not scroll page
                        ev.preventDefault();
                        // Go to the previous option
                        _this._setPendingInfoFromIndexAndDirection(index, SearchDirection.backward);
                        break;
                    case KeyCodes.down:
                        // Expand the combo box on ALT + DownArrow
                        if (ev.altKey || ev.metaKey) {
                            _this._setOpenStateAndFocusOnClose(true /* isOpen */, true /* focusInputAfterClose */);
                        }
                        else {
                            // if we are in clearAll state (e.g. the user as hovering
                            // and has since mousedOut of the menu items),
                            // go to the first index
                            if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {
                                index = -1;
                            }
                            // do not scroll page
                            ev.preventDefault();
                            // Got to the next option
                            _this._setPendingInfoFromIndexAndDirection(index, SearchDirection.forward);
                        }
                        break;
                    case KeyCodes.home:
                    case KeyCodes.end:
                        if (allowFreeform) {
                            return;
                        }
                        // Set the initial values to respond to HOME
                        // which goes to the first selectable option
                        index = -1;
                        var directionToSearch = SearchDirection.forward;
                        // If end, update the values to respond to END
                        // which goes to the last selectable option
                        // eslint-disable-next-line deprecation/deprecation
                        if (ev.which === KeyCodes.end) {
                            index = currentOptions.length;
                            directionToSearch = SearchDirection.backward;
                        }
                        _this._setPendingInfoFromIndexAndDirection(index, directionToSearch);
                        break;
                    /* eslint-disable no-fallthrough */
                    case KeyCodes.space:
                        // event handled in _onComboBoxKeyUp
                        if (!allowFreeform && autoComplete === 'off') {
                            break;
                        }
                    default:
                        /* eslint-enable no-fallthrough */
                        // are we processing a function key? if so bail out
                        // eslint-disable-next-line deprecation/deprecation
                        if (ev.which >= 112 /* F1 */ && ev.which <= 123 /* F12 */) {
                            return;
                        }
                        // If we get here and we got either and ALT key
                        // or meta key, let the event propagate
                        // eslint-disable-next-line deprecation/deprecation
                        if (ev.keyCode === KeyCodes.alt || ev.key === 'Meta' /* && isOpen */) {
                            return;
                        }
                        // If we are not allowing freeform and
                        // allowing autoComplete, handle the input here
                        // since we have marked the input as readonly
                        if (!allowFreeform && autoComplete === 'on') {
                            _this._onInputChange(ev.key);
                            break;
                        }
                        // allow the key to propagate by default
                        return;
                }
                ev.stopPropagation();
                ev.preventDefault();
            };
            /**
             * Handle keyup on the input
             * @param ev - the keyboard event that was fired
             */
            _this._onInputKeyUp = function (ev) {
                var _a = _this.props, disabled = _a.disabled, allowFreeform = _a.allowFreeform, autoComplete = _a.autoComplete;
                var isOpen = _this.state.isOpen;
                // We close the menu on key up only if ALL of the following are true:
                // - Most recent key down was alt or meta (command)
                // - The alt/meta key down was NOT followed by some other key (such as down/up arrow to
                //   expand/collapse the menu)
                // - We're not on a Mac (or iOS)
                // This is because on Windows, pressing alt moves focus to the application menu bar or similar,
                // closing any open context menus. There is not a similar behavior on Macs.
                var keyPressIsAltOrMetaAlone = _this._lastKeyDownWasAltOrMeta && isAltOrMeta(ev);
                _this._lastKeyDownWasAltOrMeta = false;
                var shouldHandleKey = keyPressIsAltOrMetaAlone && !(isMac() || isIOS());
                if (disabled) {
                    _this._handleInputWhenDisabled(ev);
                    return;
                }
                // eslint-disable-next-line deprecation/deprecation
                switch (ev.which) {
                    case KeyCodes.space:
                        // If we are not allowing freeform and are not autoComplete
                        // make space expand/collapse the combo box
                        // and allow the event to propagate
                        if (!allowFreeform && autoComplete === 'off') {
                            _this._setOpenStateAndFocusOnClose(!isOpen, !!isOpen);
                        }
                        return;
                    default:
                        if (shouldHandleKey && isOpen) {
                            _this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);
                        }
                        else {
                            if (_this.state.focusState === 'focusing' && _this.props.openOnKeyboardFocus) {
                                _this.setState({ isOpen: true });
                            }
                            if (_this.state.focusState !== 'focused') {
                                _this.setState({ focusState: 'focused' });
                            }
                        }
                        return;
                }
            };
            _this._onOptionMouseLeave = function () {
                if (_this._shouldIgnoreMouseEvent()) {
                    return;
                }
                // Ignore the event in persistMenu mode if the callout has
                // closed. This is to avoid clearing the visuals on item click.
                if (_this.props.persistMenu && !_this.state.isOpen) {
                    return;
                }
                _this.setState({
                    currentPendingValueValidIndexOnHover: HoverStatus.clearAll,
                });
            };
            /**
             * Click handler for the button of the combo box and the input when not allowing freeform.
             * This toggles the expand/collapse state of the combo box (if enabled).
             */
            _this._onComboBoxClick = function () {
                var disabled = _this.props.disabled;
                var isOpen = _this.state.isOpen;
                if (!disabled) {
                    _this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);
                    _this.setState({ focusState: 'focused' });
                }
            };
            /**
             * Click handler for the autofill.
             */
            _this._onAutofillClick = function () {
                var _a = _this.props, disabled = _a.disabled, allowFreeform = _a.allowFreeform;
                if (allowFreeform && !disabled) {
                    _this.focus(_this.state.isOpen || _this._processingTouch);
                }
                else {
                    _this._onComboBoxClick();
                }
            };
            _this._onTouchStart = function () {
                if (_this._comboBoxWrapper.current && !('onpointerdown' in _this._comboBoxWrapper)) {
                    _this._handleTouchAndPointerEvent();
                }
            };
            _this._onPointerDown = function (ev) {
                if (ev.pointerType === 'touch') {
                    _this._handleTouchAndPointerEvent();
                    ev.preventDefault();
                    ev.stopImmediatePropagation();
                }
            };
            initializeComponentRef(_this);
            _this._async = new Async(_this);
            _this._events = new EventGroup(_this);
            warnMutuallyExclusive(COMPONENT_NAME$7, props, {
                defaultSelectedKey: 'selectedKey',
                text: 'defaultSelectedKey',
                selectedKey: 'value',
                dropdownWidth: 'useComboBoxAsMenuWidth',
                ariaLabel: 'label',
            });
            _this._id = props.id || getId('ComboBox');
            _this._isScrollIdle = true;
            _this._processingTouch = false;
            _this._gotMouseMove = false;
            _this._processingClearPendingInfo = false;
            _this.state = {
                isOpen: false,
                focusState: 'none',
                currentPendingValueValidIndex: -1,
                currentPendingValue: undefined,
                currentPendingValueValidIndexOnHover: HoverStatus.default,
            };
            return _this;
        }
        Object.defineProperty(ComboBoxInternal.prototype, "selectedOptions", {
            /**
             * All selected options
             */
            get: function () {
                var _a = this.props.hoisted, currentOptions = _a.currentOptions, selectedIndices = _a.selectedIndices;
                return getAllSelectedOptions(currentOptions, selectedIndices);
            },
            enumerable: false,
            configurable: true
        });
        ComboBoxInternal.prototype.componentDidMount = function () {
            if (this._comboBoxWrapper.current && !this.props.disabled) {
                // hook up resolving the options if needed on focus
                this._events.on(this._comboBoxWrapper.current, 'focus', this._onResolveOptions, true);
                if ('onpointerdown' in this._comboBoxWrapper.current) {
                    // For ComboBoxes, touching anywhere in the combo box should drop the dropdown, including the input element.
                    // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React
                    // does not support Pointer events yet.
                    this._events.on(this._comboBoxWrapper.current, 'pointerdown', this._onPointerDown, true);
                }
            }
        };
        ComboBoxInternal.prototype.componentDidUpdate = function (prevProps, prevState) {
            var _this = this;
            var _a = this.props, allowFreeform = _a.allowFreeform, text = _a.text, onMenuOpen = _a.onMenuOpen, onMenuDismissed = _a.onMenuDismissed, selectedIndices = _a.hoisted.selectedIndices;
            var _b = this.state, isOpen = _b.isOpen, currentPendingValueValidIndex = _b.currentPendingValueValidIndex;
            // If we are newly open or are open and the pending valid index changed,
            // make sure the currently selected/pending option is scrolled into view
            if (isOpen && (!prevState.isOpen || prevState.currentPendingValueValidIndex !== currentPendingValueValidIndex)) {
                // Need this timeout so that the selectedElement ref is correctly updated
                this._async.setTimeout(function () { return _this._scrollIntoView(); }, 0);
            }
            // if an action is taken that put focus in the ComboBox
            // and If we are open or we are just closed, shouldFocusAfterClose is set,
            // but we are not the activeElement set focus on the input
            if (this._hasFocus() &&
                (isOpen ||
                    (prevState.isOpen &&
                        !isOpen &&
                        this._focusInputAfterClose &&
                        this._autofill.current &&
                        document.activeElement !== this._autofill.current.inputElement))) {
                this.focus(undefined /*shouldOpenOnFocus*/, true /*useFocusAsync*/);
            }
            // If we should focusAfterClose AND
            //   just opened/closed the menu OR
            //   are focused AND
            //     updated the selectedIndex with the menu closed OR
            //     are not allowing freeform OR
            //     the value changed
            // we need to set selection
            if (this._focusInputAfterClose &&
                ((prevState.isOpen && !isOpen) ||
                    (this._hasFocus() &&
                        ((!isOpen &&
                            !this.props.multiSelect &&
                            prevProps.hoisted.selectedIndices &&
                            selectedIndices &&
                            prevProps.hoisted.selectedIndices[0] !== selectedIndices[0]) ||
                            !allowFreeform ||
                            text !== prevProps.text)))) {
                this._onFocus();
            }
            this._notifyPendingValueChanged(prevState);
            if (isOpen && !prevState.isOpen && onMenuOpen) {
                onMenuOpen();
            }
            if (!isOpen && prevState.isOpen && onMenuDismissed) {
                onMenuDismissed();
            }
        };
        ComboBoxInternal.prototype.componentWillUnmount = function () {
            this._async.dispose();
            this._events.dispose();
        };
        // Primary Render
        ComboBoxInternal.prototype.render = function () {
            var id = this._id;
            var errorMessageId = id + '-error';
            var _a = this.props, className = _a.className, disabled = _a.disabled, required = _a.required, errorMessage = _a.errorMessage, _b = _a.onRenderContainer, onRenderContainer = _b === void 0 ? this._onRenderContainer : _b, _c = _a.onRenderLabel, onRenderLabel = _c === void 0 ? this._onRenderLabel : _c, _d = _a.onRenderList, onRenderList = _d === void 0 ? this._onRenderList : _d, _e = _a.onRenderItem, onRenderItem = _e === void 0 ? this._onRenderItem : _e, _f = _a.onRenderOption, onRenderOption = _f === void 0 ? this._onRenderOptionContent : _f, allowFreeform = _a.allowFreeform, customStyles = _a.styles, theme = _a.theme, persistMenu = _a.persistMenu, multiSelect = _a.multiSelect, _g = _a.hoisted, suggestedDisplayValue = _g.suggestedDisplayValue, selectedIndices = _g.selectedIndices, currentOptions = _g.currentOptions;
            var isOpen = this.state.isOpen;
            this._currentVisibleValue = this._getVisibleValue();
            // Single select is already accessible since the whole text is selected
            // when focus enters the input. Since multiselect appears to clear the input
            // it needs special accessible text
            var multiselectAccessibleText = multiSelect
                ? this._getMultiselectDisplayString(selectedIndices, currentOptions, suggestedDisplayValue)
                : undefined;
            var divProps = getNativeProps(this.props, divProperties, [
                'onChange',
                'value',
                'aria-describedby',
                'aria-labelledby',
            ]);
            var hasErrorMessage = errorMessage && errorMessage.length > 0 ? true : false;
            this._classNames = this.props.getClassNames
                ? this.props.getClassNames(theme, !!isOpen, !!disabled, !!required, !!this._hasFocus(), !!allowFreeform, !!hasErrorMessage, className)
                : getClassNames$17(getStyles$k(theme, customStyles), className, !!isOpen, !!disabled, !!required, !!this._hasFocus(), !!allowFreeform, !!hasErrorMessage);
            var comboBoxWrapper = this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId);
            return (React__namespace.createElement("div", tslib.__assign({}, divProps, { ref: this.props.hoisted.mergedRootRef, className: this._classNames.container }),
                onRenderLabel({ props: this.props, multiselectAccessibleText: multiselectAccessibleText }, this._onRenderLabel),
                comboBoxWrapper,
                (persistMenu || isOpen) &&
                    onRenderContainer(tslib.__assign(tslib.__assign({}, this.props), { onRenderList: onRenderList, onRenderItem: onRenderItem, onRenderOption: onRenderOption, options: currentOptions.map(function (item, index) { return (tslib.__assign(tslib.__assign({}, item), { index: index })); }), onDismiss: this._onDismiss }), this._onRenderContainer),
                hasErrorMessage && (React__namespace.createElement("div", { role: "alert", id: errorMessageId, className: this._classNames.errorMessage }, errorMessage))));
        };
        ComboBoxInternal.prototype._getPendingString = function (currentPendingValue, currentOptions, index) {
            return currentPendingValue !== null && currentPendingValue !== undefined
                ? currentPendingValue
                : indexWithinBounds(currentOptions, index)
                    ? currentOptions[index].text
                    : '';
        };
        /**
         * Returns a string that concatenates all of the selected values
         * for multiselect combo box.
         */
        ComboBoxInternal.prototype._getMultiselectDisplayString = function (selectedIndices, currentOptions, suggestedDisplayValue) {
            var displayValues = [];
            for (var idx = 0; selectedIndices && idx < selectedIndices.length; idx++) {
                var index = selectedIndices[idx];
                if (currentOptions[index].itemType !== SelectableOptionMenuItemType.SelectAll) {
                    displayValues.push(indexWithinBounds(currentOptions, index)
                        ? currentOptions[index].text
                        : normalizeToString(suggestedDisplayValue));
                }
            }
            var _a = this.props.multiSelectDelimiter, multiSelectDelimiter = _a === void 0 ? ', ' : _a;
            return displayValues.join(multiSelectDelimiter);
        };
        /**
         * Process the new input's new value when the combo box allows freeform entry
         * @param updatedValue - the input's newly changed value
         */
        ComboBoxInternal.prototype._processInputChangeWithFreeform = function (updatedValue) {
            var currentOptions = this.props.hoisted.currentOptions;
            var newCurrentPendingValueValidIndex = -1;
            // if the new value is empty, see if we have an exact match and then set the pending info
            if (updatedValue === '') {
                var items = currentOptions
                    .map(function (item, index) { return (tslib.__assign(tslib.__assign({}, item), { index: index })); })
                    .filter(function (option) { return isNormalOption(option) && getPreviewText(option) === updatedValue; });
                // if we found a match remember the index
                if (items.length === 1) {
                    newCurrentPendingValueValidIndex = items[0].index;
                }
                this._setPendingInfo(updatedValue, newCurrentPendingValueValidIndex, updatedValue);
                return;
            }
            // Remember the original value and then make the value lowercase for comparison
            var originalUpdatedValue = updatedValue;
            updatedValue = updatedValue.toLocaleLowerCase();
            var newSuggestedDisplayValue = '';
            // If autoComplete is on, attempt to find a match from the available options
            if (this.props.autoComplete === 'on') {
                // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value
                var items = currentOptions
                    .map(function (item, index) { return (tslib.__assign(tslib.__assign({}, item), { index: index })); })
                    .filter(function (option) { return isNormalOption(option) && getPreviewText(option).toLocaleLowerCase().indexOf(updatedValue) === 0; });
                if (items.length > 0) {
                    // use ariaLabel as the value when the option is set
                    var text = getPreviewText(items[0]);
                    // If the user typed out the complete option text, we don't need any suggested display text anymore
                    newSuggestedDisplayValue = text.toLocaleLowerCase() !== updatedValue ? text : '';
                    // remember the index of the match we found
                    newCurrentPendingValueValidIndex = items[0].index;
                }
            }
            else {
                // If autoComplete is off, attempt to find a match only when the value is exactly equal to the text of an option
                var items = currentOptions
                    .map(function (item, index) { return (tslib.__assign(tslib.__assign({}, item), { index: index })); })
                    .filter(function (option) { return isNormalOption(option) && getPreviewText(option).toLocaleLowerCase() === updatedValue; });
                // if we found a match remember the index
                if (items.length === 1) {
                    newCurrentPendingValueValidIndex = items[0].index;
                }
            }
            // Set the updated state
            this._setPendingInfo(originalUpdatedValue, newCurrentPendingValueValidIndex, newSuggestedDisplayValue);
        };
        /**
         * Process the new input's new value when the combo box does not allow freeform entry
         * @param updatedValue - the input's newly changed value
         */
        ComboBoxInternal.prototype._processInputChangeWithoutFreeform = function (updatedValue) {
            var _this = this;
            var currentOptions = this.props.hoisted.currentOptions;
            var _a = this.state, currentPendingValue = _a.currentPendingValue, currentPendingValueValidIndex = _a.currentPendingValueValidIndex;
            if (this.props.autoComplete === 'on') {
                // If autoComplete is on while allow freeform is off,
                // we will remember the key press and build up a string to attempt to match
                // as long as characters are typed within a the timeout span of each other,
                // otherwise we will clear the string and start building a new one on the next keypress.
                // Also, only do this processing if we have a non-empty value
                if (updatedValue !== '') {
                    // If we have a pending autocomplete clearing task,
                    // we know that the user is typing with key press happening
                    // within the timeout of each other so remove the clearing task
                    // and continue building the pending value with the updated value
                    if (this._autoCompleteTimeout) {
                        this._async.clearTimeout(this._autoCompleteTimeout);
                        this._autoCompleteTimeout = undefined;
                        updatedValue = normalizeToString(currentPendingValue) + updatedValue;
                    }
                    var originalUpdatedValue = updatedValue;
                    updatedValue = updatedValue.toLocaleLowerCase();
                    // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value
                    var items = currentOptions
                        .map(function (item, i) { return (tslib.__assign(tslib.__assign({}, item), { index: i })); })
                        .filter(function (option) { return isNormalOption(option) && option.text.toLocaleLowerCase().indexOf(updatedValue) === 0; });
                    // If we found a match, update the state
                    if (items.length > 0) {
                        this._setPendingInfo(originalUpdatedValue, items[0].index, getPreviewText(items[0]));
                    }
                    // Schedule a timeout to clear the pending value after the timeout span
                    this._autoCompleteTimeout = this._async.setTimeout(function () {
                        _this._autoCompleteTimeout = undefined;
                    }, ReadOnlyPendingAutoCompleteTimeout);
                    return;
                }
            }
            // If we get here, either autoComplete is on or we did not find a match with autoComplete on.
            // Remember we are not allowing freeform, so at this point, if we have a pending valid value index
            // use that; otherwise use the selectedIndex
            var index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : this._getFirstSelectedIndex();
            // Since we are not allowing freeform, we need to
            // set both the pending and suggested values/index
            // to allow us to select all content in the input to
            // give the illusion that we are readonly (e.g. freeform off)
            this._setPendingInfoFromIndex(index);
        };
        ComboBoxInternal.prototype._getFirstSelectedIndex = function () {
            var selectedIndices = this.props.hoisted.selectedIndices;
            return (selectedIndices === null || selectedIndices === void 0 ? void 0 : selectedIndices.length) ? selectedIndices[0] : -1;
        };
        /**
         * Walk along the options starting at the index, stepping by the delta (positive or negative)
         * looking for the next valid selectable index (e.g. skipping headings and dividers)
         * @param index - the index to get the next selectable index from
         * @param delta - optional delta to step by when finding the next index, defaults to 0
         * @returns - the next valid selectable index. If the new index is outside of the bounds,
         * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable
         */
        ComboBoxInternal.prototype._getNextSelectableIndex = function (index, searchDirection) {
            var currentOptions = this.props.hoisted.currentOptions;
            var newIndex = index + searchDirection;
            newIndex = Math.max(0, Math.min(currentOptions.length - 1, newIndex));
            if (!indexWithinBounds(currentOptions, newIndex)) {
                return -1;
            }
            var option = currentOptions[newIndex];
            if (!isSelectableOption(option) || option.hidden === true) {
                // Should we continue looking for an index to select?
                if (searchDirection !== SearchDirection.none &&
                    ((newIndex > 0 && searchDirection < SearchDirection.none) ||
                        (newIndex >= 0 && newIndex < currentOptions.length && searchDirection > SearchDirection.none))) {
                    newIndex = this._getNextSelectableIndex(newIndex, searchDirection);
                }
                else {
                    // If we cannot perform a useful search just return the index we were given
                    return index;
                }
            }
            // We have the next valid selectable index, return it
            return newIndex;
        };
        /**
         * Set the selected index. Note, this is
         * the "real" selected index, not the pending selected index
         * @param index - the index to set (or the index to set from if a search direction is provided)
         * @param searchDirection - the direction to search along the options from the given index
         */
        ComboBoxInternal.prototype._setSelectedIndex = function (index, submitPendingValueEvent, searchDirection) {
            if (searchDirection === void 0) { searchDirection = SearchDirection.none; }
            var _a = this.props, onChange = _a.onChange, onPendingValueChanged = _a.onPendingValueChanged, _b = _a.hoisted, initialIndices = _b.selectedIndices, currentOptions = _b.currentOptions;
            // Clone currentOptions and selectedIndices so we don't mutate state
            var selectedIndices = initialIndices ? initialIndices.slice() : [];
            var changedOptions = currentOptions.slice();
            // Find the next selectable index, if searchDirection is none
            // we will get our starting index back
            index = this._getNextSelectableIndex(index, searchDirection);
            if (!indexWithinBounds(currentOptions, index)) {
                return;
            }
            // Are we at a new index? If so, update the state, otherwise
            // there is nothing to do
            if (this.props.multiSelect ||
                selectedIndices.length < 1 ||
                (selectedIndices.length === 1 && selectedIndices[0] !== index)) {
                var option = tslib.__assign({}, currentOptions[index]);
                // if option doesn't existing, or option is disabled, we noop
                if (!option || option.disabled) {
                    return;
                }
                if (this.props.multiSelect) {
                    // Setting the initial state of option.selected in Multi-select combo box by checking the
                    // selectedIndices array and overriding the undefined issue
                    option.selected = option.selected !== undefined ? !option.selected : selectedIndices.indexOf(index) < 0;
                    // handle changing all options if SelectAll is changed
                    if (option.itemType === SelectableOptionMenuItemType.SelectAll) {
                        selectedIndices = [];
                        // if select all is set to checked, push all selectable option indices
                        if (option.selected) {
                            currentOptions.forEach(function (currentOption, i) {
                                if (!currentOption.disabled && isSelectableOption(currentOption)) {
                                    selectedIndices.push(i);
                                    changedOptions[i] = tslib.__assign(tslib.__assign({}, currentOption), { selected: true });
                                }
                            });
                        }
                        // otherwise un-check all options
                        else {
                            changedOptions = currentOptions.map(function (currentOption) { return (tslib.__assign(tslib.__assign({}, currentOption), { selected: false })); });
                        }
                    }
                    // otherwise update the individual option
                    else {
                        if (option.selected && selectedIndices.indexOf(index) < 0) {
                            selectedIndices.push(index);
                        }
                        else if (!option.selected && selectedIndices.indexOf(index) >= 0) {
                            selectedIndices = selectedIndices.filter(function (value) { return value !== index; });
                        }
                        changedOptions[index] = option;
                        // If SelectAll exists and another option was toggled, update the SelectAll option's state
                        var selectAllOption = changedOptions.filter(function (o) { return o.itemType === SelectableOptionMenuItemType.SelectAll; })[0];
                        if (selectAllOption) {
                            var selectAllState = this._isSelectAllChecked(selectedIndices);
                            var selectAllIndex_1 = changedOptions.indexOf(selectAllOption);
                            if (selectAllState) {
                                selectedIndices.push(selectAllIndex_1);
                                changedOptions[selectAllIndex_1] = tslib.__assign(tslib.__assign({}, selectAllOption), { selected: true });
                            }
                            else {
                                selectedIndices = selectedIndices.filter(function (value) { return value !== selectAllIndex_1; });
                                changedOptions[selectAllIndex_1] = tslib.__assign(tslib.__assign({}, selectAllOption), { selected: false });
                            }
                        }
                    }
                }
                else {
                    selectedIndices[0] = index;
                }
                submitPendingValueEvent.persist();
                // Only setState if combo box is uncontrolled.
                if (this.props.selectedKey || this.props.selectedKey === null) {
                    // If combo box value is changed, revert preview first
                    if (this._hasPendingValue && onPendingValueChanged) {
                        onPendingValueChanged();
                        this._hasPendingValue = false;
                    }
                }
                else {
                    this.props.hoisted.setSelectedIndices(selectedIndices);
                    this.props.hoisted.setCurrentOptions(changedOptions);
                    // If ComboBox value is changed, revert preview first
                    if (this._hasPendingValue && onPendingValueChanged) {
                        onPendingValueChanged();
                        this._hasPendingValue = false;
                    }
                }
                // Call onChange after state is updated
                if (onChange) {
                    onChange(submitPendingValueEvent, option, index, undefined);
                }
            }
            if (this.props.multiSelect && this.state.isOpen) {
                return;
            }
            // clear all of the pending info
            this._clearPendingInfo();
        };
        /**
         * Submit a pending value if there is one
         */
        ComboBoxInternal.prototype._submitPendingValue = function (submitPendingValueEvent) {
            var _a;
            var _b = this.props, onChange = _b.onChange, allowFreeform = _b.allowFreeform, autoComplete = _b.autoComplete, multiSelect = _b.multiSelect, hoisted = _b.hoisted;
            var currentOptions = hoisted.currentOptions;
            var _c = this.state, currentPendingValue = _c.currentPendingValue, currentPendingValueValidIndex = _c.currentPendingValueValidIndex, currentPendingValueValidIndexOnHover = _c.currentPendingValueValidIndexOnHover;
            var selectedIndices = this.props.hoisted.selectedIndices;
            // Do not submit any pending value if we
            // have already initiated clearing the pending info
            if (this._processingClearPendingInfo) {
                return;
            }
            // If we allow freeform we need to handle that
            if (allowFreeform) {
                // if currentPendingValue is null or undefined the user did not submit anything
                // (not even empty because we would have stored that as the pending value)
                if (currentPendingValue === null || currentPendingValue === undefined) {
                    // if a user did not type anything they may just hovered over an item
                    if (currentPendingValueValidIndexOnHover >= 0) {
                        this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);
                        this._clearPendingInfo();
                    }
                    return;
                }
                // Check to see if the user typed an exact match
                if (indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {
                    var pendingOptionText = getPreviewText(currentOptions[currentPendingValueValidIndex]).toLocaleLowerCase();
                    var autofill = this._autofill.current;
                    // By exact match, that means: our pending value is the same as the pending option text OR
                    // the pending option starts with the pending value and we have an "autoComplete" selection
                    // where the total length is equal to pending option length OR
                    // the live value in the underlying input matches the pending option; update the state
                    if (currentPendingValue.toLocaleLowerCase() === pendingOptionText ||
                        (autoComplete &&
                            pendingOptionText.indexOf(currentPendingValue.toLocaleLowerCase()) === 0 &&
                            (autofill === null || autofill === void 0 ? void 0 : autofill.isValueSelected) &&
                            currentPendingValue.length + (autofill.selectionEnd - autofill.selectionStart) ===
                                pendingOptionText.length) ||
                        ((_a = autofill === null || autofill === void 0 ? void 0 : autofill.inputElement) === null || _a === void 0 ? void 0 : _a.value.toLocaleLowerCase()) === pendingOptionText) {
                        this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);
                        if (multiSelect && this.state.isOpen) {
                            return;
                        }
                        this._clearPendingInfo();
                        return;
                    }
                }
                if (onChange) {
                    if (onChange) {
                        // trigger onChange to clear value
                        onChange(submitPendingValueEvent, undefined, undefined, currentPendingValue);
                    }
                }
                else {
                    // If we are not controlled, create a new selected option
                    var newOption = {
                        key: currentPendingValue || getId(),
                        text: normalizeToString(currentPendingValue),
                    };
                    // If it's multiselect, set selected state to true
                    if (multiSelect) {
                        newOption.selected = true;
                    }
                    var newOptions = currentOptions.concat([newOption]);
                    if (selectedIndices) {
                        if (!multiSelect) {
                            selectedIndices = [];
                        }
                        selectedIndices.push(newOptions.length - 1);
                    }
                    hoisted.setCurrentOptions(newOptions);
                    hoisted.setSelectedIndices(selectedIndices);
                }
            }
            else if (currentPendingValueValidIndex >= 0) {
                // Since we are not allowing freeform, we must have a matching
                // to be able to update state
                this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);
            }
            else if (currentPendingValueValidIndexOnHover >= 0) {
                // If all else failed and we were hovering over an item, select it
                this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);
            }
            // Finally, clear the pending info
            this._clearPendingInfo();
        };
        ComboBoxInternal.prototype._onCalloutLayerMounted = function () {
            // In persistMenu mode _onLayerMounted is only called once for the lifetime
            // of the component. Any functionality required for callout "on mount" can
            // go here so that we can also call it again during callout dismissal to reset
            // object state.
            this._gotMouseMove = false;
        };
        // Render separator
        ComboBoxInternal.prototype._renderSeparator = function (item) {
            var index = item.index, key = item.key;
            if (index && index > 0) {
                return React__namespace.createElement("div", { role: "separator", key: key, className: this._classNames.divider });
            }
            return null;
        };
        ComboBoxInternal.prototype._renderHeader = function (item) {
            var _a = this.props.onRenderOption, onRenderOption = _a === void 0 ? this._onRenderOptionContent : _a;
            return (React__namespace.createElement("div", { id: item.id, key: item.key, className: this._classNames.header }, onRenderOption(item, this._onRenderOptionContent)));
        };
        /**
         * If we are coming from a mouseOut:
         * there is no visible selected option.
         *
         * Else if We are hovering over an item:
         * that gets the selected look.
         *
         * Else:
         * Use the current valid pending index if it exists OR
         * we do not have a valid index and we currently have a pending input value,
         * otherwise use the selected index
         * */
        ComboBoxInternal.prototype._isOptionHighlighted = function (index) {
            var currentPendingValueValidIndexOnHover = this.state.currentPendingValueValidIndexOnHover;
            // If the hover state is set to clearAll, don't show a selected index.
            // Note, this happens when the user moused out of the menu items
            if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {
                return false;
            }
            return currentPendingValueValidIndexOnHover >= 0
                ? currentPendingValueValidIndexOnHover === index
                : this._isOptionSelected(index);
        };
        ComboBoxInternal.prototype._isOptionSelected = function (index) {
            return this._getPendingSelectedIndex(true /* includePendingValue */) === index;
        };
        ComboBoxInternal.prototype._isOptionChecked = function (index) {
            if (this.props.multiSelect && index !== undefined && this.props.hoisted.selectedIndices) {
                var idxOfSelectedIndex = -1;
                idxOfSelectedIndex = this.props.hoisted.selectedIndices.indexOf(index);
                return idxOfSelectedIndex >= 0;
            }
            return false;
        };
        ComboBoxInternal.prototype._isOptionIndeterminate = function (index) {
            var _a = this.props, multiSelect = _a.multiSelect, hoisted = _a.hoisted;
            if (multiSelect && index !== undefined && hoisted.selectedIndices && hoisted.currentOptions) {
                var option = hoisted.currentOptions[index];
                if (option && option.itemType === SelectableOptionMenuItemType.SelectAll) {
                    return hoisted.selectedIndices.length > 0 && !this._isSelectAllChecked();
                }
            }
            return false;
        };
        ComboBoxInternal.prototype._isSelectAllChecked = function (testIndices) {
            var _a = this.props, multiSelect = _a.multiSelect, hoisted = _a.hoisted;
            var selectAllOption = hoisted.currentOptions.find(function (option) { return option.itemType === SelectableOptionMenuItemType.SelectAll; });
            var selectedIndices = testIndices || hoisted.selectedIndices;
            if (!multiSelect || !selectedIndices || !selectAllOption) {
                return false;
            }
            // start by not including the select all option itself
            var selectAllIndex = hoisted.currentOptions.indexOf(selectAllOption);
            var compareSelectedIndices = selectedIndices.filter(function (value) { return value !== selectAllIndex; });
            // get array of selectable options, excluding disabled options, headers, and dividers
            var selectableOptions = hoisted.currentOptions.filter(function (option) {
                return !option.disabled && option.itemType !== SelectableOptionMenuItemType.SelectAll && isSelectableOption(option);
            });
            return compareSelectedIndices.length === selectableOptions.length;
        };
        /**
         * Gets the pending selected index taking into account valueValidIndex and selectedIndex
         * @param includeCurrentPendingValue - Should we include the currentPendingValue when
         * finding the index
         */
        ComboBoxInternal.prototype._getPendingSelectedIndex = function (includeCurrentPendingValue) {
            var _a = this.state, currentPendingValueValidIndex = _a.currentPendingValueValidIndex, currentPendingValue = _a.currentPendingValue;
            return currentPendingValueValidIndex >= 0 ||
                (includeCurrentPendingValue && currentPendingValue !== null && currentPendingValue !== undefined)
                ? currentPendingValueValidIndex
                : this.props.multiSelect
                    ? 0
                    : this._getFirstSelectedIndex();
        };
        /**
         * Scroll the selected element into view
         */
        ComboBoxInternal.prototype._scrollIntoView = function () {
            var _a = this.props, onScrollToItem = _a.onScrollToItem, scrollSelectedToTop = _a.scrollSelectedToTop;
            var _b = this.state, currentPendingValueValidIndex = _b.currentPendingValueValidIndex, currentPendingValue = _b.currentPendingValue;
            if (onScrollToItem) {
                // Use the custom scroll handler
                onScrollToItem(currentPendingValueValidIndex >= 0 || currentPendingValue !== ''
                    ? currentPendingValueValidIndex
                    : this._getFirstSelectedIndex());
            }
            else if (this._selectedElement.current && this._selectedElement.current.offsetParent) {
                var alignToTop = true;
                // We are using refs, scroll the ref into view
                if (this._comboBoxMenu.current && this._comboBoxMenu.current.offsetParent) {
                    var scrollableParent = this._comboBoxMenu.current.offsetParent;
                    var selectedElement = this._selectedElement.current.offsetParent;
                    var _c = selectedElement, offsetHeight = _c.offsetHeight, offsetTop = _c.offsetTop;
                    var _d = scrollableParent, parentOffsetHeight = _d.offsetHeight, scrollTop = _d.scrollTop;
                    var isAbove = offsetTop < scrollTop;
                    var isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;
                    if (isAbove || scrollSelectedToTop) {
                        alignToTop = false;
                        scrollableParent.scrollTo(0, offsetTop);
                    }
                    else if (isBelow) {
                        scrollableParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);
                    }
                }
                // if _comboboxMenu doesn't exist, fall back to scrollIntoView
                else {
                    this._selectedElement.current.offsetParent.scrollIntoView(alignToTop);
                }
            }
        };
        /**
         * Click handler for the menu items
         * to select the item and also close the menu
         * @param index - the index of the item that was clicked
         */
        ComboBoxInternal.prototype._onItemClick = function (item) {
            var _this = this;
            var onItemClick = this.props.onItemClick;
            var index = item.index;
            return function (ev) {
                // only close the callout when it's in single-select mode
                if (!_this.props.multiSelect) {
                    // ensure that focus returns to the input, not the button
                    _this._autofill.current && _this._autofill.current.focus();
                    _this.setState({
                        isOpen: false,
                    });
                }
                // Continue processing the click only after
                // performing menu close / control focus(inner working)
                onItemClick && onItemClick(ev, item, index);
                _this._setSelectedIndex(index, ev);
            };
        };
        /**
         * Reset the selected index by clearing the
         * input (of any pending text), clearing the pending state,
         * and setting the suggested display value to the last
         * selected state text
         */
        ComboBoxInternal.prototype._resetSelectedIndex = function () {
            var currentOptions = this.props.hoisted.currentOptions;
            this._clearPendingInfo();
            var selectedIndex = this._getFirstSelectedIndex();
            if (selectedIndex > 0 && selectedIndex < currentOptions.length) {
                this.props.hoisted.setSuggestedDisplayValue(currentOptions[selectedIndex].text);
            }
            else if (this.props.text) {
                // If we had a value initially, restore it
                this.props.hoisted.setSuggestedDisplayValue(this.props.text);
            }
        };
        /**
         * Clears the pending info state
         */
        ComboBoxInternal.prototype._clearPendingInfo = function () {
            this._processingClearPendingInfo = true;
            this.props.hoisted.setSuggestedDisplayValue(undefined);
            this.setState({
                currentPendingValue: undefined,
                currentPendingValueValidIndex: -1,
                currentPendingValueValidIndexOnHover: HoverStatus.default,
            }, this._onAfterClearPendingInfo);
        };
        /**
         * Set the pending info
         * @param currentPendingValue - new pending value to set
         * @param currentPendingValueValidIndex - new pending value index to set
         * @param suggestedDisplayValue - new suggest display value to set
         */
        ComboBoxInternal.prototype._setPendingInfo = function (currentPendingValue, currentPendingValueValidIndex, suggestedDisplayValue) {
            if (currentPendingValueValidIndex === void 0) { currentPendingValueValidIndex = -1; }
            if (this._processingClearPendingInfo) {
                return;
            }
            this.props.hoisted.setSuggestedDisplayValue(suggestedDisplayValue);
            this.setState({
                currentPendingValue: normalizeToString(currentPendingValue),
                currentPendingValueValidIndex: currentPendingValueValidIndex,
                currentPendingValueValidIndexOnHover: HoverStatus.default,
            });
        };
        /**
         * Set the pending info from the given index
         * @param index - the index to set the pending info from
         */
        ComboBoxInternal.prototype._setPendingInfoFromIndex = function (index) {
            var currentOptions = this.props.hoisted.currentOptions;
            if (index >= 0 && index < currentOptions.length) {
                var option = currentOptions[index];
                this._setPendingInfo(getPreviewText(option), index, getPreviewText(option));
            }
            else {
                this._clearPendingInfo();
            }
        };
        /**
         * Sets the pending info for the combo box
         * @param index - the index to search from
         * @param searchDirection - the direction to search
         */
        ComboBoxInternal.prototype._setPendingInfoFromIndexAndDirection = function (index, searchDirection) {
            var currentOptions = this.props.hoisted.currentOptions;
            // update index to allow content to wrap
            if (searchDirection === SearchDirection.forward && index >= currentOptions.length - 1) {
                index = -1;
            }
            else if (searchDirection === SearchDirection.backward && index <= 0) {
                index = currentOptions.length;
            }
            // get the next "valid" index
            var indexUpdate = this._getNextSelectableIndex(index, searchDirection);
            // if the two indices are equal we didn't move and
            // we should attempt to get  get the first/last "valid" index to use
            // (Note, this takes care of the potential cases where the first/last
            // item is not focusable), otherwise use the updated index
            if (index === indexUpdate) {
                if (searchDirection === SearchDirection.forward) {
                    index = this._getNextSelectableIndex(-1, searchDirection);
                }
                else if (searchDirection === SearchDirection.backward) {
                    index = this._getNextSelectableIndex(currentOptions.length, searchDirection);
                }
            }
            else {
                index = indexUpdate;
            }
            if (indexWithinBounds(currentOptions, index)) {
                this._setPendingInfoFromIndex(index);
            }
        };
        ComboBoxInternal.prototype._notifyPendingValueChanged = function (prevState) {
            var onPendingValueChanged = this.props.onPendingValueChanged;
            if (!onPendingValueChanged) {
                return;
            }
            var currentOptions = this.props.hoisted.currentOptions;
            var _a = this.state, currentPendingValue = _a.currentPendingValue, currentPendingValueValidIndex = _a.currentPendingValueValidIndex, currentPendingValueValidIndexOnHover = _a.currentPendingValueValidIndexOnHover;
            var newPendingIndex = undefined;
            var newPendingValue = undefined;
            if (currentPendingValueValidIndexOnHover !== prevState.currentPendingValueValidIndexOnHover &&
                indexWithinBounds(currentOptions, currentPendingValueValidIndexOnHover)) {
                // Set new pending index if hover index was changed
                newPendingIndex = currentPendingValueValidIndexOnHover;
            }
            else if (currentPendingValueValidIndex !== prevState.currentPendingValueValidIndex &&
                indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {
                // Set new pending index if currentPendingValueValidIndex was changed
                newPendingIndex = currentPendingValueValidIndex;
            }
            else if (currentPendingValue !== prevState.currentPendingValue) {
                // Set pendingValue in the case it was changed and no index was changed
                newPendingValue = currentPendingValue;
            }
            // Notify when there is a new pending index/value. Also, if there is a pending value, it needs to send undefined.
            if (newPendingIndex !== undefined || newPendingValue !== undefined || this._hasPendingValue) {
                onPendingValueChanged(newPendingIndex !== undefined ? currentOptions[newPendingIndex] : undefined, newPendingIndex, newPendingValue);
                this._hasPendingValue = newPendingIndex !== undefined || newPendingValue !== undefined;
            }
        };
        /**
         * Sets the isOpen state and updates focusInputAfterClose
         */
        ComboBoxInternal.prototype._setOpenStateAndFocusOnClose = function (isOpen, focusInputAfterClose) {
            this._focusInputAfterClose = focusInputAfterClose;
            this.setState({
                isOpen: isOpen,
            });
        };
        ComboBoxInternal.prototype._onOptionMouseEnter = function (index) {
            if (this._shouldIgnoreMouseEvent()) {
                return;
            }
            this.setState({
                currentPendingValueValidIndexOnHover: index,
            });
        };
        ComboBoxInternal.prototype._onOptionMouseMove = function (index) {
            this._gotMouseMove = true;
            if (!this._isScrollIdle || this.state.currentPendingValueValidIndexOnHover === index) {
                return;
            }
            this.setState({
                currentPendingValueValidIndexOnHover: index,
            });
        };
        ComboBoxInternal.prototype._shouldIgnoreMouseEvent = function () {
            return !this._isScrollIdle || !this._gotMouseMove;
        };
        /**
         * Handle dismissing the menu and eating the required key event when disabled
         * @param ev - the keyboard event that was fired
         */
        ComboBoxInternal.prototype._handleInputWhenDisabled = function (ev) {
            // If we are disabled, close the menu (if needed)
            // and eat all keystrokes other than TAB or ESC
            if (this.props.disabled) {
                if (this.state.isOpen) {
                    this.setState({ isOpen: false });
                }
                // When disabled stop propagation and prevent default
                // of the event unless we have a tab, escape, or function key
                if (ev !== null &&
                    // eslint-disable-next-line deprecation/deprecation
                    ev.which !== KeyCodes.tab &&
                    // eslint-disable-next-line deprecation/deprecation
                    ev.which !== KeyCodes.escape &&
                    // eslint-disable-next-line deprecation/deprecation
                    (ev.which < 112 /* F1 */ || ev.which > 123) /* F12 */) {
                    ev.stopPropagation();
                    ev.preventDefault();
                }
            }
        };
        ComboBoxInternal.prototype._handleTouchAndPointerEvent = function () {
            var _this = this;
            // If we already have an existing timeout from a previous touch and pointer event
            // cancel that timeout so we can set a nwe one.
            if (this._lastTouchTimeoutId !== undefined) {
                this._async.clearTimeout(this._lastTouchTimeoutId);
                this._lastTouchTimeoutId = undefined;
            }
            this._processingTouch = true;
            this._lastTouchTimeoutId = this._async.setTimeout(function () {
                _this._processingTouch = false;
                _this._lastTouchTimeoutId = undefined;
            }, TouchIdleDelay);
        };
        /**
         * Get the styles for the current option.
         * @param item - Item props for the current option
         */
        ComboBoxInternal.prototype._getCaretButtonStyles = function () {
            var customCaretDownButtonStyles = this.props.caretDownButtonStyles;
            return getCaretDownButtonStyles(this.props.theme, customCaretDownButtonStyles);
        };
        /**
         * Get the styles for the current option.
         * @param item - Item props for the current option
         */
        ComboBoxInternal.prototype._getCurrentOptionStyles = function (item) {
            var customStylesForAllOptions = this.props.comboBoxOptionStyles;
            var customStylesForCurrentOption = item.styles;
            return getOptionStyles(this.props.theme, customStylesForAllOptions, customStylesForCurrentOption, this._isPendingOption(item), item.hidden, this._isOptionHighlighted(item.index));
        };
        /**
         * Get the aria-activedescendant value for the combo box.
         * @returns the id of the current focused combo item, otherwise the id of the currently selected element,
         * null otherwise
         */
        ComboBoxInternal.prototype._getAriaActiveDescendantValue = function () {
            var selectedIndices = this.props.hoisted.selectedIndices;
            var _a = this.state, isOpen = _a.isOpen, currentPendingValueValidIndex = _a.currentPendingValueValidIndex;
            var descendantText = isOpen && (selectedIndices === null || selectedIndices === void 0 ? void 0 : selectedIndices.length) ? this._id + '-list' + selectedIndices[0] : undefined;
            if (isOpen && this._hasFocus() && currentPendingValueValidIndex !== -1) {
                descendantText = this._id + '-list' + currentPendingValueValidIndex;
            }
            return descendantText;
        };
        /**
         * Get the aria autocomplete value for the combo box
         * @returns 'inline' if auto-complete automatically dynamic, 'both' if we have a list of possible values to pick from
         * and can dynamically populate input, and 'none' if auto-complete is not enabled as we can't give user inputs.
         */
        ComboBoxInternal.prototype._getAriaAutoCompleteValue = function () {
            var autoComplete = !this.props.disabled && this.props.autoComplete === 'on';
            return autoComplete ? (this.props.allowFreeform ? 'inline' : 'both') : 'none';
        };
        ComboBoxInternal.prototype._isPendingOption = function (item) {
            return item && item.index === this.state.currentPendingValueValidIndex;
        };
        /**
         * Returns true if the component has some kind of focus. If it's either focusing or if it's focused
         */
        ComboBoxInternal.prototype._hasFocus = function () {
            return this.state.focusState !== 'none';
        };
        ComboBoxInternal = tslib.__decorate([
            customizable('ComboBox', ['theme', 'styles'], true)
        ], ComboBoxInternal);
        return ComboBoxInternal;
    }(React__namespace.Component));
    /**
     * Get the indices of the options that are marked as selected
     * @param options - the combo box options
     * @param selectedKeys - the known selected keys to find
     * @returns - an array of the indices of the selected options, empty array if nothing is selected
     */
    function getSelectedIndices(options, selectedKeys) {
        if (!options || !selectedKeys) {
            return [];
        }
        var selectedIndices = {};
        options.forEach(function (option, index) {
            if (option.selected) {
                selectedIndices[index] = true;
            }
        });
        var _loop_1 = function (selectedKey) {
            var index = findIndex(options, function (option) { return option.key === selectedKey; });
            if (index > -1) {
                selectedIndices[index] = true;
            }
        };
        for (var _i = 0, selectedKeys_1 = selectedKeys; _i < selectedKeys_1.length; _i++) {
            var selectedKey = selectedKeys_1[_i];
            _loop_1(selectedKey);
        }
        return Object.keys(selectedIndices).map(Number).sort();
    }
    /**
     * Given default selected key(s) and selected key(s), return the selected keys(s).
     * When default selected key(s) are available, they take precedence and return them instead of selected key(s).
     *
     * @returns No matter what specific types the input parameters are, always return an array of
     *  either strings or numbers instead of primitive type.  This normalization makes caller's logic easier.
     */
    function buildDefaultSelectedKeys(defaultSelectedKey, selectedKey) {
        var selectedKeys = buildSelectedKeys(defaultSelectedKey);
        if (selectedKeys.length) {
            return selectedKeys;
        }
        return buildSelectedKeys(selectedKey);
    }
    function buildSelectedKeys(selectedKey) {
        if (selectedKey === undefined) {
            return [];
        }
        // need to cast here so typescript does not complain
        return (selectedKey instanceof Array ? selectedKey : [selectedKey]);
    }
    function normalizeToString(value) {
        return value || '';
    }
    /**
     * Is the index within the bounds of the array?
     * @param options - options to check if the index is valid for
     * @param index - the index to check
     * @returns - true if the index is valid for the given options, false otherwise
     */
    function indexWithinBounds(options, index) {
        return !!options && index >= 0 && index < options.length;
    }
    /** Whether this is a normal option, not a header or divider or select all. */
    function isNormalOption(option) {
        return (option.itemType !== SelectableOptionMenuItemType.Header &&
            option.itemType !== SelectableOptionMenuItemType.Divider &&
            option.itemType !== SelectableOptionMenuItemType.SelectAll);
    }
    /** Whether this is a selectable option, not a header or divider. */
    function isSelectableOption(option) {
        return (option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider);
    }
    /**
     * For scenarios where the option's `text` prop contains embedded styles, we use the option's
     * `ariaLabel` value as the text in the input and for autocomplete matching. We know to use this
     * when the `useAriaLabelAsText` prop is set to true.
     */
    function getPreviewText(item) {
        return item.useAriaLabelAsText && item.ariaLabel ? item.ariaLabel : item.text;
    }
    /**
     * Returns true if the key for the event is alt (Mac option) or meta (Mac command).
     */
    function isAltOrMeta(ev) {
        // eslint-disable-next-line deprecation/deprecation
        return ev.which === KeyCodes.alt || ev.key === 'Meta';
    }

    /**
     * {@docCategory List}
     */
    var ScrollToMode = {
        /**
         * Does not make any consideration to where in the viewport the item should align to.
         */
        auto: 0,
        /**
         * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.
         */
        top: 1,
        /**
         * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.
         */
        bottom: 2,
        /**
         * Attempts to scroll the list so the desired item is in the exact center of the viewport.
         */
        center: 3,
    };

    var RESIZE_DELAY$1 = 16;
    var MIN_SCROLL_UPDATE_DELAY = 100;
    var MAX_SCROLL_UPDATE_DELAY = 500;
    var IDLE_DEBOUNCE_DELAY = 200;
    // The amount of time to wait before declaring that the list isn't scrolling
    var DONE_SCROLLING_WAIT = 500;
    var DEFAULT_ITEMS_PER_PAGE = 10;
    var DEFAULT_PAGE_HEIGHT = 30;
    var DEFAULT_RENDERED_WINDOWS_BEHIND$1 = 2;
    var DEFAULT_RENDERED_WINDOWS_AHEAD$1 = 2;
    var PAGE_KEY_PREFIX = 'page-';
    var SPACER_KEY_PREFIX = 'spacer-';
    var EMPTY_RECT = {
        top: -1,
        bottom: -1,
        left: -1,
        right: -1,
        width: 0,
        height: 0,
    };
    // Naming expensive measures so that they're named in profiles.
    var _measurePageRect = function (element) { return element.getBoundingClientRect(); };
    var _measureSurfaceRect = _measurePageRect;
    var _measureScrollRect = _measurePageRect;
    /**
     * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback
     * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if
     * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.
     *
     * The algorithm for rendering pages works like this:
     *
     * 1. Predict visible pages based on "current measure data" (page heights, surface position, visible window)
     * 2. If changes are necessary, apply changes (add/remove pages)
     * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect
     * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously
     *
     * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that
     * we can avoid re-measuring during operations that should not alter heights, like scrolling.
     *
     * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,
     * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.
     * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.
     *
     * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,
     * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion
     * number, which we associate with cached measurements and use to determine if a remeasure should occur.
     */
    var List = /** @class */ (function (_super) {
        tslib.__extends(List, _super);
        function List(props) {
            var _this = _super.call(this, props) || this;
            _this._root = React__namespace.createRef();
            _this._surface = React__namespace.createRef();
            _this._pageRefs = {};
            _this._getDerivedStateFromProps = function (nextProps, previousState) {
                if (nextProps.items !== _this.props.items ||
                    nextProps.renderCount !== _this.props.renderCount ||
                    nextProps.startIndex !== _this.props.startIndex ||
                    nextProps.version !== _this.props.version) {
                    // We have received new items so we want to make sure that initially we only render a single window to
                    // fill the currently visible rect, and then later render additional windows.
                    _this._resetRequiredWindows();
                    _this._requiredRect = null;
                    _this._measureVersion++;
                    _this._invalidatePageCache();
                    return _this._updatePages(nextProps, previousState);
                }
                return previousState;
            };
            _this._onRenderRoot = function (props) {
                var rootRef = props.rootRef, surfaceElement = props.surfaceElement, divProps = props.divProps;
                return (React__namespace.createElement("div", tslib.__assign({ ref: rootRef }, divProps), surfaceElement));
            };
            _this._onRenderSurface = function (props) {
                var surfaceRef = props.surfaceRef, pageElements = props.pageElements, divProps = props.divProps;
                return (React__namespace.createElement("div", tslib.__assign({ ref: surfaceRef }, divProps), pageElements));
            };
            _this._onRenderPage = function (pageProps, defaultRender) {
                var _a = _this.props, onRenderCell = _a.onRenderCell, role = _a.role;
                var _b = pageProps.page, _c = _b.items, items = _c === void 0 ? [] : _c, startIndex = _b.startIndex, divProps = tslib.__rest(pageProps, ["page"]);
                // only assign list item role if no role is assigned
                var cellRole = role === undefined ? 'listitem' : 'presentation';
                var cells = [];
                for (var i = 0; i < items.length; i++) {
                    var index = startIndex + i;
                    var item = items[i];
                    var itemKey = _this.props.getKey ? _this.props.getKey(item, index) : item && item.key;
                    if (itemKey === null || itemKey === undefined) {
                        itemKey = index;
                    }
                    cells.push(React__namespace.createElement("div", { role: cellRole, className: 'ms-List-cell', key: itemKey, "data-list-index": index, "data-automationid": "ListCell" }, onRenderCell &&
                        onRenderCell(item, index, !_this.props.ignoreScrollingState ? _this.state.isScrolling : undefined)));
                }
                return React__namespace.createElement("div", tslib.__assign({}, divProps), cells);
            };
            initializeComponentRef(_this);
            _this.state = {
                pages: [],
                isScrolling: false,
                getDerivedStateFromProps: _this._getDerivedStateFromProps,
            };
            _this._async = new Async(_this);
            _this._events = new EventGroup(_this);
            _this._estimatedPageHeight = 0;
            _this._totalEstimates = 0;
            _this._requiredWindowsAhead = 0;
            _this._requiredWindowsBehind = 0;
            // Track the measure version for everything.
            _this._measureVersion = 0;
            // Ensure that scrolls are lazy updated.
            _this._onAsyncScroll = _this._async.debounce(_this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {
                leading: false,
                maxWait: MAX_SCROLL_UPDATE_DELAY,
            });
            _this._onAsyncIdle = _this._async.debounce(_this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {
                leading: false,
            });
            _this._onAsyncResize = _this._async.debounce(_this._onAsyncResize, RESIZE_DELAY$1, {
                leading: false,
            });
            _this._onScrollingDone = _this._async.debounce(_this._onScrollingDone, DONE_SCROLLING_WAIT, {
                leading: false,
            });
            _this._cachedPageHeights = {};
            _this._estimatedPageHeight = 0;
            _this._focusedIndex = -1;
            _this._pageCache = {};
            return _this;
        }
        List.getDerivedStateFromProps = function (nextProps, previousState) {
            return previousState.getDerivedStateFromProps(nextProps, previousState);
        };
        Object.defineProperty(List.prototype, "pageRefs", {
            get: function () {
                return this._pageRefs;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback
         * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.
         *
         * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling
         * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.
         *
         * @param index - Index of item to scroll to
         * @param measureItem - Optional callback to measure the height of an individual item
         * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling
         */
        List.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {
            if (scrollToMode === void 0) { scrollToMode = ScrollToMode.auto; }
            var startIndex = this.props.startIndex;
            var renderCount = this._getRenderCount();
            var endIndex = startIndex + renderCount;
            var allowedRect = this._allowedRect;
            var scrollTop = 0;
            var itemsPerPage = 1;
            for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {
                var pageSpecification = this._getPageSpecification(itemIndex, allowedRect);
                var pageHeight = pageSpecification.height;
                itemsPerPage = pageSpecification.itemCount;
                var requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;
                if (requestedIndexIsInPage) {
                    // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in
                    // just the given item, otherwise we'll only bring the page into view
                    if (measureItem && this._scrollElement) {
                        var scrollRect = _measureScrollRect(this._scrollElement);
                        var scrollWindow = {
                            top: this._scrollElement.scrollTop,
                            bottom: this._scrollElement.scrollTop + scrollRect.height,
                        };
                        // Adjust for actual item position within page
                        var itemPositionWithinPage = index - itemIndex;
                        for (var itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {
                            scrollTop += measureItem(itemIndex + itemIndexInPage);
                        }
                        var scrollBottom = scrollTop + measureItem(index);
                        // If scrollToMode is set to something other than auto, we always want to
                        // scroll the item into a specific position on the page.
                        switch (scrollToMode) {
                            case ScrollToMode.top:
                                this._scrollElement.scrollTop = scrollTop;
                                return;
                            case ScrollToMode.bottom:
                                this._scrollElement.scrollTop = scrollBottom - scrollRect.height;
                                return;
                            case ScrollToMode.center:
                                this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;
                                return;
                        }
                        var itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;
                        if (itemIsFullyVisible) {
                            // Item is already visible, do nothing.
                            return;
                        }
                        var itemIsPartiallyAbove = scrollTop < scrollWindow.top;
                        var itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;
                        if (itemIsPartiallyAbove) ;
                        else if (itemIsPartiallyBelow) {
                            //  Adjust scrollTop position to just bring in the element
                            // .------.  - scrollTop
                            // |      |
                            // | .------.
                            // '-|----' | - scrollWindow.bottom
                            //   | Item |
                            //   '------' - scrollBottom
                            scrollTop = scrollBottom - scrollRect.height;
                        }
                    }
                    if (this._scrollElement) {
                        this._scrollElement.scrollTop = scrollTop;
                    }
                    return;
                }
                scrollTop += pageHeight;
            }
        };
        List.prototype.getStartItemIndexInView = function (measureItem) {
            var pages = this.state.pages || [];
            for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {
                var page = pages_1[_i];
                var isPageVisible = !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;
                if (isPageVisible) {
                    if (!measureItem) {
                        var rowHeight = Math.floor(page.height / page.itemCount);
                        return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);
                    }
                    else {
                        var totalRowHeight = 0;
                        for (var itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {
                            var rowHeight = measureItem(itemIndex);
                            if (page.top + totalRowHeight <= this._scrollTop &&
                                this._scrollTop < page.top + totalRowHeight + rowHeight) {
                                return itemIndex;
                            }
                            else {
                                totalRowHeight += rowHeight;
                            }
                        }
                    }
                }
            }
            return 0;
        };
        List.prototype.componentDidMount = function () {
            this.setState(this._updatePages(this.props, this.state));
            this._measureVersion++;
            this._scrollElement = findScrollableParent(this._root.current);
            this._events.on(window, 'resize', this._onAsyncResize);
            if (this._root.current) {
                this._events.on(this._root.current, 'focus', this._onFocus, true);
            }
            if (this._scrollElement) {
                this._events.on(this._scrollElement, 'scroll', this._onScroll);
                this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);
            }
        };
        List.prototype.componentDidUpdate = function (previousProps, previousState) {
            // Multiple updates may have been queued, so the callback will reflect all of them.
            // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.
            var finalProps = this.props;
            var finalState = this.state;
            if (this.state.pagesVersion !== previousState.pagesVersion) {
                // If we weren't provided with the page height, measure the pages
                if (!finalProps.getPageHeight) {
                    // If measured version is invalid since we've updated the DOM
                    var heightsChanged = this._updatePageMeasurements(finalState.pages);
                    // On first render, we should re-measure so that we don't get a visual glitch.
                    if (heightsChanged) {
                        this._materializedRect = null;
                        if (!this._hasCompletedFirstRender) {
                            this._hasCompletedFirstRender = true;
                            this.setState(this._updatePages(finalProps, finalState));
                        }
                        else {
                            this._onAsyncScroll();
                        }
                    }
                    else {
                        // Enqueue an idle bump.
                        this._onAsyncIdle();
                    }
                }
                else {
                    // Enqueue an idle bump
                    this._onAsyncIdle();
                }
                // Notify the caller that rendering the new pages has completed
                if (finalProps.onPagesUpdated) {
                    finalProps.onPagesUpdated(finalState.pages);
                }
            }
        };
        List.prototype.componentWillUnmount = function () {
            this._async.dispose();
            this._events.dispose();
            delete this._scrollElement;
        };
        List.prototype.shouldComponentUpdate = function (newProps, newState) {
            var oldPages = this.state.pages;
            var newPages = newState.pages;
            var shouldComponentUpdate = false;
            // Update if the page stops scrolling
            if (!newState.isScrolling && this.state.isScrolling) {
                return true;
            }
            if (newProps.version !== this.props.version) {
                return true;
            }
            if (newProps.items === this.props.items && oldPages.length === newPages.length) {
                for (var i = 0; i < oldPages.length; i++) {
                    var oldPage = oldPages[i];
                    var newPage = newPages[i];
                    if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {
                        shouldComponentUpdate = true;
                        break;
                    }
                }
            }
            else {
                shouldComponentUpdate = true;
            }
            return shouldComponentUpdate;
        };
        List.prototype.forceUpdate = function () {
            this._invalidatePageCache();
            // Ensure that when the list is force updated we update the pages first before render.
            this._updateRenderRects(this.props, this.state, true);
            this.setState(this._updatePages(this.props, this.state));
            this._measureVersion++;
            _super.prototype.forceUpdate.call(this);
        };
        /**
         * Get the current height the list and it's pages.
         */
        List.prototype.getTotalListHeight = function () {
            return this._surfaceRect.height;
        };
        List.prototype.render = function () {
            var _a = this.props, className = _a.className, _b = _a.role, role = _b === void 0 ? 'list' : _b, onRenderSurface = _a.onRenderSurface, onRenderRoot = _a.onRenderRoot;
            var _c = this.state.pages, pages = _c === void 0 ? [] : _c;
            var pageElements = [];
            var divProps = getNativeProps(this.props, divProperties);
            for (var _i = 0, pages_2 = pages; _i < pages_2.length; _i++) {
                var page = pages_2[_i];
                pageElements.push(this._renderPage(page));
            }
            var finalOnRenderSurface = onRenderSurface
                ? composeRenderFunction(onRenderSurface, this._onRenderSurface)
                : this._onRenderSurface;
            var finalOnRenderRoot = onRenderRoot
                ? composeRenderFunction(onRenderRoot, this._onRenderRoot)
                : this._onRenderRoot;
            return finalOnRenderRoot({
                rootRef: this._root,
                pages: pages,
                surfaceElement: finalOnRenderSurface({
                    surfaceRef: this._surface,
                    pages: pages,
                    pageElements: pageElements,
                    divProps: {
                        role: 'presentation',
                        className: 'ms-List-surface',
                    },
                }),
                divProps: tslib.__assign(tslib.__assign({}, divProps), { className: css('ms-List', className), role: pageElements.length > 0 ? role : undefined, 'aria-label': pageElements.length > 0 ? divProps['aria-label'] : undefined }),
            });
        };
        List.prototype._shouldVirtualize = function (props) {
            if (props === void 0) { props = this.props; }
            var onShouldVirtualize = props.onShouldVirtualize;
            return !onShouldVirtualize || onShouldVirtualize(props);
        };
        /**
         * when props.items change or forceUpdate called, throw away cached pages
         */
        List.prototype._invalidatePageCache = function () {
            this._pageCache = {};
        };
        List.prototype._renderPage = function (page) {
            var _this = this;
            var usePageCache = this.props.usePageCache;
            var cachedPage;
            // if usePageCache is set and cached page element can be found, just return cached page
            if (usePageCache) {
                cachedPage = this._pageCache[page.key];
                if (cachedPage && cachedPage.pageElement) {
                    return cachedPage.pageElement;
                }
            }
            var pageStyle = this._getPageStyle(page);
            var _a = this.props.onRenderPage, onRenderPage = _a === void 0 ? this._onRenderPage : _a;
            var pageElement = onRenderPage({
                page: page,
                className: 'ms-List-page',
                key: page.key,
                ref: function (newRef) {
                    _this._pageRefs[page.key] = newRef;
                },
                style: pageStyle,
                role: 'presentation',
            }, this._onRenderPage);
            // cache the first page for now since it is re-rendered a lot times unnecessarily.
            // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.
            // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the
            // first 30 items did not change, we still re-rendered all of them in this props.items change.
            if (usePageCache && page.startIndex === 0) {
                this._pageCache[page.key] = {
                    page: page,
                    pageElement: pageElement,
                };
            }
            return pageElement;
        };
        /** Generate the style object for the page. */
        List.prototype._getPageStyle = function (page) {
            var getPageStyle = this.props.getPageStyle;
            return tslib.__assign(tslib.__assign({}, (getPageStyle ? getPageStyle(page) : {})), (!page.items
                ? {
                    height: page.height,
                }
                : {}));
        };
        /** Track the last item index focused so that we ensure we keep it rendered. */
        List.prototype._onFocus = function (ev) {
            var target = ev.target;
            while (target !== this._surface.current) {
                var indexString = target.getAttribute('data-list-index');
                if (indexString) {
                    this._focusedIndex = Number(indexString);
                    break;
                }
                target = getParent(target);
            }
        };
        /**
         * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,
         * we will call onAsyncIdle which will reset it back to it's correct value.
         */
        List.prototype._onScroll = function () {
            if (!this.state.isScrolling && !this.props.ignoreScrollingState) {
                this.setState({ isScrolling: true });
            }
            this._resetRequiredWindows();
            this._onScrollingDone();
        };
        List.prototype._resetRequiredWindows = function () {
            this._requiredWindowsAhead = 0;
            this._requiredWindowsBehind = 0;
        };
        /**
         * Debounced method to asynchronously update the visible region on a scroll event.
         */
        List.prototype._onAsyncScroll = function () {
            this._updateRenderRects(this.props, this.state);
            // Only update pages when the visible rect falls outside of the materialized rect.
            if (!this._materializedRect || !_isContainedWithin(this._requiredRect, this._materializedRect)) {
                this.setState(this._updatePages(this.props, this.state));
            }
        };
        /**
         * This is an async debounced method that will try and increment the windows we render. If we can increment
         * either, we increase the amount we render and re-evaluate.
         */
        List.prototype._onAsyncIdle = function () {
            var _a = this.props, renderedWindowsAhead = _a.renderedWindowsAhead, renderedWindowsBehind = _a.renderedWindowsBehind;
            var _b = this, requiredWindowsAhead = _b._requiredWindowsAhead, requiredWindowsBehind = _b._requiredWindowsBehind;
            var windowsAhead = Math.min(renderedWindowsAhead, requiredWindowsAhead + 1);
            var windowsBehind = Math.min(renderedWindowsBehind, requiredWindowsBehind + 1);
            if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {
                // console.log('idling', windowsBehind, windowsAhead);
                this._requiredWindowsAhead = windowsAhead;
                this._requiredWindowsBehind = windowsBehind;
                this._updateRenderRects(this.props, this.state);
                this.setState(this._updatePages(this.props, this.state));
            }
            if (renderedWindowsAhead > windowsAhead || renderedWindowsBehind > windowsBehind) {
                // Async increment on next tick.
                this._onAsyncIdle();
            }
        };
        /**
         * Function to call when the list is done scrolling.
         * This function is debounced.
         */
        List.prototype._onScrollingDone = function () {
            if (!this.props.ignoreScrollingState) {
                this.setState({ isScrolling: false });
            }
        };
        List.prototype._onAsyncResize = function () {
            this.forceUpdate();
        };
        List.prototype._updatePages = function (nextProps, previousState) {
            // console.log('updating pages');
            if (!this._requiredRect) {
                this._updateRenderRects(nextProps, previousState);
            }
            var newListState = this._buildPages(nextProps, previousState);
            var oldListPages = previousState.pages;
            this._notifyPageChanges(oldListPages, newListState.pages, this.props);
            return tslib.__assign(tslib.__assign(tslib.__assign({}, previousState), newListState), { pagesVersion: {} });
        };
        /**
         * Notify consumers that the rendered pages have changed
         * @param oldPages - The old pages
         * @param newPages - The new pages
         * @param props - The props to use
         */
        List.prototype._notifyPageChanges = function (oldPages, newPages, props) {
            var onPageAdded = props.onPageAdded, onPageRemoved = props.onPageRemoved;
            if (onPageAdded || onPageRemoved) {
                var renderedIndexes = {};
                for (var _i = 0, oldPages_1 = oldPages; _i < oldPages_1.length; _i++) {
                    var page = oldPages_1[_i];
                    if (page.items) {
                        renderedIndexes[page.startIndex] = page;
                    }
                }
                for (var _a = 0, newPages_1 = newPages; _a < newPages_1.length; _a++) {
                    var page = newPages_1[_a];
                    if (page.items) {
                        if (!renderedIndexes[page.startIndex]) {
                            this._onPageAdded(page);
                        }
                        else {
                            delete renderedIndexes[page.startIndex];
                        }
                    }
                }
                for (var index in renderedIndexes) {
                    if (renderedIndexes.hasOwnProperty(index)) {
                        this._onPageRemoved(renderedIndexes[index]);
                    }
                }
            }
        };
        List.prototype._updatePageMeasurements = function (pages) {
            var heightChanged = false;
            // when not in virtualize mode, we render all the items without page measurement
            if (!this._shouldVirtualize()) {
                return heightChanged;
            }
            for (var i = 0; i < pages.length; i++) {
                var page = pages[i];
                if (page.items) {
                    heightChanged = this._measurePage(page) || heightChanged;
                }
            }
            return heightChanged;
        };
        /**
         * Given a page, measure its dimensions, update cache.
         * @returns True if the height has changed.
         */
        List.prototype._measurePage = function (page) {
            var hasChangedHeight = false;
            var pageElement = this._pageRefs[page.key];
            var cachedHeight = this._cachedPageHeights[page.startIndex];
            // console.log('   * measure attempt', page.startIndex, cachedHeight);
            if (pageElement &&
                this._shouldVirtualize() &&
                (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {
                var newClientRect = {
                    width: pageElement.clientWidth,
                    height: pageElement.clientHeight,
                };
                if (newClientRect.height || newClientRect.width) {
                    hasChangedHeight = page.height !== newClientRect.height;
                    // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);
                    page.height = newClientRect.height;
                    this._cachedPageHeights[page.startIndex] = {
                        height: newClientRect.height,
                        measureVersion: this._measureVersion,
                    };
                    this._estimatedPageHeight = Math.round((this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1));
                    this._totalEstimates++;
                }
            }
            return hasChangedHeight;
        };
        /** Called when a page has been added to the DOM. */
        List.prototype._onPageAdded = function (page) {
            var onPageAdded = this.props.onPageAdded;
            // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));
            if (onPageAdded) {
                onPageAdded(page);
            }
        };
        /** Called when a page has been removed from the DOM. */
        List.prototype._onPageRemoved = function (page) {
            var onPageRemoved = this.props.onPageRemoved;
            // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));
            if (onPageRemoved) {
                onPageRemoved(page);
            }
        };
        /** Build up the pages that should be rendered. */
        List.prototype._buildPages = function (props, state) {
            var renderCount = props.renderCount;
            var items = props.items, startIndex = props.startIndex, getPageHeight = props.getPageHeight;
            renderCount = this._getRenderCount(props);
            var materializedRect = tslib.__assign({}, EMPTY_RECT);
            var pages = [];
            var itemsPerPage = 1;
            var pageTop = 0;
            var currentSpacer = null;
            var focusedIndex = this._focusedIndex;
            var endIndex = startIndex + renderCount;
            var shouldVirtualize = this._shouldVirtualize(props);
            // First render is very important to track; when we render cells, we have no idea of estimated page height.
            // So we should default to rendering only the first page so that we can get information.
            // However if the user provides a measure function, let's just assume they know the right heights.
            var isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;
            var allowedRect = this._allowedRect;
            var _loop_1 = function (itemIndex) {
                var pageSpecification = this_1._getPageSpecification(itemIndex, allowedRect);
                var pageHeight = pageSpecification.height;
                var pageData = pageSpecification.data;
                var key = pageSpecification.key;
                itemsPerPage = pageSpecification.itemCount;
                var pageBottom = pageTop + pageHeight - 1;
                var isPageRendered = findIndex(state.pages, function (page) { return !!page.items && page.startIndex === itemIndex; }) > -1;
                var isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom);
                var isPageInRequiredRange = !this_1._requiredRect || (pageBottom >= this_1._requiredRect.top && pageTop <= this_1._requiredRect.bottom);
                var isPageVisible = (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;
                var isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;
                var isFirstPage = itemIndex === startIndex;
                // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +
                // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);
                // Only render whats visible, focused, or first page,
                // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages
                if (isPageVisible || isPageFocused || isFirstPage) {
                    if (currentSpacer) {
                        pages.push(currentSpacer);
                        currentSpacer = null;
                    }
                    var itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);
                    var newPage = this_1._createPage(key, items.slice(itemIndex, itemIndex + itemsInPage), itemIndex, undefined, undefined, pageData);
                    newPage.top = pageTop;
                    newPage.height = pageHeight;
                    if (this_1._visibleRect && this_1._visibleRect.bottom) {
                        newPage.isVisible = pageBottom >= this_1._visibleRect.top && pageTop <= this_1._visibleRect.bottom;
                    }
                    pages.push(newPage);
                    if (isPageInRequiredRange && this_1._allowedRect) {
                        _mergeRect(materializedRect, {
                            top: pageTop,
                            bottom: pageBottom,
                            height: pageHeight,
                            left: allowedRect.left,
                            right: allowedRect.right,
                            width: allowedRect.width,
                        });
                    }
                }
                else {
                    if (!currentSpacer) {
                        currentSpacer = this_1._createPage(SPACER_KEY_PREFIX + itemIndex, undefined, itemIndex, 0, undefined, pageData, true /*isSpacer*/);
                    }
                    currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;
                    currentSpacer.itemCount += itemsPerPage;
                }
                pageTop += pageBottom - pageTop + 1;
                // in virtualized mode, we render need to render first page then break and measure,
                // otherwise, we render all items without measurement to make rendering fast
                if (isFirstRender && shouldVirtualize) {
                    return "break";
                }
            };
            var this_1 = this;
            for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {
                var state_1 = _loop_1(itemIndex);
                if (state_1 === "break")
                    break;
            }
            if (currentSpacer) {
                currentSpacer.key = SPACER_KEY_PREFIX + 'end';
                pages.push(currentSpacer);
            }
            this._materializedRect = materializedRect;
            // console.log('materialized: ', materializedRect);
            return tslib.__assign(tslib.__assign({}, state), { pages: pages, measureVersion: this._measureVersion });
        };
        List.prototype._getPageSpecification = function (itemIndex, visibleRect) {
            var getPageSpecification = this.props.getPageSpecification;
            if (getPageSpecification) {
                var pageData = getPageSpecification(itemIndex, visibleRect);
                var _a = pageData.itemCount, itemCount = _a === void 0 ? this._getItemCountForPage(itemIndex, visibleRect) : _a;
                var _b = pageData.height, height = _b === void 0 ? this._getPageHeight(itemIndex, visibleRect, itemCount) : _b;
                return {
                    itemCount: itemCount,
                    height: height,
                    data: pageData.data,
                    key: pageData.key,
                };
            }
            else {
                var itemCount = this._getItemCountForPage(itemIndex, visibleRect);
                return {
                    itemCount: itemCount,
                    height: this._getPageHeight(itemIndex, visibleRect, itemCount),
                };
            }
        };
        /**
         * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to
         * cached height, or estimated page height, or default page height.
         */
        List.prototype._getPageHeight = function (itemIndex, visibleRect, itemsPerPage) {
            if (this.props.getPageHeight) {
                return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);
            }
            else {
                var cachedHeight = this._cachedPageHeights[itemIndex];
                return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;
            }
        };
        List.prototype._getItemCountForPage = function (itemIndex, visibileRect) {
            var itemsPerPage = this.props.getItemCountForPage
                ? this.props.getItemCountForPage(itemIndex, visibileRect)
                : DEFAULT_ITEMS_PER_PAGE;
            return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;
        };
        List.prototype._createPage = function (pageKey, items, startIndex, count, style, data, isSpacer) {
            if (startIndex === void 0) { startIndex = -1; }
            if (count === void 0) { count = items ? items.length : 0; }
            if (style === void 0) { style = {}; }
            pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;
            var cachedPage = this._pageCache[pageKey];
            if (cachedPage && cachedPage.page) {
                return cachedPage.page;
            }
            return {
                key: pageKey,
                startIndex: startIndex,
                itemCount: count,
                items: items,
                style: style,
                top: 0,
                height: 0,
                data: data,
                isSpacer: isSpacer || false,
            };
        };
        List.prototype._getRenderCount = function (props) {
            var _a = props || this.props, items = _a.items, startIndex = _a.startIndex, renderCount = _a.renderCount;
            return renderCount === undefined ? (items ? items.length - startIndex : 0) : renderCount;
        };
        /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */
        List.prototype._updateRenderRects = function (props, state, forceUpdate) {
            var renderedWindowsAhead = props.renderedWindowsAhead, renderedWindowsBehind = props.renderedWindowsBehind;
            var pages = state.pages;
            // when not in virtualize mode, we render all items without measurement to optimize page rendering perf
            if (!this._shouldVirtualize(props)) {
                return;
            }
            var surfaceRect = this._surfaceRect || tslib.__assign({}, EMPTY_RECT);
            var scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;
            var scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;
            // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.
            // This needs to be called to recalculate when new pages should be loaded.
            // We check to see how far we've scrolled and if it's further than a third of a page we run it again.
            if (this._surface.current &&
                (forceUpdate ||
                    !pages ||
                    !this._surfaceRect ||
                    !scrollHeight ||
                    scrollHeight !== this._scrollHeight ||
                    Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)) {
                surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);
                this._scrollTop = scrollTop;
            }
            // If the scroll height has changed, something in the container likely resized and
            // we should redo the page heights incase their content resized.
            if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {
                this._measureVersion++;
            }
            this._scrollHeight = scrollHeight || 0;
            // If the surface is above the container top or below the container bottom, or if this is not the first
            // render return empty rect.
            // The first time the list gets rendered we need to calculate the rectangle. The width of the list is
            // used to calculate the width of the list items.
            var visibleTop = Math.max(0, -surfaceRect.top);
            var win = getWindow(this._root.current);
            var visibleRect = {
                top: visibleTop,
                left: surfaceRect.left,
                bottom: visibleTop + win.innerHeight,
                right: surfaceRect.right,
                width: surfaceRect.width,
                height: win.innerHeight,
            };
            // The required/allowed rects are adjusted versions of the visible rect.
            this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);
            this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind, renderedWindowsAhead);
            // store the visible rect for later use.
            this._visibleRect = visibleRect;
        };
        List.defaultProps = {
            startIndex: 0,
            onRenderCell: function (item, index, containsFocus) { return React__namespace.createElement(React__namespace.Fragment, null, (item && item.name) || ''); },
            renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD$1,
            renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND$1,
        };
        return List;
    }(React__namespace.Component));
    function _expandRect(rect, pagesBefore, pagesAfter) {
        var top = rect.top - pagesBefore * rect.height;
        var height = rect.height + (pagesBefore + pagesAfter) * rect.height;
        return {
            top: top,
            bottom: top + height,
            height: height,
            left: rect.left,
            right: rect.right,
            width: rect.width,
        };
    }
    function _isContainedWithin(innerRect, outerRect) {
        return (innerRect.top >= outerRect.top &&
            innerRect.left >= outerRect.left &&
            innerRect.bottom <= outerRect.bottom &&
            innerRect.right <= outerRect.right);
    }
    function _mergeRect(targetRect, newRect) {
        targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;
        targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;
        targetRect.bottom =
            newRect.bottom > targetRect.bottom || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;
        targetRect.right = newRect.right > targetRect.right || targetRect.right === -1 ? newRect.right : targetRect.right;
        targetRect.width = targetRect.right - targetRect.left + 1;
        targetRect.height = targetRect.bottom - targetRect.top + 1;
        return targetRect;
    }

    var VirtualizedComboBox = /** @class */ (function (_super) {
        tslib.__extends(VirtualizedComboBox, _super);
        function VirtualizedComboBox(props) {
            var _this = _super.call(this, props) || this;
            /** The combo box element */
            _this._comboBox = React__namespace.createRef();
            /** The virtualized list element */
            _this._list = React__namespace.createRef();
            _this._onRenderList = function (props) {
                var id = props.id, onRenderItem = props.onRenderItem;
                // Render virtualized list
                return (React__namespace.createElement(List, { componentRef: _this._list, role: "listbox", id: id + "-list", "aria-labelledby": id + "-label", items: props.options, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onRenderCell: onRenderItem ? function (item) { return onRenderItem(item); } : function () { return null; } }));
            };
            _this._onScrollToItem = function (itemIndex) {
                // We are using the List component, call scrollToIndex
                _this._list.current && _this._list.current.scrollToIndex(itemIndex);
            };
            initializeComponentRef(_this);
            return _this;
        }
        Object.defineProperty(VirtualizedComboBox.prototype, "selectedOptions", {
            /**
             * All selected options
             */
            get: function () {
                if (this._comboBox.current) {
                    return this._comboBox.current.selectedOptions;
                }
                return [];
            },
            enumerable: false,
            configurable: true
        });
        VirtualizedComboBox.prototype.dismissMenu = function () {
            if (this._comboBox.current) {
                return this._comboBox.current.dismissMenu();
            }
        };
        VirtualizedComboBox.prototype.focus = function (shouldOpenOnFocus, useFocusAsync) {
            if (this._comboBox.current) {
                this._comboBox.current.focus(shouldOpenOnFocus, useFocusAsync);
                return true;
            }
            return false;
        };
        VirtualizedComboBox.prototype.render = function () {
            return (React__namespace.createElement(ComboBox$1, tslib.__assign({}, this.props, { componentRef: this._comboBox, onRenderList: this._onRenderList, onScrollToItem: this._onScrollToItem })));
        };
        return VirtualizedComboBox;
    }(React__namespace.Component));

    var defaultDatePickerStrings = tslib.__assign(tslib.__assign({}, defaultCalendarStrings), { prevMonthAriaLabel: 'Go to previous month', nextMonthAriaLabel: 'Go to next month', prevYearAriaLabel: 'Go to previous year', nextYearAriaLabel: 'Go to next year', closeButtonAriaLabel: 'Close date picker', isRequiredErrorMessage: 'Field is required', invalidInputErrorMessage: 'Invalid date format', isResetStatusMessage: 'Invalid entry "{0}", date reset to "{1}"' });

    var getClassNames$16 = classNamesFunction();
    var DEFAULT_PROPS$2 = {
        allowTextInput: false,
        formatDate: function (date) { return (date ? date.toDateString() : ''); },
        parseDateFromString: function (dateStr) {
            var date = Date.parse(dateStr);
            return date ? new Date(date) : null;
        },
        firstDayOfWeek: exports.DayOfWeek.Sunday,
        initialPickerDate: new Date(),
        isRequired: false,
        isMonthPickerVisible: true,
        showMonthPickerAsOverlay: false,
        strings: defaultDatePickerStrings,
        highlightCurrentMonth: false,
        highlightSelectedMonth: false,
        borderless: false,
        pickerAriaLabel: 'Calendar',
        showWeekNumbers: false,
        firstWeekOfYear: exports.FirstWeekOfYear.FirstDay,
        showGoToToday: true,
        showCloseButton: false,
        underlined: false,
        allFocusable: false,
    };
    function useFocusLogic() {
        var textFieldRef = React__namespace.useRef(null);
        var preventFocusOpeningPicker = React__namespace.useRef(false);
        var focus = function () {
            var _a, _b;
            (_b = (_a = textFieldRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        var preventNextFocusOpeningPicker = function () {
            preventFocusOpeningPicker.current = true;
        };
        return [textFieldRef, focus, preventFocusOpeningPicker, preventNextFocusOpeningPicker];
    }
    function useCalendarVisibility(_a, focus) {
        var allowTextInput = _a.allowTextInput, onAfterMenuDismiss = _a.onAfterMenuDismiss;
        var _b = React__namespace.useState(false), isCalendarShown = _b[0], setIsCalendarShown = _b[1];
        var isMounted = React__namespace.useRef(false);
        var async = useAsync();
        React__namespace.useEffect(function () {
            if (isMounted.current && !isCalendarShown) {
                // In browsers like IE, textfield gets unfocused when datepicker is collapsed
                if (allowTextInput) {
                    async.requestAnimationFrame(focus);
                }
                // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss
                onAfterMenuDismiss === null || onAfterMenuDismiss === void 0 ? void 0 : onAfterMenuDismiss();
            }
            isMounted.current = true;
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [isCalendarShown]);
        return [isCalendarShown, setIsCalendarShown];
    }
    function useSelectedDate(_a) {
        var formatDate = _a.formatDate, value = _a.value, onSelectDate = _a.onSelectDate;
        var _b = useControllableValue(value, undefined, function (ev, newValue) {
            return onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(newValue);
        }), selectedDate = _b[0], setSelectedDateState = _b[1];
        var _c = React__namespace.useState(function () { return (value && formatDate ? formatDate(value) : ''); }), formattedDate = _c[0], setFormattedDate = _c[1];
        var setSelectedDate = function (newDate) {
            setSelectedDateState(newDate);
            setFormattedDate(newDate && formatDate ? formatDate(newDate) : '');
        };
        React__namespace.useEffect(function () {
            setFormattedDate(value && formatDate ? formatDate(value) : '');
        }, [formatDate, value]);
        return [selectedDate, formattedDate, setSelectedDate, setFormattedDate];
    }
    function useErrorMessage(_a, selectedDate, setSelectedDate, inputValue, isCalendarShown) {
        var isRequired = _a.isRequired, allowTextInput = _a.allowTextInput, strings = _a.strings, parseDateFromString = _a.parseDateFromString, onSelectDate = _a.onSelectDate, formatDate = _a.formatDate, minDate = _a.minDate, maxDate = _a.maxDate;
        var _b = React__namespace.useState(), errorMessage = _b[0], setErrorMessage = _b[1];
        var _c = React__namespace.useState(), statusMessage = _c[0], setStatusMessage = _c[1];
        var validateTextInput = function (date) {
            if (date === void 0) { date = null; }
            if (allowTextInput) {
                if (inputValue || date) {
                    // Don't parse if the selected date has the same formatted string as what we're about to parse.
                    // The formatted string might be ambiguous (ex: "1/2/3" or "New Year Eve") and the parser might
                    // not be able to come up with the exact same date.
                    if (selectedDate && !errorMessage && formatDate && formatDate(date !== null && date !== void 0 ? date : selectedDate) === inputValue) {
                        return;
                    }
                    date = date || parseDateFromString(inputValue);
                    // Check if date is null, or date is Invalid Date
                    if (!date || isNaN(date.getTime())) {
                        // Reset invalid input field, if formatting is available
                        setSelectedDate(selectedDate);
                        // default the newer isResetStatusMessage string to invalidInputErrorMessage for legacy support
                        var selectedText = formatDate ? formatDate(selectedDate) : '';
                        var statusText = strings.isResetStatusMessage
                            ? format(strings.isResetStatusMessage, inputValue, selectedText)
                            : strings.invalidInputErrorMessage || '';
                        setStatusMessage(statusText);
                    }
                    else {
                        // Check against optional date boundaries
                        if (isDateOutOfBounds(date, minDate, maxDate)) {
                            setErrorMessage(strings.isOutOfBoundsErrorMessage || ' ');
                        }
                        else {
                            setSelectedDate(date);
                            setErrorMessage(undefined);
                            setStatusMessage(undefined);
                        }
                    }
                }
                else {
                    // Only show error for empty inputValue if it is a required field
                    setErrorMessage(isRequired ? strings.isRequiredErrorMessage || ' ' : undefined);
                    // If no input date string or input date string is invalid
                    // date variable will be null, callback should expect null value for this case
                    onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date);
                }
            }
            else if (isRequired && !inputValue) {
                // Check when DatePicker is a required field but has NO input value
                setErrorMessage(strings.isRequiredErrorMessage || ' ');
            }
            else {
                // Cleanup the error message and status message
                setErrorMessage(undefined);
                setStatusMessage(undefined);
            }
        };
        React__namespace.useEffect(function () {
            if (isRequired && !selectedDate) {
                setErrorMessage(strings.isRequiredErrorMessage || ' ');
            }
            else if (selectedDate && isDateOutOfBounds(selectedDate, minDate, maxDate)) {
                setErrorMessage(strings.isOutOfBoundsErrorMessage || ' ');
            }
            else {
                setErrorMessage(undefined);
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            // We don't want to compare the date itself, since two instances of date at the same time are not equal
            // eslint-disable-next-line react-hooks/exhaustive-deps
            minDate && getDatePartHashValue(minDate),
            // eslint-disable-next-line react-hooks/exhaustive-deps
            maxDate && getDatePartHashValue(maxDate),
            // eslint-disable-next-line react-hooks/exhaustive-deps
            selectedDate && getDatePartHashValue(selectedDate),
            isRequired,
        ]);
        return [
            isCalendarShown ? undefined : errorMessage,
            validateTextInput,
            setErrorMessage,
            isCalendarShown ? undefined : statusMessage,
            setStatusMessage,
        ];
    }
    var DatePickerBase = React__namespace.forwardRef(function (propsWithoutDefaults, forwardedRef) {
        var props = getPropsWithDefaults(DEFAULT_PROPS$2, propsWithoutDefaults);
        var firstDayOfWeek = props.firstDayOfWeek, strings = props.strings, label = props.label, theme = props.theme, className = props.className, styles = props.styles, initialPickerDate = props.initialPickerDate, isRequired = props.isRequired, disabled = props.disabled, ariaLabel = props.ariaLabel, pickerAriaLabel = props.pickerAriaLabel, placeholder = props.placeholder, allowTextInput = props.allowTextInput, borderless = props.borderless, minDate = props.minDate, maxDate = props.maxDate, showCloseButton = props.showCloseButton, calendarProps = props.calendarProps, calloutProps = props.calloutProps, textFieldProps = props.textField, underlined = props.underlined, allFocusable = props.allFocusable, _a = props.calendarAs, CalendarType = _a === void 0 ? Calendar : _a, tabIndex = props.tabIndex, _b = props.disableAutoFocus, disableAutoFocus = _b === void 0 ? true : _b;
        var id = useId('DatePicker', props.id);
        var calloutId = useId('DatePicker-Callout');
        var calendar = React__namespace.useRef(null);
        var datePickerDiv = React__namespace.useRef(null);
        var _c = useFocusLogic(), textFieldRef = _c[0], focus = _c[1], preventFocusOpeningPicker = _c[2], preventNextFocusOpeningPicker = _c[3];
        var _d = useCalendarVisibility(props, focus), isCalendarShown = _d[0], setIsCalendarShown = _d[1];
        var _e = useSelectedDate(props), selectedDate = _e[0], formattedDate = _e[1], setSelectedDate = _e[2], setFormattedDate = _e[3];
        var _f = useErrorMessage(props, selectedDate, setSelectedDate, formattedDate, isCalendarShown), errorMessage = _f[0], validateTextInput = _f[1], setErrorMessage = _f[2], statusMessage = _f[3], setStatusMessage = _f[4];
        var showDatePickerPopup = React__namespace.useCallback(function () {
            if (!isCalendarShown) {
                preventNextFocusOpeningPicker();
                setIsCalendarShown(true);
            }
        }, [isCalendarShown, preventNextFocusOpeningPicker, setIsCalendarShown]);
        React__namespace.useImperativeHandle(props.componentRef, function () { return ({
            focus: focus,
            reset: function () {
                setIsCalendarShown(false);
                setSelectedDate(undefined);
                setErrorMessage(undefined);
                setStatusMessage(undefined);
            },
            showDatePickerPopup: showDatePickerPopup,
        }); }, [focus, setErrorMessage, setIsCalendarShown, setSelectedDate, setStatusMessage, showDatePickerPopup]);
        var onTextFieldFocus = function () {
            if (disableAutoFocus) {
                return;
            }
            if (!allowTextInput) {
                if (!preventFocusOpeningPicker.current) {
                    showDatePickerPopup();
                }
                preventFocusOpeningPicker.current = false;
            }
        };
        var onSelectDate = function (date) {
            if (props.calendarProps && props.calendarProps.onSelectDate) {
                props.calendarProps.onSelectDate(date);
            }
            calendarDismissed(date);
        };
        var onCalloutPositioned = function () {
            var shouldFocus = true;
            // If the user has specified that the callout shouldn't use initial focus, then respect
            // that and don't attempt to set focus. That will default to true within the callout
            // so we need to check if it's undefined here.
            if (props.calloutProps && props.calloutProps.setInitialFocus !== undefined) {
                shouldFocus = props.calloutProps.setInitialFocus;
            }
            if (calendar.current && shouldFocus) {
                calendar.current.focus();
            }
        };
        var onTextFieldBlur = function (ev) {
            validateTextInput();
        };
        var onTextFieldChanged = function (ev, newValue) {
            var _a;
            var textField = props.textField;
            if (allowTextInput) {
                if (isCalendarShown) {
                    dismissDatePickerPopup();
                }
                setFormattedDate(newValue);
            }
            (_a = textField === null || textField === void 0 ? void 0 : textField.onChange) === null || _a === void 0 ? void 0 : _a.call(textField, ev, newValue);
        };
        var onTextFieldKeyDown = function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            switch (ev.which) {
                case KeyCodes.enter:
                    ev.preventDefault();
                    ev.stopPropagation();
                    if (!isCalendarShown) {
                        validateTextInput();
                        showDatePickerPopup();
                    }
                    else {
                        // When DatePicker allows input date string directly,
                        // it is expected to hit another enter to close the popup
                        if (props.allowTextInput) {
                            dismissDatePickerPopup();
                        }
                    }
                    break;
                case KeyCodes.escape:
                    handleEscKey(ev);
                    break;
                case KeyCodes.down:
                    if (ev.altKey && !isCalendarShown) {
                        showDatePickerPopup();
                    }
                    break;
            }
        };
        var onTextFieldClick = function (ev) {
            // default openOnClick to !props.disableAutoFocus for legacy support of disableAutoFocus behavior
            var openOnClick = props.openOnClick || !props.disableAutoFocus;
            if (openOnClick && !isCalendarShown && !props.disabled) {
                showDatePickerPopup();
                return;
            }
            if (props.allowTextInput) {
                dismissDatePickerPopup();
            }
        };
        var onIconClick = function (ev) {
            ev.stopPropagation();
            if (!isCalendarShown && !props.disabled) {
                showDatePickerPopup();
            }
            else if (props.allowTextInput) {
                dismissDatePickerPopup();
            }
        };
        var dismissDatePickerPopup = function (newlySelectedDate) {
            if (isCalendarShown) {
                setIsCalendarShown(false);
                validateTextInput(newlySelectedDate);
                if (!allowTextInput && newlySelectedDate) {
                    setSelectedDate(newlySelectedDate);
                }
            }
        };
        var renderTextfieldDescription = function (inputProps, defaultRender) {
            return (React__namespace.createElement(React__namespace.Fragment, null,
                inputProps.description ? defaultRender(inputProps) : null,
                React__namespace.createElement("div", { "aria-live": "assertive", className: classNames.statusMessage }, statusMessage)));
        };
        var renderReadOnlyInput = function (inputProps) {
            var divProps = getNativeProps(inputProps, divProperties);
            // Talkback on Android treats readonly inputs as disabled, so swipe gestures to open the Calendar
            // don't register. Workaround is rendering a div with role="combobox" (passed in via TextField props).
            return (React__namespace.createElement("div", tslib.__assign({}, divProps, { className: css(divProps.className, classNames.readOnlyTextField), tabIndex: tabIndex || 0 }), formattedDate || (
            // Putting the placeholder in a separate span fixes specificity issues for the text color
            React__namespace.createElement("span", { className: classNames.readOnlyPlaceholder }, placeholder))));
        };
        /**
         * Callback for closing the calendar callout
         */
        var calendarDismissed = function (newlySelectedDate) {
            preventNextFocusOpeningPicker();
            dismissDatePickerPopup(newlySelectedDate);
            // don't need to focus the text box, if necessary the focusTrapZone will do it
        };
        var calloutDismissed = function (ev) {
            calendarDismissed();
        };
        var handleEscKey = function (ev) {
            ev.stopPropagation();
            calendarDismissed();
        };
        var classNames = getClassNames$16(styles, {
            theme: theme,
            className: className,
            disabled: disabled,
            underlined: underlined,
            label: !!label,
            isDatePickerShown: isCalendarShown,
        });
        var nativeProps = getNativeProps(props, divProperties, ['value']);
        var iconProps = textFieldProps && textFieldProps.iconProps;
        var textFieldId = textFieldProps && textFieldProps.id && textFieldProps.id !== id ? textFieldProps.id : id + '-label';
        var readOnly = !allowTextInput && !disabled;
        return (React__namespace.createElement("div", tslib.__assign({}, nativeProps, { className: classNames.root, ref: forwardedRef }),
            React__namespace.createElement("div", { ref: datePickerDiv, "aria-owns": isCalendarShown ? calloutId : undefined, className: classNames.wrapper },
                React__namespace.createElement(TextField$1, tslib.__assign({ role: "combobox", label: label, "aria-expanded": isCalendarShown, ariaLabel: ariaLabel, "aria-haspopup": "dialog", "aria-controls": isCalendarShown ? calloutId : undefined, required: isRequired, disabled: disabled, errorMessage: errorMessage, placeholder: placeholder, borderless: borderless, value: formattedDate, componentRef: textFieldRef, underlined: underlined, tabIndex: tabIndex, readOnly: !allowTextInput }, textFieldProps, { id: textFieldId, className: css(classNames.textField, textFieldProps && textFieldProps.className), iconProps: tslib.__assign(tslib.__assign({ iconName: 'Calendar' }, iconProps), { className: css(classNames.icon, iconProps && iconProps.className), onClick: onIconClick }), 
                    // eslint-disable-next-line react/jsx-no-bind
                    onRenderDescription: renderTextfieldDescription, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onKeyDown: onTextFieldKeyDown, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onFocus: onTextFieldFocus, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onBlur: onTextFieldBlur, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onClick: onTextFieldClick, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChange: onTextFieldChanged, onRenderInput: readOnly ? renderReadOnlyInput : undefined }))),
            isCalendarShown && (React__namespace.createElement(Callout$1, tslib.__assign({ id: calloutId, role: "dialog", ariaLabel: pickerAriaLabel, isBeakVisible: false, gapSpace: 0, doNotLayer: false, target: datePickerDiv.current, directionalHint: DirectionalHint.bottomLeftEdge }, calloutProps, { className: css(classNames.callout, calloutProps && calloutProps.className), 
                // eslint-disable-next-line react/jsx-no-bind
                onDismiss: calloutDismissed, 
                // eslint-disable-next-line react/jsx-no-bind
                onPositioned: onCalloutPositioned }),
                React__namespace.createElement(FocusTrapZone, { isClickableOutsideFocusTrap: true, disableFirstFocus: disableAutoFocus },
                    React__namespace.createElement(CalendarType, tslib.__assign({}, calendarProps, { 
                        // eslint-disable-next-line react/jsx-no-bind
                        onSelectDate: onSelectDate, 
                        // eslint-disable-next-line react/jsx-no-bind
                        onDismiss: calendarDismissed, isMonthPickerVisible: props.isMonthPickerVisible, showMonthPickerAsOverlay: props.showMonthPickerAsOverlay, today: props.today, value: selectedDate || initialPickerDate, firstDayOfWeek: firstDayOfWeek, strings: strings, highlightCurrentMonth: props.highlightCurrentMonth, highlightSelectedMonth: props.highlightSelectedMonth, showWeekNumbers: props.showWeekNumbers, firstWeekOfYear: props.firstWeekOfYear, showGoToToday: props.showGoToToday, dateTimeFormatter: props.dateTimeFormatter, minDate: minDate, maxDate: maxDate, componentRef: calendar, showCloseButton: showCloseButton, allFocusable: allFocusable })))))));
    });
    DatePickerBase.displayName = 'DatePickerBase';
    function isDateOutOfBounds(date, minDate, maxDate) {
        return (!!minDate && compareDatePart(minDate, date) > 0) || (!!maxDate && compareDatePart(maxDate, date) < 0);
    }

    var GlobalClassNames$i = {
        root: 'ms-DatePicker',
        callout: 'ms-DatePicker-callout',
        withLabel: 'ms-DatePicker-event--with-label',
        withoutLabel: 'ms-DatePicker-event--without-label',
        disabled: 'msDatePickerDisabled ',
    };
    var TEXTFIELD_HEIGHT = 32;
    var styles = function (props) {
        var _a;
        var className = props.className, theme = props.theme, disabled = props.disabled, underlined = props.underlined, label = props.label, isDatePickerShown = props.isDatePickerShown;
        var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$i, theme);
        var DatePickerIcon = {
            color: palette.neutralSecondary,
            fontSize: FontSizes.icon,
            lineHeight: '18px',
            pointerEvents: 'none',
            position: 'absolute',
            right: '4px',
            padding: '5px',
        };
        return {
            root: [classNames.root, theme.fonts.large, isDatePickerShown && 'is-open', normalize$1, className],
            textField: [
                {
                    position: 'relative',
                    selectors: {
                        '& input[readonly]': {
                            cursor: 'pointer',
                        },
                        input: {
                            selectors: {
                                '::-ms-clear': {
                                    display: 'none',
                                },
                            },
                        },
                    },
                },
                disabled && {
                    selectors: {
                        '& input[readonly]': {
                            cursor: 'default',
                        },
                    },
                },
            ],
            callout: [classNames.callout],
            icon: [
                DatePickerIcon,
                label ? classNames.withLabel : classNames.withoutLabel,
                { paddingTop: '7px' },
                !disabled && [
                    classNames.disabled,
                    {
                        pointerEvents: 'initial',
                        cursor: 'pointer',
                    },
                ],
                disabled && {
                    color: semanticColors.disabledText,
                    cursor: 'default',
                },
            ],
            statusMessage: [
                fonts.small,
                {
                    color: semanticColors.errorText,
                    marginTop: 5,
                },
            ],
            readOnlyTextField: [
                {
                    cursor: 'pointer',
                    height: TEXTFIELD_HEIGHT,
                    lineHeight: TEXTFIELD_HEIGHT - 2,
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                },
                underlined && {
                    lineHeight: TEXTFIELD_HEIGHT + 2,
                },
            ],
            readOnlyPlaceholder: (_a = {
                    color: semanticColors.inputPlaceholderText
                },
                _a[HighContrastSelector] = {
                    color: 'GrayText',
                },
                _a),
        };
    };

    var DatePicker$1 = styled(DatePickerBase, styles, undefined, {
        scope: 'DatePicker',
    });

    // Selection definitions:
    //
    // Anchor index: the point from which a range selection starts.
    // Focus index: the point from which layout movement originates from.
    //
    // These two can differ. Tests:
    //
    // If you start at index 5
    // Shift click to index 10
    //    The focus is 10, the anchor is 5.
    // If you shift click at index 0
    //    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.
    // If you click index 8
    //    The anchor and focus are set to 8.
    var SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';
    var SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';
    var SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';
    var SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';
    var SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';
    var SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';
    var SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';
    /**
     * {@docCategory Selection}
     */
    var SelectionZone = /** @class */ (function (_super) {
        tslib.__extends(SelectionZone, _super);
        function SelectionZone(props) {
            var _this = _super.call(this, props) || this;
            _this._root = React__namespace.createRef();
            /**
             * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone
             * react to the event. Note that focus events in IE \<= 11 will occur asynchronously after .focus() has
             * been called on an element, so we need a flag to store the idea that we will bypass the "next"
             * focus event that occurs. This method does that.
             */
            _this.ignoreNextFocus = function () {
                _this._handleNextFocus(false);
            };
            _this._onSelectionChange = function () {
                var selection = _this.props.selection;
                var isModal = selection.isModal && selection.isModal();
                _this.setState({
                    isModal: isModal,
                });
            };
            _this._onMouseDownCapture = function (ev) {
                var target = ev.target;
                if (document.activeElement !== target && !elementContains(document.activeElement, target)) {
                    _this.ignoreNextFocus();
                    return;
                }
                if (!elementContains(target, _this._root.current)) {
                    return;
                }
                while (target !== _this._root.current) {
                    if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
                        _this.ignoreNextFocus();
                        break;
                    }
                    target = getParent(target);
                }
            };
            /**
             * When we focus an item, for single/multi select scenarios, we should try to select it immediately
             * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them
             * specially.
             */
            _this._onFocus = function (ev) {
                var target = ev.target;
                var selection = _this.props.selection;
                var isToggleModifierPressed = _this._isCtrlPressed || _this._isMetaPressed;
                var selectionMode = _this._getSelectionMode();
                if (_this._shouldHandleFocus && selectionMode !== SelectionMode.none) {
                    var isToggle = _this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);
                    var itemRoot = _this._findItemRoot(target);
                    if (!isToggle && itemRoot) {
                        var index = _this._getItemIndex(itemRoot);
                        if (isToggleModifierPressed) {
                            // set anchor only.
                            selection.setIndexSelected(index, selection.isIndexSelected(index), true);
                            if (_this.props.enterModalOnTouch && _this._isTouch && selection.setModal) {
                                selection.setModal(true);
                                _this._setIsTouch(false);
                            }
                        }
                        else {
                            if (_this.props.isSelectedOnFocus) {
                                _this._onItemSurfaceClick(ev, index);
                            }
                        }
                    }
                }
                _this._handleNextFocus(false);
            };
            _this._onMouseDown = function (ev) {
                _this._updateModifiers(ev);
                var target = ev.target;
                var itemRoot = _this._findItemRoot(target);
                // No-op if selection is disabled
                if (_this._isSelectionDisabled(target)) {
                    return;
                }
                while (target !== _this._root.current) {
                    if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {
                        break;
                    }
                    else if (itemRoot) {
                        if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
                            break;
                        }
                        else if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
                            break;
                        }
                        else if ((target === itemRoot || _this._shouldAutoSelect(target)) &&
                            !_this._isShiftPressed &&
                            !_this._isCtrlPressed &&
                            !_this._isMetaPressed) {
                            _this._onInvokeMouseDown(ev, _this._getItemIndex(itemRoot));
                            break;
                        }
                        else if (_this.props.disableAutoSelectOnInputElements &&
                            (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')) {
                            return;
                        }
                    }
                    target = getParent(target);
                }
            };
            _this._onTouchStartCapture = function (ev) {
                _this._setIsTouch(true);
            };
            _this._onClick = function (ev) {
                var _a = _this.props.enableTouchInvocationTarget, enableTouchInvocationTarget = _a === void 0 ? false : _a;
                _this._updateModifiers(ev);
                var target = ev.target;
                var itemRoot = _this._findItemRoot(target);
                var isSelectionDisabled = _this._isSelectionDisabled(target);
                while (target !== _this._root.current) {
                    if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {
                        if (!isSelectionDisabled) {
                            _this._onToggleAllClick(ev);
                        }
                        break;
                    }
                    else if (itemRoot) {
                        var index = _this._getItemIndex(itemRoot);
                        if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
                            if (!isSelectionDisabled) {
                                if (_this._isShiftPressed) {
                                    _this._onItemSurfaceClick(ev, index);
                                }
                                else {
                                    _this._onToggleClick(ev, index);
                                }
                            }
                            break;
                        }
                        else if ((_this._isTouch &&
                            enableTouchInvocationTarget &&
                            _this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||
                            _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
                            // Items should be invokable even if selection is disabled.
                            _this._onInvokeClick(ev, index);
                            break;
                        }
                        else if (target === itemRoot) {
                            if (!isSelectionDisabled) {
                                _this._onItemSurfaceClick(ev, index);
                            }
                            break;
                        }
                        else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {
                            return;
                        }
                    }
                    target = getParent(target);
                }
            };
            _this._onContextMenu = function (ev) {
                var target = ev.target;
                var _a = _this.props, onItemContextMenu = _a.onItemContextMenu, selection = _a.selection;
                if (onItemContextMenu) {
                    var itemRoot = _this._findItemRoot(target);
                    if (itemRoot) {
                        var index = _this._getItemIndex(itemRoot);
                        _this._onInvokeMouseDown(ev, index);
                        var skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);
                        // In order to keep back compat, if the value here is undefined, then we should still
                        // call preventDefault(). Only in the case where true is explicitly returned should
                        // the call be skipped.
                        if (!skipPreventDefault) {
                            ev.preventDefault();
                        }
                    }
                }
            };
            /**
             * In multi selection, if you double click within an item's root (but not within the invoke element or
             * input elements), we should execute the invoke handler.
             */
            _this._onDoubleClick = function (ev) {
                var target = ev.target;
                var onItemInvoked = _this.props.onItemInvoked;
                var itemRoot = _this._findItemRoot(target);
                if (itemRoot && onItemInvoked && !_this._isInputElement(target)) {
                    var index = _this._getItemIndex(itemRoot);
                    while (target !== _this._root.current) {
                        if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||
                            _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
                            break;
                        }
                        else if (target === itemRoot) {
                            _this._onInvokeClick(ev, index);
                            break;
                        }
                        target = getParent(target);
                    }
                    target = getParent(target);
                }
            };
            _this._onKeyDownCapture = function (ev) {
                _this._updateModifiers(ev);
                _this._handleNextFocus(true);
            };
            _this._onKeyDown = function (ev) {
                _this._updateModifiers(ev);
                var target = ev.target;
                var isSelectionDisabled = _this._isSelectionDisabled(target);
                var selection = _this.props.selection;
                // eslint-disable-next-line deprecation/deprecation
                var isSelectAllKey = ev.which === KeyCodes.a && (_this._isCtrlPressed || _this._isMetaPressed);
                // eslint-disable-next-line deprecation/deprecation
                var isClearSelectionKey = ev.which === KeyCodes.escape;
                // Ignore key downs from input elements.
                if (_this._isInputElement(target)) {
                    // A key was pressed while an item in this zone was focused.
                    return;
                }
                var selectionMode = _this._getSelectionMode();
                // If ctrl-a is pressed, select all (if all are not already selected.)
                if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {
                    if (!isSelectionDisabled) {
                        selection.setAllSelected(true);
                    }
                    ev.stopPropagation();
                    ev.preventDefault();
                    return;
                }
                // If escape is pressed, clear selection (if any are selected.)
                if (isClearSelectionKey && selection.getSelectedCount() > 0) {
                    if (!isSelectionDisabled) {
                        selection.setAllSelected(false);
                    }
                    ev.stopPropagation();
                    ev.preventDefault();
                    return;
                }
                var itemRoot = _this._findItemRoot(target);
                // If a key was pressed within an item, we should treat "enters" as invokes and "space" as toggle
                if (itemRoot) {
                    var index = _this._getItemIndex(itemRoot);
                    while (target !== _this._root.current) {
                        if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
                            // For toggle elements, assuming they are rendered as buttons, they will generate a click event,
                            // so we can no-op for any keydowns in this case.
                            break;
                        }
                        else if (_this._shouldAutoSelect(target)) {
                            if (!isSelectionDisabled) {
                                // If the event went to an element which should trigger auto-select, select it and then let
                                // the default behavior kick in.
                                _this._onInvokeMouseDown(ev, index);
                            }
                            break;
                        }
                        else if (
                        // eslint-disable-next-line deprecation/deprecation
                        (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&
                            (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')) {
                            return false;
                        }
                        else if (target === itemRoot) {
                            // eslint-disable-next-line deprecation/deprecation
                            if (ev.which === KeyCodes.enter) {
                                // Items should be invokable even if selection is disabled.
                                _this._onInvokeClick(ev, index);
                                ev.preventDefault();
                                return;
                                // eslint-disable-next-line deprecation/deprecation
                            }
                            else if (ev.which === KeyCodes.space) {
                                if (!isSelectionDisabled) {
                                    _this._onToggleClick(ev, index);
                                }
                                ev.preventDefault();
                                return;
                            }
                            break;
                        }
                        target = getParent(target);
                    }
                }
            };
            _this._events = new EventGroup(_this);
            _this._async = new Async(_this);
            initializeComponentRef(_this);
            var selection = _this.props.selection;
            // Reflect the initial modal state of selection into the state.
            var isModal = selection.isModal && selection.isModal();
            _this.state = {
                isModal: isModal,
            };
            return _this;
        }
        SelectionZone.getDerivedStateFromProps = function (nextProps, prevState) {
            var isModal = nextProps.selection.isModal && nextProps.selection.isModal();
            return tslib.__assign(tslib.__assign({}, prevState), { isModal: isModal });
        };
        SelectionZone.prototype.componentDidMount = function () {
            var win = getWindow(this._root.current);
            // Track the latest modifier keys globally.
            this._events.on(win, 'keydown, keyup', this._updateModifiers, true);
            this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);
            this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);
            this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);
            // Subscribe to the selection to keep modal state updated.
            this._events.on(this.props.selection, 'change', this._onSelectionChange);
        };
        SelectionZone.prototype.render = function () {
            var isModal = this.state.isModal;
            return (React__namespace.createElement("div", { className: css('ms-SelectionZone', this.props.className, {
                    'ms-SelectionZone--modal': !!isModal,
                }), ref: this._root, onKeyDown: this._onKeyDown, onMouseDown: this._onMouseDown, onKeyDownCapture: this._onKeyDownCapture, onClick: this._onClick, role: "presentation", onDoubleClick: this._onDoubleClick, onContextMenu: this._onContextMenu, onMouseDownCapture: this._onMouseDownCapture, onFocusCapture: this._onFocus, "data-selection-is-modal": isModal ? true : undefined },
                this.props.children,
                React__namespace.createElement(FocusRects, null)));
        };
        SelectionZone.prototype.componentDidUpdate = function (previousProps) {
            var selection = this.props.selection;
            if (selection !== previousProps.selection) {
                // Whenever selection changes, update the subscripton to keep modal state updated.
                this._events.off(previousProps.selection);
                this._events.on(selection, 'change', this._onSelectionChange);
            }
        };
        SelectionZone.prototype.componentWillUnmount = function () {
            this._events.dispose();
            this._async.dispose();
        };
        SelectionZone.prototype._isSelectionDisabled = function (target) {
            if (this._getSelectionMode() === SelectionMode.none) {
                return true;
            }
            while (target !== this._root.current) {
                if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {
                    return true;
                }
                target = getParent(target);
            }
            return false;
        };
        SelectionZone.prototype._onToggleAllClick = function (ev) {
            var selection = this.props.selection;
            var selectionMode = this._getSelectionMode();
            if (selectionMode === SelectionMode.multiple) {
                selection.toggleAllSelected();
                ev.stopPropagation();
                ev.preventDefault();
            }
        };
        SelectionZone.prototype._onToggleClick = function (ev, index) {
            var selection = this.props.selection;
            var selectionMode = this._getSelectionMode();
            selection.setChangeEvents(false);
            if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {
                selection.setModal(true);
                this._setIsTouch(false);
            }
            if (selectionMode === SelectionMode.multiple) {
                selection.toggleIndexSelected(index);
            }
            else if (selectionMode === SelectionMode.single) {
                var isSelected = selection.isIndexSelected(index);
                var isModal = selection.isModal && selection.isModal();
                selection.setAllSelected(false);
                selection.setIndexSelected(index, !isSelected, true);
                if (isModal && selection.setModal) {
                    // Since the above call to setAllSelected(false) clears modal state,
                    // restore it. This occurs because the SelectionMode of the Selection
                    // may differ from the SelectionZone.
                    selection.setModal(true);
                }
            }
            else {
                selection.setChangeEvents(true);
                return;
            }
            selection.setChangeEvents(true);
            ev.stopPropagation();
            // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior
            // for checkboxes if you use a checkbox for the toggle.
        };
        SelectionZone.prototype._onInvokeClick = function (ev, index) {
            var _a = this.props, selection = _a.selection, onItemInvoked = _a.onItemInvoked;
            if (onItemInvoked) {
                onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);
                ev.preventDefault();
                ev.stopPropagation();
            }
        };
        SelectionZone.prototype._onItemSurfaceClick = function (ev, index) {
            var selection = this.props.selection;
            var isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;
            var selectionMode = this._getSelectionMode();
            if (selectionMode === SelectionMode.multiple) {
                if (this._isShiftPressed && !this._isTabPressed) {
                    selection.selectToIndex(index, !isToggleModifierPressed);
                }
                else if (isToggleModifierPressed) {
                    selection.toggleIndexSelected(index);
                }
                else {
                    this._clearAndSelectIndex(index);
                }
            }
            else if (selectionMode === SelectionMode.single) {
                this._clearAndSelectIndex(index);
            }
        };
        SelectionZone.prototype._onInvokeMouseDown = function (ev, index) {
            var selection = this.props.selection;
            // Only do work if item is not selected.
            if (selection.isIndexSelected(index)) {
                return;
            }
            this._clearAndSelectIndex(index);
        };
        /**
         * To avoid high startup cost of traversing the DOM on component mount,
         * defer finding the scrollable parent until a click interaction.
         *
         * The styles will probably already calculated since we're running in a click handler,
         * so this is less likely to cause layout thrashing then doing it in mount.
         */
        SelectionZone.prototype._findScrollParentAndTryClearOnEmptyClick = function (ev) {
            var scrollParent = findScrollableParent(this._root.current);
            // unbind this handler and replace binding with a binding on the actual scrollable parent
            this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);
            this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);
            // If we clicked inside the scrollable parent, call through to the handler on this click.
            if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {
                this._tryClearOnEmptyClick(ev);
            }
        };
        SelectionZone.prototype._tryClearOnEmptyClick = function (ev) {
            if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target)) {
                this.props.selection.setAllSelected(false);
            }
        };
        SelectionZone.prototype._clearAndSelectIndex = function (index) {
            var _a = this.props, selection = _a.selection, _b = _a.selectionClearedOnSurfaceClick, selectionClearedOnSurfaceClick = _b === void 0 ? true : _b;
            var isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);
            if (!isAlreadySingleSelected && selectionClearedOnSurfaceClick) {
                var isModal = selection.isModal && selection.isModal();
                selection.setChangeEvents(false);
                selection.setAllSelected(false);
                selection.setIndexSelected(index, true, true);
                if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {
                    if (selection.setModal) {
                        selection.setModal(true);
                    }
                    if (this._isTouch) {
                        this._setIsTouch(false);
                    }
                }
                selection.setChangeEvents(true);
            }
        };
        /**
         * We need to track the modifier key states so that when focus events occur, which do not contain
         * modifier states in the Event object, we know how to behave.
         */
        SelectionZone.prototype._updateModifiers = function (ev) {
            this._isShiftPressed = ev.shiftKey;
            this._isCtrlPressed = ev.ctrlKey;
            this._isMetaPressed = ev.metaKey;
            // eslint-disable-next-line deprecation/deprecation
            var keyCode = ev.keyCode;
            this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;
        };
        SelectionZone.prototype._findItemRoot = function (target) {
            var selection = this.props.selection;
            while (target !== this._root.current) {
                var indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);
                var index = Number(indexValue);
                if (indexValue !== null && index >= 0 && index < selection.getItems().length) {
                    break;
                }
                target = getParent(target);
            }
            if (target === this._root.current) {
                return undefined;
            }
            return target;
        };
        SelectionZone.prototype._getItemIndex = function (itemRoot) {
            return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));
        };
        SelectionZone.prototype._shouldAutoSelect = function (element) {
            return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);
        };
        SelectionZone.prototype._hasAttribute = function (element, attributeName) {
            var isToggle = false;
            while (!isToggle && element !== this._root.current) {
                isToggle = element.getAttribute(attributeName) === 'true';
                element = getParent(element);
            }
            return isToggle;
        };
        SelectionZone.prototype._isInputElement = function (element) {
            return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';
        };
        SelectionZone.prototype._isNonHandledClick = function (element) {
            var doc = getDocument();
            if (doc && element) {
                while (element && element !== doc.documentElement) {
                    if (isElementTabbable(element)) {
                        return false;
                    }
                    element = getParent(element);
                }
            }
            return true;
        };
        SelectionZone.prototype._handleNextFocus = function (handleFocus) {
            var _this = this;
            if (this._shouldHandleFocusTimeoutId) {
                this._async.clearTimeout(this._shouldHandleFocusTimeoutId);
                this._shouldHandleFocusTimeoutId = undefined;
            }
            this._shouldHandleFocus = handleFocus;
            if (handleFocus) {
                this._async.setTimeout(function () {
                    _this._shouldHandleFocus = false;
                }, 100);
            }
        };
        SelectionZone.prototype._setIsTouch = function (isTouch) {
            var _this = this;
            if (this._isTouchTimeoutId) {
                this._async.clearTimeout(this._isTouchTimeoutId);
                this._isTouchTimeoutId = undefined;
            }
            this._isTouch = true;
            if (isTouch) {
                this._async.setTimeout(function () {
                    _this._isTouch = false;
                }, 300);
            }
        };
        SelectionZone.prototype._getSelectionMode = function () {
            var selection = this.props.selection;
            var _a = this.props.selectionMode, selectionMode = _a === void 0 ? selection ? selection.mode : SelectionMode.none : _a;
            return selectionMode;
        };
        SelectionZone.defaultProps = {
            isSelectedOnFocus: true,
            selectionMode: SelectionMode.multiple,
        };
        return SelectionZone;
    }(React__namespace.Component));

    /**
     * {@docCategory GroupedList}
     */
    var CollapseAllVisibility;
    (function (CollapseAllVisibility) {
        CollapseAllVisibility[CollapseAllVisibility["hidden"] = 0] = "hidden";
        CollapseAllVisibility[CollapseAllVisibility["visible"] = 1] = "visible";
    })(CollapseAllVisibility || (CollapseAllVisibility = {}));

    /**
     * Enum to describe how a particular column header behaves.
     * This is used to to specify the property `IColumn.columnActionsMode`.
     * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.
     * {@docCategory DetailsList}
     */
    var ColumnActionsMode;
    (function (ColumnActionsMode) {
        /** Renders the column header as disabled. */
        ColumnActionsMode[ColumnActionsMode["disabled"] = 0] = "disabled";
        /** Renders the column header as clickable. Default value. */
        ColumnActionsMode[ColumnActionsMode["clickable"] = 1] = "clickable";
        /** Renders the column header as clickable and displays the dropdown chevron. */
        ColumnActionsMode[ColumnActionsMode["hasDropdown"] = 2] = "hasDropdown";
    })(ColumnActionsMode || (ColumnActionsMode = {}));
    /**
     * {@docCategory DetailsList}
     */
    var ConstrainMode;
    (function (ConstrainMode) {
        /** Lets the content grow which allows the page to manage scrolling. */
        ConstrainMode[ConstrainMode["unconstrained"] = 0] = "unconstrained";
        /** Constrains the list to the given layout space. */
        ConstrainMode[ConstrainMode["horizontalConstrained"] = 1] = "horizontalConstrained";
    })(ConstrainMode || (ConstrainMode = {}));
    /**
     * Enum to describe where the column has been dropped, after starting the drag
     * {@docCategory DetailsList}
     */
    var ColumnDragEndLocation;
    (function (ColumnDragEndLocation) {
        /** Drag ended outside of current list */
        ColumnDragEndLocation[ColumnDragEndLocation["outside"] = 0] = "outside";
        /** Drag ended within current list */
        ColumnDragEndLocation[ColumnDragEndLocation["surface"] = 1] = "surface";
        /** Drag ended on header */
        ColumnDragEndLocation[ColumnDragEndLocation["header"] = 2] = "header";
    })(ColumnDragEndLocation || (ColumnDragEndLocation = {}));
    /**
     * {@docCategory DetailsList}
     */
    var DetailsListLayoutMode;
    (function (DetailsListLayoutMode) {
        /**
         * Lets the user resize columns and makes not attempt to fit them.
         */
        DetailsListLayoutMode[DetailsListLayoutMode["fixedColumns"] = 0] = "fixedColumns";
        /**
         * Manages which columns are visible, tries to size them according to their min/max rules and drops
         * off columns that can't fit and have isCollapsible set.
         */
        DetailsListLayoutMode[DetailsListLayoutMode["justified"] = 1] = "justified";
    })(DetailsListLayoutMode || (DetailsListLayoutMode = {}));
    /**
     * {@docCategory DetailsList}
     */
    var CheckboxVisibility;
    (function (CheckboxVisibility) {
        /** Visible on hover. */
        CheckboxVisibility[CheckboxVisibility["onHover"] = 0] = "onHover";
        /** Visible always. */
        CheckboxVisibility[CheckboxVisibility["always"] = 1] = "always";
        /** Hide checkboxes. */
        CheckboxVisibility[CheckboxVisibility["hidden"] = 2] = "hidden";
    })(CheckboxVisibility || (CheckboxVisibility = {}));

    var SPACER_WIDTH = 36;
    var GroupSpacer = function (props) {
        var count = props.count, _a = props.indentWidth, indentWidth = _a === void 0 ? SPACER_WIDTH : _a, _b = props.role, role = _b === void 0 ? 'presentation' : _b;
        var width = count * indentWidth;
        return count > 0 ? (React__namespace.createElement("span", { className: 'ms-GroupSpacer', style: { display: 'inline-block', width: width }, role: role })) : null;
    };

    var GlobalClassNames$h = {
        root: 'ms-GroupedList',
        compact: 'ms-GroupedList--Compact',
        group: 'ms-GroupedList-group',
        link: 'ms-Link',
        listCell: 'ms-List-cell',
    };
    var beziers$1 = {
        easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',
    };
    var getStyles$j = function (props) {
        var _a, _b;
        var theme = props.theme, className = props.className, compact = props.compact;
        var palette = theme.palette;
        var classNames = getGlobalClassNames(GlobalClassNames$h, theme);
        return {
            root: [
                classNames.root,
                theme.fonts.small,
                {
                    position: 'relative',
                    selectors: (_a = {},
                        _a["." + classNames.listCell] = {
                            minHeight: 38, // be consistent with DetailsList styles
                        },
                        _a),
                },
                compact && [
                    classNames.compact,
                    {
                        selectors: (_b = {},
                            _b["." + classNames.listCell] = {
                                minHeight: 32, // be consistent with DetailsList styles
                            },
                            _b),
                    },
                ],
                className,
            ],
            group: [
                classNames.group,
                {
                    transition: "background-color " + AnimationVariables.durationValue2 + " " + beziers$1.easeInOutSine,
                },
            ],
            groupIsDropping: {
                backgroundColor: palette.neutralLight,
            },
        };
    };

    var DetailsRowGlobalClassNames = {
        root: 'ms-DetailsRow',
        // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.
        compact: 'ms-DetailsList--Compact',
        cell: 'ms-DetailsRow-cell',
        cellAnimation: 'ms-DetailsRow-cellAnimation',
        cellCheck: 'ms-DetailsRow-cellCheck',
        check: 'ms-DetailsRow-check',
        cellMeasurer: 'ms-DetailsRow-cellMeasurer',
        listCellFirstChild: 'ms-List-cell:first-child',
        isContentUnselectable: 'is-contentUnselectable',
        isSelected: 'is-selected',
        isCheckVisible: 'is-check-visible',
        isRowHeader: 'is-row-header',
        fields: 'ms-DetailsRow-fields',
    };
    var IsFocusableSelector = "[data-is-focusable='true']";
    var DEFAULT_CELL_STYLE_PROPS = {
        cellLeftPadding: 12,
        cellRightPadding: 8,
        cellExtraRightPadding: 24,
    };
    // Source of default row heights to share.
    var DEFAULT_ROW_HEIGHTS = {
        rowHeight: 42,
        compactRowHeight: 32,
    };
    // Constant values
    var values = tslib.__assign(tslib.__assign({}, DEFAULT_ROW_HEIGHTS), { rowVerticalPadding: 11, compactRowVerticalPadding: 6 });
    var getDetailsRowStyles = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var theme = props.theme, isSelected = props.isSelected, canSelect = props.canSelect, droppingClassName = props.droppingClassName, anySelected = props.anySelected, isCheckVisible = props.isCheckVisible, checkboxCellClassName = props.checkboxCellClassName, compact = props.compact, className = props.className, _q = props.cellStyleProps, cellStyleProps = _q === void 0 ? DEFAULT_CELL_STYLE_PROPS : _q, enableUpdateAnimations = props.enableUpdateAnimations, disabled = props.disabled;
        var palette = theme.palette, fonts = theme.fonts;
        var neutralPrimary = palette.neutralPrimary, white = palette.white, neutralSecondary = palette.neutralSecondary, neutralLighter = palette.neutralLighter, neutralLight = palette.neutralLight, neutralDark = palette.neutralDark, neutralQuaternaryAlt = palette.neutralQuaternaryAlt;
        var _r = theme.semanticColors, focusBorder = _r.focusBorder, focusedLinkColor = _r.linkHovered;
        var classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);
        var colors = {
            // Default
            defaultHeaderText: neutralPrimary,
            defaultMetaText: neutralSecondary,
            defaultBackground: white,
            // Default Hover
            defaultHoverHeaderText: neutralDark,
            defaultHoverMetaText: neutralPrimary,
            defaultHoverBackground: neutralLighter,
            // Selected
            selectedHeaderText: neutralDark,
            selectedMetaText: neutralPrimary,
            selectedBackground: neutralLight,
            // Selected Hover
            selectedHoverHeaderText: neutralDark,
            selectedHoverMetaText: neutralPrimary,
            selectedHoverBackground: neutralQuaternaryAlt,
            // Focus
            focusHeaderText: neutralDark,
            focusMetaText: neutralPrimary,
            focusBackground: neutralLight,
            focusHoverBackground: neutralQuaternaryAlt,
        };
        var rowHighContrastFocus = {
            top: 2,
            right: 2,
            bottom: 2,
            left: 2,
        };
        // Selected row styles
        var selectedStyles = [
            getFocusStyle(theme, {
                inset: -1,
                borderColor: focusBorder,
                outlineColor: white,
                highContrastStyle: rowHighContrastFocus,
            }),
            classNames.isSelected,
            {
                color: colors.selectedMetaText,
                background: colors.selectedBackground,
                borderBottom: "1px solid " + white,
                selectors: (_a = {
                        '&:before': {
                            position: 'absolute',
                            display: 'block',
                            top: -1,
                            height: 1,
                            bottom: 0,
                            left: 0,
                            right: 0,
                            content: '',
                            borderTop: "1px solid " + white,
                        }
                    },
                    _a["." + classNames.cell + " > ." + GlobalClassNames$p.root] = {
                        color: focusedLinkColor,
                        selectors: (_b = {},
                            _b[HighContrastSelector] = {
                                color: 'HighlightText',
                            },
                            _b),
                    },
                    // Selected State hover
                    _a['&:hover'] = {
                        background: colors.selectedHoverBackground,
                        color: colors.selectedHoverMetaText,
                        selectors: (_c = {},
                            // Selected State hover meta cell
                            _c[HighContrastSelector] = {
                                background: 'Highlight',
                                selectors: (_d = {},
                                    _d["." + classNames.cell] = {
                                        color: 'HighlightText',
                                    },
                                    _d["." + classNames.cell + " > ." + GlobalClassNames$p.root] = {
                                        forcedColorAdjust: 'none',
                                        color: 'HighlightText',
                                    },
                                    _d),
                            },
                            // Selected State hover Header cell
                            _c["." + classNames.isRowHeader] = {
                                color: colors.selectedHoverHeaderText,
                                selectors: (_e = {},
                                    _e[HighContrastSelector] = {
                                        color: 'HighlightText',
                                    },
                                    _e),
                            },
                            _c),
                    },
                    // Focus state
                    _a['&:focus'] = {
                        background: colors.focusBackground,
                        selectors: (_f = {},
                            // Selected State hover meta cell
                            _f["." + classNames.cell] = {
                                color: colors.focusMetaText,
                                selectors: (_g = {},
                                    _g[HighContrastSelector] = {
                                        color: 'HighlightText',
                                        selectors: {
                                            '> a': {
                                                color: 'HighlightText',
                                            },
                                        },
                                    },
                                    _g),
                            },
                            // Row header cell
                            _f["." + classNames.isRowHeader] = {
                                color: colors.focusHeaderText,
                                selectors: (_h = {},
                                    _h[HighContrastSelector] = {
                                        color: 'HighlightText',
                                    },
                                    _h),
                            },
                            // Ensure high-contrast mode overrides default focus background
                            _f[HighContrastSelector] = {
                                background: 'Highlight',
                            },
                            _f),
                    },
                    _a[HighContrastSelector] = tslib.__assign(tslib.__assign({ background: 'Highlight', color: 'HighlightText' }, getHighContrastNoAdjustStyle()), { selectors: {
                            a: {
                                color: 'HighlightText',
                            },
                        } }),
                    // Focus and hover state
                    _a['&:focus:hover'] = {
                        background: colors.focusHoverBackground,
                    },
                    _a),
            },
        ];
        var cannotSelectStyles = [
            classNames.isContentUnselectable,
            {
                userSelect: 'none',
                cursor: 'default',
            },
        ];
        var rootCompactStyles = {
            minHeight: values.compactRowHeight,
            border: 0,
        };
        var cellCompactStyles = {
            minHeight: values.compactRowHeight,
            paddingTop: values.compactRowVerticalPadding,
            paddingBottom: values.compactRowVerticalPadding,
            paddingLeft: cellStyleProps.cellLeftPadding + "px",
        };
        var defaultCellStyles = [
            getFocusStyle(theme, { inset: -1 }),
            classNames.cell,
            {
                display: 'inline-block',
                position: 'relative',
                boxSizing: 'border-box',
                minHeight: values.rowHeight,
                verticalAlign: 'top',
                whiteSpace: 'nowrap',
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                paddingTop: values.rowVerticalPadding,
                paddingBottom: values.rowVerticalPadding,
                paddingLeft: cellStyleProps.cellLeftPadding + "px",
                selectors: (_j = {
                        '& > button': {
                            maxWidth: '100%',
                        }
                    },
                    _j[IsFocusableSelector] = getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),
                    _j),
            },
            isSelected && {
                selectors: (_k = {},
                    _k[HighContrastSelector] = tslib.__assign({ background: 'Highlight', color: 'HighlightText' }, getHighContrastNoAdjustStyle()),
                    _k),
            },
            compact && cellCompactStyles,
            disabled && { opacity: 0.5 },
        ];
        return {
            root: [
                classNames.root,
                AnimationClassNames.fadeIn400,
                droppingClassName,
                theme.fonts.small,
                isCheckVisible && classNames.isCheckVisible,
                getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),
                {
                    borderBottom: "1px solid " + neutralLighter,
                    background: colors.defaultBackground,
                    color: colors.defaultMetaText,
                    // This ensures that the row always tries to consume is minimum width and does not compress.
                    display: 'inline-flex',
                    minWidth: '100%',
                    minHeight: values.rowHeight,
                    whiteSpace: 'nowrap',
                    padding: 0,
                    boxSizing: 'border-box',
                    verticalAlign: 'top',
                    textAlign: 'left',
                    selectors: (_l = {},
                        _l["." + classNames.listCellFirstChild + " &:before"] = {
                            display: 'none',
                        },
                        _l['&:hover'] = {
                            background: colors.defaultHoverBackground,
                            color: colors.defaultHoverMetaText,
                            selectors: (_m = {},
                                _m["." + classNames.isRowHeader] = {
                                    color: colors.defaultHoverHeaderText,
                                },
                                _m["." + classNames.cell + " > ." + GlobalClassNames$p.root] = {
                                    color: focusedLinkColor,
                                },
                                _m),
                        },
                        _l["&:hover ." + classNames.check] = {
                            opacity: 1,
                        },
                        _l["." + IsFocusVisibleClassName + " &:focus ." + classNames.check] = {
                            opacity: 1,
                        },
                        _l['.ms-GroupSpacer'] = {
                            flexShrink: 0,
                            flexGrow: 0,
                        },
                        _l),
                },
                isSelected && selectedStyles,
                !canSelect && cannotSelectStyles,
                compact && rootCompactStyles,
                className,
            ],
            cellUnpadded: {
                paddingRight: cellStyleProps.cellRightPadding + "px",
            },
            cellPadded: {
                paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding + "px",
                selectors: (_o = {},
                    _o["&." + classNames.cellCheck] = {
                        paddingRight: 0,
                    },
                    _o),
            },
            cell: defaultCellStyles,
            cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,
            cellMeasurer: [
                classNames.cellMeasurer,
                {
                    overflow: 'visible',
                    whiteSpace: 'nowrap',
                },
            ],
            checkCell: [
                defaultCellStyles,
                classNames.cellCheck,
                checkboxCellClassName,
                {
                    padding: 0,
                    // Ensure that the check cell covers the top border of the cell.
                    // This ensures the click target does not leave a spot which would
                    // cause other items to be deselected.
                    paddingTop: 1,
                    marginTop: -1,
                    flexShrink: 0,
                },
            ],
            checkCover: {
                position: 'absolute',
                top: -1,
                left: 0,
                bottom: 0,
                right: 0,
                display: anySelected ? 'block' : 'none',
            },
            fields: [
                classNames.fields,
                {
                    display: 'flex',
                    alignItems: 'stretch',
                },
            ],
            isRowHeader: [
                classNames.isRowHeader,
                {
                    color: colors.defaultHeaderText,
                    fontSize: fonts.medium.fontSize,
                },
                isSelected && {
                    color: colors.selectedHeaderText,
                    fontWeight: FontWeights.semibold,
                    selectors: (_p = {},
                        _p[HighContrastSelector] = {
                            color: 'HighlightText',
                        },
                        _p),
                },
            ],
            isMultiline: [
                defaultCellStyles,
                {
                    whiteSpace: 'normal',
                    wordBreak: 'break-word',
                    textOverflow: 'clip',
                },
            ],
            check: [classNames.check],
        };
    };

    var GlobalClassNames$g = {
        tooltipHost: 'ms-TooltipHost',
        root: 'ms-DetailsHeader',
        cell: 'ms-DetailsHeader-cell',
        cellIsCheck: 'ms-DetailsHeader-cellIsCheck',
        collapseButton: 'ms-DetailsHeader-collapseButton',
        isCollapsed: 'is-collapsed',
        isAllSelected: 'is-allSelected',
        isSelectAllHidden: 'is-selectAllHidden',
        isResizingColumn: 'is-resizingColumn',
        cellSizer: 'ms-DetailsHeader-cellSizer',
        isResizing: 'is-resizing',
        dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',
        dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',
        dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',
        cellTitle: 'ms-DetailsHeader-cellTitle',
        cellName: 'ms-DetailsHeader-cellName',
        filterChevron: 'ms-DetailsHeader-filterChevron',
        gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',
        checkTooltip: 'ms-DetailsHeader-checkTooltip',
        check: 'ms-DetailsHeader-check',
    };
    var HEADER_HEIGHT = 42;
    var getCellStyles = function (props) {
        var theme = props.theme, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;
        var semanticColors = theme.semanticColors;
        var classNames = getGlobalClassNames(GlobalClassNames$g, theme);
        return [
            classNames.cell,
            getFocusStyle(theme),
            {
                color: semanticColors.bodyText,
                position: 'relative',
                display: 'inline-block',
                boxSizing: 'border-box',
                padding: "0 " + cellStyleProps.cellRightPadding + "px 0 " + cellStyleProps.cellLeftPadding + "px",
                lineHeight: 'inherit',
                margin: '0',
                height: HEADER_HEIGHT,
                verticalAlign: 'top',
                whiteSpace: 'nowrap',
                textOverflow: 'ellipsis',
                textAlign: 'left',
            },
        ];
    };
    var getStyles$i = function (props) {
        var _a, _b, _c, _d;
        var theme = props.theme, className = props.className, isAllSelected = props.isAllSelected, isResizingColumn = props.isResizingColumn, isSizing = props.isSizing, isAllCollapsed = props.isAllCollapsed, _e = props.cellStyleProps, cellStyleProps = _e === void 0 ? DEFAULT_CELL_STYLE_PROPS : _e;
        var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$g, theme);
        var colors = {
            iconForegroundColor: semanticColors.bodySubtext,
            headerForegroundColor: semanticColors.bodyText,
            headerBackgroundColor: semanticColors.bodyBackground,
            resizerColor: palette.neutralTertiaryAlt,
        };
        var cellSizerFadeInStyles = {
            opacity: 1,
            transition: 'opacity 0.3s linear',
        };
        var cellStyles = getCellStyles(props);
        return {
            root: [
                classNames.root,
                fonts.small,
                {
                    display: 'inline-block',
                    background: colors.headerBackgroundColor,
                    position: 'relative',
                    minWidth: '100%',
                    verticalAlign: 'top',
                    height: HEADER_HEIGHT,
                    lineHeight: HEADER_HEIGHT,
                    whiteSpace: 'nowrap',
                    boxSizing: 'content-box',
                    paddingBottom: '1px',
                    paddingTop: '16px',
                    borderBottom: "1px solid " + semanticColors.bodyDivider,
                    cursor: 'default',
                    userSelect: 'none',
                    selectors: (_a = {},
                        _a["&:hover ." + classNames.check] = {
                            opacity: 1,
                        },
                        _a["& ." + classNames.tooltipHost + " ." + classNames.checkTooltip] = {
                            display: 'block',
                        },
                        _a),
                },
                isAllSelected && classNames.isAllSelected,
                isResizingColumn && classNames.isResizingColumn,
                className,
            ],
            check: [
                classNames.check,
                {
                    height: HEADER_HEIGHT,
                },
                {
                    selectors: (_b = {},
                        _b["." + IsFocusVisibleClassName + " &:focus"] = {
                            opacity: 1,
                        },
                        _b),
                },
            ],
            cellWrapperPadded: {
                paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,
            },
            cellIsCheck: [
                cellStyles,
                classNames.cellIsCheck,
                {
                    position: 'relative',
                    padding: 0,
                    margin: 0,
                    display: 'inline-flex',
                    alignItems: 'center',
                    border: 'none',
                },
                isAllSelected && {
                    opacity: 1,
                },
            ],
            cellIsGroupExpander: [
                cellStyles,
                {
                    display: 'inline-flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: fonts.small.fontSize,
                    padding: 0,
                    border: 'none',
                    width: SPACER_WIDTH,
                    color: palette.neutralSecondary,
                    selectors: {
                        ':hover': {
                            backgroundColor: palette.neutralLighter,
                        },
                        ':active': {
                            backgroundColor: palette.neutralLight,
                        },
                    },
                },
            ],
            cellIsActionable: {
                selectors: {
                    ':hover': {
                        color: semanticColors.bodyText,
                        background: semanticColors.listHeaderBackgroundHovered,
                    },
                    ':active': {
                        background: semanticColors.listHeaderBackgroundPressed,
                    },
                },
            },
            cellIsEmpty: {
                textOverflow: 'clip',
            },
            cellSizer: [
                classNames.cellSizer,
                focusClear(),
                {
                    display: 'inline-block',
                    position: 'relative',
                    cursor: 'ew-resize',
                    bottom: 0,
                    top: 0,
                    overflow: 'hidden',
                    height: 'inherit',
                    background: 'transparent',
                    zIndex: 1,
                    width: 16,
                    selectors: (_c = {
                            ':after': {
                                content: '""',
                                position: 'absolute',
                                top: 0,
                                bottom: 0,
                                width: 1,
                                background: colors.resizerColor,
                                opacity: 0,
                                left: '50%',
                            },
                            ':focus:after': cellSizerFadeInStyles,
                            ':hover:after': cellSizerFadeInStyles
                        },
                        _c["&." + classNames.isResizing + ":after"] = [
                            cellSizerFadeInStyles,
                            {
                                boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',
                            },
                        ],
                        _c),
                },
            ],
            cellIsResizing: classNames.isResizing,
            cellSizerStart: {
                margin: '0 -8px',
            },
            cellSizerEnd: {
                margin: 0,
                marginLeft: -16,
            },
            collapseButton: [
                classNames.collapseButton,
                {
                    transformOrigin: '50% 50%',
                    transition: 'transform .1s linear',
                },
                isAllCollapsed
                    ? [
                        classNames.isCollapsed,
                        {
                            transform: 'rotate(0deg)',
                        },
                    ]
                    : {
                        transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',
                    },
            ],
            checkTooltip: classNames.checkTooltip,
            sizingOverlay: isSizing && {
                position: 'absolute',
                left: 0,
                top: 0,
                right: 0,
                bottom: 0,
                cursor: 'ew-resize',
                background: 'rgba(255, 255, 255, 0)',
                selectors: (_d = {},
                    _d[HighContrastSelector] = tslib.__assign({ background: 'transparent' }, getHighContrastNoAdjustStyle()),
                    _d),
            },
            accessibleLabel: hiddenContentStyle,
            dropHintCircleStyle: [
                classNames.dropHintCircleStyle,
                {
                    display: 'inline-block',
                    visibility: 'hidden',
                    position: 'absolute',
                    bottom: 0,
                    height: 9,
                    width: 9,
                    borderRadius: '50%',
                    marginLeft: -5,
                    top: 34,
                    overflow: 'visible',
                    zIndex: 10,
                    border: "1px solid " + palette.themePrimary,
                    background: palette.white,
                },
            ],
            dropHintCaretStyle: [
                classNames.dropHintCaretStyle,
                {
                    display: 'none',
                    position: 'absolute',
                    top: -28,
                    left: -6.5,
                    fontSize: fonts.medium.fontSize,
                    color: palette.themePrimary,
                    overflow: 'visible',
                    zIndex: 10,
                },
            ],
            dropHintLineStyle: [
                classNames.dropHintLineStyle,
                {
                    display: 'none',
                    position: 'absolute',
                    bottom: 0,
                    top: 0,
                    overflow: 'hidden',
                    height: 42,
                    width: 1,
                    background: palette.themePrimary,
                    zIndex: 10,
                },
            ],
            dropHintStyle: {
                display: 'inline-block',
                position: 'absolute',
            },
        };
    };

    var GlobalClassNames$f = {
        root: 'ms-DetailsRow-check',
        isDisabled: 'ms-DetailsRow-check--isDisabled',
        isHeader: 'ms-DetailsRow-check--isHeader',
    };
    var CHECK_CELL_WIDTH = 48;
    var getStyles$h = function (props) {
        var theme = props.theme, className = props.className, isHeader = props.isHeader, selected = props.selected, anySelected = props.anySelected, canSelect = props.canSelect, compact = props.compact, isVisible = props.isVisible;
        var classNames = getGlobalClassNames(GlobalClassNames$f, theme);
        var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight, compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight;
        var height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;
        var isCheckVisible = isVisible || selected || anySelected;
        return {
            root: [classNames.root, className],
            check: [
                !canSelect && classNames.isDisabled,
                isHeader && classNames.isHeader,
                getFocusStyle(theme),
                theme.fonts.small,
                CheckGlobalClassNames.checkHost,
                {
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    cursor: 'default',
                    boxSizing: 'border-box',
                    verticalAlign: 'top',
                    background: 'none',
                    backgroundColor: 'transparent',
                    border: 'none',
                    opacity: isCheckVisible ? 1 : 0,
                    height: height,
                    width: CHECK_CELL_WIDTH,
                    padding: 0,
                    margin: 0,
                },
            ],
            isDisabled: [],
        };
    };

    var GlobalClassNames$e = {
        root: 'ms-GroupHeader',
        compact: 'ms-GroupHeader--compact',
        check: 'ms-GroupHeader-check',
        dropIcon: 'ms-GroupHeader-dropIcon',
        expand: 'ms-GroupHeader-expand',
        isCollapsed: 'is-collapsed',
        title: 'ms-GroupHeader-title',
        isSelected: 'is-selected',
        iconTag: 'ms-Icon--Tag',
        group: 'ms-GroupedList-group',
        isDropping: 'is-dropping',
    };
    var beziers = {
        easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',
        easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',
        easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',
    };
    var DEFAULT_GROUP_HEADER_HEIGHT = 48;
    var COMPACT_GROUP_HEADER_HEIGHT = 40;
    var getStyles$g = function (props) {
        var _a, _b, _c, _d, _e;
        var theme = props.theme, className = props.className, selected = props.selected, isCollapsed = props.isCollapsed, compact = props.compact;
        // padding from the source to align GroupHeader title with DetailsRow's first cell.
        var cellLeftPadding = DEFAULT_CELL_STYLE_PROPS.cellLeftPadding;
        var finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;
        var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$e, theme);
        var checkExpandResetStyles = [
            getFocusStyle(theme),
            {
                cursor: 'default',
                background: 'none',
                backgroundColor: 'transparent',
                border: 'none',
                padding: 0, // cancel default <button> padding
            },
        ];
        return {
            root: [
                classNames.root,
                getFocusStyle(theme),
                theme.fonts.medium,
                {
                    // keep the border for height but color it so it's invisible.
                    borderBottom: "1px solid " + semanticColors.listBackground,
                    cursor: 'default',
                    userSelect: 'none',
                    selectors: (_a = {
                            ':hover': {
                                background: semanticColors.listItemBackgroundHovered,
                                color: semanticColors.actionLinkHovered,
                            }
                        },
                        _a["&:hover ." + classNames.check] = {
                            opacity: 1,
                        },
                        _a["." + IsFocusVisibleClassName + " &:focus ." + classNames.check] = {
                            opacity: 1,
                        },
                        _a[":global(." + classNames.group + "." + classNames.isDropping + ")"] = {
                            selectors: (_b = {},
                                _b["& > ." + classNames.root + " ." + classNames.dropIcon] = {
                                    transition: "transform " + AnimationVariables.durationValue4 + " " + beziers.easeOutCirc + " " +
                                        ("opacity " + AnimationVariables.durationValue1 + " " + beziers.easeOutSine),
                                    transitionDelay: AnimationVariables.durationValue3,
                                    opacity: 1,
                                    transform: "rotate(0.2deg) scale(1);", // rotation prevents jittery motion in IE
                                },
                                _b["." + classNames.check] = {
                                    opacity: 0,
                                },
                                _b),
                        },
                        _a),
                },
                selected && [
                    classNames.isSelected,
                    {
                        background: semanticColors.listItemBackgroundChecked,
                        selectors: (_c = {
                                ':hover': {
                                    background: semanticColors.listItemBackgroundCheckedHovered,
                                }
                            },
                            _c["" + classNames.check] = {
                                opacity: 1,
                            },
                            _c),
                    },
                ],
                compact && [classNames.compact, { border: 'none' }],
                className,
            ],
            groupHeaderContainer: [
                {
                    display: 'flex',
                    alignItems: 'center',
                    height: finalRowHeight,
                },
            ],
            headerCount: [
                {
                    padding: '0px 4px',
                },
            ],
            check: [
                classNames.check,
                checkExpandResetStyles,
                {
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.
                    // Ensure that the check cell covers the top border of the cell.
                    // This ensures the click target does not leave a spot which would
                    // cause other items to be deselected.
                    paddingTop: 1,
                    marginTop: -1,
                    opacity: 0,
                    width: CHECK_CELL_WIDTH,
                    height: finalRowHeight,
                    selectors: (_d = {},
                        _d["." + IsFocusVisibleClassName + " &:focus"] = {
                            opacity: 1,
                        },
                        _d),
                },
            ],
            expand: [
                classNames.expand,
                checkExpandResetStyles,
                {
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: fonts.small.fontSize,
                    width: SPACER_WIDTH,
                    height: finalRowHeight,
                    color: selected ? palette.neutralPrimary : palette.neutralSecondary,
                    selectors: {
                        ':hover': {
                            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,
                        },
                        ':active': {
                            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,
                        },
                    },
                },
            ],
            expandIsCollapsed: [
                isCollapsed
                    ? [
                        classNames.isCollapsed,
                        {
                            transform: 'rotate(0deg)',
                            transformOrigin: '50% 50%',
                            transition: 'transform .1s linear',
                        },
                    ]
                    : {
                        transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',
                        transformOrigin: '50% 50%',
                        transition: 'transform .1s linear',
                    },
            ],
            title: [
                classNames.title,
                {
                    paddingLeft: cellLeftPadding,
                    fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,
                    fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,
                    cursor: 'pointer',
                    outline: 0,
                    whiteSpace: 'nowrap',
                    textOverflow: 'ellipsis',
                },
            ],
            dropIcon: [
                classNames.dropIcon,
                {
                    position: 'absolute',
                    left: -26,
                    fontSize: IconFontSizes.large,
                    color: palette.neutralSecondary,
                    transition: "transform " + AnimationVariables.durationValue2 + " " + beziers.easeInBack + ", " +
                        ("opacity " + AnimationVariables.durationValue4 + " " + beziers.easeOutSine),
                    opacity: 0,
                    transform: 'rotate(0.2deg) scale(0.65)',
                    transformOrigin: '10px 10px',
                    selectors: (_e = {},
                        _e[":global(." + classNames.iconTag + ")"] = {
                            position: 'absolute',
                        },
                        _e),
                },
            ],
        };
    };

    /**
     * Possible variations of the spinner circle size.
     * {@docCategory Spinner}
     */
    var SpinnerSize;
    (function (SpinnerSize) {
        /**
         * 12px Spinner diameter
         */
        SpinnerSize[SpinnerSize["xSmall"] = 0] = "xSmall";
        /**
         * 16px Spinner diameter
         */
        SpinnerSize[SpinnerSize["small"] = 1] = "small";
        /**
         * 20px Spinner diameter
         */
        SpinnerSize[SpinnerSize["medium"] = 2] = "medium";
        /**
         * 28px Spinner diameter
         */
        SpinnerSize[SpinnerSize["large"] = 3] = "large";
    })(SpinnerSize || (SpinnerSize = {}));
    /**
     * @deprecated Use `SpinnerSize` instead. Will be removed at \>= 2.0.0.
     * {@docCategory Spinner}
     */
    var SpinnerType;
    (function (SpinnerType) {
        /**
         * @deprecated Use `SpinnerSize.medium` instead. Will be removed at \>= 2.0.0.
         */
        SpinnerType[SpinnerType["normal"] = 0] = "normal";
        /**
         * @deprecated Use `SpinnerSize.large` instead. Will be removed at \>= 2.0.0.
         */
        SpinnerType[SpinnerType["large"] = 1] = "large";
    })(SpinnerType || (SpinnerType = {}));

    var getClassNames$15 = classNamesFunction();
    var SpinnerBase = /** @class */ (function (_super) {
        tslib.__extends(SpinnerBase, _super);
        function SpinnerBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SpinnerBase.prototype.render = function () {
            // eslint-disable-next-line deprecation/deprecation
            var _a = this.props, type = _a.type, size = _a.size, ariaLabel = _a.ariaLabel, ariaLive = _a.ariaLive, styles = _a.styles, label = _a.label, theme = _a.theme, className = _a.className, labelPosition = _a.labelPosition;
            var statusMessage = ariaLabel;
            var nativeProps = getNativeProps(this.props, divProperties, ['size']);
            // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the
            // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType
            // finally goes away we should delete this.
            var styleSize = size;
            if (styleSize === undefined && type !== undefined) {
                // eslint-disable-next-line deprecation/deprecation
                styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;
            }
            var classNames = getClassNames$15(styles, {
                theme: theme,
                size: styleSize,
                className: className,
                labelPosition: labelPosition,
            });
            return (React__namespace.createElement("div", tslib.__assign({}, nativeProps, { className: classNames.root }),
                React__namespace.createElement("div", { className: classNames.circle }),
                label && React__namespace.createElement("div", { className: classNames.label }, label),
                statusMessage && (React__namespace.createElement("div", { role: "status", "aria-live": ariaLive },
                    React__namespace.createElement(DelayedRender, null,
                        React__namespace.createElement("div", { className: classNames.screenReaderText }, statusMessage))))));
        };
        SpinnerBase.defaultProps = {
            size: SpinnerSize.medium,
            ariaLive: 'polite',
            labelPosition: 'bottom',
        };
        return SpinnerBase;
    }(React__namespace.Component));

    var GlobalClassNames$d = {
        root: 'ms-Spinner',
        circle: 'ms-Spinner-circle',
        label: 'ms-Spinner-label',
    };
    var spinAnimation = memoizeFunction(function () {
        return keyframes({
            '0%': {
                transform: 'rotate(0deg)',
            },
            '100%': {
                transform: 'rotate(360deg)',
            },
        });
    });
    var getStyles$f = function (props) {
        var _a;
        var theme = props.theme, size = props.size, className = props.className, labelPosition = props.labelPosition;
        var palette = theme.palette;
        var classNames = getGlobalClassNames(GlobalClassNames$d, theme);
        return {
            root: [
                classNames.root,
                {
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                },
                labelPosition === 'top' && {
                    flexDirection: 'column-reverse',
                },
                labelPosition === 'right' && {
                    flexDirection: 'row',
                },
                labelPosition === 'left' && {
                    flexDirection: 'row-reverse',
                },
                className,
            ],
            circle: [
                classNames.circle,
                {
                    boxSizing: 'border-box',
                    borderRadius: '50%',
                    border: '1.5px solid ' + palette.themeLight,
                    borderTopColor: palette.themePrimary,
                    animationName: spinAnimation(),
                    animationDuration: '1.3s',
                    animationIterationCount: 'infinite',
                    animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',
                    selectors: (_a = {},
                        _a[HighContrastSelector] = tslib.__assign({ borderTopColor: 'Highlight' }, getHighContrastNoAdjustStyle()),
                        _a),
                },
                size === SpinnerSize.xSmall && [
                    'ms-Spinner--xSmall',
                    {
                        width: 12,
                        height: 12,
                    },
                ],
                size === SpinnerSize.small && [
                    'ms-Spinner--small',
                    {
                        width: 16,
                        height: 16,
                    },
                ],
                size === SpinnerSize.medium && [
                    'ms-Spinner--medium',
                    {
                        width: 20,
                        height: 20,
                    },
                ],
                size === SpinnerSize.large && [
                    'ms-Spinner--large',
                    {
                        width: 28,
                        height: 28,
                    },
                ],
            ],
            label: [
                classNames.label,
                theme.fonts.small,
                {
                    color: palette.themePrimary,
                    margin: '8px 0 0',
                    textAlign: 'center',
                },
                labelPosition === 'top' && {
                    margin: '0 0 8px',
                },
                labelPosition === 'right' && {
                    margin: '0 0 0 8px',
                },
                labelPosition === 'left' && {
                    margin: '0 8px 0 0',
                },
            ],
            screenReaderText: hiddenContentStyle,
        };
    };

    var Spinner$1 = styled(SpinnerBase, getStyles$f, undefined, { scope: 'Spinner' });

    var getClassNames$14 = classNamesFunction();
    var GroupHeaderBase = /** @class */ (function (_super) {
        tslib.__extends(GroupHeaderBase, _super);
        function GroupHeaderBase(props) {
            var _this = _super.call(this, props) || this;
            _this._toggleCollapse = function () {
                var _a = _this.props, group = _a.group, onToggleCollapse = _a.onToggleCollapse, isGroupLoading = _a.isGroupLoading;
                var isCollapsed = _this.state.isCollapsed;
                var newCollapsed = !isCollapsed;
                var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);
                _this.setState({
                    isCollapsed: newCollapsed,
                    isLoadingVisible: newLoadingVisible,
                });
                if (onToggleCollapse) {
                    onToggleCollapse(group);
                }
            };
            _this._onKeyUp = function (ev) {
                var _a = _this.props, group = _a.group, onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;
                if (onGroupHeaderKeyUp) {
                    onGroupHeaderKeyUp(ev, group);
                }
                if (!ev.defaultPrevented) {
                    // eslint-disable-next-line deprecation/deprecation
                    var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme);
                    // eslint-disable-next-line deprecation/deprecation
                    var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);
                    if (shouldClose || shouldOpen) {
                        _this._toggleCollapse();
                        ev.stopPropagation();
                        ev.preventDefault();
                    }
                }
            };
            _this._onToggleClick = function (ev) {
                _this._toggleCollapse();
                ev.stopPropagation();
                ev.preventDefault();
            };
            _this._onToggleSelectGroupClick = function (ev) {
                var _a = _this.props, onToggleSelectGroup = _a.onToggleSelectGroup, group = _a.group;
                if (onToggleSelectGroup) {
                    onToggleSelectGroup(group);
                }
                ev.preventDefault();
                ev.stopPropagation();
            };
            _this._onHeaderClick = function () {
                var _a = _this.props, group = _a.group, onGroupHeaderClick = _a.onGroupHeaderClick, onToggleSelectGroup = _a.onToggleSelectGroup;
                if (onGroupHeaderClick) {
                    onGroupHeaderClick(group);
                }
                else if (onToggleSelectGroup) {
                    onToggleSelectGroup(group);
                }
            };
            _this._onRenderTitle = function (props) {
                var group = props.group, ariaColSpan = props.ariaColSpan;
                if (!group) {
                    return null;
                }
                return (React__namespace.createElement("div", { className: _this._classNames.title, id: _this._id, role: "gridcell", "aria-colspan": ariaColSpan },
                    React__namespace.createElement("span", null, group.name),
                    React__namespace.createElement("span", { className: _this._classNames.headerCount },
                        "(",
                        group.count,
                        group.hasMoreData && '+',
                        ")")));
            };
            _this._id = getId('GroupHeader');
            _this.state = {
                isCollapsed: (_this.props.group && _this.props.group.isCollapsed),
                isLoadingVisible: false,
            };
            return _this;
        }
        GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {
            if (nextProps.group) {
                var newCollapsed = nextProps.group.isCollapsed;
                var isGroupLoading = nextProps.isGroupLoading;
                var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);
                return tslib.__assign(tslib.__assign({}, previousState), { isCollapsed: newCollapsed || false, isLoadingVisible: newLoadingVisible || false });
            }
            return previousState;
        };
        GroupHeaderBase.prototype.render = function () {
            var _a = this.props, group = _a.group, _b = _a.groupLevel, groupLevel = _b === void 0 ? 0 : _b, viewport = _a.viewport, selectionMode = _a.selectionMode, loadingText = _a.loadingText, 
            // eslint-disable-next-line deprecation/deprecation
            _c = _a.isSelected, 
            // eslint-disable-next-line deprecation/deprecation
            isSelected = _c === void 0 ? false : _c, _d = _a.selected, selected = _d === void 0 ? false : _d, indentWidth = _a.indentWidth, _e = _a.onRenderTitle, onRenderTitle = _e === void 0 ? this._onRenderTitle : _e, onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox, _f = _a.isCollapsedGroupSelectVisible, isCollapsedGroupSelectVisible = _f === void 0 ? true : _f, expandButtonProps = _a.expandButtonProps, expandButtonIcon = _a.expandButtonIcon, selectAllButtonProps = _a.selectAllButtonProps, theme = _a.theme, styles = _a.styles, className = _a.className, compact = _a.compact, ariaPosInSet = _a.ariaPosInSet, ariaSetSize = _a.ariaSetSize, ariaRowIndex = _a.ariaRowIndex, useFastIcons = _a.useFastIcons;
            var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;
            var onRenderCheckbox = onRenderGroupHeaderCheckbox
                ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)
                : defaultCheckboxRender;
            var _g = this.state, isCollapsed = _g.isCollapsed, isLoadingVisible = _g.isLoadingVisible;
            var canSelectGroup = selectionMode === SelectionMode.multiple;
            var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));
            var currentlySelected = selected || isSelected;
            var isRTL = getRTL(theme);
            this._classNames = getClassNames$14(styles, {
                theme: theme,
                className: className,
                selected: currentlySelected,
                isCollapsed: isCollapsed,
                compact: compact,
            });
            if (!group) {
                return null;
            }
            return (React__namespace.createElement("div", { className: this._classNames.root, style: viewport ? { minWidth: viewport.width } : {}, onClick: this._onHeaderClick, role: "row", "aria-setsize": ariaSetSize, "aria-posinset": ariaPosInSet, "aria-rowindex": ariaRowIndex, "data-is-focusable": true, onKeyUp: this._onKeyUp, "aria-label": group.ariaLabel, "aria-labelledby": group.ariaLabel ? undefined : this._id, "aria-expanded": !this.state.isCollapsed, "aria-selected": canSelectGroup ? currentlySelected : undefined, "aria-level": groupLevel + 1 },
                React__namespace.createElement("div", { className: this._classNames.groupHeaderContainer, role: "presentation" },
                    isSelectionCheckVisible ? (React__namespace.createElement("div", { role: "gridcell" },
                        React__namespace.createElement("button", tslib.__assign({ "data-is-focusable": false, type: "button", className: this._classNames.check, role: "checkbox", id: this._id + "-check", "aria-checked": currentlySelected, "aria-labelledby": this._id + "-check " + this._id, "data-selection-toggle": true, onClick: this._onToggleSelectGroupClick }, selectAllButtonProps), onRenderCheckbox({ checked: currentlySelected, theme: theme }, onRenderCheckbox)))) : (
                    // To make the group header align properly with the column headers, this spacer
                    // needs to be the same width as the check cell in the column header.
                    selectionMode !== SelectionMode.none && React__namespace.createElement(GroupSpacer, { indentWidth: CHECK_CELL_WIDTH, count: 1 })),
                    React__namespace.createElement(GroupSpacer, { indentWidth: indentWidth, count: groupLevel }),
                    React__namespace.createElement("div", { className: this._classNames.dropIcon, role: "presentation" },
                        React__namespace.createElement(Icon$1, { iconName: "Tag" })),
                    React__namespace.createElement("div", { role: "gridcell" },
                        React__namespace.createElement("button", tslib.__assign({ "data-is-focusable": false, type: "button", className: this._classNames.expand, onClick: this._onToggleClick, "aria-expanded": !this.state.isCollapsed }, expandButtonProps),
                            React__namespace.createElement(Icon$1, { className: this._classNames.expandIsCollapsed, iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed') }))),
                    onRenderTitle(this.props, this._onRenderTitle),
                    isLoadingVisible && React__namespace.createElement(Spinner$1, { label: loadingText }))));
        };
        GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {
            return React__namespace.createElement(Check, { checked: checkboxProps.checked });
        };
        GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {
            return React__namespace.createElement(FastCheck$1, { theme: checkboxProps.theme, checked: checkboxProps.checked });
        };
        GroupHeaderBase.defaultProps = {
            expandButtonProps: { 'aria-label': 'expand collapse group' },
        };
        return GroupHeaderBase;
    }(React__namespace.Component));
    var FastCheck$1 = React__namespace.memo(function (props) {
        return React__namespace.createElement(Check, { theme: props.theme, checked: props.checked, className: props.className, useFastIcons: true });
    });

    var GroupHeader = styled(GroupHeaderBase, getStyles$g, undefined, {
        scope: 'GroupHeader',
    });

    var GlobalClassNames$c = {
        root: 'ms-GroupShowAll',
        link: 'ms-Link',
    };
    var getStyles$e = function (props) {
        var _a;
        var theme = props.theme;
        var fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$c, theme);
        return {
            root: [
                classNames.root,
                {
                    position: 'relative',
                    padding: '10px 84px',
                    cursor: 'pointer',
                    selectors: (_a = {},
                        _a["." + classNames.link] = {
                            fontSize: fonts.small.fontSize,
                        },
                        _a),
                },
            ],
        };
    };

    var getClassNames$13 = classNamesFunction();
    var GroupShowAllBase = function (props) {
        var group = props.group, groupLevel = props.groupLevel, _a = props.showAllLinkText, showAllLinkText = _a === void 0 ? 'Show All' : _a, styles = props.styles, theme = props.theme, onToggleSummarize = props.onToggleSummarize;
        var classNames = getClassNames$13(styles, { theme: theme });
        var memoizedOnClick = React.useCallback(function (ev) {
            onToggleSummarize(group);
            ev.stopPropagation();
            ev.preventDefault();
        }, [onToggleSummarize, group]);
        if (group) {
            return (React__namespace.createElement("div", { className: classNames.root },
                React__namespace.createElement(GroupSpacer, { count: groupLevel }),
                React__namespace.createElement(Link$1, { onClick: memoizedOnClick }, showAllLinkText)));
        }
        return null;
    };

    var GroupShowAll = styled(GroupShowAllBase, getStyles$e, undefined, { scope: 'GroupShowAll' });

    var GlobalClassNames$b = {
        root: 'ms-groupFooter',
    };
    var getStyles$d = function (props) {
        var theme = props.theme, className = props.className;
        var classNames = getGlobalClassNames(GlobalClassNames$b, theme);
        return {
            root: [
                theme.fonts.medium,
                classNames.root,
                {
                    position: 'relative',
                    padding: '5px 38px',
                },
                className,
            ],
        };
    };

    var getClassNames$12 = classNamesFunction();
    var GroupFooterBase = function (props) {
        var group = props.group, groupLevel = props.groupLevel, footerText = props.footerText, indentWidth = props.indentWidth, styles = props.styles, theme = props.theme;
        var classNames = getClassNames$12(styles, { theme: theme });
        if (group && footerText) {
            return (React__namespace.createElement("div", { className: classNames.root },
                React__namespace.createElement(GroupSpacer, { indentWidth: indentWidth, count: groupLevel }),
                footerText));
        }
        return null;
    };

    var GroupFooter = styled(GroupFooterBase, getStyles$d, undefined, {
        scope: 'GroupFooter',
    });

    var DEFAULT_DROPPING_CSS_CLASS$1 = 'is-dropping';
    var GroupedListSection = /** @class */ (function (_super) {
        tslib.__extends(GroupedListSection, _super);
        function GroupedListSection(props) {
            var _this = _super.call(this, props) || this;
            _this._root = React__namespace.createRef();
            _this._list = React__namespace.createRef();
            _this._subGroupRefs = {};
            _this._droppingClassName = '';
            _this._onRenderGroupHeader = function (props) {
                return React__namespace.createElement(GroupHeader, tslib.__assign({}, props));
            };
            _this._onRenderGroupShowAll = function (props) {
                return React__namespace.createElement(GroupShowAll, tslib.__assign({}, props));
            };
            _this._onRenderGroupFooter = function (props) {
                return React__namespace.createElement(GroupFooter, tslib.__assign({}, props));
            };
            _this._renderSubGroup = function (subGroup, subGroupIndex) {
                var _a = _this.props, dragDropEvents = _a.dragDropEvents, dragDropHelper = _a.dragDropHelper, eventsToRegister = _a.eventsToRegister, getGroupItemLimit = _a.getGroupItemLimit, groupNestingDepth = _a.groupNestingDepth, groupProps = _a.groupProps, items = _a.items, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, listProps = _a.listProps, onRenderCell = _a.onRenderCell, selection = _a.selection, selectionMode = _a.selectionMode, viewport = _a.viewport, onRenderGroupHeader = _a.onRenderGroupHeader, onRenderGroupShowAll = _a.onRenderGroupShowAll, onRenderGroupFooter = _a.onRenderGroupFooter, onShouldVirtualize = _a.onShouldVirtualize, group = _a.group, compact = _a.compact;
                var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;
                return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (React__namespace.createElement(GroupedListSection, { ref: function (ref) { return (_this._subGroupRefs['subGroup_' + subGroupIndex] = ref); }, key: _this._getGroupKey(subGroup, subGroupIndex), dragDropEvents: dragDropEvents, dragDropHelper: dragDropHelper, eventsToRegister: eventsToRegister, footerProps: footerProps, getGroupItemLimit: getGroupItemLimit, group: subGroup, groupIndex: subGroupIndex, groupNestingDepth: nestingDepth, groupProps: groupProps, headerProps: headerProps, items: items, listProps: listProps, onRenderCell: onRenderCell, selection: selection, selectionMode: selectionMode, showAllProps: showAllProps, viewport: viewport, onRenderGroupHeader: onRenderGroupHeader, onRenderGroupShowAll: onRenderGroupShowAll, onRenderGroupFooter: onRenderGroupFooter, onShouldVirtualize: onShouldVirtualize, groups: group ? group.children : [], compact: compact })) : null;
            };
            /**
             * collect all the data we need to enable drag/drop for a group
             */
            _this._getGroupDragDropOptions = function () {
                var _a = _this.props, group = _a.group, groupIndex = _a.groupIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;
                var options = {
                    eventMap: eventsToRegister,
                    selectionIndex: -1,
                    context: { data: group, index: groupIndex, isGroup: true },
                    updateDropState: _this._updateDroppingState,
                    canDrag: dragDropEvents.canDrag,
                    canDrop: dragDropEvents.canDrop,
                    onDrop: dragDropEvents.onDrop,
                    onDragStart: dragDropEvents.onDragStart,
                    onDragEnter: dragDropEvents.onDragEnter,
                    onDragLeave: dragDropEvents.onDragLeave,
                    onDragEnd: dragDropEvents.onDragEnd,
                    onDragOver: dragDropEvents.onDragOver,
                };
                return options;
            };
            /**
             * update groupIsDropping state based on the input value, which is used to change style during drag and drop
             *
             * @param newValue - new isDropping state value
             * @param event - the event trigger dropping state change which can be dragenter, dragleave etc
             */
            _this._updateDroppingState = function (newIsDropping, event) {
                var isDropping = _this.state.isDropping;
                var _a = _this.props, dragDropEvents = _a.dragDropEvents, group = _a.group;
                if (isDropping !== newIsDropping) {
                    if (isDropping) {
                        if (dragDropEvents && dragDropEvents.onDragLeave) {
                            dragDropEvents.onDragLeave(group, event);
                        }
                    }
                    else {
                        if (dragDropEvents && dragDropEvents.onDragEnter) {
                            _this._droppingClassName = dragDropEvents.onDragEnter(group, event);
                        }
                    }
                    _this.setState({ isDropping: newIsDropping });
                }
            };
            var selection = props.selection, group = props.group;
            initializeComponentRef(_this);
            _this._id = getId('GroupedListSection');
            _this.state = {
                isDropping: false,
                isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,
            };
            _this._events = new EventGroup(_this);
            return _this;
        }
        GroupedListSection.prototype.componentDidMount = function () {
            var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection;
            if (dragDropHelper && this._root.current) {
                this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());
            }
            if (selection) {
                this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);
            }
        };
        GroupedListSection.prototype.componentWillUnmount = function () {
            this._events.dispose();
            if (this._dragDropSubscription) {
                this._dragDropSubscription.dispose();
            }
        };
        GroupedListSection.prototype.componentDidUpdate = function (previousProps) {
            if (this.props.group !== previousProps.group ||
                this.props.groupIndex !== previousProps.groupIndex ||
                this.props.dragDropHelper !== previousProps.dragDropHelper) {
                if (this._dragDropSubscription) {
                    this._dragDropSubscription.dispose();
                    delete this._dragDropSubscription;
                }
                if (this.props.dragDropHelper && this._root.current) {
                    this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());
                }
            }
        };
        GroupedListSection.prototype.render = function () {
            var _a = this.props, getGroupItemLimit = _a.getGroupItemLimit, group = _a.group, groupIndex = _a.groupIndex, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, viewport = _a.viewport, selectionMode = _a.selectionMode, _b = _a.onRenderGroupHeader, onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b, _c = _a.onRenderGroupShowAll, onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c, _d = _a.onRenderGroupFooter, onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d, onShouldVirtualize = _a.onShouldVirtualize, groupedListClassNames = _a.groupedListClassNames, groups = _a.groups, compact = _a.compact, _e = _a.listProps, listProps = _e === void 0 ? {} : _e;
            var isSelected = this.state.isSelected;
            var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;
            var isShowAllVisible = group &&
                !group.children &&
                !group.isCollapsed &&
                !group.isShowingAll &&
                (group.count > renderCount || group.hasMoreData);
            var hasNestedGroups = group && group.children && group.children.length > 0;
            var version = listProps.version;
            var dividerProps = {
                group: group,
                groupIndex: groupIndex,
                groupLevel: group ? group.level : 0,
                isSelected: isSelected,
                selected: isSelected,
                viewport: viewport,
                selectionMode: selectionMode,
                groups: groups,
                compact: compact,
            };
            var ariaControlsProps = {
                groupedListId: this._id,
                ariaSetSize: groups ? groups.length : undefined,
                ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,
            };
            var groupHeaderProps = tslib.__assign(tslib.__assign(tslib.__assign({}, headerProps), dividerProps), ariaControlsProps);
            var groupShowAllProps = tslib.__assign(tslib.__assign({}, showAllProps), dividerProps);
            var groupFooterProps = tslib.__assign(tslib.__assign({}, footerProps), dividerProps);
            var isDraggable = !!this.props.dragDropHelper &&
                this._getGroupDragDropOptions().canDrag(group) &&
                !!this.props.dragDropEvents.canDragGroups;
            return (React__namespace.createElement("div", tslib.__assign({ ref: this._root }, (isDraggable && { draggable: true }), { className: css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()), role: "presentation" }),
                onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader),
                group && group.isCollapsed ? null : hasNestedGroups ? (React__namespace.createElement(List, { role: "presentation", ref: this._list, items: group ? group.children : [], onRenderCell: this._renderSubGroup, getItemCountForPage: this._returnOne, onShouldVirtualize: onShouldVirtualize, version: version, id: this._id })) : (this._onRenderGroup(renderCount)),
                group && group.isCollapsed
                    ? null
                    : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll),
                onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)));
        };
        GroupedListSection.prototype.forceUpdate = function () {
            _super.prototype.forceUpdate.call(this);
            this.forceListUpdate();
        };
        GroupedListSection.prototype.forceListUpdate = function () {
            var group = this.props.group;
            if (this._list.current) {
                this._list.current.forceUpdate();
                if (group && group.children && group.children.length > 0) {
                    var subGroupCount = group.children.length;
                    for (var i = 0; i < subGroupCount; i++) {
                        var subGroup = this._list.current.pageRefs['subGroup_' + String(i)];
                        if (subGroup) {
                            subGroup.forceListUpdate();
                        }
                    }
                }
            }
            else {
                var subGroup = this._subGroupRefs['subGroup_' + String(0)];
                if (subGroup) {
                    subGroup.forceListUpdate();
                }
            }
        };
        GroupedListSection.prototype._onSelectionChange = function () {
            var _a = this.props, group = _a.group, selection = _a.selection;
            if (selection && group) {
                var isSelected = selection.isRangeSelected(group.startIndex, group.count);
                if (isSelected !== this.state.isSelected) {
                    this.setState({ isSelected: isSelected });
                }
            }
        };
        GroupedListSection.prototype._onRenderGroupCell = function (onRenderCell, groupNestingDepth, group) {
            return function (item, itemIndex) {
                return onRenderCell(groupNestingDepth, item, itemIndex, group);
            };
        };
        GroupedListSection.prototype._onRenderGroup = function (renderCount) {
            var _a = this.props, group = _a.group, items = _a.items, onRenderCell = _a.onRenderCell, listProps = _a.listProps, groupNestingDepth = _a.groupNestingDepth, onShouldVirtualize = _a.onShouldVirtualize, groupProps = _a.groupProps;
            var count = group && !group.isShowingAll ? group.count : items.length;
            var startIndex = group ? group.startIndex : 0;
            return (React__namespace.createElement(List, tslib.__assign({ role: groupProps && groupProps.role ? groupProps.role : 'rowgroup', "aria-label": group === null || group === void 0 ? void 0 : group.name, items: items, onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth, group), ref: this._list, renderCount: Math.min(count, renderCount), startIndex: startIndex, onShouldVirtualize: onShouldVirtualize, id: this._id }, listProps)));
        };
        GroupedListSection.prototype._returnOne = function () {
            return 1;
        };
        GroupedListSection.prototype._getGroupKey = function (group, index) {
            return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));
        };
        /**
         * get the correct css class to reflect the dropping state for a given group
         *
         * If the group is the current drop target, return the default dropping class name
         * Otherwise, return '';
         *
         */
        GroupedListSection.prototype._getDroppingClassName = function () {
            var isDropping = this.state.isDropping;
            var _a = this.props, group = _a.group, groupedListClassNames = _a.groupedListClassNames;
            isDropping = !!(group && isDropping);
            return css(isDropping && this._droppingClassName, isDropping && DEFAULT_DROPPING_CSS_CLASS$1, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);
        };
        return GroupedListSection;
    }(React__namespace.Component));

    var getClassNames$11 = classNamesFunction();
    var ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight, COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;
    var GroupedListBase = /** @class */ (function (_super) {
        tslib.__extends(GroupedListBase, _super);
        function GroupedListBase(props) {
            var _this = _super.call(this, props) || this;
            _this._list = React__namespace.createRef();
            _this._renderGroup = function (group, groupIndex) {
                var _a = _this.props, dragDropEvents = _a.dragDropEvents, dragDropHelper = _a.dragDropHelper, eventsToRegister = _a.eventsToRegister, groupProps = _a.groupProps, items = _a.items, listProps = _a.listProps, onRenderCell = _a.onRenderCell, selectionMode = _a.selectionMode, selection = _a.selection, viewport = _a.viewport, onShouldVirtualize = _a.onShouldVirtualize, groups = _a.groups, compact = _a.compact;
                // override group header/footer props as needed
                var dividerProps = {
                    onToggleSelectGroup: _this._onToggleSelectGroup,
                    onToggleCollapse: _this._onToggleCollapse,
                    onToggleSummarize: _this._onToggleSummarize,
                };
                var headerProps = tslib.__assign(tslib.__assign({}, groupProps.headerProps), dividerProps);
                var showAllProps = tslib.__assign(tslib.__assign({}, groupProps.showAllProps), dividerProps);
                var footerProps = tslib.__assign(tslib.__assign({}, groupProps.footerProps), dividerProps);
                var groupNestingDepth = _this._getGroupNestingDepth();
                if (!groupProps.showEmptyGroups && group && group.count === 0) {
                    return null;
                }
                var finalListProps = tslib.__assign(tslib.__assign({}, (listProps || {})), { version: _this.state.version });
                return (React__namespace.createElement(GroupedListSection, { key: _this._getGroupKey(group, groupIndex), dragDropEvents: dragDropEvents, dragDropHelper: dragDropHelper, eventsToRegister: eventsToRegister, footerProps: footerProps, getGroupItemLimit: groupProps && groupProps.getGroupItemLimit, group: group, groupIndex: groupIndex, groupNestingDepth: groupNestingDepth, groupProps: groupProps, headerProps: headerProps, listProps: finalListProps, items: items, onRenderCell: onRenderCell, onRenderGroupHeader: groupProps.onRenderHeader, onRenderGroupShowAll: groupProps.onRenderShowAll, onRenderGroupFooter: groupProps.onRenderFooter, selectionMode: selectionMode, selection: selection, showAllProps: showAllProps, viewport: viewport, onShouldVirtualize: onShouldVirtualize, groupedListClassNames: _this._classNames, groups: groups, compact: compact }));
            };
            _this._getDefaultGroupItemLimit = function (group) {
                return group.children && group.children.length > 0 ? group.children.length : group.count;
            };
            _this._getGroupItemLimit = function (group) {
                var groupProps = _this.props.groupProps;
                var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;
                return getGroupItemLimit(group);
            };
            _this._getGroupHeight = function (group) {
                var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;
                return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));
            };
            _this._getPageHeight = function (itemIndex) {
                var groups = _this.state.groups;
                var _a = _this.props.getGroupHeight, getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;
                var pageGroup = groups && groups[itemIndex];
                if (pageGroup) {
                    return getGroupHeight(pageGroup, itemIndex);
                }
                else {
                    return 0;
                }
            };
            _this._onToggleCollapse = function (group) {
                var groupProps = _this.props.groupProps;
                var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;
                if (group) {
                    if (onToggleCollapse) {
                        onToggleCollapse(group);
                    }
                    group.isCollapsed = !group.isCollapsed;
                    _this._updateIsSomeGroupExpanded();
                    _this.forceUpdate();
                }
            };
            _this._onToggleSelectGroup = function (group) {
                var _a = _this.props, selection = _a.selection, selectionMode = _a.selectionMode;
                if (group && selection && selectionMode === SelectionMode.multiple) {
                    selection.toggleRangeSelected(group.startIndex, group.count);
                }
            };
            _this._isInnerZoneKeystroke = function (ev) {
                // eslint-disable-next-line deprecation/deprecation
                return ev.which === getRTLSafeKeyCode(KeyCodes.right);
            };
            _this._onToggleSummarize = function (group) {
                var groupProps = _this.props.groupProps;
                var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;
                if (onToggleSummarize) {
                    onToggleSummarize(group);
                }
                else {
                    if (group) {
                        group.isShowingAll = !group.isShowingAll;
                    }
                    _this.forceUpdate();
                }
            };
            _this._getPageSpecification = function (itemIndex) {
                var groups = _this.state.groups;
                var pageGroup = groups && groups[itemIndex];
                return {
                    key: pageGroup && pageGroup.key,
                };
            };
            initializeComponentRef(_this);
            _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);
            var _a = props.listProps, _b = _a === void 0 ? {} : _a, _c = _b.version, version = _c === void 0 ? {} : _c;
            _this.state = {
                groups: props.groups,
                items: props.items,
                listProps: props.listProps,
                version: version,
            };
            return _this;
        }
        GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {
            var groups = nextProps.groups, selectionMode = nextProps.selectionMode, compact = nextProps.compact, items = nextProps.items, listProps = nextProps.listProps;
            var listVersion = listProps && listProps.version;
            var nextState = tslib.__assign(tslib.__assign({}, previousState), { selectionMode: selectionMode, compact: compact, groups: groups, listProps: listProps });
            var shouldForceUpdates = false;
            var previousListVersion = previousState.listProps && previousState.listProps.version;
            if (listVersion !== previousListVersion ||
                items !== previousState.items ||
                groups !== previousState.groups ||
                selectionMode !== previousState.selectionMode ||
                compact !== previousState.compact) {
                // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,
                // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale
                // data.
                shouldForceUpdates = true;
            }
            if (groups !== previousState.groups) {
                nextState = tslib.__assign(tslib.__assign({}, nextState), { groups: groups });
            }
            if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {
                shouldForceUpdates = true;
            }
            if (shouldForceUpdates) {
                nextState = tslib.__assign(tslib.__assign({}, nextState), { version: {} });
            }
            return nextState;
        };
        GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {
            if (this._list.current) {
                this._list.current.scrollToIndex(index, measureItem, scrollToMode);
            }
        };
        GroupedListBase.prototype.getStartItemIndexInView = function () {
            return this._list.current.getStartItemIndexInView() || 0;
        };
        GroupedListBase.prototype.componentDidMount = function () {
            var _a = this.props, groupProps = _a.groupProps, _b = _a.groups, groups = _b === void 0 ? [] : _b;
            if (groupProps && groupProps.isAllGroupsCollapsed) {
                this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);
            }
        };
        GroupedListBase.prototype.render = function () {
            var _a = this.props, className = _a.className, usePageCache = _a.usePageCache, onShouldVirtualize = _a.onShouldVirtualize, theme = _a.theme, _b = _a.role, role = _b === void 0 ? 'treegrid' : _b, styles = _a.styles, compact = _a.compact, _c = _a.focusZoneProps, focusZoneProps = _c === void 0 ? {} : _c, _d = _a.rootListProps, rootListProps = _d === void 0 ? {} : _d;
            var _e = this.state, groups = _e.groups, version = _e.version;
            this._classNames = getClassNames$11(styles, {
                theme: theme,
                className: className,
                compact: compact,
            });
            var _f = focusZoneProps.shouldEnterInnerZone, shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;
            return (React__namespace.createElement(FocusZone, tslib.__assign({ direction: FocusZoneDirection.vertical, "data-automationid": "GroupedList", "data-is-scrollable": "false", role: "presentation" }, focusZoneProps, { shouldEnterInnerZone: shouldEnterInnerZone, className: css(this._classNames.root, focusZoneProps.className) }), !groups ? (this._renderGroup(undefined, 0)) : (React__namespace.createElement(List, tslib.__assign({ ref: this._list, role: role, items: groups, onRenderCell: this._renderGroup, getItemCountForPage: this._returnOne, getPageHeight: this._getPageHeight, getPageSpecification: this._getPageSpecification, usePageCache: usePageCache, onShouldVirtualize: onShouldVirtualize, version: version }, rootListProps)))));
        };
        GroupedListBase.prototype.forceUpdate = function () {
            _super.prototype.forceUpdate.call(this);
            this._forceListUpdates();
        };
        GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {
            var _a = this.state.groups, groups = _a === void 0 ? [] : _a;
            var groupProps = this.props.groupProps;
            var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;
            if (groups.length > 0) {
                if (onToggleCollapseAll) {
                    onToggleCollapseAll(allCollapsed);
                }
                this._setGroupsCollapsedState(groups, allCollapsed);
                this._updateIsSomeGroupExpanded();
                this.forceUpdate();
            }
        };
        GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {
            for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {
                groups[groupIndex].isCollapsed = isCollapsed;
            }
        };
        GroupedListBase.prototype._returnOne = function () {
            return 1;
        };
        GroupedListBase.prototype._getGroupKey = function (group, index) {
            return 'group-' + (group && group.key ? group.key : String(index));
        };
        GroupedListBase.prototype._getGroupNestingDepth = function () {
            var groups = this.state.groups;
            var level = 0;
            var groupsInLevel = groups;
            while (groupsInLevel && groupsInLevel.length > 0) {
                level++;
                groupsInLevel = groupsInLevel[0].children;
            }
            return level;
        };
        GroupedListBase.prototype._forceListUpdates = function (groups) {
            this.setState({
                version: {},
            });
        };
        GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {
            var _this = this;
            return !!(groups &&
                groups.some(function (group) { return (group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed); }));
        };
        GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {
            var groups = this.state.groups;
            var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;
            var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);
            if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {
                if (onGroupExpandStateChanged) {
                    onGroupExpandStateChanged(newIsSomeGroupExpanded);
                }
                this._isSomeGroupExpanded = newIsSomeGroupExpanded;
            }
        };
        GroupedListBase.defaultProps = {
            selectionMode: SelectionMode.multiple,
            isHeaderVisible: true,
            groupProps: {},
            compact: false,
        };
        return GroupedListBase;
    }(React__namespace.Component));

    var GroupedList = styled(GroupedListBase, getStyles$j, undefined, {
        scope: 'GroupedList',
    });

    var getClassNames$10 = classNamesFunction();
    var DetailsRowCheckBase = function (props) {
        var _a = props.isVisible, isVisible = _a === void 0 ? false : _a, _b = props.canSelect, canSelect = _b === void 0 ? false : _b, _c = props.anySelected, anySelected = _c === void 0 ? false : _c, _d = props.selected, selected = _d === void 0 ? false : _d, selectionMode = props.selectionMode, _e = props.isHeader, isHeader = _e === void 0 ? false : _e, className = props.className; props.checkClassName; var styles = props.styles, theme = props.theme, compact = props.compact, onRenderDetailsCheckbox = props.onRenderDetailsCheckbox, _f = props.useFastIcons, useFastIcons = _f === void 0 ? true : _f, // must be removed from buttonProps
        buttonProps = tslib.__rest(props, ["isVisible", "canSelect", "anySelected", "selected", "selectionMode", "isHeader", "className", "checkClassName", "styles", "theme", "compact", "onRenderDetailsCheckbox", "useFastIcons"]);
        var defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;
        var onRenderCheckbox = onRenderDetailsCheckbox
            ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)
            : defaultCheckboxRender;
        var classNames = getClassNames$10(styles, {
            theme: theme,
            canSelect: canSelect,
            selected: selected,
            anySelected: anySelected,
            className: className,
            isHeader: isHeader,
            isVisible: isVisible,
            compact: compact,
        });
        var detailsCheckboxProps = {
            checked: selected,
            theme: theme,
        };
        var divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);
        var checkRole = selectionMode === SelectionMode.single ? 'radio' : 'checkbox';
        return canSelect ? (React__namespace.createElement("div", tslib.__assign({}, buttonProps, { role: checkRole, 
            // eslint-disable-next-line deprecation/deprecation
            className: css(classNames.root, classNames.check), "aria-checked": selected, "data-selection-toggle": true, "data-automationid": "DetailsRowCheck", tabIndex: -1 }), onRenderCheckbox(detailsCheckboxProps))) : (
        // eslint-disable-next-line deprecation/deprecation
        React__namespace.createElement("div", tslib.__assign({}, divProps, { className: css(classNames.root, classNames.check) })));
    };
    var FastCheck = React__namespace.memo(function (props) {
        return React__namespace.createElement(Check, { theme: props.theme, checked: props.checked, className: props.className, useFastIcons: true });
    });
    function _defaultCheckboxRender(checkboxProps) {
        return React__namespace.createElement(Check, { checked: checkboxProps.checked });
    }
    function _fastDefaultCheckboxRender(checkboxProps) {
        return React__namespace.createElement(FastCheck, { theme: checkboxProps.theme, checked: checkboxProps.checked });
    }
    var DetailsRowCheck = styled(DetailsRowCheckBase, getStyles$h, undefined, { scope: 'DetailsRowCheck' }, true);

    var MOUSEDOWN_PRIMARY_BUTTON$2 = 0; // for mouse down event we are using ev.button property, 0 means left button
    var MOUSEMOVE_PRIMARY_BUTTON$1 = 1; // for mouse move event we are using ev.buttons property, 1 means left button
    var DragDropHelper = /** @class */ (function () {
        function DragDropHelper(params) {
            this._selection = params.selection;
            this._dragEnterCounts = {};
            this._activeTargets = {};
            this._lastId = 0;
            // To make this class cheap to create, which allows simplifying some logic elsewhere,
            // only initialize the event group and global event handlers as needed.
            this._initialized = false;
        }
        DragDropHelper.prototype.dispose = function () {
            if (this._events) {
                this._events.dispose();
            }
        };
        DragDropHelper.prototype.subscribe = function (root, events, dragDropOptions) {
            var _this = this;
            if (!this._initialized) {
                this._events = new EventGroup(this);
                var doc = getDocument();
                // clear drag data when mouse up, use capture event to ensure it will be run
                if (doc) {
                    this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);
                    this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);
                }
                this._initialized = true;
            }
            var _a = dragDropOptions.key, key = _a === void 0 ? "" + ++this._lastId : _a;
            var handlers = [];
            var onDragStart;
            var onDragLeave;
            var onDragEnter;
            var onDragEnd;
            var onDrop;
            var onDragOver;
            var onMouseDown;
            var isDraggable;
            var isDroppable;
            var activeTarget;
            if (dragDropOptions && root) {
                var eventMap = dragDropOptions.eventMap, context = dragDropOptions.context, updateDropState_1 = dragDropOptions.updateDropState;
                var dragDropTarget = {
                    root: root,
                    options: dragDropOptions,
                    key: key,
                };
                isDraggable = this._isDraggable(dragDropTarget);
                isDroppable = this._isDroppable(dragDropTarget);
                if (isDraggable || isDroppable) {
                    if (eventMap) {
                        for (var _i = 0, eventMap_1 = eventMap; _i < eventMap_1.length; _i++) {
                            var event_1 = eventMap_1[_i];
                            var handler = {
                                callback: event_1.callback.bind(null, context),
                                eventName: event_1.eventName,
                            };
                            handlers.push(handler);
                            this._events.on(root, handler.eventName, handler.callback);
                        }
                    }
                }
                if (isDroppable) {
                    // If the target is droppable, wire up global event listeners to track drop-related events.
                    onDragLeave = function (event) {
                        if (!event.isHandled) {
                            event.isHandled = true;
                            _this._dragEnterCounts[key]--;
                            if (_this._dragEnterCounts[key] === 0) {
                                updateDropState_1(false /* isDropping */, event);
                            }
                        }
                    };
                    onDragEnter = function (event) {
                        event.preventDefault(); // needed for IE
                        if (!event.isHandled) {
                            event.isHandled = true;
                            _this._dragEnterCounts[key]++;
                            if (_this._dragEnterCounts[key] === 1) {
                                updateDropState_1(true /* isDropping */, event);
                            }
                        }
                    };
                    onDragEnd = function (event) {
                        _this._dragEnterCounts[key] = 0;
                        updateDropState_1(false /* isDropping */, event);
                    };
                    onDrop = function (event) {
                        _this._dragEnterCounts[key] = 0;
                        updateDropState_1(false /* isDropping */, event);
                        if (dragDropOptions.onDrop) {
                            dragDropOptions.onDrop(dragDropOptions.context.data, event);
                        }
                    };
                    onDragOver = function (event) {
                        event.preventDefault();
                        if (dragDropOptions.onDragOver) {
                            dragDropOptions.onDragOver(dragDropOptions.context.data, event);
                        }
                    };
                    this._dragEnterCounts[key] = 0;
                    // dragenter and dragleave will be fired when hover to the child element
                    // but we only want to change state when enter or leave the current element
                    // use the count to ensure it.
                    events.on(root, 'dragenter', onDragEnter);
                    events.on(root, 'dragleave', onDragLeave);
                    events.on(root, 'dragend', onDragEnd);
                    events.on(root, 'drop', onDrop);
                    events.on(root, 'dragover', onDragOver);
                }
                if (isDraggable) {
                    // If the target is draggable, wire up local event listeners for mouse events.
                    onMouseDown = this._onMouseDown.bind(this, dragDropTarget);
                    onDragEnd = this._onDragEnd.bind(this, dragDropTarget);
                    // We need to add in data so that on Firefox we show the ghost element when dragging
                    onDragStart = function (event) {
                        var options = dragDropOptions;
                        if (options && options.onDragStart) {
                            options.onDragStart(options.context.data, options.context.index, _this._selection.getSelection(), event);
                        }
                        _this._isDragging = true;
                        if (event.dataTransfer) {
                            event.dataTransfer.setData('id', root.id);
                        }
                    };
                    events.on(root, 'dragstart', onDragStart);
                    events.on(root, 'mousedown', onMouseDown);
                    events.on(root, 'dragend', onDragEnd);
                }
                activeTarget = {
                    target: dragDropTarget,
                    dispose: function () {
                        if (_this._activeTargets[key] === activeTarget) {
                            delete _this._activeTargets[key];
                        }
                        if (root) {
                            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                                var handler = handlers_1[_i];
                                _this._events.off(root, handler.eventName, handler.callback);
                            }
                            if (isDroppable) {
                                events.off(root, 'dragenter', onDragEnter);
                                events.off(root, 'dragleave', onDragLeave);
                                events.off(root, 'dragend', onDragEnd);
                                events.off(root, 'dragover', onDragOver);
                                events.off(root, 'drop', onDrop);
                            }
                            if (isDraggable) {
                                events.off(root, 'dragstart', onDragStart);
                                events.off(root, 'mousedown', onMouseDown);
                                events.off(root, 'dragend', onDragEnd);
                            }
                        }
                    },
                };
                this._activeTargets[key] = activeTarget;
            }
            return {
                key: key,
                dispose: function () {
                    if (activeTarget) {
                        activeTarget.dispose();
                    }
                },
            };
        };
        DragDropHelper.prototype.unsubscribe = function (root, key) {
            var activeTarget = this._activeTargets[key];
            if (activeTarget) {
                activeTarget.dispose();
            }
        };
        DragDropHelper.prototype._onDragEnd = function (target, event) {
            var options = target.options;
            if (options.onDragEnd) {
                options.onDragEnd(options.context.data, event);
            }
        };
        /**
         * clear drag data when mouse up on body
         */
        DragDropHelper.prototype._onMouseUp = function (event) {
            this._isDragging = false;
            if (this._dragData) {
                for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {
                    var key = _a[_i];
                    var activeTarget = this._activeTargets[key];
                    if (activeTarget.target.root) {
                        this._events.off(activeTarget.target.root, 'mousemove');
                        this._events.off(activeTarget.target.root, 'mouseleave');
                    }
                }
                if (this._dragData.dropTarget) {
                    // raise dragleave event to let dropTarget know it need to remove dropping style
                    EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');
                    EventGroup.raise(this._dragData.dropTarget.root, 'drop');
                }
            }
            this._dragData = null;
        };
        /**
         * clear drag data when mouse up outside of the document
         */
        DragDropHelper.prototype._onDocumentMouseUp = function (event) {
            var doc = getDocument();
            if (doc && event.target === doc.documentElement) {
                this._onMouseUp(event);
            }
        };
        /**
         * when mouse move over a new drop target while dragging some items,
         * fire dragleave on the old target and fire dragenter to the new target
         * The target will handle style change on dragenter and dragleave events.
         */
        DragDropHelper.prototype._onMouseMove = function (target, event) {
            var 
            // use buttons property here since ev.button in some edge case is not updating well during the move.
            // but firefox doesn't support it, so we set the default value when it is not defined.
            _a = event.buttons, 
            // use buttons property here since ev.button in some edge case is not updating well during the move.
            // but firefox doesn't support it, so we set the default value when it is not defined.
            buttons = _a === void 0 ? MOUSEMOVE_PRIMARY_BUTTON$1 : _a;
            if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON$1) {
                // cancel mouse down event and return early when the primary button is not pressed
                this._onMouseUp(event);
                return;
            }
            var root = target.root, key = target.key;
            if (this._isDragging) {
                if (this._isDroppable(target)) {
                    // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into
                    // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the
                    // outer target too, and we need to prevent the outer one from taking over.
                    // So, check if the last dropTarget is not a child of the current.
                    if (this._dragData) {
                        if (this._dragData.dropTarget &&
                            this._dragData.dropTarget.key !== key &&
                            !this._isChild(root, this._dragData.dropTarget.root)) {
                            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {
                                EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');
                                EventGroup.raise(root, 'dragenter');
                                this._dragData.dropTarget = target;
                            }
                        }
                    }
                }
            }
        };
        /**
         * when mouse leave a target while dragging some items, fire dragleave to the target
         */
        DragDropHelper.prototype._onMouseLeave = function (target, event) {
            if (this._isDragging) {
                if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {
                    EventGroup.raise(target.root, 'dragleave');
                    this._dragData.dropTarget = undefined;
                }
            }
        };
        /**
         * when mouse down on a draggable item, we start to track dragdata.
         */
        DragDropHelper.prototype._onMouseDown = function (target, event) {
            if (event.button !== MOUSEDOWN_PRIMARY_BUTTON$2) {
                // Ignore anything except the primary button.
                return;
            }
            if (this._isDraggable(target)) {
                this._dragData = {
                    clientX: event.clientX,
                    clientY: event.clientY,
                    eventTarget: event.target,
                    dragTarget: target,
                };
                for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {
                    var key = _a[_i];
                    var activeTarget = this._activeTargets[key];
                    if (activeTarget.target.root) {
                        this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));
                        this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));
                    }
                }
            }
            else {
                this._dragData = null;
            }
        };
        /**
         * determine whether the child target is a descendant of the parent
         */
        DragDropHelper.prototype._isChild = function (parentElement, childElement) {
            while (childElement && childElement.parentElement) {
                if (childElement.parentElement === parentElement) {
                    return true;
                }
                childElement = childElement.parentElement;
            }
            return false;
        };
        DragDropHelper.prototype._isDraggable = function (target) {
            var options = target.options;
            return !!(options.canDrag && options.canDrag(options.context.data));
        };
        DragDropHelper.prototype._isDroppable = function (target) {
            // TODO: take the drag item into consideration to prevent dragging an item into the same group
            var options = target.options;
            var dragContext = this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;
            return !!(options.canDrop && options.canDrop(options.context, dragContext));
        };
        return DragDropHelper;
    }());

    var MOUSEDOWN_PRIMARY_BUTTON$1 = 0; // for mouse down event we are using ev.button property, 0 means left button
    var getClassNames$$ = classNamesFunction();
    var TRANSITION_DURATION_DRAG = 200; // ms
    var TRANSITION_DURATION_DROP = 1500; // ms
    var CLASSNAME_ADD_INTERVAL = 20; // ms
    var defaultOnRenderHeader = function (classNames) { return function (props) {
        if (!props) {
            return null;
        }
        if (props.column.isIconOnly) {
            return React__namespace.createElement("span", { className: classNames.accessibleLabel }, props.column.name);
        }
        return React__namespace.createElement(React__namespace.Fragment, null, props.column.name);
    }; };
    /**
     * Component for rendering columns in a `DetailsList`.
     *
     * {@docCategory DetailsList}
     */
    var DetailsColumnBase = /** @class */ (function (_super) {
        tslib.__extends(DetailsColumnBase, _super);
        function DetailsColumnBase(props) {
            var _this = _super.call(this, props) || this;
            _this._root = React__namespace.createRef();
            _this._onRenderFilterIcon = function (classNames) { return function (props) {
                var columnProps = props.columnProps, iconProps = tslib.__rest(props, ["columnProps"]);
                var IconComponent = (columnProps === null || columnProps === void 0 ? void 0 : columnProps.useFastIcons) ? FontIcon : Icon$1;
                return React__namespace.createElement(IconComponent, tslib.__assign({}, iconProps));
            }; };
            _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {
                return React__namespace.createElement("span", { className: tooltipHostProps.hostClassName }, tooltipHostProps.children);
            };
            _this._onColumnClick = function (ev) {
                var _a = _this.props, onColumnClick = _a.onColumnClick, column = _a.column;
                if (column.columnActionsMode === ColumnActionsMode.disabled) {
                    return;
                }
                if (column.onColumnClick) {
                    column.onColumnClick(ev, column);
                }
                if (onColumnClick) {
                    onColumnClick(ev, column);
                }
            };
            _this._onDragStart = function (item, itemIndex, selectedItems, event) {
                var classNames = _this._classNames;
                if (itemIndex) {
                    _this._updateHeaderDragInfo(itemIndex);
                    _this._root.current.classList.add(classNames.borderWhileDragging);
                    _this._async.setTimeout(function () {
                        if (_this._root.current) {
                            _this._root.current.classList.add(classNames.noBorderWhileDragging);
                        }
                    }, CLASSNAME_ADD_INTERVAL);
                }
            };
            _this._onDragEnd = function (item, event) {
                var classNames = _this._classNames;
                if (event) {
                    _this._updateHeaderDragInfo(-1, event);
                }
                _this._root.current.classList.remove(classNames.borderWhileDragging);
                _this._root.current.classList.remove(classNames.noBorderWhileDragging);
            };
            _this._updateHeaderDragInfo = function (itemIndex, event) {
                /* eslint-disable deprecation/deprecation */
                if (_this.props.setDraggedItemIndex) {
                    _this.props.setDraggedItemIndex(itemIndex);
                }
                /* eslint-enable deprecation/deprecation */
                if (_this.props.updateDragInfo) {
                    _this.props.updateDragInfo({ itemIndex: itemIndex }, event);
                }
            };
            _this._onColumnContextMenu = function (ev) {
                var _a = _this.props, onColumnContextMenu = _a.onColumnContextMenu, column = _a.column;
                if (column.onColumnContextMenu) {
                    column.onColumnContextMenu(column, ev);
                    ev.preventDefault();
                }
                if (onColumnContextMenu) {
                    onColumnContextMenu(column, ev);
                    ev.preventDefault();
                }
            };
            _this._onRootMouseDown = function (ev) {
                var isDraggable = _this.props.isDraggable;
                // Ignore anything except the primary button.
                if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON$1) {
                    ev.stopPropagation();
                }
            };
            initializeComponentRef(_this);
            _this._async = new Async(_this);
            _this._events = new EventGroup(_this);
            return _this;
        }
        DetailsColumnBase.prototype.render = function () {
            var _a = this.props, column = _a.column, parentId = _a.parentId, isDraggable = _a.isDraggable, styles = _a.styles, theme = _a.theme, _b = _a.cellStyleProps, cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b, _c = _a.useFastIcons, useFastIcons = _c === void 0 ? true : _c;
            var _d = this.props.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _d === void 0 ? this._onRenderColumnHeaderTooltip : _d;
            this._classNames = getClassNames$$(styles, {
                theme: theme,
                headerClassName: column.headerClassName,
                iconClassName: column.iconClassName,
                isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,
                isEmpty: !column.name,
                isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,
                isPadded: column.isPadded,
                isIconOnly: column.isIconOnly,
                cellStyleProps: cellStyleProps,
                transitionDurationDrag: TRANSITION_DURATION_DRAG,
                transitionDurationDrop: TRANSITION_DURATION_DROP,
            });
            var classNames = this._classNames;
            var IconComponent = useFastIcons ? FontIcon : Icon$1;
            var onRenderFilterIcon = column.onRenderFilterIcon
                ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))
                : this._onRenderFilterIcon(this._classNames);
            var onRenderHeader = column.onRenderHeader
                ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))
                : defaultOnRenderHeader(this._classNames);
            var hasInnerButton = column.columnActionsMode !== ColumnActionsMode.disabled &&
                (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);
            var accNameDescription = {
                'aria-label': column.ariaLabel ? column.ariaLabel : column.isIconOnly ? column.name : undefined,
                'aria-labelledby': column.ariaLabel || column.isIconOnly ? undefined : parentId + "-" + column.key + "-name",
                'aria-describedby': !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleDescription()
                    ? parentId + "-" + column.key + "-tooltip"
                    : undefined,
            };
            return (React__namespace.createElement(React__namespace.Fragment, null,
                React__namespace.createElement("div", tslib.__assign({ key: column.key, ref: this._root, role: 'columnheader' }, (!hasInnerButton && accNameDescription), { "aria-sort": column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none', "data-is-focusable": !hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined, className: classNames.root, "data-is-draggable": isDraggable, draggable: isDraggable, style: {
                        width: column.calculatedWidth +
                            cellStyleProps.cellLeftPadding +
                            cellStyleProps.cellRightPadding +
                            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),
                    }, "data-automationid": 'ColumnsHeaderColumn', "data-item-key": column.key }),
                    isDraggable && (React__namespace.createElement(IconComponent, { iconName: "GripperBarVertical", className: classNames.gripperBarVerticalStyle })),
                    onRenderColumnHeaderTooltip({
                        hostClassName: classNames.cellTooltip,
                        id: parentId + "-" + column.key + "-tooltip",
                        setAriaDescribedBy: false,
                        column: column,
                        content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',
                        children: (React__namespace.createElement("span", tslib.__assign({ id: parentId + "-" + column.key, className: classNames.cellTitle, "data-is-focusable": hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined, role: hasInnerButton ? 'button' : undefined }, (hasInnerButton && accNameDescription), { onContextMenu: this._onColumnContextMenu, onClick: this._onColumnClick, "aria-haspopup": column.columnActionsMode === ColumnActionsMode.hasDropdown ? 'menu' : undefined, "aria-expanded": column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined }),
                            React__namespace.createElement("span", { id: parentId + "-" + column.key + "-name", className: classNames.cellName },
                                (column.iconName || column.iconClassName) && (React__namespace.createElement(IconComponent, { className: classNames.iconClassName, iconName: column.iconName })),
                                onRenderHeader(this.props)),
                            column.isFiltered && React__namespace.createElement(IconComponent, { className: classNames.nearIcon, iconName: "Filter" }),
                            column.isSorted && (React__namespace.createElement(IconComponent, { className: classNames.sortIcon, iconName: column.isSortedDescending ? 'SortDown' : 'SortUp' })),
                            column.isGrouped && React__namespace.createElement(IconComponent, { className: classNames.nearIcon, iconName: "GroupedDescending" }),
                            column.columnActionsMode === ColumnActionsMode.hasDropdown &&
                                !column.isIconOnly &&
                                onRenderFilterIcon({
                                    'aria-hidden': true,
                                    columnProps: this.props,
                                    className: classNames.filterChevron,
                                    iconName: 'ChevronDown',
                                }))),
                    }, this._onRenderColumnHeaderTooltip)),
                !this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleDescription() : null));
        };
        DetailsColumnBase.prototype.componentDidMount = function () {
            var _this = this;
            if (this.props.dragDropHelper && this.props.isDraggable) {
                this._addDragDropHandling();
            }
            var classNames = this._classNames;
            if (this.props.isDropped) {
                if (this._root.current) {
                    this._root.current.classList.add(classNames.borderAfterDropping);
                    this._async.setTimeout(function () {
                        if (_this._root.current) {
                            _this._root.current.classList.add(classNames.noBorderAfterDropping);
                        }
                    }, CLASSNAME_ADD_INTERVAL);
                }
                this._async.setTimeout(function () {
                    if (_this._root.current) {
                        _this._root.current.classList.remove(classNames.borderAfterDropping);
                        _this._root.current.classList.remove(classNames.noBorderAfterDropping);
                    }
                }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);
            }
        };
        DetailsColumnBase.prototype.componentWillUnmount = function () {
            if (this._dragDropSubscription) {
                this._dragDropSubscription.dispose();
                delete this._dragDropSubscription;
            }
            this._async.dispose();
            this._events.dispose();
        };
        DetailsColumnBase.prototype.componentDidUpdate = function () {
            if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {
                this._addDragDropHandling();
            }
            if (this._dragDropSubscription && !this.props.isDraggable) {
                this._dragDropSubscription.dispose();
                this._events.off(this._root.current, 'mousedown');
                delete this._dragDropSubscription;
            }
        };
        DetailsColumnBase.prototype._getColumnDragDropOptions = function () {
            var _this = this;
            var columnIndex = this.props.columnIndex;
            var options = {
                selectionIndex: columnIndex,
                context: { data: columnIndex, index: columnIndex },
                canDrag: function () { return _this.props.isDraggable; },
                canDrop: function () { return false; },
                onDragStart: this._onDragStart,
                updateDropState: function () { return undefined; },
                onDrop: function () { return undefined; },
                onDragEnd: this._onDragEnd,
            };
            return options;
        };
        DetailsColumnBase.prototype._hasAccessibleDescription = function () {
            var column = this.props.column;
            return !!(column.filterAriaLabel ||
                column.sortAscendingAriaLabel ||
                column.sortDescendingAriaLabel ||
                column.groupAriaLabel);
        };
        DetailsColumnBase.prototype._renderAccessibleDescription = function () {
            var _a = this.props, column = _a.column, parentId = _a.parentId;
            var classNames = this._classNames;
            return this._hasAccessibleDescription() && !this.props.onRenderColumnHeaderTooltip ? (React__namespace.createElement("label", { key: column.key + "_label", id: parentId + "-" + column.key + "-tooltip", className: classNames.accessibleLabel, hidden: true },
                (column.isFiltered && column.filterAriaLabel) || null,
                (column.isSorted &&
                    (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel)) ||
                    null,
                (column.isGrouped && column.groupAriaLabel) || null)) : null;
        };
        DetailsColumnBase.prototype._addDragDropHandling = function () {
            this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getColumnDragDropOptions());
            // We need to use native on this to prevent MarqueeSelection from handling the event before us.
            this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);
        };
        return DetailsColumnBase;
    }(React__namespace.Component));

    var GlobalClassNames$a = {
        isActionable: 'is-actionable',
        cellIsCheck: 'ms-DetailsHeader-cellIsCheck',
        collapseButton: 'ms-DetailsHeader-collapseButton',
        isCollapsed: 'is-collapsed',
        isAllSelected: 'is-allSelected',
        isSelectAllHidden: 'is-selectAllHidden',
        isResizingColumn: 'is-resizingColumn',
        isEmpty: 'is-empty',
        isIconVisible: 'is-icon-visible',
        cellSizer: 'ms-DetailsHeader-cellSizer',
        isResizing: 'is-resizing',
        dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',
        dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',
        cellTitle: 'ms-DetailsHeader-cellTitle',
        cellName: 'ms-DetailsHeader-cellName',
        filterChevron: 'ms-DetailsHeader-filterChevron',
        gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',
        nearIcon: 'ms-DetailsColumn-nearIcon',
    };
    var getStyles$c = function (props) {
        var _a;
        var theme = props.theme, headerClassName = props.headerClassName, iconClassName = props.iconClassName, isActionable = props.isActionable, isEmpty = props.isEmpty, isIconVisible = props.isIconVisible, isPadded = props.isPadded, isIconOnly = props.isIconOnly, _b = props.cellStyleProps, cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b, transitionDurationDrag = props.transitionDurationDrag, transitionDurationDrop = props.transitionDurationDrop;
        var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$a, theme);
        var colors = {
            iconForegroundColor: semanticColors.bodySubtext,
            headerForegroundColor: semanticColors.bodyText,
            headerBackgroundColor: semanticColors.bodyBackground,
            dropdownChevronForegroundColor: palette.neutralSecondary,
            resizerColor: palette.neutralTertiaryAlt,
        };
        var nearIconStyle = {
            color: colors.iconForegroundColor,
            opacity: 1,
            paddingLeft: 8,
        };
        var borderWhileDragging = {
            outline: "1px solid " + palette.themePrimary,
        };
        var borderAfterDragOrDrop = {
            outlineColor: 'transparent',
        };
        return {
            root: [
                getCellStyles(props),
                fonts.small,
                isActionable && [
                    classNames.isActionable,
                    {
                        selectors: {
                            ':hover': {
                                color: semanticColors.bodyText,
                                background: semanticColors.listHeaderBackgroundHovered,
                            },
                            ':active': {
                                background: semanticColors.listHeaderBackgroundPressed,
                            },
                        },
                    },
                ],
                isEmpty && [
                    classNames.isEmpty,
                    {
                        textOverflow: 'clip',
                    },
                ],
                isIconVisible && classNames.isIconVisible,
                isPadded && {
                    paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,
                },
                {
                    selectors: {
                        ':hover i[data-icon-name="GripperBarVertical"]': {
                            display: 'block',
                        },
                    },
                },
                headerClassName,
            ],
            gripperBarVerticalStyle: {
                display: 'none',
                position: 'absolute',
                textAlign: 'left',
                color: palette.neutralTertiary,
                left: 1,
            },
            nearIcon: [classNames.nearIcon, nearIconStyle],
            sortIcon: [
                nearIconStyle,
                {
                    paddingLeft: 4,
                    position: 'relative',
                    top: 1,
                },
            ],
            iconClassName: [
                {
                    color: colors.iconForegroundColor,
                    opacity: 1,
                },
                iconClassName,
            ],
            filterChevron: [
                classNames.filterChevron,
                {
                    color: colors.dropdownChevronForegroundColor,
                    paddingLeft: 6,
                    verticalAlign: 'middle',
                    fontSize: fonts.small.fontSize,
                },
            ],
            cellTitle: [
                classNames.cellTitle,
                getFocusStyle(theme),
                tslib.__assign({ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'stretch', boxSizing: 'border-box', overflow: 'hidden', padding: "0 " + cellStyleProps.cellRightPadding + "px 0 " + cellStyleProps.cellLeftPadding + "px" }, (isIconOnly
                    ? {
                        alignContent: 'flex-end',
                        maxHeight: '100%',
                        flexWrap: 'wrap-reverse',
                    }
                    : {})),
            ],
            cellName: [
                classNames.cellName,
                {
                    flex: '0 1 auto',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    fontWeight: FontWeights.semibold,
                    fontSize: fonts.medium.fontSize,
                },
                isIconOnly && {
                    selectors: (_a = {},
                        _a["." + classNames.nearIcon] = {
                            paddingLeft: 0,
                        },
                        _a),
                },
            ],
            cellTooltip: {
                display: 'block',
                position: 'absolute',
                top: 0,
                left: 0,
                bottom: 0,
                right: 0,
            },
            accessibleLabel: hiddenContentStyle,
            borderWhileDragging: borderWhileDragging,
            noBorderWhileDragging: [borderAfterDragOrDrop, { transition: "outline " + transitionDurationDrag + "ms ease" }],
            borderAfterDropping: borderWhileDragging,
            noBorderAfterDropping: [borderAfterDragOrDrop, { transition: "outline  " + transitionDurationDrop + "ms ease" }],
        };
    };

    var DetailsColumn = styled(DetailsColumnBase, getStyles$c, undefined, { scope: 'DetailsColumn' });

    /**
     * {@docCategory DetailsList}
     */
    var SelectAllVisibility;
    (function (SelectAllVisibility) {
        SelectAllVisibility[SelectAllVisibility["none"] = 0] = "none";
        SelectAllVisibility[SelectAllVisibility["hidden"] = 1] = "hidden";
        SelectAllVisibility[SelectAllVisibility["visible"] = 2] = "visible";
    })(SelectAllVisibility || (SelectAllVisibility = {}));

    var getClassNames$_ = classNamesFunction();
    var MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button
    var MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button
    var NO_COLUMNS$1 = [];
    var DetailsHeaderBase = /** @class */ (function (_super) {
        tslib.__extends(DetailsHeaderBase, _super);
        function DetailsHeaderBase(props) {
            var _this = _super.call(this, props) || this;
            _this._rootElement = React__namespace.createRef();
            _this._rootComponent = React__namespace.createRef();
            _this._draggedColumnIndex = -1;
            _this._dropHintDetails = {};
            _this._updateDroppingState = function (newValue, event) {
                if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {
                    _this._resetDropHints();
                }
            };
            _this._onDragOver = function (item, event) {
                if (_this._draggedColumnIndex >= 0) {
                    event.stopPropagation();
                    _this._computeDropHintToBeShown(event.clientX);
                }
            };
            _this._onDrop = function (item, event) {
                // Safe to assume this is defined since we're handling a drop event
                var columnReorderProps = _this._getColumnReorderProps();
                // Target index will not get changed if draggeditem is after target item.
                if (_this._draggedColumnIndex >= 0 && event) {
                    var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex
                        ? _this._currentDropHintIndex
                        : _this._currentDropHintIndex - 1;
                    var isValidDrop = _this._isValidCurrentDropHintIndex();
                    event.stopPropagation();
                    if (isValidDrop) {
                        _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;
                        _this._onDropIndexInfo.targetIndex = targetIndex;
                        if (columnReorderProps.onColumnDrop) {
                            var dragDropDetails = {
                                draggedIndex: _this._draggedColumnIndex,
                                targetIndex: targetIndex,
                            };
                            columnReorderProps.onColumnDrop(dragDropDetails);
                            /* eslint-disable deprecation/deprecation */
                        }
                        else if (columnReorderProps.handleColumnReorder) {
                            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);
                            /* eslint-enable deprecation/deprecation */
                        }
                    }
                }
                _this._resetDropHints();
                _this._dropHintDetails = {};
                _this._draggedColumnIndex = -1;
            };
            _this._updateDragInfo = function (props, event) {
                // Safe to assume this is defined since we're handling a drag event
                var columnReorderProps = _this._getColumnReorderProps();
                var itemIndex = props.itemIndex;
                if (itemIndex >= 0) {
                    // Column index is set based on the checkbox
                    _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;
                    _this._getDropHintPositions();
                    if (columnReorderProps.onColumnDragStart) {
                        columnReorderProps.onColumnDragStart(true);
                    }
                }
                else if (event && _this._draggedColumnIndex >= 0) {
                    _this._resetDropHints();
                    _this._draggedColumnIndex = -1;
                    _this._dropHintDetails = {};
                    if (columnReorderProps.onColumnDragEnd) {
                        var columnDragEndLocation = _this._isEventOnHeader(event);
                        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);
                    }
                }
            };
            _this._getDropHintPositions = function () {
                var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS$1 : _a;
                // Safe to assume this is defined since we're handling a drag/drop event
                var columnReorderProps = _this._getColumnReorderProps();
                var prevX = 0;
                var prevMid = 0;
                var prevRef;
                var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;
                var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;
                for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {
                    if (_this._rootElement.current) {
                        var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];
                        if (dropHintElement) {
                            if (i === frozenColumnCountFromStart) {
                                prevX = dropHintElement.offsetLeft;
                                prevMid = dropHintElement.offsetLeft;
                                prevRef = dropHintElement;
                            }
                            else {
                                var newMid = (dropHintElement.offsetLeft + prevX) / 2;
                                _this._dropHintDetails[i - 1] = {
                                    originX: prevX,
                                    startX: prevMid,
                                    endX: newMid,
                                    dropHintElementRef: prevRef,
                                };
                                prevMid = newMid;
                                prevRef = dropHintElement;
                                prevX = dropHintElement.offsetLeft;
                                if (i === columns.length - frozenColumnCountFromEnd) {
                                    _this._dropHintDetails[i] = {
                                        originX: prevX,
                                        startX: prevMid,
                                        endX: dropHintElement.offsetLeft,
                                        dropHintElementRef: prevRef,
                                    };
                                }
                            }
                        }
                    }
                }
            };
            /**
             * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible
             */
            _this._computeDropHintToBeShown = function (clientX) {
                var isRtl = getRTL(_this.props.theme);
                if (_this._rootElement.current) {
                    var clientRect = _this._rootElement.current.getBoundingClientRect();
                    var headerOriginX = clientRect.left;
                    var eventXRelativePosition = clientX - headerOriginX;
                    var currentDropHintIndex = _this._currentDropHintIndex;
                    if (_this._isValidCurrentDropHintIndex()) {
                        if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {
                            return;
                        }
                    }
                    var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS$1 : _a;
                    // Safe to assume this is defined since we're handling a drag/drop event
                    var columnReorderProps = _this._getColumnReorderProps();
                    var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;
                    var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;
                    var currentIndex = frozenColumnCountFromStart;
                    var lastValidColumn = columns.length - frozenColumnCountFromEnd;
                    var indexToUpdate = -1;
                    if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {
                        indexToUpdate = currentIndex;
                    }
                    else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {
                        indexToUpdate = lastValidColumn;
                    }
                    else if (_this._isValidCurrentDropHintIndex()) {
                        if (_this._dropHintDetails[currentDropHintIndex + 1] &&
                            _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {
                            indexToUpdate = currentDropHintIndex + 1;
                        }
                        else if (_this._dropHintDetails[currentDropHintIndex - 1] &&
                            _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {
                            indexToUpdate = currentDropHintIndex - 1;
                        }
                    }
                    if (indexToUpdate === -1) {
                        var startIndex = frozenColumnCountFromStart;
                        var endIndex = lastValidColumn;
                        while (startIndex < endIndex) {
                            var middleIndex = Math.ceil((endIndex + startIndex) / 2);
                            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {
                                indexToUpdate = middleIndex;
                                break;
                            }
                            else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {
                                endIndex = middleIndex;
                            }
                            else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {
                                startIndex = middleIndex;
                            }
                        }
                    }
                    if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {
                        if (_this._isValidCurrentDropHintIndex()) {
                            _this._resetDropHints();
                        }
                    }
                    else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {
                        _this._resetDropHints();
                        _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');
                        _this._currentDropHintIndex = indexToUpdate;
                    }
                }
            };
            _this._renderColumnSizer = function (_a) {
                var _b;
                var columnIndex = _a.columnIndex;
                var _c = _this.props.columns, columns = _c === void 0 ? NO_COLUMNS$1 : _c;
                var column = columns[columnIndex];
                var columnResizeDetails = _this.state.columnResizeDetails;
                var classNames = _this._classNames;
                return column.isResizable ? (React__namespace.createElement("div", { key: column.key + "_sizer", "aria-hidden": true, role: "button", "data-is-focusable": false, onClick: _stopPropagation, "data-sizer-index": columnIndex, onBlur: _this._onSizerBlur, className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {},
                        _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,
                        _b)), onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex) })) : null;
            };
            _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {
                return React__namespace.createElement("span", { className: tooltipHostProps.hostClassName }, tooltipHostProps.children);
            };
            /**
             * Called when the select all toggle is clicked.
             */
            _this._onSelectAllClicked = function () {
                var selection = _this.props.selection;
                if (selection) {
                    selection.toggleAllSelected();
                }
            };
            _this._onRootMouseDown = function (ev) {
                var columnIndexAttr = ev.target.getAttribute('data-sizer-index');
                var columnIndex = Number(columnIndexAttr);
                var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS$1 : _a;
                if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {
                    // Ignore anything except the primary button.
                    return;
                }
                _this.setState({
                    columnResizeDetails: {
                        columnIndex: columnIndex,
                        columnMinWidth: columns[columnIndex].calculatedWidth,
                        originX: ev.clientX,
                    },
                });
                ev.preventDefault();
                ev.stopPropagation();
            };
            _this._onRootMouseMove = function (ev) {
                var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;
                if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {
                    _this.setState({ isSizing: true });
                }
            };
            _this._onRootKeyDown = function (ev) {
                var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;
                var _b = _this.props, _c = _b.columns, columns = _c === void 0 ? NO_COLUMNS$1 : _c, onColumnResized = _b.onColumnResized;
                var columnIndexAttr = ev.target.getAttribute('data-sizer-index');
                if (!columnIndexAttr || isSizing) {
                    return;
                }
                var columnIndex = Number(columnIndexAttr);
                if (!columnResizeDetails) {
                    // eslint-disable-next-line deprecation/deprecation
                    if (ev.which === KeyCodes.enter) {
                        _this.setState({
                            columnResizeDetails: {
                                columnIndex: columnIndex,
                                columnMinWidth: columns[columnIndex].calculatedWidth,
                            },
                        });
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                }
                else {
                    var increment = void 0;
                    // eslint-disable-next-line deprecation/deprecation
                    if (ev.which === KeyCodes.enter) {
                        _this.setState({
                            columnResizeDetails: undefined,
                        });
                        ev.preventDefault();
                        ev.stopPropagation();
                        // eslint-disable-next-line deprecation/deprecation
                    }
                    else if (ev.which === KeyCodes.left) {
                        increment = getRTL(_this.props.theme) ? 1 : -1;
                        // eslint-disable-next-line deprecation/deprecation
                    }
                    else if (ev.which === KeyCodes.right) {
                        increment = getRTL(_this.props.theme) ? -1 : 1;
                    }
                    if (increment) {
                        if (!ev.shiftKey) {
                            increment *= 10;
                        }
                        _this.setState({
                            columnResizeDetails: tslib.__assign(tslib.__assign({}, columnResizeDetails), { columnMinWidth: columnResizeDetails.columnMinWidth + increment }),
                        });
                        if (onColumnResized) {
                            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);
                        }
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                }
            };
            /**
             * mouse move event handler in the header
             * it will set isSizing state to true when user clicked on the sizer and move the mouse.
             *
             * @param ev - mouse move event
             */
            _this._onSizerMouseMove = function (ev) {
                var 
                // use buttons property here since ev.button in some edge case is not upding well during the move.
                // but firefox doesn't support it, so we set the default value when it is not defined.
                buttons = ev.buttons;
                var _a = _this.props, onColumnIsSizingChanged = _a.onColumnIsSizingChanged, onColumnResized = _a.onColumnResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS$1 : _b;
                var columnResizeDetails = _this.state.columnResizeDetails;
                if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {
                    // cancel mouse down event and return early when the primary button is not pressed
                    _this._onSizerMouseUp(ev);
                    return;
                }
                if (ev.clientX !== columnResizeDetails.originX) {
                    if (onColumnIsSizingChanged) {
                        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);
                    }
                }
                if (onColumnResized) {
                    var movement = ev.clientX - columnResizeDetails.originX;
                    if (getRTL(_this.props.theme)) {
                        movement = -movement;
                    }
                    onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);
                }
            };
            _this._onSizerBlur = function (ev) {
                var columnResizeDetails = _this.state.columnResizeDetails;
                if (columnResizeDetails) {
                    _this.setState({
                        columnResizeDetails: undefined,
                        isSizing: false,
                    });
                }
            };
            /**
             * mouse up event handler in the header
             * clear the resize related state.
             * This is to ensure we can catch double click event
             *
             * @param ev - mouse up event
             */
            _this._onSizerMouseUp = function (ev) {
                var _a = _this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS$1 : _b, onColumnIsSizingChanged = _a.onColumnIsSizingChanged;
                var columnResizeDetails = _this.state.columnResizeDetails;
                _this.setState({
                    columnResizeDetails: undefined,
                    isSizing: false,
                });
                if (onColumnIsSizingChanged) {
                    onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);
                }
            };
            _this._onToggleCollapseAll = function () {
                var onToggleCollapseAll = _this.props.onToggleCollapseAll;
                var newCollapsed = !_this.state.isAllCollapsed;
                _this.setState({
                    isAllCollapsed: newCollapsed,
                });
                if (onToggleCollapseAll) {
                    onToggleCollapseAll(newCollapsed);
                }
            };
            initializeComponentRef(_this);
            _this._events = new EventGroup(_this);
            _this.state = {
                columnResizeDetails: undefined,
                isAllCollapsed: _this.props.isAllCollapsed,
                isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected(),
            };
            _this._onDropIndexInfo = {
                sourceIndex: -1,
                targetIndex: -1,
            };
            _this._id = getId('header');
            _this._currentDropHintIndex = -1;
            // The drag drop handler won't do any work until subscribe() is called,
            // so always set it up for convenience
            _this._dragDropHelper = new DragDropHelper({
                selection: {
                    getSelection: function () {
                        return;
                    },
                },
                minimumPixelsForDrag: _this.props.minimumPixelsForDrag,
            });
            return _this;
        }
        DetailsHeaderBase.prototype.componentDidMount = function () {
            var selection = this.props.selection;
            this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);
            // this._rootElement.current will be null in tests using react-test-renderer
            if (this._rootElement.current) {
                // We need to use native on this to prevent MarqueeSelection from handling the event before us.
                this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);
                this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);
                if (this._getColumnReorderProps()) {
                    this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());
                }
            }
        };
        DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {
            if (this._getColumnReorderProps()) {
                if (!this._subscriptionObject && this._rootElement.current) {
                    this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());
                }
            }
            else if (this._subscriptionObject) {
                this._subscriptionObject.dispose();
                delete this._subscriptionObject;
            }
            if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {
                var _a = prevProps.columns, previousColumns = _a === void 0 ? NO_COLUMNS$1 : _a;
                var _b = this.props.columns, columns = _b === void 0 ? NO_COLUMNS$1 : _b;
                if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {
                    this._onDropIndexInfo = {
                        sourceIndex: -1,
                        targetIndex: -1,
                    };
                }
            }
            if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {
                this.setState({ isAllCollapsed: this.props.isAllCollapsed });
            }
        };
        DetailsHeaderBase.prototype.componentWillUnmount = function () {
            if (this._subscriptionObject) {
                this._subscriptionObject.dispose();
                delete this._subscriptionObject;
            }
            this._dragDropHelper.dispose();
            this._events.dispose();
        };
        DetailsHeaderBase.prototype.render = function () {
            var _this = this;
            var _a = this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS$1 : _b, ariaLabel = _a.ariaLabel, ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton, ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox, selectAllVisibility = _a.selectAllVisibility, ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn, indentWidth = _a.indentWidth, onColumnClick = _a.onColumnClick, onColumnContextMenu = _a.onColumnContextMenu, _c = _a.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c, styles = _a.styles, selectionMode = _a.selectionMode, theme = _a.theme, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, groupNestingDepth = _a.groupNestingDepth, useFastIcons = _a.useFastIcons, checkboxVisibility = _a.checkboxVisibility, className = _a.className;
            var _d = this.state, isAllSelected = _d.isAllSelected, columnResizeDetails = _d.columnResizeDetails, isSizing = _d.isSizing, isAllCollapsed = _d.isAllCollapsed;
            var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;
            var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;
            var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;
            var columnReorderProps = this._getColumnReorderProps();
            var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart
                ? columnReorderProps.frozenColumnCountFromStart
                : 0;
            var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd
                ? columnReorderProps.frozenColumnCountFromEnd
                : 0;
            this._classNames = getClassNames$_(styles, {
                theme: theme,
                isAllSelected: isAllSelected,
                isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,
                isResizingColumn: !!columnResizeDetails && isSizing,
                isSizing: isSizing,
                isAllCollapsed: isAllCollapsed,
                isCheckboxHidden: isCheckboxHidden,
                className: className,
            });
            var classNames = this._classNames;
            var IconComponent = useFastIcons ? FontIcon : Icon$1;
            var showGroupExpander = groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;
            var columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);
            var isRTL = getRTL(theme);
            return (React__namespace.createElement(FocusZone, { role: "row", "aria-label": ariaLabel, className: classNames.root, componentRef: this._rootComponent, elementRef: this._rootElement, onMouseMove: this._onRootMouseMove, "data-automationid": "DetailsHeader", direction: FocusZoneDirection.horizontal },
                showCheckbox
                    ? [
                        React__namespace.createElement("div", { key: "__checkbox", className: classNames.cellIsCheck, "aria-labelledby": this._id + "-checkTooltip", onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined, role: 'columnheader' }, onRenderColumnHeaderTooltip({
                            hostClassName: classNames.checkTooltip,
                            id: this._id + "-checkTooltip",
                            setAriaDescribedBy: false,
                            content: ariaLabelForSelectAllCheckbox,
                            children: (React__namespace.createElement(DetailsRowCheck, { id: this._id + "-check", "aria-label": selectionMode === SelectionMode.multiple
                                    ? ariaLabelForSelectAllCheckbox
                                    : ariaLabelForSelectionColumn, "data-is-focusable": !isCheckboxHidden || undefined, isHeader: true, selected: isAllSelected, anySelected: false, canSelect: !isCheckboxHidden, className: classNames.check, onRenderDetailsCheckbox: onRenderDetailsCheckbox, useFastIcons: useFastIcons, isVisible: isCheckboxAlwaysVisible })),
                        }, this._onRenderColumnHeaderTooltip)),
                        !this.props.onRenderColumnHeaderTooltip ? (ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (React__namespace.createElement("label", { key: "__checkboxLabel", id: this._id + "-checkTooltip", className: classNames.accessibleLabel, "aria-hidden": true }, ariaLabelForSelectAllCheckbox)) : ariaLabelForSelectionColumn && isCheckboxHidden ? (React__namespace.createElement("label", { key: "__checkboxLabel", id: this._id + "-checkTooltip", className: classNames.accessibleLabel, "aria-hidden": true }, ariaLabelForSelectionColumn)) : null) : null,
                    ]
                    : null,
                showGroupExpander ? (React__namespace.createElement("div", { className: classNames.cellIsGroupExpander, onClick: this._onToggleCollapseAll, "data-is-focusable": true, "aria-label": ariaLabelForToggleAllGroupsButton, "aria-expanded": !isAllCollapsed, role: "columnheader" },
                    React__namespace.createElement(IconComponent, { className: classNames.collapseButton, iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed' }),
                    React__namespace.createElement("span", { className: classNames.accessibleLabel }, ariaLabelForToggleAllGroupsButton))) : null,
                React__namespace.createElement(GroupSpacer, { indentWidth: indentWidth, role: "gridcell", count: groupNestingDepth - 1 }),
                columns.map(function (column, columnIndex) {
                    var _isDraggable = columnReorderProps
                        ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd
                        : false;
                    return [
                        columnReorderProps &&
                            (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&
                            _this._renderDropHint(columnIndex),
                        React__namespace.createElement(DetailsColumn, { column: column, styles: column.styles, key: column.key, columnIndex: columnIndexOffset + columnIndex, parentId: _this._id, isDraggable: _isDraggable, updateDragInfo: _this._updateDragInfo, dragDropHelper: _this._dragDropHelper, onColumnClick: onColumnClick, onColumnContextMenu: onColumnContextMenu, 
                            // Do not render tooltips by default, but allow for override via props.
                            onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip, isDropped: _this._onDropIndexInfo.targetIndex === columnIndex, cellStyleProps: _this.props.cellStyleProps, useFastIcons: useFastIcons }),
                        _this._renderColumnDivider(columnIndex),
                    ];
                }),
                columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length),
                isSizing && (React__namespace.createElement(Layer, null,
                    React__namespace.createElement("div", { className: classNames.sizingOverlay, onMouseMove: this._onSizerMouseMove, onMouseUp: this._onSizerMouseUp })))));
        };
        /** Set focus to the active thing in the focus area. */
        DetailsHeaderBase.prototype.focus = function () {
            var _a;
            return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());
        };
        /**
         * Gets column reorder props from this.props. If the calling code is part of setting up or
         * handling drag/drop events, it's safe to assume that this method's return value is defined
         * (because drag/drop handling will only be set up if reorder props are given).
         */
        DetailsHeaderBase.prototype._getColumnReorderProps = function () {
            var _a = this.props, columnReorderOptions = _a.columnReorderOptions, columnReorderProps = _a.columnReorderProps;
            return columnReorderProps || (columnReorderOptions && tslib.__assign(tslib.__assign({}, columnReorderOptions), { onColumnDragEnd: undefined }));
        };
        DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {
            var options = {
                selectionIndex: 1,
                context: { data: this, index: 0 },
                canDrag: function () { return false; },
                canDrop: function () { return true; },
                onDragStart: function () { return undefined; },
                updateDropState: this._updateDroppingState,
                onDrop: this._onDrop,
                onDragEnd: function () { return undefined; },
                onDragOver: this._onDragOver,
            };
            return options;
        };
        DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {
            return this._currentDropHintIndex >= 0;
        };
        /**
         * @returns whether or not the "Select All" checkbox column is hidden.
         */
        DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {
            var _a = this.props, selectionMode = _a.selectionMode, checkboxVisibility = _a.checkboxVisibility;
            return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;
        };
        DetailsHeaderBase.prototype._resetDropHints = function () {
            if (this._currentDropHintIndex >= 0) {
                this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');
                this._currentDropHintIndex = -1;
            }
        };
        DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {
            element.childNodes[1].style.display = displayProperty;
            element.childNodes[0].style.display = displayProperty;
        };
        DetailsHeaderBase.prototype._isEventOnHeader = function (event) {
            if (this._rootElement.current) {
                var clientRect = this._rootElement.current.getBoundingClientRect();
                if (event.clientX > clientRect.left &&
                    event.clientX < clientRect.right &&
                    event.clientY > clientRect.top &&
                    event.clientY < clientRect.bottom) {
                    return ColumnDragEndLocation.header;
                }
            }
        };
        DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {
            var _a = this.props.columns, columns = _a === void 0 ? NO_COLUMNS$1 : _a;
            var column = columns[columnIndex];
            var onRenderDivider = column.onRenderDivider;
            return onRenderDivider
                ? onRenderDivider({ column: column, columnIndex: columnIndex }, this._renderColumnSizer)
                : this._renderColumnSizer({ column: column, columnIndex: columnIndex });
        };
        DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {
            var classNames = this._classNames;
            var IconComponent = this.props.useFastIcons ? FontIcon : Icon$1;
            return (React__namespace.createElement("div", { key: 'dropHintKey', className: classNames.dropHintStyle, id: "columnDropHint_" + dropHintIndex },
                React__namespace.createElement("div", { role: "presentation", key: "dropHintCircleKey", className: classNames.dropHintCaretStyle, "data-is-focusable": false, "data-sizer-index": dropHintIndex, "aria-hidden": true },
                    React__namespace.createElement(IconComponent, { iconName: 'CircleShapeSolid' })),
                React__namespace.createElement("div", { key: "dropHintLineKey", "aria-hidden": true, "data-is-focusable": false, "data-sizer-index": dropHintIndex, className: classNames.dropHintLineStyle })));
        };
        /**
         * double click on the column sizer will auto ajust column width
         * to fit the longest content among current rendered rows.
         *
         * @param columnIndex - index of the column user double clicked
         * @param ev - mouse double click event
         */
        DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {
            var _a = this.props, onColumnAutoResized = _a.onColumnAutoResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS$1 : _b;
            if (onColumnAutoResized) {
                onColumnAutoResized(columns[columnIndex], columnIndex);
            }
        };
        DetailsHeaderBase.prototype._onSelectionChanged = function () {
            var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();
            if (this.state.isAllSelected !== isAllSelected) {
                this.setState({
                    isAllSelected: isAllSelected,
                });
            }
        };
        DetailsHeaderBase.defaultProps = {
            selectAllVisibility: SelectAllVisibility.visible,
            collapseAllVisibility: CollapseAllVisibility.visible,
            useFastIcons: true,
        };
        return DetailsHeaderBase;
    }(React__namespace.Component));
    function _liesBetween(rtl, target, left, right) {
        return rtl ? target <= left && target >= right : target >= left && target <= right;
    }
    function _isBefore(rtl, a, b) {
        return rtl ? a >= b : a <= b;
    }
    function _isAfter(rtl, a, b) {
        return rtl ? a <= b : a >= b;
    }
    function _stopPropagation(ev) {
        ev.stopPropagation();
    }

    var DetailsHeader = styled(DetailsHeaderBase, getStyles$i, undefined, { scope: 'DetailsHeader' });

    var getCellText = function (item, column) {
        var value = item && column && column.fieldName ? item[column.fieldName] : '';
        if (value === null || value === undefined) {
            value = '';
        }
        if (typeof value === 'boolean') {
            return value.toString();
        }
        return value;
    };
    /**
     * Component for rendering a row's cells in a `DetailsList`.
     *
     * {@docCategory DetailsList}
     */
    var DetailsRowFields = function (props) {
        var columns = props.columns, rowClassNames = props.rowClassNames, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a, item = props.item, itemIndex = props.itemIndex, onRenderItemColumn = props.onRenderItemColumn, getCellValueKey = props.getCellValueKey, cellsByColumn = props.cellsByColumn, enableUpdateAnimations = props.enableUpdateAnimations, rowHeaderId = props.rowHeaderId;
        var cellValueKeysRef = React__namespace.useRef();
        var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});
        return (React__namespace.createElement("div", { className: rowClassNames.fields, "data-automationid": "DetailsRowFields", role: "presentation" }, columns.map(function (column) {
            var width = typeof column.calculatedWidth === 'undefined'
                ? 'auto'
                : column.calculatedWidth +
                    cellStyleProps.cellLeftPadding +
                    cellStyleProps.cellRightPadding +
                    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);
            var _a = column.onRender, onRender = _a === void 0 ? onRenderItemColumn : _a, _b = column.getValueKey, getValueKey = _b === void 0 ? getCellValueKey : _b;
            var cellContentsRender = cellsByColumn && column.key in cellsByColumn
                ? cellsByColumn[column.key]
                : onRender
                    ? onRender(item, itemIndex, column)
                    : getCellText(item, column);
            var previousValueKey = cellValueKeys[column.key];
            var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;
            var showAnimation = false;
            if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {
                showAnimation = true;
            }
            cellValueKeys[column.key] = cellValueKey;
            // generate a key that auto-dirties when content changes, to force the container to re-render,
            // to trigger animation
            var key = "" + column.key + (cellValueKey !== undefined ? "-" + cellValueKey : '');
            return (React__namespace.createElement("div", { key: key, id: column.isRowHeader ? rowHeaderId : undefined, role: column.isRowHeader ? 'rowheader' : 'gridcell', "aria-readonly": true, className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, showAnimation && rowClassNames.cellAnimation), style: { width: width }, "data-automationid": "DetailsRowCell", "data-automation-key": column.key }, cellContentsRender));
        })));
    };

    var getClassNames$Z = classNamesFunction();
    var DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';
    var NO_COLUMNS = [];
    var DetailsRowBase = /** @class */ (function (_super) {
        tslib.__extends(DetailsRowBase, _super);
        function DetailsRowBase(props) {
            var _this = _super.call(this, props) || this;
            _this._root = React__namespace.createRef();
            _this._cellMeasurer = React__namespace.createRef();
            _this._focusZone = React__namespace.createRef();
            _this._onSelectionChanged = function () {
                var selectionState = getSelectionState(_this.props);
                if (!shallowCompare(selectionState, _this.state.selectionState)) {
                    _this.setState({
                        selectionState: selectionState,
                    });
                }
            };
            /**
             * update isDropping state based on the input value, which is used to change style during drag and drop
             *
             * when change to true, that means drag enter. we will add default dropping class name
             * or the custom dropping class name (return result from onDragEnter) to the root elemet.
             *
             * when change to false, that means drag leave. we will remove the dropping class name from root element.
             *
             * @param newValue - New isDropping state value
             * @param event - The event trigger dropping state change which can be dragenter, dragleave etc
             */
            _this._updateDroppingState = function (newValue, event) {
                var isDropping = _this.state.isDropping;
                var _a = _this.props, dragDropEvents = _a.dragDropEvents, item = _a.item;
                if (!newValue) {
                    if (dragDropEvents.onDragLeave) {
                        dragDropEvents.onDragLeave(item, event);
                    }
                }
                else if (dragDropEvents.onDragEnter) {
                    _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);
                }
                if (isDropping !== newValue) {
                    _this.setState({ isDropping: newValue });
                }
            };
            initializeComponentRef(_this);
            _this._events = new EventGroup(_this);
            _this.state = {
                selectionState: getSelectionState(props),
                columnMeasureInfo: undefined,
                isDropping: false,
            };
            _this._droppingClassNames = '';
            return _this;
        }
        DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {
            return tslib.__assign(tslib.__assign({}, previousState), { selectionState: getSelectionState(nextProps) });
        };
        DetailsRowBase.prototype.componentDidMount = function () {
            var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection, item = _a.item, onDidMount = _a.onDidMount;
            if (dragDropHelper && this._root.current) {
                this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());
            }
            if (selection) {
                this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);
            }
            if (onDidMount && item) {
                // If the item appears later, we should wait for it before calling this method.
                this._onDidMountCalled = true;
                onDidMount(this);
            }
        };
        DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {
            var state = this.state;
            var _a = this.props, item = _a.item, onDidMount = _a.onDidMount;
            var columnMeasureInfo = state.columnMeasureInfo;
            if (this.props.itemIndex !== previousProps.itemIndex ||
                this.props.item !== previousProps.item ||
                this.props.dragDropHelper !== previousProps.dragDropHelper) {
                if (this._dragDropSubscription) {
                    this._dragDropSubscription.dispose();
                    delete this._dragDropSubscription;
                }
                if (this.props.dragDropHelper && this._root.current) {
                    this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());
                }
            }
            if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {
                var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;
                columnMeasureInfo.onMeasureDone(newWidth);
                this.setState({
                    columnMeasureInfo: undefined,
                });
            }
            if (item && onDidMount && !this._onDidMountCalled) {
                this._onDidMountCalled = true;
                onDidMount(this);
            }
        };
        DetailsRowBase.prototype.componentWillUnmount = function () {
            var _a = this.props, item = _a.item, onWillUnmount = _a.onWillUnmount;
            // Only call the onWillUnmount callback if we have an item.
            if (onWillUnmount && item) {
                onWillUnmount(this);
            }
            if (this._dragDropSubscription) {
                this._dragDropSubscription.dispose();
                delete this._dragDropSubscription;
            }
            this._events.dispose();
        };
        DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            if (this.props.useReducedRowRenderer) {
                var newSelectionState = getSelectionState(nextProps);
                if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {
                    return true;
                }
                return !shallowCompare(this.props, nextProps);
            }
            else {
                return true;
            }
        };
        DetailsRowBase.prototype.render = function () {
            var _a = this.props, className = _a.className, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, dragDropEvents = _a.dragDropEvents, item = _a.item, itemIndex = _a.itemIndex, id = _a.id, _c = _a.flatIndexOffset, flatIndexOffset = _c === void 0 ? 2 : _c, _d = _a.onRenderCheck, onRenderCheck = _d === void 0 ? this._onRenderCheck : _d, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, onRenderItemColumn = _a.onRenderItemColumn, getCellValueKey = _a.getCellValueKey, selectionMode = _a.selectionMode, _e = _a.rowWidth, rowWidth = _e === void 0 ? 0 : _e, checkboxVisibility = _a.checkboxVisibility, getRowAriaLabel = _a.getRowAriaLabel, getRowAriaDescription = _a.getRowAriaDescription, getRowAriaDescribedBy = _a.getRowAriaDescribedBy, checkButtonAriaLabel = _a.checkButtonAriaLabel, checkboxCellClassName = _a.checkboxCellClassName, 
            /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */
            _f = _a.rowFieldsAs, 
            /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */
            RowFields = _f === void 0 ? DetailsRowFields : _f, selection = _a.selection, indentWidth = _a.indentWidth, enableUpdateAnimations = _a.enableUpdateAnimations, compact = _a.compact, theme = _a.theme, styles = _a.styles, cellsByColumn = _a.cellsByColumn, groupNestingDepth = _a.groupNestingDepth, _g = _a.useFastIcons, useFastIcons = _g === void 0 ? true : _g, cellStyleProps = _a.cellStyleProps, group = _a.group, focusZoneProps = _a.focusZoneProps, _h = _a.disabled, disabled = _h === void 0 ? false : _h;
            var _j = this.state, columnMeasureInfo = _j.columnMeasureInfo, isDropping = _j.isDropping;
            var _k = this.state.selectionState, _l = _k.isSelected, isSelected = _l === void 0 ? false : _l, _m = _k.isSelectionModal, isSelectionModal = _m === void 0 ? false : _m;
            var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;
            var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';
            var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;
            var ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;
            var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;
            var canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;
            var isContentUnselectable = selectionMode === SelectionMode.multiple;
            var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;
            var ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;
            var ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;
            var ariaSetSize = group ? group.count : undefined;
            var focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;
            this._classNames = tslib.__assign(tslib.__assign({}, this._classNames), getClassNames$Z(styles, {
                theme: theme,
                isSelected: isSelected,
                canSelect: !isContentUnselectable,
                anySelected: isSelectionModal,
                checkboxCellClassName: checkboxCellClassName,
                droppingClassName: droppingClassName,
                className: className,
                compact: compact,
                enableUpdateAnimations: enableUpdateAnimations,
                cellStyleProps: cellStyleProps,
                disabled: disabled,
            }));
            var rowClassNames = {
                isMultiline: this._classNames.isMultiline,
                isRowHeader: this._classNames.isRowHeader,
                cell: this._classNames.cell,
                cellAnimation: this._classNames.cellAnimation,
                cellPadded: this._classNames.cellPadded,
                cellUnpadded: this._classNames.cellUnpadded,
                fields: this._classNames.fields,
            };
            // Only re-assign rowClassNames when classNames have changed.
            // Otherwise, they will cause DetailsRowFields to unnecessarily
            // re-render, see https://github.com/microsoft/fluentui/pull/8799.
            // Refactor DetailsRowFields to generate own styles to remove need for this.
            if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {
                this._rowClassNames = rowClassNames;
            }
            var rowFields = (React__namespace.createElement(RowFields, { rowClassNames: this._rowClassNames, rowHeaderId: id + "-header", cellsByColumn: cellsByColumn, columns: columns, item: item, itemIndex: itemIndex, columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0), onRenderItemColumn: onRenderItemColumn, getCellValueKey: getCellValueKey, enableUpdateAnimations: enableUpdateAnimations, cellStyleProps: cellStyleProps }));
            var defaultRole = 'row';
            var role = this.props.role ? this.props.role : defaultRole;
            this._ariaRowDescriptionId = getId('DetailsRow-description');
            // When the user does not specify any column is a row-header in the columns props,
            // The aria-labelledby of the checkbox does not specify {id}-header.
            var hasRowHeader = columns.some(function (column) {
                return !!column.isRowHeader;
            });
            var ariaLabelledby = id + "-checkbox" + (hasRowHeader ? " " + id + "-header" : '');
            return (React__namespace.createElement(FocusZone, tslib.__assign({ "data-is-focusable": true }, getNativeProps(this.props, divProperties), (typeof isDraggable === 'boolean'
                ? {
                    'data-is-draggable': isDraggable,
                    draggable: isDraggable,
                }
                : {}), focusZoneProps, { direction: focusZoneDirection, elementRef: this._root, componentRef: this._focusZone, role: role, "aria-label": ariaLabel, "aria-disabled": disabled || undefined, "aria-describedby": ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy, className: this._classNames.root, "data-selection-index": itemIndex, "data-selection-touch-invoke": true, "data-selection-disabled": disabled || undefined, "data-item-index": itemIndex, "aria-rowindex": ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined, "aria-level": (groupNestingDepth && groupNestingDepth + 1) || undefined, "aria-posinset": ariaPositionInSet, "aria-setsize": ariaSetSize, "data-automationid": "DetailsRow", style: { minWidth: rowWidth }, "aria-selected": ariaSelected, allowFocusRoot: true }),
                ariaRowDescription ? (React__namespace.createElement("span", { key: "description", role: "presentation", hidden: true, id: this._ariaRowDescriptionId }, ariaRowDescription)) : null,
                showCheckbox && (React__namespace.createElement("div", { role: "gridcell", "data-selection-toggle": true, className: this._classNames.checkCell }, onRenderCheck({
                    id: id ? id + "-checkbox" : undefined,
                    selected: isSelected,
                    selectionMode: selectionMode,
                    anySelected: isSelectionModal,
                    'aria-label': checkButtonAriaLabel,
                    'aria-labelledby': id ? ariaLabelledby : undefined,
                    canSelect: canSelect,
                    compact: compact,
                    className: this._classNames.check,
                    theme: theme,
                    isVisible: checkboxVisibility === CheckboxVisibility.always,
                    onRenderDetailsCheckbox: onRenderDetailsCheckbox,
                    useFastIcons: useFastIcons,
                }))),
                React__namespace.createElement(GroupSpacer, { indentWidth: indentWidth, role: "gridcell", count: groupNestingDepth - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0) }),
                item && rowFields,
                columnMeasureInfo && (React__namespace.createElement("span", { role: "presentation", className: css(this._classNames.cellMeasurer, this._classNames.cell), ref: this._cellMeasurer },
                    React__namespace.createElement(RowFields, { rowClassNames: this._rowClassNames, rowHeaderId: id + "-header", columns: [columnMeasureInfo.column], item: item, itemIndex: itemIndex, columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length, onRenderItemColumn: onRenderItemColumn, getCellValueKey: getCellValueKey }))),
                React__namespace.createElement("span", { role: "checkbox", className: this._classNames.checkCover, "aria-checked": isSelected, "data-selection-toggle": true })));
        };
        /**
         * measure cell at index. and call the call back with the measured cell width when finish measure
         *
         * @param index - The cell index
         * @param onMeasureDone - The call back function when finish measure
         */
        DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {
            var _a = this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
            var column = tslib.__assign({}, columns[index]);
            column.minWidth = 0;
            column.maxWidth = 999999;
            delete column.calculatedWidth;
            this.setState({
                columnMeasureInfo: {
                    index: index,
                    column: column,
                    onMeasureDone: onMeasureDone,
                },
            });
        };
        DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {
            var _a;
            if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }
            return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));
        };
        DetailsRowBase.prototype._onRenderCheck = function (props) {
            return React__namespace.createElement(DetailsRowCheck, tslib.__assign({}, props));
        };
        DetailsRowBase.prototype._getRowDragDropOptions = function () {
            var _a = this.props, item = _a.item, itemIndex = _a.itemIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;
            var options = {
                eventMap: eventsToRegister,
                selectionIndex: itemIndex,
                context: { data: item, index: itemIndex },
                canDrag: dragDropEvents.canDrag,
                canDrop: dragDropEvents.canDrop,
                onDragStart: dragDropEvents.onDragStart,
                updateDropState: this._updateDroppingState,
                onDrop: dragDropEvents.onDrop,
                onDragEnd: dragDropEvents.onDragEnd,
                onDragOver: dragDropEvents.onDragOver,
            };
            return options;
        };
        return DetailsRowBase;
    }(React__namespace.Component));
    function getSelectionState(props) {
        var _a;
        var itemIndex = props.itemIndex, selection = props.selection;
        return {
            isSelected: !!(selection === null || selection === void 0 ? void 0 : selection.isIndexSelected(itemIndex)),
            isSelectionModal: !!((_a = selection === null || selection === void 0 ? void 0 : selection.isModal) === null || _a === void 0 ? void 0 : _a.call(selection)),
        };
    }

    var DetailsRow = styled(DetailsRowBase, getDetailsRowStyles, undefined, {
        scope: 'DetailsRow',
    });

    var RESIZE_DELAY = 500;
    var MAX_RESIZE_ATTEMPTS = 3;
    /**
     * A decorator to update decorated component on viewport or window resize events.
     *
     * @param ComposedComponent decorated React component reference.
     */
    function withViewport(ComposedComponent) {
        return /** @class */ (function (_super) {
            tslib.__extends(WithViewportComponent, _super);
            function WithViewportComponent(props) {
                var _this = _super.call(this, props) || this;
                _this._root = React__namespace.createRef();
                _this._registerResizeObserver = function () {
                    var win = getWindow(_this._root.current);
                    _this._viewportResizeObserver = new win.ResizeObserver(_this._onAsyncResize);
                    _this._viewportResizeObserver.observe(_this._root.current);
                };
                _this._unregisterResizeObserver = function () {
                    if (_this._viewportResizeObserver) {
                        _this._viewportResizeObserver.disconnect();
                        delete _this._viewportResizeObserver;
                    }
                };
                /* Note: using lambda here because decorators don't seem to work in decorators. */
                _this._updateViewport = function (withForceUpdate) {
                    var viewport = _this.state.viewport;
                    var viewportElement = _this._root.current;
                    var scrollElement = findScrollableParent(viewportElement);
                    var scrollRect = getRect(scrollElement);
                    var clientRect = getRect(viewportElement);
                    var updateComponent = function () {
                        if (withForceUpdate && _this._composedComponentInstance) {
                            _this._composedComponentInstance.forceUpdate();
                        }
                    };
                    var isSizeChanged = (clientRect && clientRect.width) !== viewport.width || (scrollRect && scrollRect.height) !== viewport.height;
                    if (isSizeChanged && _this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {
                        _this._resizeAttempts++;
                        _this.setState({
                            viewport: {
                                width: clientRect.width,
                                height: scrollRect.height,
                            },
                        }, function () {
                            _this._updateViewport(withForceUpdate);
                        });
                    }
                    else {
                        _this._resizeAttempts = 0;
                        updateComponent();
                    }
                };
                _this._async = new Async(_this);
                _this._events = new EventGroup(_this);
                _this._resizeAttempts = 0;
                _this.state = {
                    viewport: {
                        width: 0,
                        height: 0,
                    },
                };
                return _this;
            }
            WithViewportComponent.prototype.componentDidMount = function () {
                var _this = this;
                var _a = this.props, delayFirstMeasure = _a.delayFirstMeasure, disableResizeObserver = _a.disableResizeObserver, skipViewportMeasures = _a.skipViewportMeasures;
                var win = getWindow(this._root.current);
                this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {
                    leading: false,
                });
                if (!skipViewportMeasures) {
                    if (!disableResizeObserver && this._isResizeObserverAvailable()) {
                        this._registerResizeObserver();
                    }
                    else {
                        this._events.on(win, 'resize', this._onAsyncResize);
                    }
                    if (delayFirstMeasure) {
                        this._async.setTimeout(function () {
                            _this._updateViewport();
                        }, RESIZE_DELAY);
                    }
                    else {
                        this._updateViewport();
                    }
                }
            };
            WithViewportComponent.prototype.componentDidUpdate = function (previousProps) {
                var previousSkipViewportMeasures = previousProps.skipViewportMeasures;
                var _a = this.props, disableResizeObserver = _a.disableResizeObserver, skipViewportMeasures = _a.skipViewportMeasures;
                var win = getWindow(this._root.current);
                if (skipViewportMeasures !== previousSkipViewportMeasures) {
                    if (!skipViewportMeasures) {
                        if (!disableResizeObserver && this._isResizeObserverAvailable()) {
                            if (!this._viewportResizeObserver) {
                                this._registerResizeObserver();
                            }
                        }
                        else {
                            this._events.on(win, 'resize', this._onAsyncResize);
                        }
                        this._updateViewport();
                    }
                    else {
                        this._unregisterResizeObserver();
                        this._events.off(win, 'resize', this._onAsyncResize);
                    }
                }
            };
            WithViewportComponent.prototype.componentWillUnmount = function () {
                this._events.dispose();
                this._async.dispose();
                this._unregisterResizeObserver();
            };
            WithViewportComponent.prototype.render = function () {
                var viewport = this.state.viewport;
                var newViewport = viewport.width > 0 && viewport.height > 0 ? viewport : undefined;
                return (React__namespace.createElement("div", { className: "ms-Viewport", ref: this._root, style: { minWidth: 1, minHeight: 1 } },
                    React__namespace.createElement(ComposedComponent, tslib.__assign({ ref: this._updateComposedComponentRef, viewport: newViewport }, this.props))));
            };
            WithViewportComponent.prototype.forceUpdate = function () {
                this._updateViewport(true);
            };
            WithViewportComponent.prototype._onAsyncResize = function () {
                this._updateViewport();
            };
            WithViewportComponent.prototype._isResizeObserverAvailable = function () {
                var win = getWindow(this._root.current);
                return win && win.ResizeObserver;
            };
            return WithViewportComponent;
        }(BaseDecorator));
    }

    /**
     * Takes an array of groups and returns a count of the groups and all descendant groups.
     * @param groups - The array of groups to count.
     */
    var GetGroupCount = function (groups) {
        var total = 0;
        if (groups) {
            var remainingGroups = tslib.__spreadArray([], groups);
            var currentGroup = void 0;
            while (remainingGroups && remainingGroups.length > 0) {
                ++total;
                currentGroup = remainingGroups.pop();
                if (currentGroup && currentGroup.children) {
                    remainingGroups.push.apply(remainingGroups, currentGroup.children);
                }
            }
        }
        return total;
    };

    var getClassNames$Y = classNamesFunction();
    var MIN_COLUMN_WIDTH = 100; // this is the global min width
    var DEFAULT_RENDERED_WINDOWS_AHEAD = 2;
    var DEFAULT_RENDERED_WINDOWS_BEHIND = 2;
    /**
     * Hooks-based implementation of DetailsList.
     * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,
     * this inner component handles rendering while the outer maintains compatibility.
     */
    var DetailsListInner = function (props) {
        var selection = props.selection;
        var ariaLabelForListHeader = props.ariaLabelForListHeader, ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox, ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn, className = props.className, checkboxVisibility = props.checkboxVisibility, compact = props.compact, constrainMode = props.constrainMode, dragDropEvents = props.dragDropEvents, groups = props.groups, groupProps = props.groupProps, indentWidth = props.indentWidth, items = props.items, isPlaceholderData = props.isPlaceholderData, isHeaderVisible = props.isHeaderVisible, layoutMode = props.layoutMode, onItemInvoked = props.onItemInvoked, onItemContextMenu = props.onItemContextMenu, onColumnHeaderClick = props.onColumnHeaderClick, onColumnHeaderContextMenu = props.onColumnHeaderContextMenu, _a = props.selectionMode, selectionMode = _a === void 0 ? selection.mode : _a, selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick, selectionZoneProps = props.selectionZoneProps, ariaLabel = props.ariaLabel, ariaLabelForGrid = props.ariaLabelForGrid, rowElementEventMap = props.rowElementEventMap, _b = props.shouldApplyApplicationRole, shouldApplyApplicationRole = _b === void 0 ? false : _b, getKey = props.getKey, listProps = props.listProps, usePageCache = props.usePageCache, onShouldVirtualize = props.onShouldVirtualize, viewport = props.viewport, minimumPixelsForDrag = props.minimumPixelsForDrag, getGroupHeight = props.getGroupHeight, styles = props.styles, theme = props.theme, _c = props.cellStyleProps, cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c, onRenderCheckbox = props.onRenderCheckbox, useFastIcons = props.useFastIcons, dragDropHelper = props.dragDropHelper, adjustedColumns = props.adjustedColumns, isCollapsed = props.isCollapsed, isSizing = props.isSizing, isSomeGroupExpanded = props.isSomeGroupExpanded, version = props.version, rootRef = props.rootRef, listRef = props.listRef, focusZoneRef = props.focusZoneRef, columnReorderOptions = props.columnReorderOptions, groupedListRef = props.groupedListRef, headerRef = props.headerRef, onGroupExpandStateChanged = props.onGroupExpandStateChanged, onColumnIsSizingChanged = props.onColumnIsSizingChanged, onRowDidMount = props.onRowDidMount, onRowWillUnmount = props.onRowWillUnmount, disableSelectionZone = props.disableSelectionZone, onColumnResized = props.onColumnResized, onColumnAutoResized = props.onColumnAutoResized, onToggleCollapse = props.onToggleCollapse, onActiveRowChanged = props.onActiveRowChanged, onBlur = props.onBlur, eventsToRegister = props.rowElementEventMap, onRenderMissingItem = props.onRenderMissingItem, onRenderItemColumn = props.onRenderItemColumn, getCellValueKey = props.getCellValueKey, getRowAriaLabel = props.getRowAriaLabel, getRowAriaDescribedBy = props.getRowAriaDescribedBy, checkButtonAriaLabel = props.checkButtonAriaLabel, checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel, checkboxCellClassName = props.checkboxCellClassName, useReducedRowRenderer = props.useReducedRowRenderer, enableUpdateAnimations = props.enableUpdateAnimations, enterModalSelectionOnTouch = props.enterModalSelectionOnTouch, onRenderDefaultRow = props.onRenderDefaultRow, selectionZoneRef = props.selectionZoneRef, focusZoneProps = props.focusZoneProps;
        var defaultRole = 'grid';
        var role = props.role ? props.role : defaultRole;
        var rowId = getId('row');
        var groupNestingDepth = getGroupNestingDepth(groups);
        var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);
        var additionalListProps = React__namespace.useMemo(function () {
            return tslib.__assign({ renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD, renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND, getKey: getKey, version: version }, listProps);
        }, [isSizing, getKey, version, listProps]);
        var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none
        if (selectionMode === SelectionMode.single) {
            selectAllVisibility = SelectAllVisibility.hidden;
        }
        if (selectionMode === SelectionMode.multiple) {
            // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups
            var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;
            if (isCollapsedGroupSelectVisible === undefined) {
                isCollapsedGroupSelectVisible = true;
            }
            var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;
            selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;
        }
        if (checkboxVisibility === CheckboxVisibility.hidden) {
            selectAllVisibility = SelectAllVisibility.none;
        }
        var defaultOnRenderDetailsHeader = React__namespace.useCallback(function (detailsHeaderProps) {
            return React__namespace.createElement(DetailsHeader, tslib.__assign({}, detailsHeaderProps));
        }, []);
        var defaultOnRenderDetailsFooter = React__namespace.useCallback(function () {
            return null;
        }, []);
        var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;
        var onRenderDetailsHeader = React__namespace.useMemo(function () {
            return propsOnRenderDetailsHeader
                ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)
                : defaultOnRenderDetailsHeader;
        }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);
        var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;
        var onRenderDetailsFooter = React__namespace.useMemo(function () {
            return propsOnRenderDetailsFooter
                ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)
                : defaultOnRenderDetailsFooter;
        }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);
        var detailsFooterProps = React__namespace.useMemo(function () {
            return {
                columns: adjustedColumns,
                groupNestingDepth: groupNestingDepth,
                selection: selection,
                selectionMode: selectionMode,
                viewport: viewport,
                checkboxVisibility: checkboxVisibility,
                indentWidth: indentWidth,
                cellStyleProps: cellStyleProps,
            };
        }, [
            adjustedColumns,
            groupNestingDepth,
            selection,
            selectionMode,
            viewport,
            checkboxVisibility,
            indentWidth,
            cellStyleProps,
        ]);
        var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;
        var onColumnDragEnd = React__namespace.useCallback(function (_a, event) {
            var dropLocation = _a.dropLocation;
            var finalDropLocation = ColumnDragEndLocation.outside;
            if (columnReorderOnDragEnd) {
                if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {
                    finalDropLocation = dropLocation;
                }
                else if (rootRef.current) {
                    var clientRect = rootRef.current.getBoundingClientRect();
                    if (event.clientX > clientRect.left &&
                        event.clientX < clientRect.right &&
                        event.clientY > clientRect.top &&
                        event.clientY < clientRect.bottom) {
                        finalDropLocation = ColumnDragEndLocation.surface;
                    }
                }
                columnReorderOnDragEnd(finalDropLocation);
            }
        }, [columnReorderOnDragEnd, rootRef]);
        var columnReorderProps = React__namespace.useMemo(function () {
            if (columnReorderOptions) {
                return tslib.__assign(tslib.__assign({}, columnReorderOptions), { onColumnDragEnd: onColumnDragEnd });
            }
        }, [columnReorderOptions, onColumnDragEnd]);
        var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);
        var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +
            (adjustedColumns ? adjustedColumns.length : 0) +
            (groups ? 1 : 0);
        var classNames = React__namespace.useMemo(function () {
            return getClassNames$Y(styles, {
                theme: theme,
                compact: compact,
                isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,
                isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,
                className: className,
            });
        }, [styles, theme, compact, layoutMode, constrainMode, className]);
        var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;
        var finalOnRenderDetailsGroupFooter = React__namespace.useMemo(function () {
            return onRenderDetailsGroupFooter
                ? function (groupFooterProps, defaultRender) {
                    return onRenderDetailsGroupFooter(tslib.__assign(tslib.__assign({}, groupFooterProps), { columns: adjustedColumns, groupNestingDepth: groupNestingDepth, indentWidth: indentWidth, selection: selection, selectionMode: selectionMode, viewport: viewport, checkboxVisibility: checkboxVisibility, cellStyleProps: cellStyleProps }), defaultRender);
                }
                : undefined;
        }, [
            onRenderDetailsGroupFooter,
            adjustedColumns,
            groupNestingDepth,
            indentWidth,
            selection,
            selectionMode,
            viewport,
            checkboxVisibility,
            cellStyleProps,
        ]);
        var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;
        var finalOnRenderDetailsGroupHeader = React__namespace.useMemo(function () {
            return onRenderDetailsGroupHeader
                ? function (groupHeaderProps, defaultRender) {
                    var _a, _b;
                    var groupIndex = groupHeaderProps.groupIndex;
                    var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;
                    var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey]
                        ? groupedDetailsListIndexMap[groupKey].totalRowCount
                        : 0;
                    return onRenderDetailsGroupHeader(tslib.__assign(tslib.__assign({}, groupHeaderProps), { columns: adjustedColumns, groupNestingDepth: groupNestingDepth, indentWidth: indentWidth, selection: selection, selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none, viewport: viewport, checkboxVisibility: checkboxVisibility, cellStyleProps: cellStyleProps, ariaColSpan: adjustedColumns.length, ariaPosInSet: undefined, ariaSetSize: undefined, ariaRowCount: undefined, ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined }), defaultRender);
                }
                : function (groupHeaderProps, defaultRender) {
                    var _a, _b;
                    var groupIndex = groupHeaderProps.groupIndex;
                    var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;
                    var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey]
                        ? groupedDetailsListIndexMap[groupKey].totalRowCount
                        : 0;
                    return defaultRender(tslib.__assign(tslib.__assign({}, groupHeaderProps), { ariaColSpan: adjustedColumns.length, ariaPosInSet: undefined, ariaSetSize: undefined, ariaRowCount: undefined, ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined }));
                };
        }, [
            onRenderDetailsGroupHeader,
            adjustedColumns,
            groupNestingDepth,
            indentWidth,
            isHeaderVisible,
            selection,
            selectionMode,
            viewport,
            checkboxVisibility,
            cellStyleProps,
            groupedDetailsListIndexMap,
        ]);
        var finalGroupProps = React__namespace.useMemo(function () {
            var _a;
            return tslib.__assign(tslib.__assign({}, groupProps), { role: role === defaultRole ? 'rowgroup' : 'presentation', onRenderFooter: finalOnRenderDetailsGroupFooter, onRenderHeader: finalOnRenderDetailsGroupHeader, 
                // pass through custom group header checkbox label
                headerProps: tslib.__assign(tslib.__assign({}, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps), { selectAllButtonProps: tslib.__assign({ 'aria-label': checkButtonGroupAriaLabel }, (_a = groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps) === null || _a === void 0 ? void 0 : _a.selectAllButtonProps) }) });
        }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);
        var sumColumnWidths = useConst(function () {
            return memoizeFunction(function (columns) {
                var totalWidth = 0;
                columns.forEach(function (column) { return (totalWidth += column.calculatedWidth || column.minWidth); });
                return totalWidth;
            });
        });
        var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;
        var rowWidth = React__namespace.useMemo(function () {
            return sumColumnWidths(adjustedColumns);
        }, [adjustedColumns, sumColumnWidths]);
        var onRenderCell = React__namespace.useCallback(function (nestingDepth, item, index, group) {
            var finalOnRenderRow = props.onRenderRow
                ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)
                : onRenderDefaultRow;
            var groupKey = group ? group.key : undefined;
            var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey]
                ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem
                : 0;
            var rowRole = role === defaultRole ? undefined : 'presentation';
            var rowProps = {
                item: item,
                itemIndex: index,
                flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,
                compact: compact,
                columns: adjustedColumns,
                groupNestingDepth: nestingDepth,
                id: rowId + "-" + index,
                selectionMode: selectionMode,
                selection: selection,
                onDidMount: onRowDidMount,
                onWillUnmount: onRowWillUnmount,
                onRenderItemColumn: onRenderItemColumn,
                getCellValueKey: getCellValueKey,
                eventsToRegister: eventsToRegister,
                dragDropEvents: dragDropEvents,
                dragDropHelper: dragDropHelper,
                viewport: viewport,
                checkboxVisibility: checkboxVisibility,
                collapseAllVisibility: collapseAllVisibility,
                getRowAriaLabel: getRowAriaLabel,
                getRowAriaDescribedBy: getRowAriaDescribedBy,
                checkButtonAriaLabel: checkButtonAriaLabel,
                checkboxCellClassName: checkboxCellClassName,
                useReducedRowRenderer: useReducedRowRenderer,
                indentWidth: indentWidth,
                cellStyleProps: cellStyleProps,
                onRenderDetailsCheckbox: onRenderCheckbox,
                enableUpdateAnimations: enableUpdateAnimations,
                rowWidth: rowWidth,
                useFastIcons: useFastIcons,
                role: rowRole,
            };
            if (!item) {
                if (onRenderMissingItem) {
                    return onRenderMissingItem(index, rowProps);
                }
                return null;
            }
            return finalOnRenderRow(rowProps);
        }, [
            compact,
            adjustedColumns,
            selectionMode,
            selection,
            rowId,
            onRowDidMount,
            onRowWillUnmount,
            onRenderItemColumn,
            getCellValueKey,
            eventsToRegister,
            dragDropEvents,
            dragDropHelper,
            viewport,
            checkboxVisibility,
            collapseAllVisibility,
            getRowAriaLabel,
            getRowAriaDescribedBy,
            isHeaderVisible,
            checkButtonAriaLabel,
            checkboxCellClassName,
            useReducedRowRenderer,
            indentWidth,
            cellStyleProps,
            onRenderCheckbox,
            enableUpdateAnimations,
            useFastIcons,
            onRenderDefaultRow,
            onRenderMissingItem,
            props.onRenderRow,
            rowWidth,
            role,
            groupedDetailsListIndexMap,
        ]);
        var onRenderListCell = React__namespace.useCallback(function (nestingDepth) {
            return function (item, itemIndex) {
                return onRenderCell(nestingDepth, item, itemIndex);
            };
        }, [onRenderCell]);
        var isRightArrow = React__namespace.useCallback(function (event) {
            // eslint-disable-next-line deprecation/deprecation
            return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);
        }, [theme]);
        var focusZoneInnerProps = tslib.__assign(tslib.__assign({}, focusZoneProps), { componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef, className: classNames.focusZone, direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical, shouldEnterInnerZone: focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow, onActiveElementChanged: focusZoneProps && focusZoneProps.onActiveElementChanged
                ? focusZoneProps.onActiveElementChanged
                : onActiveRowChanged, shouldRaiseClicksOnEnter: false, onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur });
        var list = groups ? (React__namespace.createElement(GroupedList, { focusZoneProps: focusZoneInnerProps, componentRef: groupedListRef, groups: groups, groupProps: finalGroupProps, items: items, onRenderCell: onRenderCell, role: "presentation", selection: selection, selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none, dragDropEvents: dragDropEvents, dragDropHelper: dragDropHelper, eventsToRegister: rowElementEventMap, listProps: additionalListProps, onGroupExpandStateChanged: onGroupExpandStateChanged, usePageCache: usePageCache, onShouldVirtualize: onShouldVirtualize, getGroupHeight: getGroupHeight, compact: compact })) : (React__namespace.createElement(FocusZone, tslib.__assign({}, focusZoneInnerProps),
            React__namespace.createElement(List, tslib.__assign({ ref: listRef, role: "presentation", items: items, onRenderCell: onRenderListCell(0), usePageCache: usePageCache, onShouldVirtualize: onShouldVirtualize }, additionalListProps))));
        var onHeaderKeyDown = React__namespace.useCallback(function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.down) {
                if (focusZoneRef.current && focusZoneRef.current.focus()) {
                    // select the first item in list after down arrow key event
                    // only if nothing was selected; otherwise start with the already-selected item
                    if (selection.getSelectedIndices().length === 0) {
                        selection.setIndexSelected(0, true, false);
                    }
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
        }, [selection, focusZoneRef]);
        var onContentKeyDown = React__namespace.useCallback(function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.up && !ev.altKey) {
                if (headerRef.current && headerRef.current.focus()) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
        }, [headerRef]);
        return (
        // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work
        // with JAWS.
        React__namespace.createElement("div", tslib.__assign({ ref: rootRef, className: classNames.root, "data-automationid": "DetailsList", "data-is-scrollable": "false", "aria-label": ariaLabel }, (shouldApplyApplicationRole ? { role: 'application' } : {})),
            React__namespace.createElement(FocusRects, null),
            React__namespace.createElement("div", { role: role, "aria-label": ariaLabelForGrid, "aria-rowcount": isPlaceholderData ? -1 : rowCount, "aria-colcount": colCount, "aria-readonly": "true", "aria-busy": isPlaceholderData },
                React__namespace.createElement("div", { onKeyDown: onHeaderKeyDown, role: "presentation", className: classNames.headerWrapper }, isHeaderVisible &&
                    onRenderDetailsHeader({
                        componentRef: headerRef,
                        selectionMode: selectionMode,
                        layoutMode: layoutMode,
                        selection: selection,
                        columns: adjustedColumns,
                        onColumnClick: onColumnHeaderClick,
                        onColumnContextMenu: onColumnHeaderContextMenu,
                        onColumnResized: onColumnResized,
                        onColumnIsSizingChanged: onColumnIsSizingChanged,
                        onColumnAutoResized: onColumnAutoResized,
                        groupNestingDepth: groupNestingDepth,
                        isAllCollapsed: isCollapsed,
                        onToggleCollapseAll: onToggleCollapse,
                        ariaLabel: ariaLabelForListHeader,
                        ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,
                        ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,
                        selectAllVisibility: selectAllVisibility,
                        collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,
                        viewport: viewport,
                        columnReorderProps: columnReorderProps,
                        minimumPixelsForDrag: minimumPixelsForDrag,
                        cellStyleProps: cellStyleProps,
                        checkboxVisibility: checkboxVisibility,
                        indentWidth: indentWidth,
                        onRenderDetailsCheckbox: onRenderCheckbox,
                        rowWidth: sumColumnWidths(adjustedColumns),
                        useFastIcons: useFastIcons,
                    }, onRenderDetailsHeader)),
                React__namespace.createElement("div", { onKeyDown: onContentKeyDown, role: "presentation", className: classNames.contentWrapper }, !disableSelectionZone ? (React__namespace.createElement(SelectionZone, tslib.__assign({ ref: selectionZoneRef, selection: selection, selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick, selectionMode: selectionMode, onItemInvoked: onItemInvoked, onItemContextMenu: onItemContextMenu, enterModalOnTouch: enterModalSelectionOnTouch }, (selectionZoneProps || {})), list)) : (list)),
                onRenderDetailsFooter(tslib.__assign({}, detailsFooterProps)))));
    };
    var DetailsListBase = /** @class */ (function (_super) {
        tslib.__extends(DetailsListBase, _super);
        function DetailsListBase(props) {
            var _this = _super.call(this, props) || this;
            _this._root = React__namespace.createRef();
            _this._header = React__namespace.createRef();
            _this._groupedList = React__namespace.createRef();
            _this._list = React__namespace.createRef();
            _this._focusZone = React__namespace.createRef();
            _this._selectionZone = React__namespace.createRef();
            _this._onRenderRow = function (props, defaultRender) {
                return React__namespace.createElement(DetailsRow, tslib.__assign({}, props));
            };
            _this._getDerivedStateFromProps = function (nextProps, previousState) {
                var _a = _this.props, checkboxVisibility = _a.checkboxVisibility, items = _a.items, setKey = _a.setKey, _b = _a.selectionMode, selectionMode = _b === void 0 ? _this._selection.mode : _b, columns = _a.columns, viewport = _a.viewport, compact = _a.compact, dragDropEvents = _a.dragDropEvents;
                var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed, isAllGroupsCollapsed = _c === void 0 ? undefined : _c;
                var newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;
                var oldViewportWidth = (viewport && viewport.width) || 0;
                var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;
                var shouldForceUpdates = false;
                if (nextProps.layoutMode !== _this.props.layoutMode) {
                    shouldForceUpdates = true;
                }
                var nextState = previousState;
                if (shouldResetSelection) {
                    _this._initialFocusedIndex = nextProps.initialFocusedIndex;
                    // reset focusedItemIndex when setKey changes
                    nextState = tslib.__assign(tslib.__assign({}, nextState), { focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1 });
                }
                if (!_this.props.disableSelectionZone && nextProps.items !== items) {
                    _this._selection.setItems(nextProps.items, shouldResetSelection);
                }
                if (nextProps.checkboxVisibility !== checkboxVisibility ||
                    nextProps.columns !== columns ||
                    newViewportWidth !== oldViewportWidth ||
                    nextProps.compact !== compact) {
                    shouldForceUpdates = true;
                }
                nextState = tslib.__assign(tslib.__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));
                if (nextProps.selectionMode !== selectionMode) {
                    shouldForceUpdates = true;
                }
                if (isAllGroupsCollapsed === undefined &&
                    nextProps.groupProps &&
                    nextProps.groupProps.isAllGroupsCollapsed !== undefined) {
                    nextState = tslib.__assign(tslib.__assign({}, nextState), { isCollapsed: nextProps.groupProps.isAllGroupsCollapsed, isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed });
                }
                if (nextProps.dragDropEvents !== dragDropEvents) {
                    _this._dragDropHelper && _this._dragDropHelper.dispose();
                    _this._dragDropHelper = nextProps.dragDropEvents
                        ? new DragDropHelper({
                            selection: _this._selection,
                            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,
                        })
                        : undefined;
                    shouldForceUpdates = true;
                }
                if (shouldForceUpdates) {
                    nextState = tslib.__assign(tslib.__assign({}, nextState), { version: {} });
                }
                return nextState;
            };
            _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {
                _this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });
            };
            _this._onColumnIsSizingChanged = function (column, isSizing) {
                _this.setState({ isSizing: isSizing });
            };
            _this._onRowDidMount = function (row) {
                var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;
                var itemKey = _this._getItemKey(item, itemIndex);
                _this._activeRows[itemKey] = row; // this is used for column auto resize
                _this._setFocusToRowIfPending(row);
                var onRowDidMount = _this.props.onRowDidMount;
                if (onRowDidMount) {
                    onRowDidMount(item, itemIndex);
                }
            };
            _this._onRowWillUnmount = function (row) {
                var onRowWillUnmount = _this.props.onRowWillUnmount;
                var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;
                var itemKey = _this._getItemKey(item, itemIndex);
                delete _this._activeRows[itemKey];
                if (onRowWillUnmount) {
                    onRowWillUnmount(item, itemIndex);
                }
            };
            _this._onToggleCollapse = function (collapsed) {
                _this.setState({
                    isCollapsed: collapsed,
                });
                if (_this._groupedList.current) {
                    _this._groupedList.current.toggleCollapseAll(collapsed);
                }
            };
            _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {
                var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);
                if (_this.props.onColumnResize) {
                    _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);
                }
                _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);
                _this.setState(tslib.__assign(tslib.__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), { version: {} }));
            };
            /**
             * Callback function when double clicked on the details header column resizer
             * which will measure the column cells of all the active rows and resize the
             * column to the max cell width.
             *
             * @param column - double clicked column definition
             * @param columnIndex - double clicked column index
             * TODO: min width 100 should be changed to const value and should be consistent with the
             * value used on _onSizerMove method in DetailsHeader
             */
            _this._onColumnAutoResized = function (column, columnIndex) {
                var max = 0;
                var count = 0;
                var totalCount = Object.keys(_this._activeRows).length;
                for (var key in _this._activeRows) {
                    if (_this._activeRows.hasOwnProperty(key)) {
                        var currentRow = _this._activeRows[key];
                        currentRow.measureCell(columnIndex, function (width) {
                            max = Math.max(max, width);
                            count++;
                            if (count === totalCount) {
                                _this._onColumnResized(column, max, columnIndex);
                            }
                        });
                    }
                }
            };
            /**
             * Call back function when an element in FocusZone becomes active. It will translate it into item
             * and call onActiveItemChanged callback if specified.
             *
             * @param row - element that became active in Focus Zone
             * @param focus - event from Focus Zone
             */
            _this._onActiveRowChanged = function (el, ev) {
                var _a = _this.props, items = _a.items, onActiveItemChanged = _a.onActiveItemChanged;
                if (!el) {
                    return;
                }
                // Check and assign index only if the event was raised from any DetailsRow element
                if (el.getAttribute('data-item-index')) {
                    var index = Number(el.getAttribute('data-item-index'));
                    if (index >= 0) {
                        if (onActiveItemChanged) {
                            onActiveItemChanged(items[index], index, ev);
                        }
                        _this.setState({
                            focusedItemIndex: index,
                        });
                    }
                }
            };
            _this._onBlur = function (event) {
                _this.setState({
                    focusedItemIndex: -1,
                });
            };
            initializeComponentRef(_this);
            _this._async = new Async(_this);
            _this._activeRows = {};
            _this._columnOverrides = {};
            _this.state = {
                focusedItemIndex: -1,
                lastWidth: 0,
                adjustedColumns: _this._getAdjustedColumns(props, undefined),
                isSizing: false,
                isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,
                isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,
                version: {},
                getDerivedStateFromProps: _this._getDerivedStateFromProps,
            };
            _this._selection =
                props.selection ||
                    new Selection({
                        onSelectionChanged: undefined,
                        getKey: props.getKey,
                        selectionMode: props.selectionMode,
                    });
            if (!_this.props.disableSelectionZone) {
                _this._selection.setItems(props.items, false);
            }
            _this._dragDropHelper = props.dragDropEvents
                ? new DragDropHelper({
                    selection: _this._selection,
                    minimumPixelsForDrag: props.minimumPixelsForDrag,
                })
                : undefined;
            _this._initialFocusedIndex = props.initialFocusedIndex;
            return _this;
        }
        DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {
            return previousState.getDerivedStateFromProps(nextProps, previousState);
        };
        DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {
            this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);
            this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);
        };
        DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {
            if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }
            var item = this.props.items[index];
            if (item) {
                this.scrollToIndex(index, measureItem, scrollToMode);
                var itemKey = this._getItemKey(item, index);
                var row = this._activeRows[itemKey];
                if (row) {
                    this._setFocusToRow(row, forceIntoFirstElement);
                }
            }
        };
        DetailsListBase.prototype.getStartItemIndexInView = function () {
            if (this._list && this._list.current) {
                return this._list.current.getStartItemIndexInView();
            }
            else if (this._groupedList && this._groupedList.current) {
                return this._groupedList.current.getStartItemIndexInView();
            }
            return 0;
        };
        DetailsListBase.prototype.updateColumn = function (column, options) {
            var _a, _b;
            var NO_COLUMNS = [];
            var _c = this.props, _d = _c.columns, columns = _d === void 0 ? NO_COLUMNS : _d, selectionMode = _c.selectionMode, checkboxVisibility = _c.checkboxVisibility, columnReorderOptions = _c.columnReorderOptions;
            var width = options.width, newColumnIndex = options.newColumnIndex;
            var index = columns.findIndex(function (col) { return col.key === column.key; });
            if (width) {
                this._onColumnResized(column, width, index);
            }
            if (newColumnIndex !== undefined && columnReorderOptions) {
                var isCheckboxColumnHidden = selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;
                var showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;
                var columnIndex = (showCheckbox ? 2 : 1) + index;
                var draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;
                var targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;
                var frozenColumnCountFromStart = (_a = columnReorderOptions.frozenColumnCountFromStart) !== null && _a !== void 0 ? _a : 0;
                var frozenColumnCountFromEnd = (_b = columnReorderOptions.frozenColumnCountFromEnd) !== null && _b !== void 0 ? _b : 0;
                var isValidTargetIndex = targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;
                if (isValidTargetIndex) {
                    if (columnReorderOptions.onColumnDrop) {
                        var dragDropDetails = {
                            draggedIndex: draggedIndex,
                            targetIndex: targetIndex,
                        };
                        columnReorderOptions.onColumnDrop(dragDropDetails);
                        /* eslint-disable deprecation/deprecation */
                    }
                    else if (columnReorderOptions.handleColumnReorder) {
                        columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);
                        /* eslint-enable deprecation/deprecation */
                    }
                }
            }
        };
        DetailsListBase.prototype.componentWillUnmount = function () {
            if (this._dragDropHelper) {
                // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.
                this._dragDropHelper.dispose();
            }
            this._async.dispose();
        };
        DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {
            this._notifyColumnsResized();
            if (this._initialFocusedIndex !== undefined) {
                var item = this.props.items[this._initialFocusedIndex];
                if (item) {
                    var itemKey = this._getItemKey(item, this._initialFocusedIndex);
                    var row = this._activeRows[itemKey];
                    if (row) {
                        this._setFocusToRowIfPending(row);
                    }
                }
            }
            if (this.props.items !== prevProps.items &&
                this.props.items.length > 0 &&
                this.state.focusedItemIndex !== -1 &&
                !elementContains(this._root.current, document.activeElement, false)) {
                // Item set has changed and previously-focused item is gone.
                // Set focus to item at index of previously-focused item if it is in range,
                // else set focus to the last item.
                var index = this.state.focusedItemIndex < this.props.items.length
                    ? this.state.focusedItemIndex
                    : this.props.items.length - 1;
                var item = this.props.items[index];
                var itemKey = this._getItemKey(item, this.state.focusedItemIndex);
                var row = this._activeRows[itemKey];
                if (row) {
                    this._setFocusToRow(row);
                }
                else {
                    this._initialFocusedIndex = index;
                }
            }
            if (this.props.onDidUpdate) {
                this.props.onDidUpdate(this);
            }
        };
        DetailsListBase.prototype.render = function () {
            return (React__namespace.createElement(DetailsListInner, tslib.__assign({}, this.props, this.state, { selection: this._selection, dragDropHelper: this._dragDropHelper, rootRef: this._root, listRef: this._list, groupedListRef: this._groupedList, focusZoneRef: this._focusZone, headerRef: this._header, selectionZoneRef: this._selectionZone, onGroupExpandStateChanged: this._onGroupExpandStateChanged, onColumnIsSizingChanged: this._onColumnIsSizingChanged, onRowDidMount: this._onRowDidMount, onRowWillUnmount: this._onRowWillUnmount, onColumnResized: this._onColumnResized, onColumnAutoResized: this._onColumnAutoResized, onToggleCollapse: this._onToggleCollapse, onActiveRowChanged: this._onActiveRowChanged, onBlur: this._onBlur, onRenderDefaultRow: this._onRenderRow })));
        };
        DetailsListBase.prototype.forceUpdate = function () {
            _super.prototype.forceUpdate.call(this);
            this._forceListUpdates();
        };
        DetailsListBase.prototype._getGroupNestingDepth = function () {
            var groups = this.props.groups;
            var level = 0;
            var groupsInLevel = groups;
            while (groupsInLevel && groupsInLevel.length > 0) {
                level++;
                groupsInLevel = groupsInLevel[0].children;
            }
            return level;
        };
        DetailsListBase.prototype._setFocusToRowIfPending = function (row) {
            var itemIndex = row.props.itemIndex;
            if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {
                this._setFocusToRow(row);
                delete this._initialFocusedIndex;
            }
        };
        DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {
            if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }
            if (this._selectionZone.current) {
                this._selectionZone.current.ignoreNextFocus();
            }
            this._async.setTimeout(function () {
                row.focus(forceIntoFirstElement);
            }, 0);
        };
        DetailsListBase.prototype._forceListUpdates = function () {
            if (this._groupedList.current) {
                this._groupedList.current.forceUpdate();
            }
            if (this._list.current) {
                this._list.current.forceUpdate();
            }
        };
        DetailsListBase.prototype._notifyColumnsResized = function () {
            this.state.adjustedColumns.forEach(function (column) {
                if (column.onColumnResize) {
                    column.onColumnResize(column.currentWidth);
                }
            });
        };
        DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {
            var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);
            var viewport = this.props.viewport;
            var viewportWidth = viewport && viewport.width ? viewport.width : 0;
            return tslib.__assign(tslib.__assign({}, previousState), { adjustedColumns: adjustedColumns, lastWidth: viewportWidth });
        };
        /** Returns adjusted columns, given the viewport size and layout mode. */
        DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {
            var _this = this;
            var newItems = newProps.items, layoutMode = newProps.layoutMode, selectionMode = newProps.selectionMode, viewport = newProps.viewport;
            var viewportWidth = viewport && viewport.width ? viewport.width : 0;
            var newColumns = newProps.columns;
            var columns = this.props ? this.props.columns : [];
            var lastWidth = previousState ? previousState.lastWidth : -1;
            var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;
            if (!forceUpdate &&
                lastWidth === viewportWidth &&
                lastSelectionMode === selectionMode &&
                (!columns || newColumns === columns)) {
                return newColumns || [];
            }
            newColumns = newColumns || buildColumns(newItems, true);
            var adjustedColumns;
            if (layoutMode === DetailsListLayoutMode.fixedColumns) {
                adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);
                // Preserve adjusted column calculated widths.
                adjustedColumns.forEach(function (column) {
                    _this._rememberCalculatedWidth(column, column.calculatedWidth);
                });
            }
            else {
                adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);
                adjustedColumns.forEach(function (column) {
                    _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;
                });
            }
            return adjustedColumns;
        };
        /** Builds a set of columns based on the given columns mixed with the current overrides. */
        DetailsListBase.prototype._getFixedColumns = function (newColumns, viewportWidth, props) {
            var _this = this;
            var _a = this.props, _b = _a.selectionMode, selectionMode = _b === void 0 ? this._selection.mode : _b, checkboxVisibility = _a.checkboxVisibility, flexMargin = _a.flexMargin, skipViewportMeasures = _a.skipViewportMeasures;
            var remainingWidth = viewportWidth - (flexMargin || 0);
            var sumProportionalWidth = 0;
            newColumns.forEach(function (col) {
                if (skipViewportMeasures || !col.flexGrow) {
                    remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;
                }
                else {
                    remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;
                    sumProportionalWidth += col.flexGrow;
                }
                remainingWidth -= getPaddedWidth(col, props, true);
            });
            var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECK_CELL_WIDTH : 0;
            var groupExpandWidth = this._getGroupNestingDepth() * SPACER_WIDTH;
            remainingWidth -= rowCheckWidth + groupExpandWidth;
            var widthFraction = remainingWidth / sumProportionalWidth;
            // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.
            if (!skipViewportMeasures) {
                newColumns.forEach(function (column) {
                    var newColumn = tslib.__assign(tslib.__assign({}, column), _this._columnOverrides[column.key]);
                    if (newColumn.flexGrow && newColumn.maxWidth) {
                        var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;
                        var shrinkWidth = fullWidth - newColumn.maxWidth;
                        if (shrinkWidth > 0) {
                            remainingWidth += shrinkWidth;
                            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;
                        }
                    }
                });
            }
            widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;
            return newColumns.map(function (column) {
                var newColumn = tslib.__assign(tslib.__assign({}, column), _this._columnOverrides[column.key]);
                // Delay computation until viewport width is available.
                if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {
                    return newColumn;
                }
                if (!newColumn.calculatedWidth) {
                    if (!skipViewportMeasures && newColumn.flexGrow) {
                        // Assigns the proportion of the remaining extra width after all columns have met minimum widths.
                        newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;
                        newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);
                    }
                    else {
                        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;
                    }
                }
                return newColumn;
            });
        };
        /** Builds a set of columns to fix within the viewport width. */
        DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props) {
            var _this = this;
            var _a = props.selectionMode, selectionMode = _a === void 0 ? this._selection.mode : _a, checkboxVisibility = props.checkboxVisibility;
            var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECK_CELL_WIDTH : 0;
            var groupExpandWidth = this._getGroupNestingDepth() * SPACER_WIDTH;
            var totalWidth = 0; // offset because we have one less inner padding.
            var minimumWidth = 0;
            var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);
            var adjustedColumns = newColumns.map(function (column, i) {
                var baseColumn = tslib.__assign(tslib.__assign({}, column), { calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH });
                var newColumn = tslib.__assign(tslib.__assign({}, baseColumn), _this._columnOverrides[column.key]);
                // eslint-disable-next-line deprecation/deprecation
                if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {
                    minimumWidth += getPaddedWidth(baseColumn, props);
                }
                totalWidth += getPaddedWidth(newColumn, props);
                return newColumn;
            });
            if (minimumWidth > availableWidth) {
                return adjustedColumns;
            }
            var lastIndex = adjustedColumns.length - 1;
            // Shrink or remove collapsable columns.
            while (lastIndex >= 0 && totalWidth > availableWidth) {
                var column = adjustedColumns[lastIndex];
                var minWidth = column.minWidth || MIN_COLUMN_WIDTH;
                var overflowWidth = totalWidth - availableWidth;
                // eslint-disable-next-line deprecation/deprecation
                if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {
                    var originalWidth = column.calculatedWidth;
                    column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);
                    totalWidth -= originalWidth - column.calculatedWidth;
                }
                else {
                    totalWidth -= getPaddedWidth(column, props);
                    adjustedColumns.splice(lastIndex, 1);
                }
                lastIndex--;
            }
            // Then expand columns starting at the beginning, until we've filled the width.
            for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {
                var column = adjustedColumns[i];
                var isLast = i === adjustedColumns.length - 1;
                var overrides = this._columnOverrides[column.key];
                if (overrides && overrides.calculatedWidth && !isLast) {
                    continue;
                }
                var spaceLeft = availableWidth - totalWidth;
                var increment = void 0;
                if (isLast) {
                    increment = spaceLeft;
                }
                else {
                    var maxWidth = column.maxWidth;
                    var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;
                    increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;
                }
                column.calculatedWidth = column.calculatedWidth + increment;
                totalWidth += increment;
            }
            return adjustedColumns;
        };
        DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {
            var overrides = this._getColumnOverride(column.key);
            overrides.calculatedWidth = newCalculatedWidth;
            overrides.currentWidth = newCalculatedWidth;
        };
        DetailsListBase.prototype._getColumnOverride = function (key) {
            return (this._columnOverrides[key] = this._columnOverrides[key] || {});
        };
        DetailsListBase.prototype._getItemKey = function (item, itemIndex) {
            var getKey = this.props.getKey;
            var itemKey = undefined;
            if (item) {
                itemKey = item.key;
            }
            if (getKey) {
                itemKey = getKey(item, itemIndex);
            }
            if (!itemKey) {
                itemKey = itemIndex;
            }
            return itemKey;
        };
        DetailsListBase.defaultProps = {
            layoutMode: DetailsListLayoutMode.justified,
            selectionMode: SelectionMode.multiple,
            constrainMode: ConstrainMode.horizontalConstrained,
            checkboxVisibility: CheckboxVisibility.onHover,
            isHeaderVisible: true,
            compact: false,
            useFastIcons: true,
        };
        DetailsListBase = tslib.__decorate([
            withViewport
        ], DetailsListBase);
        return DetailsListBase;
    }(React__namespace.Component));
    function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline, columnActionsMode) {
        var columns = [];
        if (items && items.length) {
            var firstItem = items[0];
            for (var propName in firstItem) {
                if (firstItem.hasOwnProperty(propName)) {
                    columns.push({
                        key: propName,
                        name: propName,
                        fieldName: propName,
                        minWidth: MIN_COLUMN_WIDTH,
                        maxWidth: 300,
                        isCollapsable: !!columns.length,
                        isCollapsible: !!columns.length,
                        isMultiline: isMultiline === undefined ? false : isMultiline,
                        isSorted: sortedColumnKey === propName,
                        isSortedDescending: !!isSortedDescending,
                        isRowHeader: false,
                        columnActionsMode: columnActionsMode !== null && columnActionsMode !== void 0 ? columnActionsMode : ColumnActionsMode.clickable,
                        isResizable: canResizeColumns,
                        onColumnClick: onColumnClick,
                        isGrouped: groupedColumnKey === propName,
                    });
                }
            }
        }
        return columns;
    }
    function getPaddedWidth(column, props, paddingOnly) {
        var _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;
        return ((paddingOnly ? 0 : column.calculatedWidth) +
            cellStyleProps.cellLeftPadding +
            cellStyleProps.cellRightPadding +
            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0));
    }
    function getGroupNestingDepth(groups) {
        var level = 0;
        var groupsInLevel = groups;
        while (groupsInLevel && groupsInLevel.length > 0) {
            level++;
            groupsInLevel = groupsInLevel[0].children;
        }
        return level;
    }
    function useGroupedDetailsListIndexMap(groups) {
        return React__namespace.useMemo(function () {
            var indexMap = {};
            if (groups) {
                var rowCount = 1;
                var numGroupHeaders = 1;
                for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
                    var group = groups_1[_i];
                    var key = group.key;
                    indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };
                    numGroupHeaders++;
                    rowCount += group.count + 1;
                }
            }
            return indexMap;
        }, [groups]);
    }

    var GlobalClassNames$9 = {
        root: 'ms-DetailsList',
        compact: 'ms-DetailsList--Compact',
        contentWrapper: 'ms-DetailsList-contentWrapper',
        headerWrapper: 'ms-DetailsList-headerWrapper',
        isFixed: 'is-fixed',
        isHorizontalConstrained: 'is-horizontalConstrained',
        listCell: 'ms-List-cell',
    };
    var getStyles$b = function (props) {
        var _a, _b;
        var theme = props.theme, className = props.className, isHorizontalConstrained = props.isHorizontalConstrained, compact = props.compact, isFixed = props.isFixed;
        var semanticColors = theme.semanticColors;
        var classNames = getGlobalClassNames(GlobalClassNames$9, theme);
        return {
            root: [
                classNames.root,
                theme.fonts.small,
                {
                    position: 'relative',
                    color: semanticColors.listText,
                    selectors: (_a = {},
                        _a["& ." + classNames.listCell] = {
                            minHeight: 38,
                            wordBreak: 'break-word',
                        },
                        _a),
                },
                isFixed && classNames.isFixed,
                compact && [
                    classNames.compact,
                    {
                        selectors: (_b = {},
                            _b["." + classNames.listCell] = {
                                minHeight: 32,
                            },
                            _b),
                    },
                ],
                isHorizontalConstrained && [
                    classNames.isHorizontalConstrained,
                    {
                        overflowX: 'auto',
                        overflowY: 'visible',
                        WebkitOverflowScrolling: 'touch',
                    },
                ],
                className,
            ],
            focusZone: [
                {
                    display: 'inline-block',
                    minWidth: '100%',
                    minHeight: 1,
                },
            ],
            headerWrapper: classNames.headerWrapper,
            contentWrapper: classNames.contentWrapper,
        };
    };

    var DetailsList$1 = styled(DetailsListBase, getStyles$b, undefined, {
        scope: 'DetailsList',
    });

    /**
     * {@docCategory Dialog}
     */
    var DialogType;
    (function (DialogType) {
        /** Standard dialog */
        DialogType[DialogType["normal"] = 0] = "normal";
        /** Dialog with large header banner */
        DialogType[DialogType["largeHeader"] = 1] = "largeHeader";
        /** Dialog with an 'x' close button in the upper-right corner */
        DialogType[DialogType["close"] = 2] = "close";
    })(DialogType || (DialogType = {}));

    var animationDuration = AnimationVariables.durationValue2;
    var globalClassNames$1 = {
        root: 'ms-Modal',
        main: 'ms-Dialog-main',
        scrollableContent: 'ms-Modal-scrollableContent',
        isOpen: 'is-open',
        layer: 'ms-Modal-Layer',
    };
    var getStyles$a = function (props) {
        var _a;
        var className = props.className, containerClassName = props.containerClassName, scrollableContentClassName = props.scrollableContentClassName, isOpen = props.isOpen, isVisible = props.isVisible, hasBeenOpened = props.hasBeenOpened, modalRectangleTop = props.modalRectangleTop, theme = props.theme, topOffsetFixed = props.topOffsetFixed, isModeless = props.isModeless, layerClassName = props.layerClassName, isDefaultDragHandle = props.isDefaultDragHandle, windowInnerHeight = props.windowInnerHeight;
        var palette = theme.palette, effects = theme.effects, fonts = theme.fonts;
        var classNames = getGlobalClassNames(globalClassNames$1, theme);
        return {
            root: [
                classNames.root,
                fonts.medium,
                {
                    backgroundColor: 'transparent',
                    position: isModeless ? 'absolute' : 'fixed',
                    height: '100%',
                    width: '100%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: "opacity " + animationDuration,
                },
                topOffsetFixed &&
                    typeof modalRectangleTop === 'number' &&
                    hasBeenOpened && {
                    alignItems: 'flex-start',
                },
                isOpen && classNames.isOpen,
                isVisible && {
                    opacity: 1,
                    pointerEvents: 'auto',
                },
                className,
            ],
            main: [
                classNames.main,
                {
                    boxShadow: effects.elevation64,
                    borderRadius: effects.roundedCorner2,
                    backgroundColor: palette.white,
                    boxSizing: 'border-box',
                    position: 'relative',
                    textAlign: 'left',
                    outline: '3px solid transparent',
                    maxHeight: 'calc(100% - 32px)',
                    maxWidth: 'calc(100% - 32px)',
                    minHeight: '176px',
                    minWidth: '288px',
                    overflowY: 'auto',
                    zIndex: isModeless ? ZIndexes.Layer : undefined,
                },
                topOffsetFixed &&
                    typeof modalRectangleTop === 'number' &&
                    hasBeenOpened && {
                    top: modalRectangleTop,
                },
                isDefaultDragHandle && {
                    cursor: 'move',
                },
                containerClassName,
            ],
            scrollableContent: [
                classNames.scrollableContent,
                {
                    overflowY: 'auto',
                    flexGrow: 1,
                    maxHeight: '100vh',
                    selectors: (_a = {},
                        _a['@supports (-webkit-overflow-scrolling: touch)'] = {
                            maxHeight: windowInnerHeight,
                        },
                        _a),
                },
                scrollableContentClassName,
            ],
            layer: isModeless && [
                layerClassName,
                classNames.layer,
                {
                    position: 'static',
                    width: 'unset',
                    height: 'unset',
                },
            ],
            keyboardMoveIconContainer: {
                position: 'absolute',
                display: 'flex',
                justifyContent: 'center',
                width: '100%',
                padding: '3px 0px',
            },
            keyboardMoveIcon: {
                // eslint-disable-next-line deprecation/deprecation
                fontSize: fonts.xLargePlus.fontSize,
                width: '24px',
            },
        };
    };

    var getClassNames$X = classNamesFunction();
    var OverlayBase = /** @class */ (function (_super) {
        tslib.__extends(OverlayBase, _super);
        function OverlayBase(props) {
            var _this = _super.call(this, props) || this;
            initializeComponentRef(_this);
            var _a = _this.props.allowTouchBodyScroll, allowTouchBodyScroll = _a === void 0 ? false : _a;
            _this._allowTouchBodyScroll = allowTouchBodyScroll;
            return _this;
        }
        OverlayBase.prototype.componentDidMount = function () {
            !this._allowTouchBodyScroll && disableBodyScroll();
        };
        OverlayBase.prototype.componentWillUnmount = function () {
            !this._allowTouchBodyScroll && enableBodyScroll();
        };
        OverlayBase.prototype.render = function () {
            var _a = this.props, isDark = _a.isDarkThemed, className = _a.className, theme = _a.theme, styles = _a.styles;
            var divProps = getNativeProps(this.props, divProperties);
            var classNames = getClassNames$X(styles, {
                theme: theme,
                className: className,
                isDark: isDark,
            });
            return React__namespace.createElement("div", tslib.__assign({}, divProps, { className: classNames.root }));
        };
        return OverlayBase;
    }(React__namespace.Component));

    var GlobalClassNames$8 = {
        root: 'ms-Overlay',
        rootDark: 'ms-Overlay--dark',
    };
    var getStyles$9 = function (props) {
        var _a;
        var className = props.className, theme = props.theme, isNone = props.isNone, isDark = props.isDark;
        var palette = theme.palette;
        var classNames = getGlobalClassNames(GlobalClassNames$8, theme);
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                {
                    backgroundColor: palette.whiteTranslucent40,
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    position: 'absolute',
                    selectors: (_a = {},
                        _a[HighContrastSelector] = {
                            border: '1px solid WindowText',
                            opacity: 0,
                        },
                        _a),
                },
                isNone && {
                    visibility: 'hidden',
                },
                isDark && [
                    classNames.rootDark,
                    {
                        backgroundColor: palette.blackTranslucent40,
                    },
                ],
                className,
            ],
        };
    };

    var Overlay = styled(OverlayBase, getStyles$9, undefined, {
        scope: 'Overlay',
    });

    var getClassNames$W = memoizeFunction(function (className, isDragging) {
        return {
            root: mergeStyles(className, isDragging && {
                touchAction: 'none',
                selectors: {
                    '& *': {
                        userSelect: 'none',
                    },
                },
            }),
        };
    });

    var eventMapping = {
        touch: {
            start: 'touchstart',
            move: 'touchmove',
            stop: 'touchend',
        },
        mouse: {
            start: 'mousedown',
            move: 'mousemove',
            stop: 'mouseup',
        },
    };
    var DraggableZone = /** @class */ (function (_super) {
        tslib.__extends(DraggableZone, _super);
        function DraggableZone(props) {
            var _this = _super.call(this, props) || this;
            _this._currentEventType = eventMapping.mouse;
            _this._events = [];
            _this._onMouseDown = function (event) {
                var onMouseDown = React__namespace.Children.only(_this.props.children).props.onMouseDown;
                if (onMouseDown) {
                    onMouseDown(event);
                }
                _this._currentEventType = eventMapping.mouse;
                return _this._onDragStart(event);
            };
            _this._onMouseUp = function (event) {
                var onMouseUp = React__namespace.Children.only(_this.props.children).props.onMouseUp;
                if (onMouseUp) {
                    onMouseUp(event);
                }
                _this._currentEventType = eventMapping.mouse;
                return _this._onDragStop(event);
            };
            _this._onTouchStart = function (event) {
                var onTouchStart = React__namespace.Children.only(_this.props.children).props.onTouchStart;
                if (onTouchStart) {
                    onTouchStart(event);
                }
                _this._currentEventType = eventMapping.touch;
                return _this._onDragStart(event);
            };
            _this._onTouchEnd = function (event) {
                var onTouchEnd = React__namespace.Children.only(_this.props.children).props.onTouchEnd;
                if (onTouchEnd) {
                    onTouchEnd(event);
                }
                _this._currentEventType = eventMapping.touch;
                _this._onDragStop(event);
            };
            _this._onDragStart = function (event) {
                // Only handle left click for dragging
                if (typeof event.button === 'number' && event.button !== 0) {
                    return false;
                }
                // If the target doesn't match the handleSelector OR
                // if the target does match the preventDragSelector, bail out
                if ((_this.props.handleSelector && !_this._matchesSelector(event.target, _this.props.handleSelector)) ||
                    (_this.props.preventDragSelector &&
                        _this._matchesSelector(event.target, _this.props.preventDragSelector))) {
                    return;
                }
                // Remember the touch identifier if this is a touch event so we can
                // distinguish between individual touches in multitouch scenarios
                // by remembering which touch point we were given
                _this._touchId = _this._getTouchId(event);
                var position = _this._getControlPosition(event);
                if (position === undefined) {
                    return;
                }
                var dragData = _this._createDragDataFromPosition(position);
                _this.props.onStart && _this.props.onStart(event, dragData);
                _this.setState({
                    isDragging: true,
                    lastPosition: position,
                });
                // hook up the appropriate mouse/touch events to the body to ensure
                // smooth dragging
                _this._events = [
                    on(document.body, _this._currentEventType.move, _this._onDrag, true /* use capture phase */),
                    on(document.body, _this._currentEventType.stop, _this._onDragStop, true /* use capture phase */),
                ];
            };
            _this._onDrag = function (event) {
                // Prevent scrolling on mobile devices
                if (event.type === 'touchmove') {
                    event.preventDefault();
                }
                var position = _this._getControlPosition(event);
                if (!position) {
                    return;
                }
                // create the updated drag data from the position data
                var updatedData = _this._createUpdatedDragData(_this._createDragDataFromPosition(position));
                var updatedPosition = updatedData.position;
                _this.props.onDragChange && _this.props.onDragChange(event, updatedData);
                _this.setState({
                    position: updatedPosition,
                    lastPosition: position,
                });
            };
            _this._onDragStop = function (event) {
                if (!_this.state.isDragging) {
                    return;
                }
                var position = _this._getControlPosition(event);
                if (!position) {
                    return;
                }
                var baseDragData = _this._createDragDataFromPosition(position);
                // Set dragging to false and reset the lastPosition
                _this.setState({
                    isDragging: false,
                    lastPosition: undefined,
                });
                _this.props.onStop && _this.props.onStop(event, baseDragData);
                if (_this.props.position) {
                    _this.setState({
                        position: _this.props.position,
                    });
                }
                // Remove event handlers
                _this._events.forEach(function (dispose) { return dispose(); });
            };
            _this.state = {
                isDragging: false,
                position: _this.props.position || { x: 0, y: 0 },
                lastPosition: undefined,
            };
            return _this;
        }
        DraggableZone.prototype.componentDidUpdate = function (prevProps) {
            if (this.props.position && (!prevProps.position || this.props.position !== prevProps.position)) {
                this.setState({ position: this.props.position });
            }
        };
        DraggableZone.prototype.componentWillUnmount = function () {
            this._events.forEach(function (dispose) { return dispose(); });
        };
        DraggableZone.prototype.render = function () {
            var child = React__namespace.Children.only(this.props.children);
            var props = child.props;
            var position = this.props.position;
            var _a = this.state, statePosition = _a.position, isDragging = _a.isDragging;
            var x = statePosition.x;
            var y = statePosition.y;
            if (position && !isDragging) {
                x = position.x;
                y = position.y;
            }
            return React__namespace.cloneElement(child, {
                style: tslib.__assign(tslib.__assign({}, props.style), { transform: "translate(" + x + "px, " + y + "px)" }),
                className: getClassNames$W(props.className, this.state.isDragging).root,
                onMouseDown: this._onMouseDown,
                onMouseUp: this._onMouseUp,
                onTouchStart: this._onTouchStart,
                onTouchEnd: this._onTouchEnd,
            });
        };
        /**
         * Get the control position based off the event that fired
         * @param event - The event to get offsets from
         */
        DraggableZone.prototype._getControlPosition = function (event) {
            var touchObj = this._getActiveTouch(event);
            // did we get the right touch?
            if (this._touchId !== undefined && !touchObj) {
                return undefined;
            }
            var eventToGetOffset = touchObj || event;
            return {
                x: eventToGetOffset.clientX,
                y: eventToGetOffset.clientY,
            };
        };
        /**
         * Get the active touch point that we have saved from the event's TouchList
         * @param event - The event used to get the TouchList for the active touch point
         */
        DraggableZone.prototype._getActiveTouch = function (event) {
            return ((event.targetTouches && this._findTouchInTouchList(event.targetTouches)) ||
                (event.changedTouches && this._findTouchInTouchList(event.changedTouches)));
        };
        /**
         * Get the initial touch identifier associated with the given event
         * @param event - The event that contains the TouchList
         */
        DraggableZone.prototype._getTouchId = function (event) {
            var touch = (event.targetTouches && event.targetTouches[0]) || (event.changedTouches && event.changedTouches[0]);
            if (touch) {
                return touch.identifier;
            }
        };
        /**
         * Returns if an element (or any of the element's parents) match the given selector
         */
        DraggableZone.prototype._matchesSelector = function (element, selector) {
            if (!element || element === document.body) {
                return false;
            }
            var matchesSelectorFn = element.matches || element.webkitMatchesSelector || element.msMatchesSelector; /* for IE */
            if (!matchesSelectorFn) {
                return false;
            }
            return matchesSelectorFn.call(element, selector) || this._matchesSelector(element.parentElement, selector);
        };
        /**
         * Attempts to find the Touch that matches the identifier  we stored in dragStart
         * @param touchList The TouchList to look for the stored identifier from dragStart
         */
        DraggableZone.prototype._findTouchInTouchList = function (touchList) {
            if (this._touchId === undefined) {
                return;
            }
            for (var i = 0; i < touchList.length; i++) {
                if (touchList[i].identifier === this._touchId) {
                    return touchList[i];
                }
            }
            return undefined;
        };
        /**
         * Create DragData based off of the last known position and the new position passed in
         * @param position The new position as part of the drag
         */
        DraggableZone.prototype._createDragDataFromPosition = function (position) {
            var lastPosition = this.state.lastPosition;
            // If we have no lastPosition, use the given position
            // for last position
            if (lastPosition === undefined) {
                return {
                    delta: { x: 0, y: 0 },
                    lastPosition: position,
                    position: position,
                };
            }
            return {
                delta: {
                    x: position.x - lastPosition.x,
                    y: position.y - lastPosition.y,
                },
                lastPosition: lastPosition,
                position: position,
            };
        };
        /**
         * Creates an updated DragData based off the current position and given baseDragData
         * @param baseDragData The base DragData (from _createDragDataFromPosition) used to calculate the updated positions
         */
        DraggableZone.prototype._createUpdatedDragData = function (baseDragData) {
            var position = this.state.position;
            return {
                position: {
                    x: position.x + baseDragData.delta.x,
                    y: position.y + baseDragData.delta.y,
                },
                delta: baseDragData.delta,
                lastPosition: position,
            };
        };
        return DraggableZone;
    }(React__namespace.Component));

    var ZERO = { x: 0, y: 0 };
    var DEFAULT_PROPS$1 = {
        isOpen: false,
        isDarkOverlay: true,
        className: '',
        containerClassName: '',
        enableAriaHiddenSiblings: true,
    };
    var getClassNames$V = classNamesFunction();
    var getMoveDelta = function (ev) {
        var delta = 10;
        if (ev.shiftKey) {
            if (!ev.ctrlKey) {
                delta = 50;
            }
        }
        else if (ev.ctrlKey) {
            delta = 1;
        }
        return delta;
    };
    var useComponentRef$1 = function (props, focusTrapZone) {
        React__namespace.useImperativeHandle(props.componentRef, function () { return ({
            focus: function () {
                if (focusTrapZone.current) {
                    focusTrapZone.current.focus();
                }
            },
        }); }, [focusTrapZone]);
    };
    var ModalBase = React__namespace.forwardRef(function (propsWithoutDefaults, ref) {
        var props = getPropsWithDefaults(DEFAULT_PROPS$1, propsWithoutDefaults);
        var allowTouchBodyScroll = props.allowTouchBodyScroll, className = props.className, children = props.children, containerClassName = props.containerClassName, scrollableContentClassName = props.scrollableContentClassName, elementToFocusOnDismiss = props.elementToFocusOnDismiss, firstFocusableSelector = props.firstFocusableSelector, forceFocusInsideTrap = props.forceFocusInsideTrap, ignoreExternalFocusing = props.ignoreExternalFocusing, isBlocking = props.isBlocking, isAlert = props.isAlert, isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap, isDarkOverlay = props.isDarkOverlay, onDismiss = props.onDismiss, layerProps = props.layerProps, overlay = props.overlay, isOpen = props.isOpen, titleAriaId = props.titleAriaId, styles = props.styles, subtitleAriaId = props.subtitleAriaId, theme = props.theme, topOffsetFixed = props.topOffsetFixed, responsiveMode = props.responsiveMode, 
        // eslint-disable-next-line deprecation/deprecation
        onLayerDidMount = props.onLayerDidMount, isModeless = props.isModeless, dragOptions = props.dragOptions, onDismissed = props.onDismissed, 
        // eslint-disable-next-line deprecation/deprecation
        enableAriaHiddenSiblings = props.enableAriaHiddenSiblings;
        var rootRef = React__namespace.useRef(null);
        var focusTrapZone = React__namespace.useRef(null);
        var focusTrapZoneElm = React__namespace.useRef(null);
        var mergedRef = useMergedRefs(rootRef, ref);
        var modalResponsiveMode = useResponsiveMode(mergedRef);
        var focusTrapZoneId = useId('ModalFocusTrapZone');
        var win = useWindow();
        var _a = useSetTimeout(), setTimeout = _a.setTimeout, clearTimeout = _a.clearTimeout;
        var _b = React__namespace.useState(isOpen), isModalOpen = _b[0], setIsModalOpen = _b[1];
        var _c = React__namespace.useState(isOpen), isVisible = _c[0], setIsVisible = _c[1];
        var _d = React__namespace.useState(ZERO), coordinates = _d[0], setCoordinates = _d[1];
        var _e = React__namespace.useState(), modalRectangleTop = _e[0], setModalRectangleTop = _e[1];
        var _f = useBoolean(false), isModalMenuOpen = _f[0], _g = _f[1], toggleModalMenuOpen = _g.toggle, setModalMenuClose = _g.setFalse;
        var internalState = useConst(function () { return ({
            onModalCloseTimer: 0,
            allowTouchBodyScroll: allowTouchBodyScroll,
            scrollableContent: null,
            lastSetCoordinates: ZERO,
            events: new EventGroup({}),
        }); });
        var keepInBounds = (dragOptions || {}).keepInBounds;
        var isAlertRole = isAlert !== null && isAlert !== void 0 ? isAlert : (isBlocking && !isModeless);
        var layerClassName = layerProps === undefined ? '' : layerProps.className;
        var classNames = getClassNames$V(styles, {
            theme: theme,
            className: className,
            containerClassName: containerClassName,
            scrollableContentClassName: scrollableContentClassName,
            isOpen: isOpen,
            isVisible: isVisible,
            hasBeenOpened: internalState.hasBeenOpened,
            modalRectangleTop: modalRectangleTop,
            topOffsetFixed: topOffsetFixed,
            isModeless: isModeless,
            layerClassName: layerClassName,
            windowInnerHeight: win === null || win === void 0 ? void 0 : win.innerHeight,
            isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector,
        });
        var mergedLayerProps = tslib.__assign(tslib.__assign({ eventBubblingEnabled: false }, layerProps), { onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount, insertFirst: isModeless, className: classNames.layer });
        // Allow the user to scroll within the modal but not on the body
        var allowScrollOnModal = React__namespace.useCallback(function (elt) {
            if (elt) {
                if (internalState.allowTouchBodyScroll) {
                    allowOverscrollOnElement(elt, internalState.events);
                }
                else {
                    allowScrollOnElement(elt, internalState.events);
                }
            }
            else {
                internalState.events.off(internalState.scrollableContent);
            }
            internalState.scrollableContent = elt;
        }, [internalState]);
        var registerInitialModalPosition = function () {
            var dialogMain = focusTrapZoneElm.current;
            var modalRectangle = dialogMain === null || dialogMain === void 0 ? void 0 : dialogMain.getBoundingClientRect();
            if (modalRectangle) {
                if (topOffsetFixed) {
                    setModalRectangleTop(modalRectangle.top);
                }
                if (keepInBounds) {
                    // x/y are unavailable in IE, so use the equivalent left/top
                    internalState.minPosition = { x: -modalRectangle.left, y: -modalRectangle.top };
                    internalState.maxPosition = { x: modalRectangle.left, y: modalRectangle.top };
                }
            }
        };
        /**
         * Clamps an axis to a specified min and max position.
         *
         * @param axis A string that represents the axis (x/y).
         * @param position The position on the axis.
         */
        var getClampedAxis = React__namespace.useCallback(function (axis, position) {
            var minPosition = internalState.minPosition, maxPosition = internalState.maxPosition;
            if (keepInBounds && minPosition && maxPosition) {
                position = Math.max(minPosition[axis], position);
                position = Math.min(maxPosition[axis], position);
            }
            return position;
        }, [keepInBounds, internalState]);
        var handleModalClose = function () {
            var _a;
            internalState.lastSetCoordinates = ZERO;
            setModalMenuClose();
            internalState.isInKeyboardMoveMode = false;
            setIsModalOpen(false);
            setCoordinates(ZERO);
            (_a = internalState.disposeOnKeyUp) === null || _a === void 0 ? void 0 : _a.call(internalState);
            onDismissed === null || onDismissed === void 0 ? void 0 : onDismissed();
        };
        var handleDragStart = React__namespace.useCallback(function () {
            setModalMenuClose();
            internalState.isInKeyboardMoveMode = false;
        }, [internalState, setModalMenuClose]);
        var handleDrag = React__namespace.useCallback(function (ev, dragData) {
            setCoordinates(function (prevValue) { return ({
                x: getClampedAxis('x', prevValue.x + dragData.delta.x),
                y: getClampedAxis('y', prevValue.y + dragData.delta.y),
            }); });
        }, [getClampedAxis]);
        var handleDragStop = React__namespace.useCallback(function () {
            if (focusTrapZone.current) {
                focusTrapZone.current.focus();
            }
        }, []);
        var handleEnterKeyboardMoveMode = function () {
            // We need a global handleKeyDown event when we are in the move mode so that we can
            // handle the key presses and the components inside the modal do not get the events
            var handleKeyDown = function (ev) {
                // eslint-disable-next-line deprecation/deprecation
                if (ev.altKey && ev.ctrlKey && ev.keyCode === KeyCodes.space) {
                    // CTRL + ALT + SPACE is handled during keyUp
                    ev.preventDefault();
                    ev.stopPropagation();
                    return;
                }
                // eslint-disable-next-line deprecation/deprecation
                var newLocal = ev.altKey || ev.keyCode === KeyCodes.escape;
                if (isModalMenuOpen && newLocal) {
                    setModalMenuClose();
                }
                // eslint-disable-next-line deprecation/deprecation
                if (internalState.isInKeyboardMoveMode && (ev.keyCode === KeyCodes.escape || ev.keyCode === KeyCodes.enter)) {
                    internalState.isInKeyboardMoveMode = false;
                    ev.preventDefault();
                    ev.stopPropagation();
                }
                if (internalState.isInKeyboardMoveMode) {
                    var handledEvent = true;
                    var delta_1 = getMoveDelta(ev);
                    // eslint-disable-next-line deprecation/deprecation
                    switch (ev.keyCode) {
                        /* eslint-disable no-fallthrough */
                        case KeyCodes.escape:
                            setCoordinates(internalState.lastSetCoordinates);
                        case KeyCodes.enter: {
                            // TODO: determine if fallthrough was intentional
                            /* eslint-enable no-fallthrough */
                            internalState.lastSetCoordinates = ZERO;
                            // setIsInKeyboardMoveMode(false);
                            break;
                        }
                        case KeyCodes.up: {
                            setCoordinates(function (prevValue) { return ({ x: prevValue.x, y: getClampedAxis('y', prevValue.y - delta_1) }); });
                            break;
                        }
                        case KeyCodes.down: {
                            setCoordinates(function (prevValue) { return ({ x: prevValue.x, y: getClampedAxis('y', prevValue.y + delta_1) }); });
                            break;
                        }
                        case KeyCodes.left: {
                            setCoordinates(function (prevValue) { return ({ x: getClampedAxis('x', prevValue.x - delta_1), y: prevValue.y }); });
                            break;
                        }
                        case KeyCodes.right: {
                            setCoordinates(function (prevValue) { return ({ x: getClampedAxis('x', prevValue.x + delta_1), y: prevValue.y }); });
                            break;
                        }
                        default: {
                            handledEvent = false;
                        }
                    }
                    if (handledEvent) {
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                }
            };
            internalState.lastSetCoordinates = coordinates;
            setModalMenuClose();
            internalState.isInKeyboardMoveMode = true;
            internalState.events.on(win, 'keydown', handleKeyDown, true /* useCapture */);
            internalState.disposeOnKeyDown = function () {
                internalState.events.off(win, 'keydown', handleKeyDown, true /* useCapture */);
                internalState.disposeOnKeyDown = undefined;
            };
        };
        var handleExitKeyboardMoveMode = function () {
            var _a;
            internalState.lastSetCoordinates = ZERO;
            internalState.isInKeyboardMoveMode = false;
            (_a = internalState.disposeOnKeyDown) === null || _a === void 0 ? void 0 : _a.call(internalState);
        };
        var registerForKeyUp = function () {
            var handleKeyUp = function (ev) {
                // Needs to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:
                // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143
                // eslint-disable-next-line deprecation/deprecation
                if (ev.altKey && ev.ctrlKey && ev.keyCode === KeyCodes.space) {
                    if (elementContains(internalState.scrollableContent, ev.target)) {
                        toggleModalMenuOpen();
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                }
            };
            if (!internalState.disposeOnKeyUp) {
                internalState.events.on(win, 'keyup', handleKeyUp, true /* useCapture */);
                internalState.disposeOnKeyUp = function () {
                    internalState.events.off(win, 'keyup', handleKeyUp, true /* useCapture */);
                    internalState.disposeOnKeyUp = undefined;
                };
            }
        };
        React__namespace.useEffect(function () {
            clearTimeout(internalState.onModalCloseTimer);
            // Opening the dialog
            if (isOpen) {
                // This must be done after the modal content has rendered
                requestAnimationFrame(function () { return setTimeout(registerInitialModalPosition, 0); });
                setIsModalOpen(true);
                // Add a keyUp handler for all key up events once the dialog is open.
                if (dragOptions) {
                    registerForKeyUp();
                }
                internalState.hasBeenOpened = true;
                setIsVisible(true);
            }
            // Closing the dialog
            if (!isOpen && isModalOpen) {
                internalState.onModalCloseTimer = setTimeout(handleModalClose, parseFloat(animationDuration) * 1000);
                setIsVisible(false);
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run if isModalOpen or isOpen mutates.
        }, [isModalOpen, isOpen]);
        useUnmount(function () {
            internalState.events.dispose();
        });
        useComponentRef$1(props, focusTrapZone);
        useDebugWarnings(props);
        var modalContent = (React__namespace.createElement(FocusTrapZone, { id: focusTrapZoneId, ref: focusTrapZoneElm, componentRef: focusTrapZone, className: classNames.main, elementToFocusOnDismiss: elementToFocusOnDismiss, isClickableOutsideFocusTrap: isModeless || isClickableOutsideFocusTrap || !isBlocking, ignoreExternalFocusing: ignoreExternalFocusing, forceFocusInsideTrap: forceFocusInsideTrap && !isModeless, firstFocusableSelector: firstFocusableSelector, focusPreviouslyFocusedInnerElement: true, onBlur: internalState.isInKeyboardMoveMode ? handleExitKeyboardMoveMode : undefined },
            dragOptions && internalState.isInKeyboardMoveMode && (React__namespace.createElement("div", { className: classNames.keyboardMoveIconContainer }, dragOptions.keyboardMoveIconProps ? (React__namespace.createElement(Icon$1, tslib.__assign({}, dragOptions.keyboardMoveIconProps))) : (React__namespace.createElement(Icon$1, { iconName: "move", className: classNames.keyboardMoveIcon })))),
            React__namespace.createElement("div", { ref: allowScrollOnModal, className: classNames.scrollableContent, "data-is-scrollable": true },
                dragOptions && isModalMenuOpen && (React__namespace.createElement(dragOptions.menu, { items: [
                        { key: 'move', text: dragOptions.moveMenuItemText, onClick: handleEnterKeyboardMoveMode },
                        { key: 'close', text: dragOptions.closeMenuItemText, onClick: handleModalClose },
                    ], onDismiss: setModalMenuClose, alignTargetEdge: true, coverTarget: true, directionalHint: DirectionalHint.topLeftEdge, directionalHintFixed: true, shouldFocusOnMount: true, target: internalState.scrollableContent })),
                children)));
        return ((isModalOpen && modalResponsiveMode >= (responsiveMode || ResponsiveMode.small) && (React__namespace.createElement(Layer, tslib.__assign({ ref: mergedRef }, mergedLayerProps),
            React__namespace.createElement(Popup, { role: isAlertRole ? 'alertdialog' : 'dialog', ariaLabelledBy: titleAriaId, ariaDescribedBy: subtitleAriaId, onDismiss: onDismiss, shouldRestoreFocus: !ignoreExternalFocusing, 
                // Modeless modals shouldn't hide siblings.
                // Popup will automatically handle this based on the aria-modal setting.
                enableAriaHiddenSiblings: enableAriaHiddenSiblings, "aria-modal": !isModeless },
                React__namespace.createElement("div", { className: classNames.root, role: !isModeless ? 'document' : undefined },
                    !isModeless && (React__namespace.createElement(Overlay, tslib.__assign({ "aria-hidden": true, isDarkThemed: isDarkOverlay, onClick: isBlocking ? undefined : onDismiss, allowTouchBodyScroll: allowTouchBodyScroll }, overlay))),
                    dragOptions ? (React__namespace.createElement(DraggableZone, { handleSelector: dragOptions.dragHandleSelector || "#" + focusTrapZoneId, preventDragSelector: "button", onStart: handleDragStart, onDragChange: handleDrag, onStop: handleDragStop, position: coordinates }, modalContent)) : (modalContent)))))) ||
            null);
    });
    ModalBase.displayName = 'Modal';
    function useDebugWarnings(props) {
        {
            // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional
            useWarnings({
                name: 'Modal',
                props: props,
                deprecations: { onLayerDidMount: 'layerProps.onLayerDidMount' },
            });
        }
    }

    var Modal = styled(ModalBase, getStyles$a, undefined, {
        scope: 'Modal',
        fields: ['theme', 'styles', 'enableAriaHiddenSiblings'],
    });
    Modal.displayName = 'Modal';

    var getClassNames$U = classNamesFunction();
    var DialogFooterBase = /** @class */ (function (_super) {
        tslib.__extends(DialogFooterBase, _super);
        function DialogFooterBase(props) {
            var _this = _super.call(this, props) || this;
            initializeComponentRef(_this);
            return _this;
        }
        DialogFooterBase.prototype.render = function () {
            var _a = this.props, className = _a.className, styles = _a.styles, theme = _a.theme;
            this._classNames = getClassNames$U(styles, {
                theme: theme,
                className: className,
            });
            return (React__namespace.createElement("div", { className: this._classNames.actions },
                React__namespace.createElement("div", { className: this._classNames.actionsRight }, this._renderChildrenAsActions())));
        };
        DialogFooterBase.prototype._renderChildrenAsActions = function () {
            var _this = this;
            return React__namespace.Children.map(this.props.children, function (child) {
                return child ? React__namespace.createElement("span", { className: _this._classNames.action }, child) : null;
            });
        };
        return DialogFooterBase;
    }(React__namespace.Component));

    var GlobalClassNames$7 = {
        actions: 'ms-Dialog-actions',
        action: 'ms-Dialog-action',
        actionsRight: 'ms-Dialog-actionsRight',
    };
    var getStyles$8 = function (props) {
        var className = props.className, theme = props.theme;
        var classNames = getGlobalClassNames(GlobalClassNames$7, theme);
        return {
            actions: [
                classNames.actions,
                {
                    position: 'relative',
                    width: '100%',
                    minHeight: '24px',
                    lineHeight: '24px',
                    margin: '16px 0 0',
                    fontSize: '0',
                    selectors: {
                        '.ms-Button': {
                            lineHeight: 'normal',
                        },
                    },
                },
                className,
            ],
            action: [
                classNames.action,
                {
                    margin: '0 4px',
                },
            ],
            actionsRight: [
                classNames.actionsRight,
                {
                    textAlign: 'right',
                    marginRight: '-4px',
                    fontSize: '0',
                },
            ],
        };
    };

    var DialogFooter = styled(DialogFooterBase, getStyles$8, undefined, { scope: 'DialogFooter' });

    var getClassNames$T = classNamesFunction();
    var DialogFooterType = (React__namespace.createElement(DialogFooter, null)).type;
    var COMPONENT_NAME$6 = 'DialogContent';
    // eslint-disable-next-line deprecation/deprecation
    var DialogContentBase = /** @class */ (function (_super) {
        tslib.__extends(DialogContentBase, _super);
        function DialogContentBase(props) {
            var _this = _super.call(this, props) || this;
            initializeComponentRef(_this);
            warnDeprecations(COMPONENT_NAME$6, props, {
                titleId: 'titleProps.id',
            });
            return _this;
        }
        DialogContentBase.prototype.render = function () {
            var _a = this.props, showCloseButton = _a.showCloseButton, className = _a.className, closeButtonAriaLabel = _a.closeButtonAriaLabel, onDismiss = _a.onDismiss, subTextId = _a.subTextId, subText = _a.subText, _b = _a.titleProps, titleProps = _b === void 0 ? {} : _b, 
            // eslint-disable-next-line deprecation/deprecation
            titleId = _a.titleId, title = _a.title, type = _a.type, styles = _a.styles, theme = _a.theme, draggableHeaderClassName = _a.draggableHeaderClassName;
            var classNames = getClassNames$T(styles, {
                theme: theme,
                className: className,
                isLargeHeader: type === DialogType.largeHeader,
                isClose: type === DialogType.close,
                draggableHeaderClassName: draggableHeaderClassName,
            });
            var groupings = this._groupChildren();
            var subTextContent;
            if (subText) {
                subTextContent = (React__namespace.createElement("p", { className: classNames.subText, id: subTextId }, subText));
            }
            return (React__namespace.createElement("div", { className: classNames.content },
                React__namespace.createElement("div", { className: classNames.header },
                    React__namespace.createElement("div", tslib.__assign({ id: titleId, role: "heading", "aria-level": 1 }, titleProps, { className: css(classNames.title, titleProps.className) }), title),
                    React__namespace.createElement("div", { className: classNames.topButton },
                        this.props.topButtonsProps.map(function (props, index) { return (React__namespace.createElement(IconButton$1, tslib.__assign({ key: props.uniqueId || index }, props))); }),
                        (type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (React__namespace.createElement(IconButton$1, { className: classNames.button, iconProps: { iconName: 'Cancel' }, ariaLabel: closeButtonAriaLabel, onClick: onDismiss })))),
                React__namespace.createElement("div", { className: classNames.inner },
                    React__namespace.createElement("div", { className: classNames.innerContent },
                        subTextContent,
                        groupings.contents),
                    groupings.footers)));
        };
        // @TODO - typing the footers as an array of DialogFooter is difficult because
        // casing "child as DialogFooter" causes a problem because
        // "Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other."
        DialogContentBase.prototype._groupChildren = function () {
            var groupings = {
                footers: [],
                contents: [],
            };
            React__namespace.Children.map(this.props.children, function (child) {
                if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {
                    groupings.footers.push(child);
                }
                else {
                    groupings.contents.push(child);
                }
            });
            return groupings;
        };
        DialogContentBase.defaultProps = {
            showCloseButton: false,
            className: '',
            topButtonsProps: [],
            closeButtonAriaLabel: 'Close',
        };
        DialogContentBase = tslib.__decorate([
            withResponsiveMode
        ], DialogContentBase);
        return DialogContentBase;
    }(React__namespace.Component));

    var GlobalClassNames$6 = {
        contentLgHeader: 'ms-Dialog-lgHeader',
        close: 'ms-Dialog--close',
        subText: 'ms-Dialog-subText',
        header: 'ms-Dialog-header',
        headerLg: 'ms-Dialog--lgHeader',
        button: 'ms-Dialog-button ms-Dialog-button--close',
        inner: 'ms-Dialog-inner',
        content: 'ms-Dialog-content',
        title: 'ms-Dialog-title',
    };
    var getStyles$7 = function (props) {
        var _a, _b, _c;
        var className = props.className, theme = props.theme, isLargeHeader = props.isLargeHeader, isClose = props.isClose, hidden = props.hidden, isMultiline = props.isMultiline, draggableHeaderClassName = props.draggableHeaderClassName;
        var palette = theme.palette, fonts = theme.fonts, effects = theme.effects, semanticColors = theme.semanticColors;
        var classNames = getGlobalClassNames(GlobalClassNames$6, theme);
        return {
            content: [
                isLargeHeader && [
                    classNames.contentLgHeader,
                    {
                        borderTop: "4px solid " + palette.themePrimary,
                    },
                ],
                isClose && classNames.close,
                {
                    flexGrow: 1,
                    overflowY: 'hidden', // required for allowScrollOnElement
                },
                className,
            ],
            subText: [
                classNames.subText,
                fonts.medium,
                {
                    margin: '0 0 24px 0',
                    color: semanticColors.bodySubtext,
                    lineHeight: '1.5',
                    wordWrap: 'break-word',
                    fontWeight: FontWeights.regular,
                },
            ],
            header: [
                classNames.header,
                {
                    position: 'relative',
                    width: '100%',
                    boxSizing: 'border-box',
                },
                isClose && classNames.close,
                draggableHeaderClassName && [
                    draggableHeaderClassName,
                    {
                        cursor: 'move',
                    },
                ],
            ],
            button: [
                classNames.button,
                hidden && {
                    selectors: {
                        '.ms-Icon.ms-Icon--Cancel': {
                            color: semanticColors.buttonText,
                            fontSize: IconFontSizes.medium,
                        },
                    },
                },
            ],
            inner: [
                classNames.inner,
                {
                    padding: '0 24px 24px',
                    selectors: (_a = {},
                        _a["@media (min-width: " + ScreenWidthMinSmall + "px) and (max-width: " + ScreenWidthMaxSmall + "px)"] = {
                            padding: '0 16px 16px',
                        },
                        _a),
                },
            ],
            innerContent: [
                classNames.content,
                {
                    position: 'relative',
                    width: '100%',
                },
            ],
            title: [
                classNames.title,
                fonts.xLarge,
                {
                    color: semanticColors.bodyText,
                    margin: '0',
                    minHeight: fonts.xLarge.fontSize,
                    padding: '16px 46px 20px 24px',
                    lineHeight: 'normal',
                    selectors: (_b = {},
                        _b["@media (min-width: " + ScreenWidthMinSmall + "px) and (max-width: " + ScreenWidthMaxSmall + "px)"] = {
                            padding: '16px 46px 16px 16px',
                        },
                        _b),
                },
                isLargeHeader && {
                    color: semanticColors.menuHeader,
                },
                isMultiline && { fontSize: fonts.xxLarge.fontSize },
            ],
            topButton: [
                {
                    display: 'flex',
                    flexDirection: 'row',
                    flexWrap: 'nowrap',
                    position: 'absolute',
                    top: '0',
                    right: '0',
                    padding: '15px 15px 0 0',
                    selectors: (_c = {
                            '> *': {
                                flex: '0 0 auto',
                            },
                            '.ms-Dialog-button': {
                                color: semanticColors.buttonText,
                            },
                            '.ms-Dialog-button:hover': {
                                color: semanticColors.buttonTextHovered,
                                borderRadius: effects.roundedCorner2,
                            }
                        },
                        _c["@media (min-width: " + ScreenWidthMinSmall + "px) and (max-width: " + ScreenWidthMaxSmall + "px)"] = {
                            padding: '15px 8px 0 0',
                        },
                        _c),
                },
            ],
        };
    };

    var DialogContent = styled(DialogContentBase, getStyles$7, undefined, { scope: 'DialogContent' });

    var getClassNames$S = classNamesFunction();
    var DefaultModalProps = {
        isDarkOverlay: false,
        isBlocking: false,
        className: '',
        containerClassName: '',
        topOffsetFixed: false,
        enableAriaHiddenSiblings: true,
    };
    var DefaultDialogContentProps = {
        type: DialogType.normal,
        className: '',
        topButtonsProps: [],
    };
    // eslint-disable-next-line deprecation/deprecation
    var DialogBase = /** @class */ (function (_super) {
        tslib.__extends(DialogBase, _super);
        function DialogBase(props) {
            var _this = _super.call(this, props) || this;
            _this._getSubTextId = function () {
                // eslint-disable-next-line deprecation/deprecation
                var _a = _this.props, ariaDescribedById = _a.ariaDescribedById, modalProps = _a.modalProps, dialogContentProps = _a.dialogContentProps, subText = _a.subText;
                var id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;
                if (!id) {
                    id = ((dialogContentProps && dialogContentProps.subText) || subText) && _this._defaultSubTextId;
                }
                return id;
            };
            _this._getTitleTextId = function () {
                // eslint-disable-next-line deprecation/deprecation
                var _a = _this.props, ariaLabelledById = _a.ariaLabelledById, modalProps = _a.modalProps, dialogContentProps = _a.dialogContentProps, title = _a.title;
                var id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;
                if (!id) {
                    id = ((dialogContentProps && dialogContentProps.title) || title) && _this._defaultTitleTextId;
                }
                return id;
            };
            _this._id = getId('Dialog');
            _this._defaultTitleTextId = _this._id + '-title';
            _this._defaultSubTextId = _this._id + '-subText';
            {
                warnDeprecations('Dialog', props, {
                    isOpen: 'hidden',
                    type: 'dialogContentProps.type',
                    subText: 'dialogContentProps.subText',
                    contentClassName: 'dialogContentProps.className',
                    topButtonsProps: 'dialogContentProps.topButtonsProps',
                    className: 'modalProps.className',
                    isDarkOverlay: 'modalProps.isDarkOverlay',
                    isBlocking: 'modalProps.isBlocking',
                    containerClassName: 'modalProps.containerClassName',
                    onDismissed: 'modalProps.onDismissed',
                    onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',
                    ariaDescribedById: 'modalProps.subtitleAriaId',
                    ariaLabelledById: 'modalProps.titleAriaId',
                });
            }
            return _this;
        }
        DialogBase.prototype.render = function () {
            var _a, _b;
            var props = this.props;
            var 
            /* eslint-disable deprecation/deprecation */
            className = props.className, containerClassName = props.containerClassName, contentClassName = props.contentClassName, elementToFocusOnDismiss = props.elementToFocusOnDismiss, firstFocusableSelector = props.firstFocusableSelector, forceFocusInsideTrap = props.forceFocusInsideTrap, styles = props.styles, hidden = props.hidden, ignoreExternalFocusing = props.ignoreExternalFocusing, isBlocking = props.isBlocking, isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap, isDarkOverlay = props.isDarkOverlay, _c = props.isOpen, isOpen = _c === void 0 ? !hidden : _c, onDismiss = props.onDismiss, onDismissed = props.onDismissed, onLayerDidMount = props.onLayerDidMount, responsiveMode = props.responsiveMode, subText = props.subText, theme = props.theme, title = props.title, topButtonsProps = props.topButtonsProps, type = props.type, 
            /* eslint-enable deprecation/deprecation */
            minWidth = props.minWidth, maxWidth = props.maxWidth, modalProps = props.modalProps;
            var mergedLayerProps = tslib.__assign({ onLayerDidMount: onLayerDidMount }, modalProps === null || modalProps === void 0 ? void 0 : modalProps.layerProps);
            var dialogDraggableClassName;
            var dragOptions = modalProps === null || modalProps === void 0 ? void 0 : modalProps.dragOptions;
            // if we are draggable, make sure we are using the correct
            // draggable classname and selectors
            if (dragOptions && !dragOptions.dragHandleSelector) {
                dialogDraggableClassName = 'ms-Dialog-draggable-header';
                dragOptions.dragHandleSelector = "." + dialogDraggableClassName;
            }
            var mergedModalProps = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, DefaultModalProps), { elementToFocusOnDismiss: elementToFocusOnDismiss, firstFocusableSelector: firstFocusableSelector, forceFocusInsideTrap: forceFocusInsideTrap, ignoreExternalFocusing: ignoreExternalFocusing, isClickableOutsideFocusTrap: isClickableOutsideFocusTrap, responsiveMode: responsiveMode, className: className, containerClassName: containerClassName, isBlocking: isBlocking, isDarkOverlay: isDarkOverlay, onDismissed: onDismissed }), modalProps), { layerProps: mergedLayerProps, dragOptions: dragOptions, isOpen: isOpen });
            var dialogContentProps = tslib.__assign(tslib.__assign(tslib.__assign({ className: contentClassName, subText: subText, title: title, topButtonsProps: topButtonsProps, type: type }, DefaultDialogContentProps), props.dialogContentProps), { draggableHeaderClassName: dialogDraggableClassName, titleProps: tslib.__assign({ 
                    // eslint-disable-next-line deprecation/deprecation
                    id: ((_a = props.dialogContentProps) === null || _a === void 0 ? void 0 : _a.titleId) || this._defaultTitleTextId }, (_b = props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleProps) });
            var classNames = getClassNames$S(styles, {
                theme: theme,
                className: mergedModalProps.className,
                containerClassName: mergedModalProps.containerClassName,
                hidden: hidden,
                dialogDefaultMinWidth: minWidth,
                dialogDefaultMaxWidth: maxWidth,
            });
            return (React__namespace.createElement(Modal, tslib.__assign({}, mergedModalProps, { className: classNames.root, containerClassName: classNames.main, onDismiss: onDismiss || mergedModalProps.onDismiss, subtitleAriaId: this._getSubTextId(), titleAriaId: this._getTitleTextId() }),
                React__namespace.createElement(DialogContent, tslib.__assign({ subTextId: this._defaultSubTextId, showCloseButton: mergedModalProps.isBlocking, onDismiss: onDismiss }, dialogContentProps), props.children)));
        };
        DialogBase.defaultProps = {
            hidden: true,
        };
        DialogBase = tslib.__decorate([
            withResponsiveMode
        ], DialogBase);
        return DialogBase;
    }(React__namespace.Component));

    var GlobalClassNames$5 = {
        root: 'ms-Dialog',
    };
    var getStyles$6 = function (props) {
        var _a;
        var className = props.className, containerClassName = props.containerClassName, // eslint-disable-line deprecation/deprecation
        _b = props.dialogDefaultMinWidth, // eslint-disable-line deprecation/deprecation
        dialogDefaultMinWidth = _b === void 0 ? '288px' : _b, _c = props.dialogDefaultMaxWidth, dialogDefaultMaxWidth = _c === void 0 ? '340px' : _c, hidden = props.hidden, theme = props.theme;
        var classNames = getGlobalClassNames(GlobalClassNames$5, theme);
        return {
            root: [classNames.root, theme.fonts.medium, className],
            main: [
                {
                    width: dialogDefaultMinWidth,
                    outline: '3px solid transparent',
                    selectors: (_a = {},
                        _a["@media (min-width: " + ScreenWidthMinMedium + "px)"] = {
                            width: 'auto',
                            maxWidth: dialogDefaultMaxWidth,
                            minWidth: dialogDefaultMinWidth,
                        },
                        _a),
                },
                !hidden && { display: 'flex' },
                containerClassName,
            ],
        };
    };

    var Dialog$1 = styled(DialogBase, getStyles$6, undefined, { scope: 'Dialog' });
    Dialog$1.displayName = 'Dialog';

    /**
     * A utility class to cache size and position in cache.
     *
     * Dropdown options has non-selectable display types. It is therefore not cheap to determine
     * the total number of actual selectable options as well as the position an option is in the
     * list of options - O(n) cost for each lookup.
     *
     * Given that we potentially have to make this determination on every single render pass, this
     * cache should provide a little bit of relief.
     */
    var DropdownSizePosCache = /** @class */ (function () {
        function DropdownSizePosCache() {
            this._size = 0;
        }
        /**
         * Invalidates the cache and recalculate the size of selectable options.
         */
        DropdownSizePosCache.prototype.updateOptions = function (options) {
            var displayOnlyOptionsCache = [];
            var size = 0;
            for (var i = 0; i < options.length; i++) {
                if (options[i].itemType === SelectableOptionMenuItemType.Divider || options[i].itemType === SelectableOptionMenuItemType.Header) {
                    displayOnlyOptionsCache.push(i);
                }
                else if (!options[i].hidden) {
                    size++;
                }
            }
            this._size = size;
            this._displayOnlyOptionsCache = displayOnlyOptionsCache;
            this._cachedOptions = tslib.__spreadArray([], options);
        };
        Object.defineProperty(DropdownSizePosCache.prototype, "optionSetSize", {
            /**
             * The size of all the selectable options.
             */
            get: function () {
                return this._size;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DropdownSizePosCache.prototype, "cachedOptions", {
            /**
             * The chached options array.
             */
            get: function () {
                return this._cachedOptions;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the position of this option element relative to the full set of selectable option elements.
         * Note: the first selectable element is position 1 in the set.
         * @param index The raw index of the option element.
         */
        DropdownSizePosCache.prototype.positionInSet = function (index) {
            if (index === undefined) {
                return undefined;
            }
            // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that
            // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.
            var offset = 0;
            while (index > this._displayOnlyOptionsCache[offset]) {
                offset++;
            }
            if (this._displayOnlyOptionsCache[offset] === index) {
                throw new Error("Unexpected: Option at index " + index + " is not a selectable element.");
            }
            return index - offset + 1;
        };
        return DropdownSizePosCache;
    }());

    /**
     * {@docCategory Panel}
     */
    var PanelType;
    (function (PanelType) {
        /**
         * Renders the Panel with a `fluid` (full screen) width.
         * Recommended for use on small screen breakpoints.
         * - Small (320-479): full screen width, 16px left/right padding
         * - Medium (480-639): full screen width, 16px left/right padding
         * - Large (640-1023): full screen width, 32px left/right padding
         * - XLarge (1024-1365): full screen width, 32px left/right padding
         * - XXLarge (1366-up): full screen width, 40px left/right padding
         */
        PanelType[PanelType["smallFluid"] = 0] = "smallFluid";
        /**
         * Renders the Panel in fixed-width `small` size, anchored to the far side (right in LTR mode).
         * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint
         * - Medium (480-639): 340px width, 16px left/right padding
         * - Large (640-1023): 340px width, 32px left/right padding
         * - XLarge (1024-1365): 340px width, 32px left/right padding
         * - XXLarge (1366-up): 340px width, 40px left/right padding
         */
        PanelType[PanelType["smallFixedFar"] = 1] = "smallFixedFar";
        /**
         * Renders the Panel in fixed-width `small` size, anchored to the near side (left in LTR mode).
         * - Small (320-479): 272px width, 16px left/right padding
         * - Medium (480-639): 272px width, 16px left/right padding
         * - Large (640-1023): 272px width, 32px left/right padding
         * - XLarge (1024-1365): 272px width, 32px left/right padding
         * - XXLarge (1366-up): 272px width, 40px left/right padding
         */
        PanelType[PanelType["smallFixedNear"] = 2] = "smallFixedNear";
        /**
         * Renders the Panel in `medium` size, anchored to the far side (right in LTR mode).
         * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint
         * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint
         * - Large (640-1023): 592px width, 32px left/right padding
         * - XLarge (1024-1365): 644px width, 32px left/right padding
         * - XXLarge (1366-up): 644px width, 40px left/right padding
         */
        PanelType[PanelType["medium"] = 3] = "medium";
        /**
         * Renders the Panel in `large` size, anchored to the far side (right in LTR mode).
         * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint
         * - Medium (480-639):  adapts to `PanelType.smallFixedFar` at this breakpoint
         * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint
         * - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding
         * - XXLarge (1366-up): 428px fixed left margin, fluid width, 40px left/right padding
         */
        PanelType[PanelType["large"] = 4] = "large";
        /**
         * Renders the Panel in `large` size, anchored to the far side (right in LTR mode), with a fixed width at
         * XX-Large breakpoint.
         * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint
         * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint
         * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint
         * - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding
         * - XXLarge (1366-up): 940px width, 40px left/right padding
         */
        PanelType[PanelType["largeFixed"] = 5] = "largeFixed";
        /**
         * Renders the Panel in `extra large` size, anchored to the far side (right in LTR mode).
         * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint
         * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint
         * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint
         * - XLarge (1024-1365): adapts to `PanelType.large` at this breakpoint
         * - XXLarge (1366-1919): 176px fixed left margin, fluid width, 40px left/right padding
         * - XXXLarge (1920-up): 176px fixed left margin, fluid width, 40px left/right padding
         */
        PanelType[PanelType["extraLarge"] = 6] = "extraLarge";
        /**
         * Renders the Panel in `custom` size using `customWidth`, anchored to the far side (right in LTR mode).
         * - Has a fixed width provided by the `customWidth` prop
         * - When screen width reaches the `customWidth` value it will behave like a fluid width Panel
         * taking up 100% of the viewport width
         */
        PanelType[PanelType["custom"] = 7] = "custom";
        /**
         * Renders the Panel in `custom` size using `customWidth`, anchored to the near side (left in LTR mode).
         * - Has a fixed width provided by the `customWidth` prop
         * - When screen width reaches the `customWidth` value it will behave like a fluid width Panel
         * taking up 100% of the viewport width
         */
        PanelType[PanelType["customNear"] = 8] = "customNear";
    })(PanelType || (PanelType = {}));

    var getClassNames$R = classNamesFunction();
    var COMPONENT_NAME$5 = 'Panel';
    var PanelVisibilityState;
    (function (PanelVisibilityState) {
        PanelVisibilityState[PanelVisibilityState["closed"] = 0] = "closed";
        PanelVisibilityState[PanelVisibilityState["animatingOpen"] = 1] = "animatingOpen";
        PanelVisibilityState[PanelVisibilityState["open"] = 2] = "open";
        PanelVisibilityState[PanelVisibilityState["animatingClosed"] = 3] = "animatingClosed";
    })(PanelVisibilityState || (PanelVisibilityState = {}));
    var PanelBase = /** @class */ (function (_super) {
        tslib.__extends(PanelBase, _super);
        function PanelBase(props) {
            var _this = _super.call(this, props) || this;
            _this._panel = React__namespace.createRef();
            _this._animationCallback = null;
            _this._hasCustomNavigation = !!(_this.props.onRenderNavigation || _this.props.onRenderNavigationContent);
            _this.dismiss = function (ev) {
                if (_this.props.onDismiss && _this.isActive) {
                    _this.props.onDismiss(ev);
                }
                if (!ev || (ev && !ev.defaultPrevented)) {
                    _this.close();
                }
            };
            // Allow the user to scroll within the panel but not on the body
            _this._allowScrollOnPanel = function (elt) {
                if (elt) {
                    if (_this._allowTouchBodyScroll) {
                        allowOverscrollOnElement(elt, _this._events);
                    }
                    else {
                        allowScrollOnElement(elt, _this._events);
                    }
                }
                else {
                    _this._events.off(_this._scrollableContent);
                }
                _this._scrollableContent = elt;
            };
            _this._onRenderNavigation = function (props) {
                if (!_this.props.onRenderNavigationContent && !_this.props.onRenderNavigation && !_this.props.hasCloseButton) {
                    return null;
                }
                var _a = _this.props.onRenderNavigationContent, onRenderNavigationContent = _a === void 0 ? _this._onRenderNavigationContent : _a;
                return (React__namespace.createElement("div", { className: _this._classNames.navigation }, onRenderNavigationContent(props, _this._onRenderNavigationContent)));
            };
            _this._onRenderNavigationContent = function (props) {
                var _a;
                var closeButtonAriaLabel = props.closeButtonAriaLabel, hasCloseButton = props.hasCloseButton, _b = props.onRenderHeader, onRenderHeader = _b === void 0 ? _this._onRenderHeader : _b;
                if (hasCloseButton) {
                    var iconButtonStyles = (_a = _this._classNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.closeButton();
                    return (React__namespace.createElement(React__namespace.Fragment, null,
                        !_this._hasCustomNavigation && onRenderHeader(_this.props, _this._onRenderHeader, _this._headerTextId),
                        React__namespace.createElement(IconButton$1, { styles: iconButtonStyles, className: _this._classNames.closeButton, onClick: _this._onPanelClick, ariaLabel: closeButtonAriaLabel, title: closeButtonAriaLabel, "data-is-visible": true, iconProps: { iconName: 'Cancel' } })));
                }
                return null;
            };
            _this._onRenderHeader = function (props, defaultRender, headerTextId) {
                var headerText = props.headerText, _a = props.headerTextProps, headerTextProps = _a === void 0 ? {} : _a;
                if (headerText) {
                    return (React__namespace.createElement("div", { className: _this._classNames.header },
                        React__namespace.createElement("div", tslib.__assign({ id: headerTextId, role: "heading", "aria-level": 1 }, headerTextProps, { className: css(_this._classNames.headerText, headerTextProps.className) }), headerText)));
                }
                return null;
            };
            _this._onRenderBody = function (props) {
                return React__namespace.createElement("div", { className: _this._classNames.content }, props.children);
            };
            _this._onRenderFooter = function (props) {
                var _a = _this.props.onRenderFooterContent, onRenderFooterContent = _a === void 0 ? null : _a;
                if (onRenderFooterContent) {
                    return (React__namespace.createElement("div", { className: _this._classNames.footer },
                        React__namespace.createElement("div", { className: _this._classNames.footerInner }, onRenderFooterContent())));
                }
                return null;
            };
            _this._animateTo = function (newVisibilityState) {
                if (newVisibilityState === PanelVisibilityState.open && _this.props.onOpen) {
                    _this.props.onOpen();
                }
                _this._animationCallback = _this._async.setTimeout(function () {
                    _this.setState({ visibility: newVisibilityState });
                    _this._onTransitionComplete();
                }, 200);
            };
            _this._clearExistingAnimationTimer = function () {
                if (_this._animationCallback !== null) {
                    _this._async.clearTimeout(_this._animationCallback);
                }
            };
            _this._onPanelClick = function (ev) {
                _this.dismiss(ev);
            };
            _this._onTransitionComplete = function () {
                _this._updateFooterPosition();
                if (_this.state.visibility === PanelVisibilityState.open && _this.props.onOpened) {
                    _this.props.onOpened();
                }
                if (_this.state.visibility === PanelVisibilityState.closed && _this.props.onDismissed) {
                    _this.props.onDismissed();
                }
            };
            var _a = _this.props.allowTouchBodyScroll, allowTouchBodyScroll = _a === void 0 ? false : _a;
            _this._allowTouchBodyScroll = allowTouchBodyScroll;
            _this._async = new Async(_this);
            _this._events = new EventGroup(_this);
            initializeComponentRef(_this);
            warnDeprecations(COMPONENT_NAME$5, props, {
                ignoreExternalFocusing: 'focusTrapZoneProps',
                forceFocusInsideTrap: 'focusTrapZoneProps',
                firstFocusableSelector: 'focusTrapZoneProps',
            });
            _this.state = {
                isFooterSticky: false,
                // intentionally ignore props so animation takes place during componentDidMount
                visibility: PanelVisibilityState.closed,
                id: getId('Panel'),
            };
            return _this;
        }
        PanelBase.getDerivedStateFromProps = function (nextProps, prevState) {
            if (nextProps.isOpen === undefined) {
                return null; // no state update
            }
            if (nextProps.isOpen &&
                (prevState.visibility === PanelVisibilityState.closed ||
                    prevState.visibility === PanelVisibilityState.animatingClosed)) {
                return { visibility: PanelVisibilityState.animatingOpen };
            }
            if (!nextProps.isOpen &&
                (prevState.visibility === PanelVisibilityState.open ||
                    prevState.visibility === PanelVisibilityState.animatingOpen)) {
                return { visibility: PanelVisibilityState.animatingClosed };
            }
            return null;
        };
        PanelBase.prototype.componentDidMount = function () {
            this._events.on(window, 'resize', this._updateFooterPosition);
            if (this._shouldListenForOuterClick(this.props)) {
                this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);
            }
            if (this.props.isOpen) {
                this.setState({ visibility: PanelVisibilityState.animatingOpen });
            }
        };
        PanelBase.prototype.componentDidUpdate = function (previousProps, previousState) {
            var shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);
            var previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);
            if (this.state.visibility !== previousState.visibility) {
                this._clearExistingAnimationTimer();
                if (this.state.visibility === PanelVisibilityState.animatingOpen) {
                    this._animateTo(PanelVisibilityState.open);
                }
                else if (this.state.visibility === PanelVisibilityState.animatingClosed) {
                    this._animateTo(PanelVisibilityState.closed);
                }
            }
            if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {
                this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);
            }
            else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {
                this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);
            }
        };
        PanelBase.prototype.componentWillUnmount = function () {
            this._async.dispose();
            this._events.dispose();
        };
        PanelBase.prototype.render = function () {
            var _a = this.props, _b = _a.className, className = _b === void 0 ? '' : _b, elementToFocusOnDismiss = _a.elementToFocusOnDismiss, 
            /* eslint-disable deprecation/deprecation */
            firstFocusableSelector = _a.firstFocusableSelector, focusTrapZoneProps = _a.focusTrapZoneProps, forceFocusInsideTrap = _a.forceFocusInsideTrap, hasCloseButton = _a.hasCloseButton, headerText = _a.headerText, _c = _a.headerClassName, headerClassName = _c === void 0 ? '' : _c, ignoreExternalFocusing = _a.ignoreExternalFocusing, isBlocking = _a.isBlocking, isFooterAtBottom = _a.isFooterAtBottom, isLightDismiss = _a.isLightDismiss, isHiddenOnDismiss = _a.isHiddenOnDismiss, layerProps = _a.layerProps, overlayProps = _a.overlayProps, popupProps = _a.popupProps, type = _a.type, styles = _a.styles, theme = _a.theme, customWidth = _a.customWidth, _d = _a.onLightDismissClick, onLightDismissClick = _d === void 0 ? this._onPanelClick : _d, _e = _a.onRenderNavigation, onRenderNavigation = _e === void 0 ? this._onRenderNavigation : _e, _f = _a.onRenderHeader, onRenderHeader = _f === void 0 ? this._onRenderHeader : _f, _g = _a.onRenderBody, onRenderBody = _g === void 0 ? this._onRenderBody : _g, _h = _a.onRenderFooter, onRenderFooter = _h === void 0 ? this._onRenderFooter : _h;
            var _j = this.state, isFooterSticky = _j.isFooterSticky, visibility = _j.visibility, id = _j.id;
            var isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;
            var isRTL = getRTL(theme);
            var isOnRightSide = isRTL ? isLeft : !isLeft;
            var customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? { width: customWidth } : {};
            var nativeProps = getNativeProps(this.props, divProperties);
            var isOpen = this.isActive;
            var isAnimating = visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;
            this._headerTextId = headerText && id + '-headerText';
            if (!isOpen && !isAnimating && !isHiddenOnDismiss) {
                return null;
            }
            this._classNames = getClassNames$R(styles, {
                theme: theme,
                className: className,
                focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,
                hasCloseButton: hasCloseButton,
                headerClassName: headerClassName,
                isAnimating: isAnimating,
                isFooterSticky: isFooterSticky,
                isFooterAtBottom: isFooterAtBottom,
                isOnRightSide: isOnRightSide,
                isOpen: isOpen,
                isHiddenOnDismiss: isHiddenOnDismiss,
                type: type,
                hasCustomNavigation: this._hasCustomNavigation,
            });
            var _k = this, _classNames = _k._classNames, _allowTouchBodyScroll = _k._allowTouchBodyScroll;
            var overlay;
            if (isBlocking && isOpen) {
                overlay = (React__namespace.createElement(Overlay, tslib.__assign({ className: _classNames.overlay, isDarkThemed: false, onClick: isLightDismiss ? onLightDismissClick : undefined, allowTouchBodyScroll: _allowTouchBodyScroll }, overlayProps)));
            }
            return (React__namespace.createElement(Layer, tslib.__assign({}, layerProps),
                React__namespace.createElement(Popup, tslib.__assign({ role: "dialog", "aria-modal": isBlocking ? 'true' : undefined, ariaLabelledBy: this._headerTextId ? this._headerTextId : undefined, onDismiss: this.dismiss, className: _classNames.hiddenPanel, enableAriaHiddenSiblings: isOpen ? true : undefined }, popupProps),
                    React__namespace.createElement("div", tslib.__assign({ "aria-hidden": !isOpen && isAnimating }, nativeProps, { ref: this._panel, className: _classNames.root }),
                        overlay,
                        React__namespace.createElement(FocusTrapZone, tslib.__assign({ ignoreExternalFocusing: ignoreExternalFocusing, forceFocusInsideTrap: !isBlocking || (isHiddenOnDismiss && !isOpen) ? false : forceFocusInsideTrap, firstFocusableSelector: firstFocusableSelector, isClickableOutsideFocusTrap: true }, focusTrapZoneProps, { className: _classNames.main, style: customWidthStyles, elementToFocusOnDismiss: elementToFocusOnDismiss }),
                            React__namespace.createElement("div", { className: _classNames.contentInner },
                                React__namespace.createElement("div", { ref: this._allowScrollOnPanel, className: _classNames.scrollableContent, "data-is-scrollable": true },
                                    React__namespace.createElement("div", { className: _classNames.commands, "data-is-visible": true }, onRenderNavigation(this.props, this._onRenderNavigation)),
                                    (this._hasCustomNavigation || !hasCloseButton) &&
                                        onRenderHeader(this.props, this._onRenderHeader, this._headerTextId),
                                    onRenderBody(this.props, this._onRenderBody),
                                    onRenderFooter(this.props, this._onRenderFooter))))))));
        };
        PanelBase.prototype.open = function () {
            if (this.props.isOpen !== undefined) {
                return;
            }
            if (this.isActive) {
                return;
            }
            this.setState({ visibility: PanelVisibilityState.animatingOpen });
        };
        PanelBase.prototype.close = function () {
            if (this.props.isOpen !== undefined) {
                return;
            }
            if (!this.isActive) {
                return;
            }
            this.setState({ visibility: PanelVisibilityState.animatingClosed });
        };
        Object.defineProperty(PanelBase.prototype, "isActive", {
            /** isActive is true when panel is open or opening. */
            get: function () {
                return (this.state.visibility === PanelVisibilityState.open ||
                    this.state.visibility === PanelVisibilityState.animatingOpen);
            },
            enumerable: false,
            configurable: true
        });
        PanelBase.prototype._shouldListenForOuterClick = function (props) {
            return !!props.isBlocking && !!props.isOpen;
        };
        PanelBase.prototype._updateFooterPosition = function () {
            var scrollableContent = this._scrollableContent;
            if (scrollableContent) {
                var height = scrollableContent.clientHeight;
                var innerHeight_1 = scrollableContent.scrollHeight;
                this.setState({
                    isFooterSticky: height < innerHeight_1 ? true : false,
                });
            }
        };
        PanelBase.prototype._dismissOnOuterClick = function (ev) {
            var panel = this._panel.current;
            if (this.isActive && panel && !ev.defaultPrevented) {
                if (!elementContains(panel, ev.target)) {
                    if (this.props.onOuterClick) {
                        this.props.onOuterClick(ev);
                    }
                    else {
                        this.dismiss(ev);
                    }
                }
            }
        };
        PanelBase.defaultProps = {
            isHiddenOnDismiss: false,
            isOpen: undefined,
            isBlocking: true,
            hasCloseButton: true,
            type: PanelType.smallFixedFar,
        };
        return PanelBase;
    }(React__namespace.Component));

    var _a$3, _b$2, _c$2, _d, _e;
    var GlobalClassNames$4 = {
        root: 'ms-Panel',
        main: 'ms-Panel-main',
        commands: 'ms-Panel-commands',
        contentInner: 'ms-Panel-contentInner',
        scrollableContent: 'ms-Panel-scrollableContent',
        navigation: 'ms-Panel-navigation',
        closeButton: 'ms-Panel-closeButton ms-PanelAction-close',
        header: 'ms-Panel-header',
        headerText: 'ms-Panel-headerText',
        content: 'ms-Panel-content',
        footer: 'ms-Panel-footer',
        footerInner: 'ms-Panel-footerInner',
        isOpen: 'is-open',
        hasCloseButton: 'ms-Panel--hasCloseButton',
        smallFluid: 'ms-Panel--smFluid',
        smallFixedNear: 'ms-Panel--smLeft',
        smallFixedFar: 'ms-Panel--sm',
        medium: 'ms-Panel--md',
        large: 'ms-Panel--lg',
        largeFixed: 'ms-Panel--fixed',
        extraLarge: 'ms-Panel--xl',
        custom: 'ms-Panel--custom',
        customNear: 'ms-Panel--customLeft',
    };
    var panelWidth = {
        full: '100%',
        auto: 'auto',
        xs: 272,
        sm: 340,
        md1: 592,
        md2: 644,
        lg: 940,
    };
    var panelMargin = {
        auto: 'auto',
        none: 0,
        md: 48,
        lg: 428,
        xl: 176,
    };
    // Following consts are used below in `getPanelBreakpoints()` function to provide
    // necessary fallbacks for different types of Panel in different breakpoints.
    var smallPanelSelectors = (_a$3 = {},
        _a$3["@media (min-width: " + ScreenWidthMinMedium + "px)"] = {
            width: panelWidth.sm,
        },
        _a$3);
    var mediumPanelSelectors = (_b$2 = {},
        _b$2["@media (min-width: " + ScreenWidthMinLarge + "px)"] = {
            width: panelWidth.md1,
        },
        _b$2["@media (min-width: " + ScreenWidthMinXLarge + "px)"] = {
            width: panelWidth.md2,
        },
        _b$2);
    var largePanelSelectors = (_c$2 = {},
        _c$2["@media (min-width: " + ScreenWidthMinUhfMobile + "px)"] = {
            left: panelMargin.md,
            width: panelWidth.auto,
        },
        _c$2["@media (min-width: " + ScreenWidthMinXXLarge + "px)"] = {
            left: panelMargin.lg,
        },
        _c$2);
    var largeFixedPanelSelectors = (_d = {},
        _d["@media (min-width: " + ScreenWidthMinXXLarge + "px)"] = {
            left: panelMargin.auto,
            width: panelWidth.lg,
        },
        _d);
    var extraLargePanelSelectors = (_e = {},
        _e["@media (min-width: " + ScreenWidthMinXXLarge + "px)"] = {
            left: panelMargin.xl,
        },
        _e);
    // Make sure Panels have fallbacks to different breakpoints by reusing same selectors.
    // This is done in the effort to follow design redlines.
    var getPanelBreakpoints = function (type) {
        var selectors;
        // Panel types `smallFluid`, `smallFixedNear`, `custom` and `customNear`
        // are not checked in here because they render the same in all the breakpoints
        // and have the checks done separately in the `getStyles` function below.
        switch (type) {
            case PanelType.smallFixedFar:
                selectors = tslib.__assign({}, smallPanelSelectors);
                break;
            case PanelType.medium:
                selectors = tslib.__assign(tslib.__assign({}, smallPanelSelectors), mediumPanelSelectors);
                break;
            case PanelType.large:
                selectors = tslib.__assign(tslib.__assign(tslib.__assign({}, smallPanelSelectors), mediumPanelSelectors), largePanelSelectors);
                break;
            case PanelType.largeFixed:
                selectors = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, smallPanelSelectors), mediumPanelSelectors), largePanelSelectors), largeFixedPanelSelectors);
                break;
            case PanelType.extraLarge:
                selectors = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, smallPanelSelectors), mediumPanelSelectors), largePanelSelectors), extraLargePanelSelectors);
                break;
        }
        return selectors;
    };
    var commandBarHeight = '44px';
    var sharedPaddingStyles = {
        paddingLeft: '24px',
        paddingRight: '24px',
    };
    var getStyles$5 = function (props) {
        var _a, _b, _c, _d;
        var className = props.className, focusTrapZoneClassName = props.focusTrapZoneClassName, hasCloseButton = props.hasCloseButton, headerClassName = props.headerClassName, isAnimating = props.isAnimating, isFooterSticky = props.isFooterSticky, isFooterAtBottom = props.isFooterAtBottom, isOnRightSide = props.isOnRightSide, isOpen = props.isOpen, isHiddenOnDismiss = props.isHiddenOnDismiss, hasCustomNavigation = props.hasCustomNavigation, theme = props.theme, _e = props.type, type = _e === void 0 ? PanelType.smallFixedFar : _e;
        var effects = theme.effects, fonts = theme.fonts, semanticColors = theme.semanticColors;
        var classNames = getGlobalClassNames(GlobalClassNames$4, theme);
        var isCustomPanel = type === PanelType.custom || type === PanelType.customNear;
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                isOpen && classNames.isOpen,
                hasCloseButton && classNames.hasCloseButton,
                {
                    pointerEvents: 'none',
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                },
                isCustomPanel && isOnRightSide && classNames.custom,
                isCustomPanel && !isOnRightSide && classNames.customNear,
                className,
            ],
            overlay: [
                {
                    pointerEvents: 'auto',
                    cursor: 'pointer',
                },
                isOpen && isAnimating && AnimationClassNames.fadeIn100,
                !isOpen && isAnimating && AnimationClassNames.fadeOut100,
            ],
            hiddenPanel: [
                !isOpen &&
                    !isAnimating &&
                    isHiddenOnDismiss && {
                    visibility: 'hidden',
                },
            ],
            main: [
                classNames.main,
                {
                    backgroundColor: semanticColors.bodyBackground,
                    boxShadow: effects.elevation64,
                    pointerEvents: 'auto',
                    position: 'absolute',
                    display: 'flex',
                    flexDirection: 'column',
                    overflowX: 'hidden',
                    overflowY: 'auto',
                    WebkitOverflowScrolling: 'touch',
                    bottom: 0,
                    top: 0,
                    // left, right, width are overridden depending on the type of the Panel and the screen breakpoint.
                    left: panelMargin.auto,
                    right: panelMargin.none,
                    width: panelWidth.full,
                    selectors: tslib.__assign((_a = {}, _a[HighContrastSelector] = {
                        borderLeft: "3px solid " + semanticColors.variantBorder,
                        borderRight: "3px solid " + semanticColors.variantBorder,
                    }, _a), getPanelBreakpoints(type)),
                },
                type === PanelType.smallFluid && {
                    left: panelMargin.none,
                },
                type === PanelType.smallFixedNear && {
                    left: panelMargin.none,
                    right: panelMargin.auto,
                    width: panelWidth.xs,
                },
                type === PanelType.customNear && {
                    right: 'auto',
                    left: 0,
                },
                isCustomPanel && {
                    maxWidth: '100vw',
                },
                isOpen && isAnimating && !isOnRightSide && AnimationClassNames.slideRightIn40,
                isOpen && isAnimating && isOnRightSide && AnimationClassNames.slideLeftIn40,
                !isOpen && isAnimating && !isOnRightSide && AnimationClassNames.slideLeftOut40,
                !isOpen && isAnimating && isOnRightSide && AnimationClassNames.slideRightOut40,
                focusTrapZoneClassName,
            ],
            commands: [
                classNames.commands,
                {
                    marginTop: 18,
                    //Ensures that the stickied header always has a background to prevent overlaps on scroll.
                    background: 'inherit',
                    selectors: (_b = {},
                        _b["@media (min-height: " + ScreenWidthMinMedium + "px)"] = {
                            position: 'sticky',
                            top: 0,
                            zIndex: 1,
                        },
                        _b),
                },
                hasCustomNavigation && {
                    marginTop: 'inherit',
                },
            ],
            navigation: [
                classNames.navigation,
                {
                    display: 'flex',
                    justifyContent: 'flex-end',
                },
                hasCustomNavigation && {
                    height: commandBarHeight,
                },
            ],
            contentInner: [
                classNames.contentInner,
                {
                    display: 'flex',
                    flexDirection: 'column',
                    flexGrow: 1,
                    overflowY: 'hidden',
                    background: 'inherit',
                },
            ],
            header: [
                classNames.header,
                sharedPaddingStyles,
                {
                    alignSelf: 'flex-start',
                },
                hasCloseButton &&
                    !hasCustomNavigation && {
                    flexGrow: 1,
                },
                hasCustomNavigation && {
                    // Ensure that title doesn't shrink if screen is too small
                    flexShrink: 0,
                },
            ],
            headerText: [
                classNames.headerText,
                fonts.xLarge,
                {
                    color: semanticColors.bodyText,
                    lineHeight: '27px',
                    overflowWrap: 'break-word',
                    wordWrap: 'break-word',
                    wordBreak: 'break-word',
                    hyphens: 'auto',
                },
                headerClassName,
            ],
            scrollableContent: [
                classNames.scrollableContent,
                {
                    overflowY: 'auto',
                    background: 'inherit',
                },
                isFooterAtBottom && {
                    flexGrow: 1,
                    display: 'inherit',
                    flexDirection: 'inherit',
                },
            ],
            content: [
                classNames.content,
                sharedPaddingStyles,
                {
                    paddingBottom: 20,
                },
                isFooterAtBottom && {
                    selectors: (_c = {},
                        _c["@media (min-height: " + ScreenWidthMinMedium + "px)"] = {
                            flexGrow: 1,
                        },
                        _c),
                },
            ],
            footer: [
                classNames.footer,
                {
                    // Ensure that footer doesn't shrink if screen is too small
                    flexShrink: 0,
                    borderTop: '1px solid transparent',
                    transition: "opacity " + AnimationVariables.durationValue3 + " " + AnimationVariables.easeFunction2,
                    selectors: (_d = {},
                        _d["@media (min-height: " + ScreenWidthMinMedium + "px)"] = {
                            position: 'sticky',
                            bottom: 0,
                        },
                        _d),
                },
                isFooterSticky && {
                    background: semanticColors.bodyBackground,
                    borderTopColor: semanticColors.variantBorder,
                },
            ],
            footerInner: [
                classNames.footerInner,
                sharedPaddingStyles,
                {
                    paddingBottom: 16,
                    paddingTop: 16,
                },
            ],
            subComponentStyles: {
                closeButton: {
                    root: [
                        classNames.closeButton,
                        {
                            marginRight: 14,
                            color: theme.palette.neutralSecondary,
                            fontSize: IconFontSizes.large,
                        },
                        hasCustomNavigation && {
                            marginRight: 0,
                            height: 'auto',
                            width: '44px',
                        },
                    ],
                    rootHovered: {
                        color: theme.palette.neutralPrimary,
                    },
                },
            },
        };
    };

    /**
     * Panel description
     */
    var Panel = styled(PanelBase, getStyles$5, undefined, {
        scope: 'Panel',
    });

    var COMPONENT_NAME$4 = 'Dropdown';
    var getClassNames$Q = classNamesFunction();
    var DEFAULT_PROPS = {
        options: [],
    };
    function useSelectedItemsState(_a) {
        var defaultSelectedKeys = _a.defaultSelectedKeys, selectedKeys = _a.selectedKeys, defaultSelectedKey = _a.defaultSelectedKey, selectedKey = _a.selectedKey, options = _a.options, multiSelect = _a.multiSelect;
        var oldOptions = usePrevious(options);
        var _b = React__namespace.useState([]), selectedIndices = _b[0], setSelectedIndices = _b[1];
        // In controlled component usage where selectedKey is provided, update the selectedIndex
        // state if the key or options change.
        var selectedKeyPropToUse;
        // this does a shallow compare (assumes options are pure), for the purposes of determining whether
        // defaultSelectedKey/defaultSelectedKeys are respected.
        var didOptionsChange = options !== oldOptions;
        if (multiSelect) {
            if (didOptionsChange && defaultSelectedKeys !== undefined) {
                selectedKeyPropToUse = defaultSelectedKeys;
            }
            else {
                selectedKeyPropToUse = selectedKeys;
            }
        }
        else {
            if (didOptionsChange && defaultSelectedKey !== undefined) {
                selectedKeyPropToUse = defaultSelectedKey;
            }
            else {
                selectedKeyPropToUse = selectedKey;
            }
        }
        var oldSelectedKeyProp = usePrevious(selectedKeyPropToUse);
        React__namespace.useEffect(function () {
            /** Get all selected indexes for multi-select mode */
            var getSelectedIndexes = function () {
                if (selectedKeyPropToUse === undefined) {
                    if (multiSelect) {
                        return getAllSelectedIndices();
                    }
                    var selectedIndex = getSelectedIndex(null);
                    return selectedIndex !== -1 ? [selectedIndex] : [];
                }
                else if (!Array.isArray(selectedKeyPropToUse)) {
                    var selectedIndex = getSelectedIndex(selectedKeyPropToUse);
                    return selectedIndex !== -1 ? [selectedIndex] : [];
                }
                var returnValue = [];
                for (var _i = 0, selectedKeyPropToUse_1 = selectedKeyPropToUse; _i < selectedKeyPropToUse_1.length; _i++) {
                    var key = selectedKeyPropToUse_1[_i];
                    var selectedIndex = getSelectedIndex(key);
                    selectedIndex !== -1 && returnValue.push(selectedIndex);
                }
                return returnValue;
            };
            var getAllSelectedIndices = function () {
                return options
                    .map(function (option, index) { return (option.selected ? index : -1); })
                    .filter(function (index) { return index !== -1; });
            };
            var getSelectedIndex = function (searchKey) {
                return findIndex(options, function (option) {
                    // eslint-disable-next-line eqeqeq
                    if (searchKey != null) {
                        return option.key === searchKey;
                    }
                    else {
                        // eslint-disable-next-line deprecation/deprecation
                        return !!option.selected || !!option.isSelected;
                    }
                });
            };
            if ((selectedKeyPropToUse !== undefined || !oldOptions) &&
                (selectedKeyPropToUse !== oldSelectedKeyProp || didOptionsChange)) {
                setSelectedIndices(getSelectedIndexes());
            }
        }, [didOptionsChange, multiSelect, oldOptions, oldSelectedKeyProp, options, selectedKeyPropToUse]);
        return [selectedIndices, setSelectedIndices];
    }
    var DropdownBase = React__namespace.forwardRef(function (propsWithoutDefaults, forwardedRef) {
        var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);
        var rootRef = React__namespace.useRef(null);
        var mergedRootRef = useMergedRefs(forwardedRef, rootRef);
        var responsiveMode = useResponsiveMode(rootRef, props.responsiveMode);
        var _a = useSelectedItemsState(props), selectedIndices = _a[0], setSelectedIndices = _a[1];
        return (React__namespace.createElement(DropdownInternal, tslib.__assign({}, props, { responsiveMode: responsiveMode, hoisted: { rootRef: mergedRootRef, selectedIndices: selectedIndices, setSelectedIndices: setSelectedIndices } })));
    });
    DropdownBase.displayName = 'DropdownBase';
    var DropdownInternal = /** @class */ (function (_super) {
        tslib.__extends(DropdownInternal, _super);
        function DropdownInternal(props) {
            var _this = _super.call(this, props) || this;
            _this._host = React__namespace.createRef();
            _this._focusZone = React__namespace.createRef();
            _this._dropDown = React__namespace.createRef();
            _this._scrollIdleDelay = 250 /* ms */;
            _this._sizePosCache = new DropdownSizePosCache();
            _this._requestAnimationFrame = safeRequestAnimationFrame(_this);
            _this._onChange = function (event, options, index, checked, multiSelect) {
                // eslint-disable-next-line deprecation/deprecation
                var _a = _this.props, onChange = _a.onChange, onChanged = _a.onChanged;
                if (onChange || onChanged) {
                    // for single-select, option passed in will always be selected.
                    // for multi-select, flip the checked value
                    var changedOpt = multiSelect ? tslib.__assign(tslib.__assign({}, options[index]), { selected: !checked }) : options[index];
                    onChange && onChange(tslib.__assign(tslib.__assign({}, event), { target: _this._dropDown.current }), changedOpt, index);
                    onChanged && onChanged(changedOpt, index);
                }
            };
            /** Get either props.placeholder (new name) or props.placeHolder (old name) */
            _this._getPlaceholder = function () {
                // eslint-disable-next-line deprecation/deprecation
                return _this.props.placeholder || _this.props.placeHolder;
            };
            /** Get text in dropdown input as a string */
            _this._getTitle = function (items, _unused) {
                var _a = _this.props.multiSelectDelimiter, multiSelectDelimiter = _a === void 0 ? ', ' : _a;
                return items.map(function (i) { return i.text; }).join(multiSelectDelimiter);
            };
            /** Render text in dropdown input */
            _this._onRenderTitle = function (items) {
                return React__namespace.createElement(React__namespace.Fragment, null, _this._getTitle(items));
            };
            /** Render placeholder text in dropdown input */
            _this._onRenderPlaceholder = function (props) {
                if (!_this._getPlaceholder()) {
                    return null;
                }
                return React__namespace.createElement(React__namespace.Fragment, null, _this._getPlaceholder());
            };
            /** Render Callout or Panel container and pass in list */
            _this._onRenderContainer = function (props) {
                var calloutProps = props.calloutProps, panelProps = props.panelProps;
                var _a = _this.props, responsiveMode = _a.responsiveMode, dropdownWidth = _a.dropdownWidth;
                var isSmall = responsiveMode <= ResponsiveMode.medium;
                var panelStyles = _this._classNames.subComponentStyles
                    ? _this._classNames.subComponentStyles.panel
                    : undefined;
                var calloutWidth = undefined;
                var calloutMinWidth = undefined;
                if (dropdownWidth === 'auto') {
                    calloutMinWidth = _this._dropDown.current ? _this._dropDown.current.clientWidth : 0;
                }
                else {
                    calloutWidth = dropdownWidth || (_this._dropDown.current ? _this._dropDown.current.clientWidth : 0);
                }
                return isSmall ? (React__namespace.createElement(Panel, tslib.__assign({ isOpen: true, isLightDismiss: true, onDismiss: _this._onDismiss, hasCloseButton: false, styles: panelStyles }, panelProps), _this._renderFocusableList(props))) : (React__namespace.createElement(Callout$1, tslib.__assign({ isBeakVisible: false, gapSpace: 0, doNotLayer: false, directionalHintFixed: false, directionalHint: DirectionalHint.bottomLeftEdge, calloutWidth: calloutWidth, calloutMinWidth: calloutMinWidth }, calloutProps, { className: _this._classNames.callout, target: _this._dropDown.current, onDismiss: _this._onDismiss, onScroll: _this._onScroll, onPositioned: _this._onPositioned }), _this._renderFocusableList(props)));
            };
            /** Render Caret Down Icon */
            _this._onRenderCaretDown = function (props) {
                return React__namespace.createElement(Icon$1, { className: _this._classNames.caretDown, iconName: "ChevronDown", "aria-hidden": true });
            };
            /** Render List of items */
            _this._onRenderList = function (props) {
                var _a = props.onRenderItem, onRenderItem = _a === void 0 ? _this._onRenderItem : _a;
                var queue = { items: [] };
                var renderedList = [];
                var emptyQueue = function () {
                    var newGroup = queue.id
                        ? [
                            React__namespace.createElement("div", { role: "group", key: queue.id, "aria-labelledby": queue.id }, queue.items),
                        ]
                        : queue.items;
                    renderedList = tslib.__spreadArray(tslib.__spreadArray([], renderedList), newGroup);
                    // Flush items and id
                    queue = { items: [] };
                };
                var placeRenderedOptionIntoQueue = function (item, index) {
                    /*
                      Case Header
                        empty queue if it's not already empty
                        ensure unique ID for header and set queue ID
                        push header into queue
                      Case Divider
                        push divider into queue if not first item
                        empty queue if not already empty
                      Default
                        push item into queue
                    */
                    switch (item.itemType) {
                        case SelectableOptionMenuItemType.Header:
                            queue.items.length > 0 && emptyQueue();
                            var id = _this._id + item.key;
                            queue.items.push(onRenderItem(tslib.__assign(tslib.__assign({ id: id }, item), { index: index }), _this._onRenderItem));
                            queue.id = id;
                            break;
                        case SelectableOptionMenuItemType.Divider:
                            index > 0 && queue.items.push(onRenderItem(tslib.__assign(tslib.__assign({}, item), { index: index }), _this._onRenderItem));
                            queue.items.length > 0 && emptyQueue();
                            break;
                        default:
                            queue.items.push(onRenderItem(tslib.__assign(tslib.__assign({}, item), { index: index }), _this._onRenderItem));
                    }
                };
                // Place options into the queue. Queue will be emptied anytime a Header or Divider is encountered
                props.options.forEach(function (item, index) {
                    placeRenderedOptionIntoQueue(item, index);
                });
                // Push remaining items into all renderedList
                queue.items.length > 0 && emptyQueue();
                return React__namespace.createElement(React__namespace.Fragment, null, renderedList);
            };
            _this._onRenderItem = function (item) {
                switch (item.itemType) {
                    case SelectableOptionMenuItemType.Divider:
                        return _this._renderSeparator(item);
                    case SelectableOptionMenuItemType.Header:
                        return _this._renderHeader(item);
                    default:
                        return _this._renderOption(item);
                }
            };
            _this._renderOption = function (item) {
                var _a = _this.props, _b = _a.onRenderOption, onRenderOption = _b === void 0 ? _this._onRenderOption : _b, _c = _a.hoisted.selectedIndices, selectedIndices = _c === void 0 ? [] : _c;
                var isItemSelected = item.index !== undefined && selectedIndices ? selectedIndices.indexOf(item.index) > -1 : false;
                // select the right className based on the combination of selected/disabled
                var itemClassName = item.hidden // predicate: item hidden
                    ? _this._classNames.dropdownItemHidden
                    : isItemSelected && item.disabled === true // predicate: both selected and disabled
                        ? _this._classNames.dropdownItemSelectedAndDisabled
                        : isItemSelected // predicate: selected only
                            ? _this._classNames.dropdownItemSelected
                            : item.disabled === true // predicate: disabled only
                                ? _this._classNames.dropdownItemDisabled
                                : _this._classNames.dropdownItem;
                var title = item.title;
                var multiSelectItemStyles = _this._classNames.subComponentStyles
                    ? _this._classNames.subComponentStyles.multiSelectItem
                    : undefined;
                return !_this.props.multiSelect ? (React__namespace.createElement(CommandButton, { id: _this._listId + item.index, key: item.key, "data-index": item.index, "data-is-focusable": !item.disabled, disabled: item.disabled, className: itemClassName, onClick: _this._onItemClick(item), 
                    // eslint-disable-next-line react/jsx-no-bind
                    onMouseEnter: _this._onItemMouseEnter.bind(_this, item), 
                    // eslint-disable-next-line react/jsx-no-bind
                    onMouseLeave: _this._onMouseItemLeave.bind(_this, item), 
                    // eslint-disable-next-line react/jsx-no-bind
                    onMouseMove: _this._onItemMouseMove.bind(_this, item), role: "option", "aria-selected": isItemSelected ? 'true' : 'false', ariaLabel: item.ariaLabel, title: title, "aria-posinset": _this._sizePosCache.positionInSet(item.index), "aria-setsize": _this._sizePosCache.optionSetSize }, onRenderOption(item, _this._onRenderOption))) : (React__namespace.createElement(Checkbox, { id: _this._listId + item.index, key: item.key, disabled: item.disabled, onChange: _this._onItemClick(item), inputProps: tslib.__assign({ 'aria-selected': isItemSelected, onMouseEnter: _this._onItemMouseEnter.bind(_this, item), onMouseLeave: _this._onMouseItemLeave.bind(_this, item), onMouseMove: _this._onItemMouseMove.bind(_this, item), role: 'option' }, {
                        'data-index': item.index,
                        'data-is-focusable': !item.disabled,
                    }), label: item.text, title: title, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onRenderLabel: _this._onRenderItemLabel.bind(_this, item), className: itemClassName, checked: isItemSelected, styles: multiSelectItemStyles, ariaPositionInSet: _this._sizePosCache.positionInSet(item.index), ariaSetSize: _this._sizePosCache.optionSetSize, ariaLabel: item.ariaLabel }));
            };
            /** Render content of item (i.e. text/icon inside of button) */
            _this._onRenderOption = function (item) {
                return React__namespace.createElement("span", { className: _this._classNames.dropdownOptionText }, item.text);
            };
            /** Render custom label for drop down item */
            _this._onRenderItemLabel = function (item) {
                var _a = _this.props.onRenderOption, onRenderOption = _a === void 0 ? _this._onRenderOption : _a;
                return onRenderOption(item, _this._onRenderOption);
            };
            _this._onPositioned = function (positions) {
                if (_this._focusZone.current) {
                    // Focusing an element can trigger a reflow. Making this wait until there is an animation
                    // frame can improve perf significantly.
                    _this._requestAnimationFrame(function () {
                        var selectedIndices = _this.props.hoisted.selectedIndices;
                        if (_this._focusZone.current) {
                            if (!_this._hasBeenPositioned &&
                                selectedIndices &&
                                selectedIndices[0] &&
                                !_this.props.options[selectedIndices[0]].disabled) {
                                var element = getDocument().getElementById(_this._id + "-list" + selectedIndices[0]);
                                if (element) {
                                    _this._focusZone.current.focusElement(element);
                                }
                                _this._hasBeenPositioned = true;
                            }
                            else {
                                _this._focusZone.current.focus();
                            }
                        }
                    });
                }
                if (!_this.state.calloutRenderEdge || _this.state.calloutRenderEdge !== positions.targetEdge) {
                    _this.setState({
                        calloutRenderEdge: positions.targetEdge,
                    });
                }
            };
            _this._onItemClick = function (item) {
                return function (event) {
                    if (!item.disabled) {
                        _this.setSelectedIndex(event, item.index);
                        if (!_this.props.multiSelect) {
                            // only close the callout when it's in single-select mode
                            _this.setState({
                                isOpen: false,
                            });
                        }
                    }
                };
            };
            /**
             * Scroll handler for the callout to make sure the mouse events
             * for updating focus are not interacting during scroll
             */
            _this._onScroll = function () {
                if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {
                    clearTimeout(_this._scrollIdleTimeoutId);
                    _this._scrollIdleTimeoutId = undefined;
                }
                else {
                    _this._isScrollIdle = false;
                }
                _this._scrollIdleTimeoutId = window.setTimeout(function () {
                    _this._isScrollIdle = true;
                }, _this._scrollIdleDelay);
            };
            _this._onMouseItemLeave = function (item, ev) {
                if (_this._shouldIgnoreMouseEvent()) {
                    return;
                }
                /**
                 * IE11 focus() method forces parents to scroll to top of element.
                 * Edge and IE expose a setActive() function for focusable divs that
                 * sets the page focus but does not scroll the parent element.
                 */
                if (_this._host.current) {
                    if (_this._host.current.setActive) {
                        try {
                            _this._host.current.setActive();
                        }
                        catch (e) {
                            /* no-op */
                        }
                    }
                    else {
                        _this._host.current.focus();
                    }
                }
            };
            _this._onDismiss = function () {
                _this.setState({ isOpen: false });
            };
            _this._onDropdownBlur = function (ev) {
                // If Dropdown disabled do not proceed with this logic.
                var disabled = _this._isDisabled();
                if (disabled) {
                    return;
                }
                if (_this.state.isOpen) {
                    // Do not call onBlur or update focus state when the callout is opened
                    return;
                }
                _this.setState({ hasFocus: false });
                if (_this.props.onBlur) {
                    _this.props.onBlur(ev);
                }
            };
            _this._onDropdownKeyDown = function (ev) {
                // If Dropdown disabled do not process any keyboard events.
                var disabled = _this._isDisabled();
                if (disabled) {
                    return;
                }
                // Take note if we are processing an alt (option) or meta (command) keydown.
                // See comment in _shouldHandleKeyUp for reasoning.
                _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);
                if (_this.props.onKeyDown) {
                    _this.props.onKeyDown(ev);
                    if (ev.defaultPrevented) {
                        return;
                    }
                }
                var newIndex;
                var selectedIndex = _this.props.hoisted.selectedIndices.length ? _this.props.hoisted.selectedIndices[0] : -1;
                var containsExpandCollapseModifier = ev.altKey || ev.metaKey;
                var isOpen = _this.state.isOpen;
                // eslint-disable-next-line deprecation/deprecation
                switch (ev.which) {
                    case KeyCodes.enter:
                        _this.setState({
                            isOpen: !isOpen,
                        });
                        break;
                    case KeyCodes.escape:
                        if (!isOpen) {
                            return;
                        }
                        _this.setState({
                            isOpen: false,
                        });
                        break;
                    case KeyCodes.up:
                        if (containsExpandCollapseModifier) {
                            if (isOpen) {
                                _this.setState({ isOpen: false });
                                break;
                            }
                            return;
                        }
                        if (_this.props.multiSelect) {
                            _this.setState({ isOpen: true });
                        }
                        else if (!_this._isDisabled()) {
                            newIndex = _this._moveIndex(ev, -1, selectedIndex - 1, selectedIndex);
                        }
                        break;
                    case KeyCodes.down:
                        if (containsExpandCollapseModifier) {
                            ev.stopPropagation();
                            ev.preventDefault();
                        }
                        if ((containsExpandCollapseModifier && !isOpen) || _this.props.multiSelect) {
                            _this.setState({ isOpen: true });
                        }
                        else if (!_this._isDisabled()) {
                            newIndex = _this._moveIndex(ev, 1, selectedIndex + 1, selectedIndex);
                        }
                        break;
                    case KeyCodes.home:
                        if (!_this.props.multiSelect) {
                            newIndex = _this._moveIndex(ev, 1, 0, selectedIndex);
                        }
                        break;
                    case KeyCodes.end:
                        if (!_this.props.multiSelect) {
                            newIndex = _this._moveIndex(ev, -1, _this.props.options.length - 1, selectedIndex);
                        }
                        break;
                    case KeyCodes.space:
                        // event handled in _onDropdownKeyUp
                        break;
                    default:
                        return;
                }
                if (newIndex !== selectedIndex) {
                    ev.stopPropagation();
                    ev.preventDefault();
                }
            };
            _this._onDropdownKeyUp = function (ev) {
                // If Dropdown disabled do not process any keyboard events.
                var disabled = _this._isDisabled();
                if (disabled) {
                    return;
                }
                var shouldHandleKey = _this._shouldHandleKeyUp(ev);
                var isOpen = _this.state.isOpen;
                if (_this.props.onKeyUp) {
                    _this.props.onKeyUp(ev);
                    if (ev.defaultPrevented) {
                        return;
                    }
                }
                // eslint-disable-next-line deprecation/deprecation
                switch (ev.which) {
                    case KeyCodes.space:
                        _this.setState({
                            isOpen: !isOpen,
                        });
                        break;
                    default:
                        if (shouldHandleKey && isOpen) {
                            _this.setState({ isOpen: false });
                        }
                        return;
                }
                ev.stopPropagation();
                ev.preventDefault();
            };
            _this._onZoneKeyDown = function (ev) {
                var elementToFocus;
                // Take note if we are processing an alt (option) or meta (command) keydown.
                // See comment in _shouldHandleKeyUp for reasoning.
                _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);
                var containsExpandCollapseModifier = ev.altKey || ev.metaKey;
                // eslint-disable-next-line deprecation/deprecation
                switch (ev.which) {
                    case KeyCodes.up:
                        if (containsExpandCollapseModifier) {
                            _this.setState({ isOpen: false });
                        }
                        else {
                            if (_this._host.current) {
                                elementToFocus = getLastFocusable(_this._host.current, _this._host.current.lastChild, true);
                            }
                        }
                        break;
                    // All directional keystrokes should be canceled when the zone is rendered.
                    // This avoids the body scroll from reacting and thus dismissing the dropdown.
                    case KeyCodes.home:
                    case KeyCodes.end:
                    case KeyCodes.pageUp:
                    case KeyCodes.pageDown:
                        break;
                    case KeyCodes.down:
                        if (!containsExpandCollapseModifier && _this._host.current) {
                            elementToFocus = getFirstFocusable(_this._host.current, _this._host.current.firstChild, true);
                        }
                        break;
                    case KeyCodes.escape:
                        _this.setState({ isOpen: false });
                        break;
                    case KeyCodes.tab:
                        _this.setState({ isOpen: false });
                        return;
                    default:
                        return;
                }
                if (elementToFocus) {
                    elementToFocus.focus();
                }
                ev.stopPropagation();
                ev.preventDefault();
            };
            _this._onZoneKeyUp = function (ev) {
                var shouldHandleKey = _this._shouldHandleKeyUp(ev);
                if (shouldHandleKey && _this.state.isOpen) {
                    _this.setState({ isOpen: false });
                    ev.preventDefault();
                }
            };
            _this._onDropdownClick = function (ev) {
                if (_this.props.onClick) {
                    _this.props.onClick(ev);
                    if (ev.defaultPrevented) {
                        return;
                    }
                }
                var isOpen = _this.state.isOpen;
                var disabled = _this._isDisabled();
                if (!disabled && !_this._shouldOpenOnFocus()) {
                    _this.setState({
                        isOpen: !isOpen,
                    });
                }
                _this._isFocusedByClick = false; // reset
            };
            _this._onDropdownMouseDown = function () {
                _this._isFocusedByClick = true;
            };
            _this._onFocus = function (ev) {
                var disabled = _this._isDisabled();
                if (!disabled) {
                    if (_this.props.onFocus) {
                        _this.props.onFocus(ev);
                    }
                    var state = { hasFocus: true };
                    if (_this._shouldOpenOnFocus()) {
                        state.isOpen = true;
                    }
                    _this.setState(state);
                }
            };
            /**
             * Because the isDisabled prop is deprecated, we have had to repeat this logic all over the place.
             * This helper method avoids all the repetition.
             */
            _this._isDisabled = function () {
                var disabled = _this.props.disabled;
                // eslint-disable-next-line deprecation/deprecation
                var isDisabled = _this.props.isDisabled;
                // Remove this deprecation workaround at 1.0.0
                if (disabled === undefined) {
                    disabled = isDisabled;
                }
                return disabled;
            };
            _this._onRenderLabel = function (props) {
                var label = props.label, required = props.required, disabled = props.disabled;
                var labelStyles = _this._classNames.subComponentStyles
                    ? _this._classNames.subComponentStyles.label
                    : undefined;
                return label ? (React__namespace.createElement(Label, { className: _this._classNames.label, id: _this._labelId, required: required, styles: labelStyles, disabled: disabled }, label)) : null;
            };
            initializeComponentRef(_this);
            var multiSelect = props.multiSelect, selectedKey = props.selectedKey, selectedKeys = props.selectedKeys, defaultSelectedKey = props.defaultSelectedKey, defaultSelectedKeys = props.defaultSelectedKeys, options = props.options;
            {
                warnDeprecations(COMPONENT_NAME$4, props, {
                    isDisabled: 'disabled',
                    onChanged: 'onChange',
                    placeHolder: 'placeholder',
                    onRenderPlaceHolder: 'onRenderPlaceholder',
                });
                warnMutuallyExclusive(COMPONENT_NAME$4, props, {
                    defaultSelectedKey: 'selectedKey',
                    defaultSelectedKeys: 'selectedKeys',
                    selectedKeys: 'selectedKey',
                });
                if (multiSelect) {
                    var warnMultiSelect = function (prop) {
                        return warn("Dropdown property '" + prop + "' cannot be used when 'multiSelect' is true. Use '" + prop + "s' instead.");
                    };
                    if (selectedKey !== undefined) {
                        warnMultiSelect('selectedKey');
                    }
                    if (defaultSelectedKey !== undefined) {
                        warnMultiSelect('defaultSelectedKey');
                    }
                }
                else {
                    var warnNotMultiSelect = function (prop) {
                        return warn("Dropdown property '" + prop + "s' cannot be used when 'multiSelect' is false/unset. Use '" + prop + "' instead.");
                    };
                    if (selectedKeys !== undefined) {
                        warnNotMultiSelect('selectedKey');
                    }
                    if (defaultSelectedKeys !== undefined) {
                        warnNotMultiSelect('defaultSelectedKey');
                    }
                }
            }
            _this._id = props.id || getId('Dropdown');
            _this._labelId = _this._id + '-label';
            _this._listId = _this._id + '-list';
            _this._optionId = _this._id + '-option';
            _this._isScrollIdle = true;
            _this._hasBeenPositioned = false;
            _this._sizePosCache.updateOptions(options);
            _this.state = {
                isOpen: false,
                hasFocus: false,
                calloutRenderEdge: undefined,
            };
            return _this;
        }
        Object.defineProperty(DropdownInternal.prototype, "selectedOptions", {
            /**
             * All selected options
             */
            get: function () {
                var _a = this.props, options = _a.options, selectedIndices = _a.hoisted.selectedIndices;
                return getAllSelectedOptions(options, selectedIndices);
            },
            enumerable: false,
            configurable: true
        });
        DropdownInternal.prototype.componentWillUnmount = function () {
            clearTimeout(this._scrollIdleTimeoutId);
        };
        DropdownInternal.prototype.componentDidUpdate = function (prevProps, prevState) {
            if (prevState.isOpen === true && this.state.isOpen === false) {
                this._gotMouseMove = false;
                this._hasBeenPositioned = false;
                if (this.props.onDismiss) {
                    this.props.onDismiss();
                }
            }
        };
        DropdownInternal.prototype.render = function () {
            var id = this._id;
            var props = this.props;
            var className = props.className, label = props.label, options = props.options, ariaLabel = props.ariaLabel, required = props.required, errorMessage = props.errorMessage, propStyles = props.styles, theme = props.theme, panelProps = props.panelProps, calloutProps = props.calloutProps, _a = props.onRenderTitle, onRenderTitle = _a === void 0 ? this._getTitle : _a, _b = props.onRenderContainer, onRenderContainer = _b === void 0 ? this._onRenderContainer : _b, _c = props.onRenderCaretDown, onRenderCaretDown = _c === void 0 ? this._onRenderCaretDown : _c, _d = props.onRenderLabel, onRenderLabel = _d === void 0 ? this._onRenderLabel : _d, selectedIndices = props.hoisted.selectedIndices;
            var _e = this.state, isOpen = _e.isOpen, calloutRenderEdge = _e.calloutRenderEdge, hasFocus = _e.hasFocus;
            // eslint-disable-next-line deprecation/deprecation
            var onRenderPlaceholder = props.onRenderPlaceholder || props.onRenderPlaceHolder || this._getPlaceholder;
            // If our cached options are out of date update our cache
            if (options !== this._sizePosCache.cachedOptions) {
                this._sizePosCache.updateOptions(options);
            }
            var selectedOptions = getAllSelectedOptions(options, selectedIndices);
            var divProps = getNativeProps(props, divProperties);
            var disabled = this._isDisabled();
            var errorMessageId = id + '-errorMessage';
            var ariaActiveDescendant = disabled
                ? undefined
                : isOpen && selectedIndices.length === 1 && selectedIndices[0] >= 0
                    ? this._listId + selectedIndices[0]
                    : undefined;
            this._classNames = getClassNames$Q(propStyles, {
                theme: theme,
                className: className,
                hasError: !!(errorMessage && errorMessage.length > 0),
                hasLabel: !!label,
                isOpen: isOpen,
                required: required,
                disabled: disabled,
                isRenderingPlaceholder: !selectedOptions.length,
                panelClassName: panelProps ? panelProps.className : undefined,
                calloutClassName: calloutProps ? calloutProps.className : undefined,
                calloutRenderEdge: calloutRenderEdge,
            });
            var hasErrorMessage = !!errorMessage && errorMessage.length > 0;
            return (React__namespace.createElement("div", { className: this._classNames.root, ref: this.props.hoisted.rootRef, "aria-owns": isOpen ? this._listId : undefined },
                onRenderLabel(this.props, this._onRenderLabel),
                React__namespace.createElement("div", tslib.__assign({ "data-is-focusable": !disabled, "data-ktp-target": true, ref: this._dropDown, id: id, tabIndex: disabled ? -1 : 0, role: "combobox", "aria-haspopup": "listbox", "aria-expanded": isOpen ? 'true' : 'false', "aria-label": ariaLabel, "aria-labelledby": label && !ariaLabel ? mergeAriaAttributeValues(this._labelId, this._optionId) : undefined, "aria-describedby": hasErrorMessage ? this._id + '-errorMessage' : undefined, "aria-activedescendant": ariaActiveDescendant, "aria-required": required, "aria-disabled": disabled, "aria-controls": isOpen ? this._listId : undefined }, divProps, { className: this._classNames.dropdown, onBlur: this._onDropdownBlur, onKeyDown: this._onDropdownKeyDown, onKeyUp: this._onDropdownKeyUp, onClick: this._onDropdownClick, onMouseDown: this._onDropdownMouseDown, onFocus: this._onFocus }),
                    React__namespace.createElement("span", { id: this._optionId, className: this._classNames.title, "aria-live": hasFocus ? 'polite' : undefined, "aria-atomic": hasFocus ? true : undefined, "aria-invalid": hasErrorMessage }, 
                    // If option is selected render title, otherwise render the placeholder text
                    selectedOptions.length
                        ? onRenderTitle(selectedOptions, this._onRenderTitle)
                        : onRenderPlaceholder(props, this._onRenderPlaceholder)),
                    React__namespace.createElement("span", { className: this._classNames.caretDownWrapper }, onRenderCaretDown(props, this._onRenderCaretDown))),
                isOpen && onRenderContainer(tslib.__assign(tslib.__assign({}, props), { onDismiss: this._onDismiss }), this._onRenderContainer),
                hasErrorMessage && (React__namespace.createElement("div", { role: "alert", id: errorMessageId, className: this._classNames.errorMessage }, errorMessage))));
        };
        DropdownInternal.prototype.focus = function (shouldOpenOnFocus) {
            if (this._dropDown.current) {
                this._dropDown.current.focus();
                if (shouldOpenOnFocus) {
                    this.setState({
                        isOpen: true,
                    });
                }
            }
        };
        DropdownInternal.prototype.setSelectedIndex = function (event, index) {
            var _a = this.props, options = _a.options, selectedKey = _a.selectedKey, selectedKeys = _a.selectedKeys, multiSelect = _a.multiSelect, notifyOnReselect = _a.notifyOnReselect, _b = _a.hoisted.selectedIndices, selectedIndices = _b === void 0 ? [] : _b;
            var checked = selectedIndices ? selectedIndices.indexOf(index) > -1 : false;
            var newIndexes = [];
            index = Math.max(0, Math.min(options.length - 1, index));
            // If this is a controlled component then no state change should take place.
            if (selectedKey !== undefined || selectedKeys !== undefined) {
                this._onChange(event, options, index, checked, multiSelect);
                return;
            }
            if (!multiSelect && !notifyOnReselect && index === selectedIndices[0]) {
                return;
            }
            else if (multiSelect) {
                newIndexes = selectedIndices ? this._copyArray(selectedIndices) : [];
                if (checked) {
                    var position = newIndexes.indexOf(index);
                    if (position > -1) {
                        // unchecked the current one
                        newIndexes.splice(position, 1);
                    }
                }
                else {
                    // add the new selected index into the existing one
                    newIndexes.push(index);
                }
            }
            else {
                // Set the selected option if this is an uncontrolled component
                newIndexes = [index];
            }
            event.persist();
            // Call onChange after state is updated
            this.props.hoisted.setSelectedIndices(newIndexes);
            this._onChange(event, options, index, checked, multiSelect);
        };
        DropdownInternal.prototype._copyArray = function (array) {
            var newArray = [];
            for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                var element = array_1[_i];
                newArray.push(element);
            }
            return newArray;
        };
        /**
         * Finds the next valid Dropdown option and sets the selected index to it.
         * @param stepValue - Value of how many items the function should traverse.  Should be -1 or 1.
         * @param index - Index of where the search should start
         * @param selectedIndex - The selectedIndex Dropdown's state
         * @returns The next valid dropdown option's index
         */
        DropdownInternal.prototype._moveIndex = function (event, stepValue, index, selectedIndex) {
            var options = this.props.options;
            // Return selectedIndex if nothing has changed or options is empty
            if (selectedIndex === index || options.length === 0) {
                return selectedIndex;
            }
            // If the user is pressing the up or down key we want to make
            // sure that the dropdown cycles through the options without
            // causing the screen to scroll. In _onDropdownKeyDown
            // at the very end is a check to see if newIndex !== selectedIndex.
            // If the index is less than 0 and we set it back to 0, then
            // newIndex will equal selectedIndex and not stop the action
            // of the key press happening and vice versa for indexes greater
            // than or equal to the options length.
            if (index >= options.length) {
                index = 0;
            }
            else if (index < 0) {
                index = options.length - 1;
            }
            var stepCounter = 0;
            // If current index is a header or divider, or disabled, increment by step
            while (options[index].itemType === SelectableOptionMenuItemType.Header ||
                options[index].itemType === SelectableOptionMenuItemType.Divider ||
                options[index].disabled) {
                // If stepCounter exceeds length of options, then return selectedIndex (-1)
                if (stepCounter >= options.length) {
                    return selectedIndex;
                }
                // If index + stepValue is out of bounds, wrap around
                if (index + stepValue < 0) {
                    index = options.length;
                }
                else if (index + stepValue >= options.length) {
                    index = -1;
                }
                index = index + stepValue;
                stepCounter++;
            }
            this.setSelectedIndex(event, index);
            return index;
        };
        /** Wrap item list in a FocusZone */
        DropdownInternal.prototype._renderFocusableList = function (props) {
            var _a = props.onRenderList, onRenderList = _a === void 0 ? this._onRenderList : _a, label = props.label, ariaLabel = props.ariaLabel, multiSelect = props.multiSelect;
            return (React__namespace.createElement("div", { className: this._classNames.dropdownItemsWrapper, onKeyDown: this._onZoneKeyDown, onKeyUp: this._onZoneKeyUp, ref: this._host, tabIndex: 0 },
                React__namespace.createElement(FocusZone, { ref: this._focusZone, direction: FocusZoneDirection.vertical, id: this._listId, className: this._classNames.dropdownItems, role: "listbox", "aria-label": ariaLabel, "aria-labelledby": label && !ariaLabel ? this._labelId : undefined, "aria-multiselectable": multiSelect }, onRenderList(props, this._onRenderList))));
        };
        DropdownInternal.prototype._renderSeparator = function (item) {
            var index = item.index, key = item.key;
            var separatorClassName = item.hidden ? this._classNames.dropdownDividerHidden : this._classNames.dropdownDivider;
            if (index > 0) {
                return React__namespace.createElement("div", { role: "separator", key: key, className: separatorClassName });
            }
            return null;
        };
        DropdownInternal.prototype._renderHeader = function (item) {
            var _a = this.props.onRenderOption, onRenderOption = _a === void 0 ? this._onRenderOption : _a;
            var key = item.key, id = item.id;
            var headerClassName = item.hidden
                ? this._classNames.dropdownItemHeaderHidden
                : this._classNames.dropdownItemHeader;
            return (React__namespace.createElement("div", { id: id, key: key, className: headerClassName }, onRenderOption(item, this._onRenderOption)));
        };
        DropdownInternal.prototype._onItemMouseEnter = function (item, ev) {
            if (this._shouldIgnoreMouseEvent()) {
                return;
            }
            var targetElement = ev.currentTarget;
            targetElement.focus();
        };
        DropdownInternal.prototype._onItemMouseMove = function (item, ev) {
            var targetElement = ev.currentTarget;
            this._gotMouseMove = true;
            if (!this._isScrollIdle || document.activeElement === targetElement) {
                return;
            }
            targetElement.focus();
        };
        DropdownInternal.prototype._shouldIgnoreMouseEvent = function () {
            return !this._isScrollIdle || !this._gotMouseMove;
        };
        /**
         * Returns true if the key for the event is alt (Mac option) or meta (Mac command).
         */
        DropdownInternal.prototype._isAltOrMeta = function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            return ev.which === KeyCodes.alt || ev.key === 'Meta';
        };
        /**
         * We close the menu on key up only if ALL of the following are true:
         * - Most recent key down was alt or meta (command)
         * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to
         *   expand/collapse the menu)
         * - We're not on a Mac (or iOS)
         *
         * This is because on Windows, pressing alt moves focus to the application menu bar or similar,
         * closing any open context menus. There is not a similar behavior on Macs.
         */
        DropdownInternal.prototype._shouldHandleKeyUp = function (ev) {
            var keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);
            this._lastKeyDownWasAltOrMeta = false;
            return !!keyPressIsAltOrMetaAlone && !(isMac() || isIOS());
        };
        /**
         * Returns true if dropdown should set to open on focus.
         * Otherwise, isOpen state should be toggled on click
         */
        DropdownInternal.prototype._shouldOpenOnFocus = function () {
            var hasFocus = this.state.hasFocus;
            var openOnKeyboardFocus = this.props.openOnKeyboardFocus;
            return !this._isFocusedByClick && openOnKeyboardFocus === true && !hasFocus;
        };
        DropdownInternal.defaultProps = {
            options: [],
        };
        return DropdownInternal;
    }(React__namespace.Component));

    var _a$2, _b$1, _c$1;
    var GlobalClassNames$3 = {
        root: 'ms-Dropdown-container',
        label: 'ms-Dropdown-label',
        dropdown: 'ms-Dropdown',
        title: 'ms-Dropdown-title',
        caretDownWrapper: 'ms-Dropdown-caretDownWrapper',
        caretDown: 'ms-Dropdown-caretDown',
        callout: 'ms-Dropdown-callout',
        panel: 'ms-Dropdown-panel',
        dropdownItems: 'ms-Dropdown-items',
        dropdownItem: 'ms-Dropdown-item',
        dropdownDivider: 'ms-Dropdown-divider',
        dropdownOptionText: 'ms-Dropdown-optionText',
        dropdownItemHeader: 'ms-Dropdown-header',
        titleIsPlaceHolder: 'ms-Dropdown-titleIsPlaceHolder',
        titleHasError: 'ms-Dropdown-title--hasError',
    };
    var DROPDOWN_HEIGHT = 32;
    var DROPDOWN_ITEM_HEIGHT = 36;
    var highContrastAdjustMixin = (_a$2 = {},
        _a$2[HighContrastSelector + ", " + HighContrastSelectorWhite.replace('@media ', '')] = tslib.__assign({}, getHighContrastNoAdjustStyle()),
        _a$2);
    var highContrastItemAndTitleStateMixin = {
        selectors: tslib.__assign((_b$1 = {}, _b$1[HighContrastSelector] = {
            backgroundColor: 'Highlight',
            borderColor: 'Highlight',
            color: 'HighlightText',
        }, _b$1), highContrastAdjustMixin),
    };
    var highContrastBorderState = {
        selectors: (_c$1 = {},
            _c$1[HighContrastSelector] = {
                borderColor: 'Highlight',
            },
            _c$1),
    };
    var MinimumScreenSelector = getScreenSelector(0, ScreenWidthMinMedium);
    var getStyles$4 = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var theme = props.theme, hasError = props.hasError, hasLabel = props.hasLabel, className = props.className, isOpen = props.isOpen, disabled = props.disabled, required = props.required, isRenderingPlaceholder = props.isRenderingPlaceholder, panelClassName = props.panelClassName, calloutClassName = props.calloutClassName, calloutRenderEdge = props.calloutRenderEdge;
        if (!theme) {
            throw new Error('theme is undefined or null in base Dropdown getStyles function.');
        }
        var globalClassnames = getGlobalClassNames(GlobalClassNames$3, theme);
        var palette = theme.palette, semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
        var rootHoverFocusActiveSelectorNeutralDarkMixin = {
            color: semanticColors.menuItemTextHovered,
        };
        var rootHoverFocusActiveSelectorNeutralPrimaryMixin = {
            color: semanticColors.menuItemText,
        };
        var borderColorError = {
            borderColor: semanticColors.errorText,
        };
        var dropdownItemStyle = [
            globalClassnames.dropdownItem,
            {
                backgroundColor: 'transparent',
                boxSizing: 'border-box',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                padding: '0 8px',
                width: '100%',
                minHeight: DROPDOWN_ITEM_HEIGHT,
                lineHeight: 20,
                height: 0,
                position: 'relative',
                border: '1px solid transparent',
                borderRadius: 0,
                wordWrap: 'break-word',
                overflowWrap: 'break-word',
                textAlign: 'left',
                '.ms-Button-flexContainer': {
                    width: '100%',
                },
            },
        ];
        var dropdownHeaderStyle = [
            globalClassnames.dropdownItemHeader,
            tslib.__assign(tslib.__assign({}, fonts.medium), { fontWeight: FontWeights.semibold, color: semanticColors.menuHeader, background: 'none', backgroundColor: 'transparent', border: 'none', height: DROPDOWN_ITEM_HEIGHT, lineHeight: DROPDOWN_ITEM_HEIGHT, cursor: 'default', padding: '0 8px', userSelect: 'none', textAlign: 'left', selectors: (_a = {},
                    _a[HighContrastSelector] = tslib.__assign({ color: 'GrayText' }, getHighContrastNoAdjustStyle()),
                    _a) }),
        ];
        var selectedItemBackgroundColor = semanticColors.menuItemBackgroundPressed;
        var itemSelectors = function (isSelected) {
            var _a;
            if (isSelected === void 0) { isSelected = false; }
            return {
                selectors: (_a = {
                        '&:hover:focus': [
                            {
                                color: semanticColors.menuItemTextHovered,
                                backgroundColor: !isSelected ? semanticColors.menuItemBackgroundHovered : selectedItemBackgroundColor,
                            },
                            highContrastItemAndTitleStateMixin,
                        ],
                        '&:focus': [
                            {
                                backgroundColor: !isSelected ? 'transparent' : selectedItemBackgroundColor,
                            },
                            highContrastItemAndTitleStateMixin,
                        ],
                        '&:active': [
                            {
                                color: semanticColors.menuItemTextHovered,
                                backgroundColor: !isSelected ? semanticColors.menuBackground : semanticColors.menuItemBackgroundHovered,
                            },
                            highContrastItemAndTitleStateMixin,
                        ]
                    },
                    _a["." + IsFocusVisibleClassName + " &:focus:after"] = {
                        left: 0,
                        top: 0,
                        bottom: 0,
                        right: 0,
                    },
                    _a[HighContrastSelector] = {
                        border: 'none',
                    },
                    _a),
            };
        };
        var dropdownItemSelected = tslib.__spreadArray(tslib.__spreadArray([], dropdownItemStyle), [
            {
                backgroundColor: selectedItemBackgroundColor,
                color: semanticColors.menuItemTextHovered,
            },
            itemSelectors(true),
            highContrastItemAndTitleStateMixin,
        ]);
        var dropdownItemDisabled = tslib.__spreadArray(tslib.__spreadArray([], dropdownItemStyle), [
            {
                color: semanticColors.disabledText,
                cursor: 'default',
                selectors: (_b = {},
                    _b[HighContrastSelector] = {
                        color: 'GrayText',
                        border: 'none',
                    },
                    _b),
            },
        ]);
        var titleOpenBorderRadius = calloutRenderEdge === RectangleEdge.bottom
            ? effects.roundedCorner2 + " " + effects.roundedCorner2 + " 0 0"
            : "0 0 " + effects.roundedCorner2 + " " + effects.roundedCorner2;
        var calloutOpenBorderRadius = calloutRenderEdge === RectangleEdge.bottom
            ? "0 0 " + effects.roundedCorner2 + " " + effects.roundedCorner2
            : effects.roundedCorner2 + " " + effects.roundedCorner2 + " 0 0";
        return {
            root: [globalClassnames.root, className],
            label: globalClassnames.label,
            dropdown: [
                globalClassnames.dropdown,
                normalize$1,
                fonts.medium,
                {
                    color: semanticColors.menuItemText,
                    borderColor: semanticColors.focusBorder,
                    position: 'relative',
                    outline: 0,
                    userSelect: 'none',
                    selectors: (_c = {},
                        _c['&:hover .' + globalClassnames.title] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                            { borderColor: isOpen ? palette.neutralSecondary : palette.neutralPrimary },
                            highContrastBorderState,
                        ],
                        _c['&:focus .' + globalClassnames.title] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                            { selectors: (_d = {}, _d[HighContrastSelector] = { color: 'Highlight' }, _d) },
                        ],
                        _c['&:focus:after'] = [
                            {
                                pointerEvents: 'none',
                                content: "''",
                                position: 'absolute',
                                boxSizing: 'border-box',
                                top: '0px',
                                left: '0px',
                                width: '100%',
                                height: '100%',
                                // see https://github.com/microsoft/fluentui/pull/9182 for semantic color disc
                                border: !disabled ? "2px solid " + palette.themePrimary : 'none',
                                borderRadius: '2px',
                                selectors: (_e = {},
                                    _e[HighContrastSelector] = {
                                        color: 'Highlight',
                                    },
                                    _e),
                            },
                        ],
                        _c['&:active .' + globalClassnames.title] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                            { borderColor: palette.themePrimary },
                            highContrastBorderState,
                        ],
                        _c['&:hover .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,
                        _c['&:focus .' + globalClassnames.caretDown] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,
                            { selectors: (_f = {}, _f[HighContrastSelector] = { color: 'Highlight' }, _f) },
                        ],
                        _c['&:active .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,
                        _c['&:hover .' + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,
                        _c['&:focus .' + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,
                        _c['&:active .' + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,
                        _c['&:hover .' + globalClassnames.titleHasError] = borderColorError,
                        _c['&:active .' + globalClassnames.titleHasError] = borderColorError,
                        _c),
                },
                isOpen && 'is-open',
                disabled && 'is-disabled',
                required && 'is-required',
                required &&
                    !hasLabel && {
                    selectors: (_g = {
                            ':before': {
                                content: "'*'",
                                color: semanticColors.errorText,
                                position: 'absolute',
                                top: -5,
                                right: -10,
                            }
                        },
                        _g[HighContrastSelector] = {
                            selectors: {
                                ':after': {
                                    right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.
                                },
                            },
                        },
                        _g),
                },
            ],
            title: [
                globalClassnames.title,
                normalize$1,
                {
                    backgroundColor: semanticColors.inputBackground,
                    borderWidth: 1,
                    borderStyle: 'solid',
                    borderColor: semanticColors.inputBorder,
                    borderRadius: isOpen ? titleOpenBorderRadius : effects.roundedCorner2,
                    cursor: 'pointer',
                    display: 'block',
                    height: DROPDOWN_HEIGHT,
                    lineHeight: DROPDOWN_HEIGHT - 2,
                    padding: "0 28px 0 8px",
                    position: 'relative',
                    overflow: 'hidden',
                    whiteSpace: 'nowrap',
                    textOverflow: 'ellipsis',
                },
                isRenderingPlaceholder && [globalClassnames.titleIsPlaceHolder, { color: semanticColors.inputPlaceholderText }],
                hasError && [globalClassnames.titleHasError, borderColorError],
                disabled && {
                    backgroundColor: semanticColors.disabledBackground,
                    border: 'none',
                    color: semanticColors.disabledText,
                    cursor: 'default',
                    selectors: (_h = {},
                        _h[HighContrastSelector] = tslib.__assign({ border: '1px solid GrayText', color: 'GrayText', backgroundColor: 'Window' }, getHighContrastNoAdjustStyle()),
                        _h),
                },
            ],
            caretDownWrapper: [
                globalClassnames.caretDownWrapper,
                {
                    height: DROPDOWN_HEIGHT,
                    lineHeight: DROPDOWN_HEIGHT - 2,
                    paddingTop: 1,
                    position: 'absolute',
                    right: 8,
                    top: 0,
                },
                !disabled && {
                    cursor: 'pointer',
                },
            ],
            caretDown: [
                globalClassnames.caretDown,
                { color: palette.neutralSecondary, fontSize: fonts.small.fontSize, pointerEvents: 'none' },
                disabled && {
                    color: semanticColors.disabledText,
                    selectors: (_j = {},
                        _j[HighContrastSelector] = tslib.__assign({ color: 'GrayText' }, getHighContrastNoAdjustStyle()),
                        _j),
                },
            ],
            errorMessage: tslib.__assign(tslib.__assign({ color: semanticColors.errorText }, theme.fonts.small), { paddingTop: 5 }),
            callout: [
                globalClassnames.callout,
                {
                    boxShadow: effects.elevation8,
                    borderRadius: calloutOpenBorderRadius,
                    selectors: (_k = {},
                        _k['.ms-Callout-main'] = { borderRadius: calloutOpenBorderRadius },
                        _k),
                },
                calloutClassName,
            ],
            dropdownItemsWrapper: { selectors: { '&:focus': { outline: 0 } } },
            dropdownItems: [globalClassnames.dropdownItems, { display: 'block' }],
            dropdownItem: tslib.__spreadArray(tslib.__spreadArray([], dropdownItemStyle), [itemSelectors()]),
            dropdownItemSelected: dropdownItemSelected,
            dropdownItemDisabled: dropdownItemDisabled,
            dropdownItemSelectedAndDisabled: [dropdownItemSelected, dropdownItemDisabled, { backgroundColor: 'transparent' }],
            dropdownItemHidden: tslib.__spreadArray(tslib.__spreadArray([], dropdownItemStyle), [{ display: 'none' }]),
            dropdownDivider: [globalClassnames.dropdownDivider, { height: 1, backgroundColor: semanticColors.bodyDivider }],
            dropdownDividerHidden: [globalClassnames.dropdownDivider, { display: 'none' }],
            dropdownOptionText: [
                globalClassnames.dropdownOptionText,
                {
                    overflow: 'hidden',
                    whiteSpace: 'nowrap',
                    textOverflow: 'ellipsis',
                    minWidth: 0,
                    maxWidth: '100%',
                    wordWrap: 'break-word',
                    overflowWrap: 'break-word',
                    margin: '1px',
                },
            ],
            dropdownItemHeader: dropdownHeaderStyle,
            dropdownItemHeaderHidden: tslib.__spreadArray(tslib.__spreadArray([], dropdownHeaderStyle), [{ display: 'none' }]),
            subComponentStyles: {
                label: { root: { display: 'inline-block' } },
                multiSelectItem: {
                    root: {
                        padding: 0,
                    },
                    label: {
                        alignSelf: 'stretch',
                        padding: '0 8px',
                        width: '100%',
                    },
                    input: {
                        selectors: (_l = {},
                            _l["." + IsFocusVisibleClassName + " &:focus + label::before"] = {
                                outlineOffset: '0px',
                            },
                            _l),
                    },
                },
                panel: {
                    root: [panelClassName],
                    main: {
                        selectors: (_m = {},
                            // In case of extra small screen sizes
                            _m[MinimumScreenSelector] = {
                                // panelWidth xs
                                width: 272,
                            },
                            _m),
                    },
                    contentInner: { padding: '0 0 20px' },
                },
            },
        };
    };

    var Dropdown$1 = styled(DropdownBase, getStyles$4, undefined, {
        scope: 'Dropdown',
    });
    Dropdown$1.displayName = 'Dropdown';

    /**
     * {@docCategory MessageBar}
     */
    var MessageBarType;
    (function (MessageBarType) {
        /** Info styled MessageBar */
        MessageBarType[MessageBarType["info"] = 0] = "info";
        /** Error styled MessageBar */
        MessageBarType[MessageBarType["error"] = 1] = "error";
        /** Blocked styled MessageBar */
        MessageBarType[MessageBarType["blocked"] = 2] = "blocked";
        /** SevereWarning styled MessageBar */
        MessageBarType[MessageBarType["severeWarning"] = 3] = "severeWarning";
        /** Success styled MessageBar */
        MessageBarType[MessageBarType["success"] = 4] = "success";
        /** Warning styled MessageBar */
        MessageBarType[MessageBarType["warning"] = 5] = "warning";
    })(MessageBarType || (MessageBarType = {}));

    var _a$1;
    var ICON_MAP = (_a$1 = {},
        _a$1[MessageBarType.info] = 'Info',
        _a$1[MessageBarType.warning] = 'Info',
        _a$1[MessageBarType.error] = 'ErrorBadge',
        _a$1[MessageBarType.blocked] = 'Blocked2',
        _a$1[MessageBarType.severeWarning] = 'Warning',
        _a$1[MessageBarType.success] = 'Completed',
        _a$1);
    var COMPONENT_NAME$3 = 'MessageBar';
    var getClassNames$P = classNamesFunction();
    var getAnnouncementPriority = function (messageBarType) {
        switch (messageBarType) {
            case MessageBarType.blocked:
            case MessageBarType.error:
            case MessageBarType.severeWarning:
                return 'assertive';
        }
        return 'polite';
    };
    var getRole = function (messageBarType) {
        switch (messageBarType) {
            case MessageBarType.blocked:
            case MessageBarType.error:
            case MessageBarType.severeWarning:
                return 'alert';
        }
        return 'status';
    };
    var MessageBarBase = React__namespace.forwardRef(function (props, ref) {
        var _a = useBoolean(false), expandSingleLine = _a[0], toggleExpandSingleLine = _a[1].toggle;
        var labelId = useId('MessageBar');
        var actions = props.actions, className = props.className, children = props.children, 
        // eslint-disable-next-line deprecation/deprecation
        overflowButtonAriaLabel = props.overflowButtonAriaLabel, dismissIconProps = props.dismissIconProps, styles = props.styles, theme = props.theme, _b = props.messageBarType, messageBarType = _b === void 0 ? MessageBarType.info : _b, _c = props.onDismiss, onDismiss = _c === void 0 ? undefined : _c, _d = props.isMultiline, isMultiline = _d === void 0 ? true : _d, truncated = props.truncated, dismissButtonAriaLabel = props.dismissButtonAriaLabel, messageBarIconProps = props.messageBarIconProps, role = props.role, _e = props.delayedRender, delayedRender = _e === void 0 ? true : _e, expandButtonProps = props.expandButtonProps;
        var nativeProps = getNativeProps(props, htmlElementProperties, [
            'className',
            'role',
        ]);
        var classNames = getClassNames$P(styles, {
            theme: theme,
            messageBarType: messageBarType || MessageBarType.info,
            onDismiss: onDismiss !== undefined,
            actions: actions !== undefined,
            truncated: truncated,
            isMultiline: isMultiline,
            expandSingleLine: expandSingleLine,
            className: className,
        });
        var expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };
        var regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};
        var actionsDiv = actions ? React__namespace.createElement("div", { className: classNames.actions }, actions) : null;
        var dismissButton = onDismiss ? (React__namespace.createElement(IconButton$1, { disabled: false, className: classNames.dismissal, onClick: onDismiss, iconProps: dismissIconProps ? dismissIconProps : { iconName: 'Clear' }, title: dismissButtonAriaLabel, ariaLabel: dismissButtonAriaLabel })) : null;
        return (React__namespace.createElement("div", tslib.__assign({ ref: ref, className: classNames.root }, regionProps),
            React__namespace.createElement("div", { className: classNames.content },
                React__namespace.createElement("div", { className: classNames.iconContainer, "aria-hidden": true }, messageBarIconProps ? (React__namespace.createElement(Icon$1, tslib.__assign({}, messageBarIconProps, { className: css(classNames.icon, messageBarIconProps.className) }))) : (React__namespace.createElement(Icon$1, { iconName: ICON_MAP[messageBarType], className: classNames.icon }))),
                React__namespace.createElement("div", { className: classNames.text, id: labelId, role: role || getRole(messageBarType), "aria-live": getAnnouncementPriority(messageBarType) },
                    React__namespace.createElement("span", tslib.__assign({ className: classNames.innerText }, nativeProps), delayedRender ? (React__namespace.createElement(DelayedRender, null,
                        React__namespace.createElement("span", null, children))) : (
                    // this span is probably not necessary, but preserving it for now in case anyone
                    // has styling that expects it to be present
                    React__namespace.createElement("span", null, children)))),
                /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (React__namespace.createElement("div", { className: classNames.expandSingleLine },
                    React__namespace.createElement(IconButton$1, tslib.__assign({ disabled: false, className: classNames.expand, onClick: toggleExpandSingleLine, iconProps: expandIconProps, ariaLabel: overflowButtonAriaLabel, "aria-expanded": expandSingleLine }, expandButtonProps)))),
                !isMultiline && actionsDiv,
                /* singleline dismiss */ !isMultiline && dismissButton && (React__namespace.createElement("div", { className: classNames.dismissSingleLine }, dismissButton)),
                isMultiline && dismissButton),
            isMultiline && actionsDiv));
    });
    MessageBarBase.displayName = COMPONENT_NAME$3;

    var _a, _b, _c;
    var GlobalClassNames$2 = {
        root: 'ms-MessageBar',
        error: 'ms-MessageBar--error',
        blocked: 'ms-MessageBar--blocked',
        severeWarning: 'ms-MessageBar--severeWarning',
        success: 'ms-MessageBar--success',
        warning: 'ms-MessageBar--warning',
        multiline: 'ms-MessageBar-multiline',
        singleline: 'ms-MessageBar-singleline',
        dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',
        expandingSingleLine: 'ms-MessageBar-expandingSingleLine',
        content: 'ms-MessageBar-content',
        iconContainer: 'ms-MessageBar-icon',
        text: 'ms-MessageBar-text',
        innerText: 'ms-MessageBar-innerText',
        dismissSingleLine: 'ms-MessageBar-dismissSingleLine',
        expandSingleLine: 'ms-MessageBar-expandSingleLine',
        dismissal: 'ms-MessageBar-dismissal',
        expand: 'ms-MessageBar-expand',
        actions: 'ms-MessageBar-actions',
        actionsSingleline: 'ms-MessageBar-actionsSingleLine',
    };
    var backgroundColor = (_a = {},
        _a[MessageBarType.error] = 'errorBackground',
        _a[MessageBarType.blocked] = 'errorBackground',
        _a[MessageBarType.success] = 'successBackground',
        _a[MessageBarType.warning] = 'warningBackground',
        _a[MessageBarType.severeWarning] = 'severeWarningBackground',
        _a[MessageBarType.info] = 'infoBackground',
        _a);
    var highContrastBackgroundColor = (_b = {},
        _b[MessageBarType.error] = 'rgba(255, 0, 0, 0.3)',
        _b[MessageBarType.blocked] = 'rgba(255, 0, 0, 0.3)',
        _b[MessageBarType.success] = 'rgba(48, 241, 73, 0.3)',
        _b[MessageBarType.warning] = 'rgba(255, 254, 57, 0.3)',
        _b[MessageBarType.severeWarning] = 'rgba(255, 0, 0, 0.3)',
        _b[MessageBarType.info] = 'Window',
        _b);
    var iconColor = (_c = {},
        _c[MessageBarType.error] = 'errorIcon',
        _c[MessageBarType.blocked] = 'errorIcon',
        _c[MessageBarType.success] = 'successIcon',
        _c[MessageBarType.warning] = 'warningIcon',
        _c[MessageBarType.severeWarning] = 'severeWarningIcon',
        _c[MessageBarType.info] = 'infoIcon',
        _c);
    var getStyles$3 = function (props) {
        var _a, _b, _c, _d, _e;
        var theme = props.theme, className = props.className, onDismiss = props.onDismiss, truncated = props.truncated, isMultiline = props.isMultiline, expandSingleLine = props.expandSingleLine, _f = props.messageBarType, messageBarType = _f === void 0 ? MessageBarType.info : _f;
        var semanticColors = theme.semanticColors, fonts = theme.fonts;
        var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);
        var classNames = getGlobalClassNames(GlobalClassNames$2, theme);
        var dismissalAndExpandIconStyle = {
            fontSize: IconFontSizes.xSmall,
            height: 10,
            lineHeight: '10px',
            color: semanticColors.messageText,
            selectors: (_a = {},
                _a[HighContrastSelector] = tslib.__assign(tslib.__assign({}, getHighContrastNoAdjustStyle()), { color: 'WindowText' }),
                _a),
        };
        var dismissalAndExpandStyle = [
            getFocusStyle(theme, {
                inset: 1,
                highContrastStyle: {
                    outlineOffset: '-6px',
                    outline: '1px solid Highlight',
                },
                borderColor: 'transparent',
            }),
            {
                flexShrink: 0,
                width: 32,
                height: 32,
                padding: '8px 12px',
                selectors: {
                    '& .ms-Button-icon': dismissalAndExpandIconStyle,
                    ':hover': {
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        backgroundColor: 'transparent',
                    },
                },
            },
        ];
        return {
            root: [
                classNames.root,
                fonts.medium,
                messageBarType === MessageBarType.error && classNames.error,
                messageBarType === MessageBarType.blocked && classNames.blocked,
                messageBarType === MessageBarType.severeWarning && classNames.severeWarning,
                messageBarType === MessageBarType.success && classNames.success,
                messageBarType === MessageBarType.warning && classNames.warning,
                isMultiline ? classNames.multiline : classNames.singleline,
                !isMultiline && onDismiss && classNames.dismissalSingleLine,
                !isMultiline && truncated && classNames.expandingSingleLine,
                {
                    background: semanticColors[backgroundColor[messageBarType]],
                    color: semanticColors.messageText,
                    minHeight: 32,
                    width: '100%',
                    display: 'flex',
                    wordBreak: 'break-word',
                    selectors: (_b = {
                            '.ms-Link': {
                                color: semanticColors.messageLink,
                                selectors: {
                                    ':hover': {
                                        color: semanticColors.messageLinkHovered,
                                    },
                                },
                            }
                        },
                        _b[HighContrastSelector] = tslib.__assign(tslib.__assign({}, getHighContrastNoAdjustStyle()), { background: highContrastBackgroundColor[messageBarType], border: '1px solid WindowText', color: 'WindowText' }),
                        _b),
                },
                isMultiline && {
                    flexDirection: 'column',
                },
                className,
            ],
            content: [
                classNames.content,
                {
                    display: 'flex',
                    width: '100%',
                    lineHeight: 'normal',
                },
            ],
            iconContainer: [
                classNames.iconContainer,
                {
                    fontSize: IconFontSizes.medium,
                    minWidth: 16,
                    minHeight: 16,
                    display: 'flex',
                    flexShrink: 0,
                    margin: '8px 0 8px 12px',
                },
            ],
            icon: {
                color: semanticColors[iconColor[messageBarType]],
                selectors: (_c = {},
                    _c[HighContrastSelector] = tslib.__assign(tslib.__assign({}, getHighContrastNoAdjustStyle()), { color: 'WindowText' }),
                    _c),
            },
            text: [
                classNames.text,
                tslib.__assign(tslib.__assign({ minWidth: 0, display: 'flex', flexGrow: 1, margin: 8 }, fonts.small), { selectors: (_d = {},
                        _d[HighContrastSelector] = tslib.__assign({}, getHighContrastNoAdjustStyle()),
                        _d) }),
                !onDismiss && {
                    marginRight: 12,
                },
            ],
            innerText: [
                classNames.innerText,
                {
                    lineHeight: 16,
                    selectors: {
                        '& span a:last-child': {
                            paddingLeft: 4,
                        },
                    },
                },
                truncated && {
                    overflow: 'visible',
                    whiteSpace: 'pre-wrap',
                },
                !isMultiline && {
                    // In high contrast this causes the top and bottom of links' focus outline to be clipped
                    // (not sure of a good way around that while still maintaining text clipping)
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap',
                },
                !isMultiline &&
                    !truncated && {
                    selectors: (_e = {},
                        _e[SmallScreenSelector] = {
                            overflow: 'visible',
                            whiteSpace: 'pre-wrap',
                        },
                        _e),
                },
                expandSingleLine && {
                    overflow: 'visible',
                    whiteSpace: 'pre-wrap',
                },
            ],
            dismissSingleLine: classNames.dismissSingleLine,
            expandSingleLine: classNames.expandSingleLine,
            dismissal: [classNames.dismissal, dismissalAndExpandStyle],
            expand: [classNames.expand, dismissalAndExpandStyle],
            actions: [
                isMultiline ? classNames.actions : classNames.actionsSingleline,
                {
                    display: 'flex',
                    flexGrow: 0,
                    flexShrink: 0,
                    flexBasis: 'auto',
                    flexDirection: 'row-reverse',
                    alignItems: 'center',
                    margin: '0 12px 0 8px',
                    selectors: {
                        '& button:nth-child(n+2)': {
                            marginLeft: 8,
                        },
                    },
                },
                isMultiline && {
                    marginBottom: 8,
                },
                onDismiss &&
                    !isMultiline && {
                    marginRight: 0,
                },
            ],
        };
    };

    var MessageBar$1 = styled(MessageBarBase, getStyles$3, undefined, {
        scope: 'MessageBar',
    });

    /**
     * Wrapper for ResizeObserver, with fallback for browsers that don't support ResizeObserver.
     *
     * Calls the onResize callback once layout is complete, and again whenever any of the target(s) change size.
     * Or if ResizeObserver isn't supported, calls the callback whenever the window changes size.
     *
     * @param target - Either a single element, or array of elements to watch for size changes.
     * @param onResize - Callback to be notified when layout is complete, and when the target(s) change size.
     *    If this browser supports ResizeObserver, the callback will be passed the ResizeObserverEntry[] array.
     *    Otherwise, the entries array will be undefined, and you'll need to find another way to get the element's size,
     *    (e.g. clientWidth/clientHeight or getBoundingClientRect).
     *
     * @returns A function to clean up the observer/listener.
     */
    var observeResize = function (target, onResize) {
        if (typeof ResizeObserver !== 'undefined') {
            var observer_1 = new ResizeObserver(onResize);
            if (Array.isArray(target)) {
                target.forEach(function (t) { return observer_1.observe(t); });
            }
            else {
                observer_1.observe(target);
            }
            return function () { return observer_1.disconnect(); };
        }
        else {
            // Fallback for browsers that don't support ResizeObserver
            var onResizeWrapper_1 = function () { return onResize(undefined); };
            var win_1 = getWindow(Array.isArray(target) ? target[0] : target);
            if (!win_1) {
                // Can't listen for resize if we can't get the window object
                return function () {
                    // Nothing to clean up
                };
            }
            // Listen for the first animation frame, which will happen after layout is complete
            var animationFrameId_1 = win_1.requestAnimationFrame(onResizeWrapper_1);
            win_1.addEventListener('resize', onResizeWrapper_1, false);
            return function () {
                win_1.cancelAnimationFrame(animationFrameId_1);
                win_1.removeEventListener('resize', onResizeWrapper_1, false);
            };
        }
    };

    /**
     * Track whether any items don't fit within their container, and move them to the overflow menu.
     * Items are moved into the overflow menu from back to front, excluding pinned items.
     *
     * The overflow menu button must be the last sibling of all of the items that can be put into the overflow, and it
     * must be hooked up to the `setMenuButtonRef` setter function that's returned by `useOverflow`:
     * ```ts
     * const overflow = useOverflow(...);
     * ```
     * ```jsx
     * <Container>
     *  <Item /> // Index 0
     *  <Item /> // Index 1
     *  ...
     *  <Button ref={overflow.setMenuButtonRef} /> // Can be any React.Component or HTMLElement
     * </Container>
     * ```
     */
    var useOverflow = function (_a) {
        var onOverflowItemsChanged = _a.onOverflowItemsChanged, rtl = _a.rtl, pinnedIndex = _a.pinnedIndex;
        var updateOverflowRef = React__namespace.useRef();
        var containerWidthRef = React__namespace.useRef();
        // Attach a resize observer to the container
        var containerRef = useRefEffect(function (container) {
            var cleanupObserver = observeResize(container, function (entries) {
                containerWidthRef.current = entries ? entries[0].contentRect.width : container.clientWidth;
                if (updateOverflowRef.current) {
                    updateOverflowRef.current();
                }
            });
            return function () {
                cleanupObserver();
                containerWidthRef.current = undefined;
            };
        });
        var menuButtonRef = useRefEffect(function (menuButton) {
            containerRef(menuButton.parentElement);
            return function () { return containerRef(null); };
        });
        useIsomorphicLayoutEffect(function () {
            var container = containerRef.current;
            var menuButton = menuButtonRef.current;
            if (!container || !menuButton) {
                return;
            }
            // items contains the container's children, excluding the overflow menu button itself
            var items = [];
            for (var i = 0; i < container.children.length; i++) {
                var item = container.children[i];
                if (item instanceof HTMLElement && item !== menuButton) {
                    items.push(item);
                }
            }
            // Keep track of the minimum width of the container to fit each child index.
            // This cache is an integral part of the algorithm and not just a performance optimization: it allows us to
            // recalculate the overflowIndex on subsequent resizes even if some items are already inside the overflow.
            var minContainerWidth = [];
            var extraWidth = 0; // The accumulated width of items that don't move into the overflow
            updateOverflowRef.current = function () {
                var containerWidth = containerWidthRef.current;
                if (containerWidth === undefined) {
                    return;
                }
                // Iterate the items in reverse order until we find one that fits within the bounds of the container
                for (var i = items.length - 1; i >= 0; i--) {
                    // Calculate the min container width for this item if we haven't done so yet
                    if (minContainerWidth[i] === undefined) {
                        var itemOffsetEnd = rtl ? containerWidth - items[i].offsetLeft : items[i].offsetLeft + items[i].offsetWidth;
                        // If the item after this one is pinned, reserve space for it
                        if (i + 1 < items.length && i + 1 === pinnedIndex) {
                            // Use distance between the end of the previous item and this one (rather than the
                            // pinned item's offsetWidth), to account for any margin between the items.
                            extraWidth = minContainerWidth[i + 1] - itemOffsetEnd;
                        }
                        // Reserve space for the menu button after the first item was added to the overflow
                        if (i === items.length - 2) {
                            extraWidth += menuButton.offsetWidth;
                        }
                        minContainerWidth[i] = itemOffsetEnd + extraWidth;
                    }
                    if (containerWidth > minContainerWidth[i]) {
                        setOverflowIndex(i + 1);
                        return;
                    }
                }
                // If we got here, nothing fits outside the overflow
                setOverflowIndex(0);
            };
            var prevOverflowIndex = items.length;
            var setOverflowIndex = function (overflowIndex) {
                if (prevOverflowIndex !== overflowIndex) {
                    prevOverflowIndex = overflowIndex;
                    onOverflowItemsChanged(overflowIndex, items.map(function (ele, index) { return ({
                        ele: ele,
                        isOverflowing: index >= overflowIndex && index !== pinnedIndex,
                    }); }));
                }
            };
            var cancelAnimationFrame = undefined;
            // If the container width is already known from a previous render, update the overflow with its width.
            // Do this in an animation frame to avoid forcing layout to happen early.
            if (containerWidthRef.current !== undefined) {
                var win_1 = getWindow(container);
                if (win_1) {
                    var animationFrameId_1 = win_1.requestAnimationFrame(updateOverflowRef.current);
                    cancelAnimationFrame = function () { return win_1.cancelAnimationFrame(animationFrameId_1); };
                }
            }
            return function () {
                if (cancelAnimationFrame) {
                    cancelAnimationFrame();
                }
                // On cleanup, need to remove all items from the overflow
                // so they don't have stale properties on the next render
                setOverflowIndex(items.length);
                updateOverflowRef.current = undefined;
            };
        });
        return { menuButtonRef: menuButtonRef };
    };

    var COMPONENT_NAME$2 = 'PivotItem';
    var PivotItem = /** @class */ (function (_super) {
        tslib.__extends(PivotItem, _super);
        function PivotItem(props) {
            var _this = _super.call(this, props) || this;
            initializeComponentRef(_this);
            warnDeprecations(COMPONENT_NAME$2, props, {
                linkText: 'headerText',
            });
            return _this;
        }
        PivotItem.prototype.render = function () {
            return React__namespace.createElement("div", tslib.__assign({}, getNativeProps(this.props, divProperties)), this.props.children);
        };
        return PivotItem;
    }(React__namespace.Component));

    var getClassNames$O = classNamesFunction();
    var COMPONENT_NAME$1 = 'Pivot';
    var getTabId = function (props, pivotId, itemKey, index) {
        if (props.getTabId) {
            return props.getTabId(itemKey, index);
        }
        return pivotId + ("-Tab" + index);
    };
    // Gets the set of PivotLinks as array of IPivotItemProps
    // The set of Links is determined by child components of type PivotItem
    var getLinkItems = function (props, pivotId) {
        var result = {
            links: [],
            keyToIndexMapping: {},
            keyToTabIdMapping: {},
        };
        React__namespace.Children.forEach(React__namespace.Children.toArray(props.children), function (child, index) {
            if (isPivotItem(child)) {
                // eslint-disable-next-line deprecation/deprecation
                var _a = child.props, linkText = _a.linkText, pivotItemProps = tslib.__rest(_a, ["linkText"]);
                var itemKey = child.props.itemKey || index.toString();
                result.links.push(tslib.__assign(tslib.__assign({ headerText: linkText }, pivotItemProps), { itemKey: itemKey }));
                result.keyToIndexMapping[itemKey] = index;
                result.keyToTabIdMapping[itemKey] = getTabId(props, pivotId, itemKey, index);
            }
            else if (child) {
                warn('The children of a Pivot component must be of type PivotItem to be rendered.');
            }
        });
        return result;
    };
    var isPivotItem = function (item) {
        var _a;
        return React__namespace.isValidElement(item) && ((_a = item.type) === null || _a === void 0 ? void 0 : _a.name) === PivotItem.name;
    };
    var PivotBase = React__namespace.forwardRef(function (props, ref) {
        var focusZoneRef = React__namespace.useRef(null);
        var overflowMenuButtonComponentRef = React__namespace.useRef(null);
        var pivotId = useId('Pivot');
        var _a = useControllableValue(props.selectedKey, props.defaultSelectedKey), selectedKey = _a[0], setSelectedKey = _a[1];
        var componentRef = props.componentRef, theme = props.theme, linkSize = props.linkSize, linkFormat = props.linkFormat, overflowBehavior = props.overflowBehavior, overflowAriaLabel = props.overflowAriaLabel, focusZoneProps = props.focusZoneProps;
        var classNames;
        var nameProps = {
            'aria-label': props['aria-label'],
            'aria-labelledby': props['aria-labelledby'],
        };
        var divProps = getNativeProps(props, divProperties, [
            'aria-label',
            'aria-labelledby',
        ]);
        var linkCollection = getLinkItems(props, pivotId);
        React__namespace.useImperativeHandle(componentRef, function () { return ({
            focus: function () {
                var _a;
                (_a = focusZoneRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            },
        }); });
        var renderLinkContent = function (link) {
            if (!link) {
                return null;
            }
            var itemCount = link.itemCount, itemIcon = link.itemIcon, headerText = link.headerText;
            return (React__namespace.createElement("span", { className: classNames.linkContent },
                itemIcon !== undefined && (React__namespace.createElement("span", { className: classNames.icon },
                    React__namespace.createElement(Icon$1, { iconName: itemIcon }))),
                headerText !== undefined && React__namespace.createElement("span", { className: classNames.text },
                    " ",
                    link.headerText),
                itemCount !== undefined && React__namespace.createElement("span", { className: classNames.count },
                    " (",
                    itemCount,
                    ")")));
        };
        var renderPivotLink = function (renderLinkCollection, link, renderPivotLinkSelectedKey, className) {
            var itemKey = link.itemKey, headerButtonProps = link.headerButtonProps, onRenderItemLink = link.onRenderItemLink;
            var tabId = renderLinkCollection.keyToTabIdMapping[itemKey];
            var linkContent;
            var isSelected = renderPivotLinkSelectedKey === itemKey;
            if (onRenderItemLink) {
                linkContent = onRenderItemLink(link, renderLinkContent);
            }
            else {
                linkContent = renderLinkContent(link);
            }
            var contentString = link.headerText || '';
            contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';
            // Adding space supplementary for icon
            contentString += link.itemIcon ? ' xx' : '';
            return (React__namespace.createElement(CommandButton, tslib.__assign({}, headerButtonProps, { id: tabId, key: itemKey, className: css(className, isSelected && classNames.linkIsSelected), 
                // eslint-disable-next-line react/jsx-no-bind
                onClick: function (ev) { return onLinkClick(itemKey, ev); }, 
                // eslint-disable-next-line react/jsx-no-bind
                onKeyDown: function (ev) { return onKeyDown(itemKey, ev); }, "aria-label": link.ariaLabel, role: link.role || 'tab', "aria-selected": isSelected, name: link.headerText, keytipProps: link.keytipProps, "data-content": contentString }), linkContent));
        };
        var onLinkClick = function (itemKey, ev) {
            ev.preventDefault();
            updateSelectedItem(itemKey, ev);
        };
        var onKeyDown = function (itemKey, ev) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === KeyCodes.enter) {
                ev.preventDefault();
                updateSelectedItem(itemKey);
            }
        };
        var updateSelectedItem = function (itemKey, ev) {
            var _a;
            setSelectedKey(itemKey);
            linkCollection = getLinkItems(props, pivotId);
            if (props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {
                var selectedIndex = linkCollection.keyToIndexMapping[itemKey];
                var item = React__namespace.Children.toArray(props.children)[selectedIndex];
                if (isPivotItem(item)) {
                    props.onLinkClick(item, ev);
                }
            }
            (_a = overflowMenuButtonComponentRef.current) === null || _a === void 0 ? void 0 : _a.dismissMenu();
        };
        var renderPivotItem = function (itemKey, isActive) {
            if (props.headersOnly || !itemKey) {
                return null;
            }
            var index = linkCollection.keyToIndexMapping[itemKey];
            var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];
            return (React__namespace.createElement("div", { role: "tabpanel", hidden: !isActive, key: itemKey, "aria-hidden": !isActive, "aria-labelledby": selectedTabId, className: classNames.itemContainer }, React__namespace.Children.toArray(props.children)[index]));
        };
        var isKeyValid = function (itemKey) {
            return itemKey === null || (itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined);
        };
        var getSelectedKey = function () {
            if (isKeyValid(selectedKey)) {
                return selectedKey;
            }
            if (linkCollection.links.length) {
                return linkCollection.links[0].itemKey;
            }
            return undefined;
        };
        classNames = getClassNames$O(props.styles, {
            theme: theme,
            linkSize: linkSize,
            linkFormat: linkFormat,
        });
        var renderedSelectedKey = getSelectedKey();
        var renderedSelectedIndex = renderedSelectedKey ? linkCollection.keyToIndexMapping[renderedSelectedKey] : 0;
        var items = linkCollection.links.map(function (l) {
            return renderPivotLink(linkCollection, l, renderedSelectedKey, classNames.link);
        });
        // The overflow menu starts empty and items[] is updated as the overflow items change
        var overflowMenuProps = React__namespace.useMemo(function () { return ({
            items: [],
            alignTargetEdge: true,
            directionalHint: DirectionalHint.bottomRightEdge,
        }); }, []);
        var overflowMenuButtonRef = useOverflow({
            onOverflowItemsChanged: function (overflowIndex, elements) {
                // Set data-is-overflowing on each item
                elements.forEach(function (_a) {
                    var ele = _a.ele, isOverflowing = _a.isOverflowing;
                    return (ele.dataset.isOverflowing = "" + isOverflowing);
                });
                // Update the menu items
                overflowMenuProps.items = linkCollection.links
                    .slice(overflowIndex)
                    .filter(function (link) { return link.itemKey !== renderedSelectedKey; })
                    .map(function (link, index) {
                    return {
                        key: link.itemKey || "" + (overflowIndex + index),
                        onRender: function () { return renderPivotLink(linkCollection, link, renderedSelectedKey, classNames.linkInMenu); },
                    };
                });
            },
            rtl: getRTL(theme),
            pinnedIndex: renderedSelectedIndex,
        }).menuButtonRef;
        return (React__namespace.createElement("div", tslib.__assign({ ref: ref }, divProps),
            React__namespace.createElement(FocusZone, tslib.__assign({ componentRef: focusZoneRef, role: "tablist" }, nameProps, { direction: FocusZoneDirection.horizontal }, focusZoneProps, { className: css(classNames.root, focusZoneProps === null || focusZoneProps === void 0 ? void 0 : focusZoneProps.className) }),
                items,
                overflowBehavior === 'menu' && (React__namespace.createElement(CommandButton, { className: css(classNames.link, classNames.overflowMenuButton), elementRef: overflowMenuButtonRef, componentRef: overflowMenuButtonComponentRef, menuProps: overflowMenuProps, menuIconProps: { iconName: 'More', style: { color: 'inherit' } }, ariaLabel: overflowAriaLabel }))),
            renderedSelectedKey &&
                linkCollection.links.map(function (link) {
                    return (link.alwaysRender === true || renderedSelectedKey === link.itemKey) &&
                        renderPivotItem(link.itemKey, renderedSelectedKey === link.itemKey);
                })));
    });
    PivotBase.displayName = COMPONENT_NAME$1;

    var globalClassNames = {
        count: 'ms-Pivot-count',
        icon: 'ms-Pivot-icon',
        linkIsSelected: 'is-selected',
        link: 'ms-Pivot-link',
        linkContent: 'ms-Pivot-linkContent',
        root: 'ms-Pivot',
        rootIsLarge: 'ms-Pivot--large',
        rootIsTabs: 'ms-Pivot--tabs',
        text: 'ms-Pivot-text',
        linkInMenu: 'ms-Pivot-linkInMenu',
        overflowMenuButton: 'ms-Pivot-overflowMenuButton',
    };
    var getLinkStyles = function (props, classNames, isLinkInOverflowMenu) {
        var _a, _b, _c;
        if (isLinkInOverflowMenu === void 0) { isLinkInOverflowMenu = false; }
        var linkSize = props.linkSize, linkFormat = props.linkFormat;
        var _d = props.theme, semanticColors = _d.semanticColors, fonts = _d.fonts;
        var rootIsLarge = linkSize === 'large';
        var rootIsTabs = linkFormat === 'tabs';
        return [
            fonts.medium,
            {
                color: semanticColors.actionLink,
                padding: '0 8px',
                position: 'relative',
                backgroundColor: 'transparent',
                border: 0,
                borderRadius: 0,
                selectors: (_a = {
                        ':hover': {
                            backgroundColor: semanticColors.buttonBackgroundHovered,
                            color: semanticColors.buttonTextHovered,
                            cursor: 'pointer',
                        },
                        ':active': {
                            backgroundColor: semanticColors.buttonBackgroundPressed,
                            color: semanticColors.buttonTextHovered,
                        },
                        ':focus': {
                            outline: 'none',
                        }
                    },
                    _a["." + IsFocusVisibleClassName + " &:focus"] = {
                        outline: "1px solid " + semanticColors.focusBorder,
                    },
                    _a["." + IsFocusVisibleClassName + " &:focus:after"] = {
                        content: 'attr(data-content)',
                        position: 'relative',
                        border: 0,
                    },
                    _a),
            },
            !isLinkInOverflowMenu && [
                {
                    display: 'inline-block',
                    lineHeight: 44,
                    height: 44,
                    marginRight: 8,
                    textAlign: 'center',
                    selectors: {
                        ':before': {
                            backgroundColor: 'transparent',
                            bottom: 0,
                            content: '""',
                            height: 2,
                            left: 8,
                            position: 'absolute',
                            right: 8,
                            transition: "left " + AnimationVariables.durationValue2 + " " + AnimationVariables.easeFunction2 + ",\n                        right " + AnimationVariables.durationValue2 + " " + AnimationVariables.easeFunction2,
                        },
                        ':after': {
                            color: 'transparent',
                            content: 'attr(data-content)',
                            display: 'block',
                            fontWeight: FontWeights.bold,
                            height: 1,
                            overflow: 'hidden',
                            visibility: 'hidden',
                        },
                    },
                },
                rootIsLarge && {
                    fontSize: fonts.large.fontSize,
                },
                rootIsTabs && [
                    {
                        marginRight: 0,
                        height: 44,
                        lineHeight: 44,
                        backgroundColor: semanticColors.buttonBackground,
                        padding: '0 10px',
                        verticalAlign: 'top',
                        selectors: (_b = {
                                ':focus': {
                                    outlineOffset: '-1px',
                                }
                            },
                            _b["." + IsFocusVisibleClassName + " &:focus::before"] = {
                                height: 'auto',
                                background: 'transparent',
                                transition: 'none',
                            },
                            _b['&:hover, &:focus'] = {
                                color: semanticColors.buttonTextCheckedHovered,
                            },
                            _b['&:active, &:hover'] = {
                                color: semanticColors.primaryButtonText,
                                backgroundColor: semanticColors.primaryButtonBackground,
                            },
                            _b["&." + classNames.linkIsSelected] = {
                                backgroundColor: semanticColors.primaryButtonBackground,
                                color: semanticColors.primaryButtonText,
                                fontWeight: FontWeights.regular,
                                selectors: (_c = {
                                        ':before': {
                                            backgroundColor: 'transparent',
                                            transition: 'none',
                                            position: 'absolute',
                                            top: 0,
                                            left: 0,
                                            right: 0,
                                            bottom: 0,
                                            content: '""',
                                            height: 0,
                                        },
                                        ':hover': {
                                            backgroundColor: semanticColors.primaryButtonBackgroundHovered,
                                            color: semanticColors.primaryButtonText,
                                        },
                                        '&:active': {
                                            backgroundColor: semanticColors.primaryButtonBackgroundPressed,
                                            color: semanticColors.primaryButtonText,
                                        }
                                    },
                                    _c[HighContrastSelector] = tslib.__assign({ fontWeight: FontWeights.semibold, color: 'HighlightText', background: 'Highlight' }, getHighContrastNoAdjustStyle()),
                                    _c),
                            },
                            _b),
                    },
                ],
            ],
        ];
    };
    var getStyles$2 = function (props) {
        var _a, _b, _c, _d;
        var className = props.className, linkSize = props.linkSize, linkFormat = props.linkFormat, theme = props.theme;
        var semanticColors = theme.semanticColors, fonts = theme.fonts;
        var classNames = getGlobalClassNames(globalClassNames, theme);
        var rootIsLarge = linkSize === 'large';
        var rootIsTabs = linkFormat === 'tabs';
        return {
            root: [
                classNames.root,
                fonts.medium,
                normalize$1,
                {
                    position: 'relative',
                    color: semanticColors.link,
                    whiteSpace: 'nowrap',
                },
                rootIsLarge && classNames.rootIsLarge,
                rootIsTabs && classNames.rootIsTabs,
                className,
            ],
            itemContainer: {
                selectors: {
                    '&[hidden]': {
                        display: 'none',
                    },
                },
            },
            link: tslib.__spreadArray(tslib.__spreadArray([
                classNames.link
            ], getLinkStyles(props, classNames)), [
                (_a = {},
                    _a["&[data-is-overflowing='true']"] = {
                        display: 'none',
                    },
                    _a),
            ]),
            overflowMenuButton: [
                classNames.overflowMenuButton,
                (_b = {
                        visibility: 'hidden',
                        position: 'absolute',
                        right: 0
                    },
                    _b["." + classNames.link + "[data-is-overflowing='true'] ~ &"] = {
                        visibility: 'visible',
                        position: 'relative',
                    },
                    _b),
            ],
            linkInMenu: tslib.__spreadArray(tslib.__spreadArray([
                classNames.linkInMenu
            ], getLinkStyles(props, classNames, true)), [
                {
                    textAlign: 'left',
                    width: '100%',
                    height: 36,
                    lineHeight: 36,
                },
            ]),
            linkIsSelected: [
                classNames.link,
                classNames.linkIsSelected,
                {
                    fontWeight: FontWeights.semibold,
                    selectors: (_c = {
                            ':before': {
                                backgroundColor: semanticColors.inputBackgroundChecked,
                                selectors: (_d = {},
                                    _d[HighContrastSelector] = {
                                        backgroundColor: 'Highlight',
                                    },
                                    _d),
                            },
                            ':hover::before': {
                                left: 0,
                                right: 0,
                            }
                        },
                        _c[HighContrastSelector] = {
                            color: 'Highlight',
                        },
                        _c),
                },
            ],
            linkContent: [
                classNames.linkContent,
                {
                    flex: '0 1 100%',
                    selectors: {
                        '& > * ': {
                            marginLeft: 4,
                        },
                        '& > *:first-child': {
                            marginLeft: 0,
                        },
                    },
                },
            ],
            text: [
                classNames.text,
                {
                    display: 'inline-block',
                    verticalAlign: 'top',
                },
            ],
            count: [
                classNames.count,
                {
                    display: 'inline-block',
                    verticalAlign: 'top',
                },
            ],
            icon: classNames.icon,
        };
    };

    /**
     * The Pivot control and related tabs pattern are used for navigating frequently accessed,
     * distinct content categories. Pivots allow for navigation between two or more content
     * views and relies on text headers to articulate the different sections of content.
     */
    var Pivot = styled(PivotBase, getStyles$2, undefined, {
        scope: 'Pivot',
    });

    var getClassNames$N = classNamesFunction();
    // if the percentComplete is near 0, don't animate it.
    // This prevents animations on reset to 0 scenarios
    var ZERO_THRESHOLD = 0.01;
    /**
     * ProgressIndicator with no default styles.
     * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)
     */
    var ProgressIndicatorBase = /** @class */ (function (_super) {
        tslib.__extends(ProgressIndicatorBase, _super);
        function ProgressIndicatorBase(props) {
            var _this = _super.call(this, props) || this;
            _this._onRenderProgress = function (props) {
                var _a = _this.props, ariaLabel = _a.ariaLabel, ariaValueText = _a.ariaValueText, barHeight = _a.barHeight, className = _a.className, description = _a.description, 
                // eslint-disable-next-line deprecation/deprecation
                _b = _a.label, 
                // eslint-disable-next-line deprecation/deprecation
                label = _b === void 0 ? _this.props.title : _b, styles = _a.styles, theme = _a.theme;
                var percentComplete = typeof _this.props.percentComplete === 'number'
                    ? Math.min(100, Math.max(0, _this.props.percentComplete * 100))
                    : undefined;
                var classNames = getClassNames$N(styles, {
                    theme: theme,
                    className: className,
                    barHeight: barHeight,
                    indeterminate: percentComplete === undefined ? true : false,
                });
                var progressBarStyles = {
                    width: percentComplete !== undefined ? percentComplete + '%' : undefined,
                    transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,
                };
                var ariaValueMin = percentComplete !== undefined ? 0 : undefined;
                var ariaValueMax = percentComplete !== undefined ? 100 : undefined;
                var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;
                return (React__namespace.createElement("div", { className: classNames.itemProgress },
                    React__namespace.createElement("div", { className: classNames.progressTrack }),
                    React__namespace.createElement("div", { className: classNames.progressBar, style: progressBarStyles, role: "progressbar", "aria-describedby": description ? _this._descriptionId : undefined, "aria-label": ariaLabel, "aria-labelledby": label ? _this._labelId : undefined, "aria-valuemin": ariaValueMin, "aria-valuemax": ariaValueMax, "aria-valuenow": ariaValueNow, "aria-valuetext": ariaValueText })));
            };
            var id = getId('progress-indicator');
            _this._labelId = id + '-label';
            _this._descriptionId = id + '-description';
            return _this;
        }
        ProgressIndicatorBase.prototype.render = function () {
            var _a = this.props, barHeight = _a.barHeight, className = _a.className, 
            // eslint-disable-next-line deprecation/deprecation
            _b = _a.label, 
            // eslint-disable-next-line deprecation/deprecation
            label = _b === void 0 ? this.props.title : _b, // Fall back to deprecated value.
            description = _a.description, styles = _a.styles, theme = _a.theme, progressHidden = _a.progressHidden, _c = _a.onRenderProgress, onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;
            var percentComplete = typeof this.props.percentComplete === 'number'
                ? Math.min(100, Math.max(0, this.props.percentComplete * 100))
                : undefined;
            var classNames = getClassNames$N(styles, {
                theme: theme,
                className: className,
                barHeight: barHeight,
                indeterminate: percentComplete === undefined ? true : false,
            });
            return (React__namespace.createElement("div", { className: classNames.root },
                label ? (React__namespace.createElement("div", { id: this._labelId, className: classNames.itemName }, label)) : null,
                !progressHidden
                    ? onRenderProgress(tslib.__assign(tslib.__assign({}, this.props), { percentComplete: percentComplete }), this._onRenderProgress)
                    : null,
                description ? (React__namespace.createElement("div", { id: this._descriptionId, className: classNames.itemDescription }, description)) : null));
        };
        ProgressIndicatorBase.defaultProps = {
            label: '',
            description: '',
            width: 180,
        };
        return ProgressIndicatorBase;
    }(React__namespace.Component));

    var GlobalClassNames$1 = {
        root: 'ms-ProgressIndicator',
        itemName: 'ms-ProgressIndicator-itemName',
        itemDescription: 'ms-ProgressIndicator-itemDescription',
        itemProgress: 'ms-ProgressIndicator-itemProgress',
        progressTrack: 'ms-ProgressIndicator-progressTrack',
        progressBar: 'ms-ProgressIndicator-progressBar',
    };
    var IndeterminateProgress = memoizeFunction(function () {
        return keyframes({
            '0%': {
                left: '-30%',
            },
            '100%': {
                left: '100%',
            },
        });
    });
    var IndeterminateProgressRTL = memoizeFunction(function () {
        return keyframes({
            '100%': {
                right: '-30%',
            },
            '0%': {
                right: '100%',
            },
        });
    });
    var getStyles$1 = function (props) {
        var _a, _b, _c;
        var isRTL = getRTL(props.theme);
        var className = props.className, indeterminate = props.indeterminate, theme = props.theme, _d = props.barHeight, barHeight = _d === void 0 ? 2 : _d;
        var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
        var classNames = getGlobalClassNames(GlobalClassNames$1, theme);
        var marginBetweenText = 8;
        var textHeight = 18;
        var progressTrackColor = palette.neutralLight;
        return {
            root: [classNames.root, fonts.medium, className],
            itemName: [
                classNames.itemName,
                noWrap,
                {
                    color: semanticColors.bodyText,
                    paddingTop: marginBetweenText / 2,
                    lineHeight: textHeight + 2,
                },
            ],
            itemDescription: [
                classNames.itemDescription,
                {
                    color: semanticColors.bodySubtext,
                    fontSize: fonts.small.fontSize,
                    lineHeight: textHeight,
                },
            ],
            itemProgress: [
                classNames.itemProgress,
                {
                    position: 'relative',
                    overflow: 'hidden',
                    height: barHeight,
                    padding: marginBetweenText + "px 0",
                },
            ],
            progressTrack: [
                classNames.progressTrack,
                {
                    position: 'absolute',
                    width: '100%',
                    height: barHeight,
                    backgroundColor: progressTrackColor,
                    selectors: (_a = {},
                        _a[HighContrastSelector] = {
                            borderBottom: '1px solid WindowText',
                        },
                        _a),
                },
            ],
            progressBar: [
                {
                    backgroundColor: palette.themePrimary,
                    height: barHeight,
                    position: 'absolute',
                    transition: 'width .3s ease',
                    width: 0,
                    selectors: (_b = {},
                        _b[HighContrastSelector] = tslib.__assign({ backgroundColor: 'highlight' }, getHighContrastNoAdjustStyle()),
                        _b),
                },
                indeterminate
                    ? {
                        position: 'absolute',
                        minWidth: '33%',
                        background: "linear-gradient(to right, " + progressTrackColor + " 0%, " +
                            (palette.themePrimary + " 50%, " + progressTrackColor + " 100%)"),
                        animation: (isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()) + " 3s infinite",
                        selectors: (_c = {},
                            _c[HighContrastSelector] = {
                                background: "highlight",
                            },
                            _c),
                    }
                    : {
                        transition: 'width .15s linear',
                    },
                classNames.progressBar,
            ],
        };
    };

    /**
     * ProgressIndicator description
     */
    var ProgressIndicator = styled(ProgressIndicatorBase, getStyles$1, undefined, { scope: 'ProgressIndicator' });

    var COMPONENT_NAME = 'SearchBox';
    var iconButtonStyles = { root: { height: 'auto' }, icon: { fontSize: '12px' } };
    var iconButtonProps = { iconName: 'Clear' };
    var defaultClearButtonProps = { ariaLabel: 'Clear text' };
    var getClassNames$M = classNamesFunction();
    var useComponentRef = function (componentRef, inputElementRef, hasFocus) {
        React__namespace.useImperativeHandle(componentRef, function () { return ({
            focus: function () { var _a; return (_a = inputElementRef.current) === null || _a === void 0 ? void 0 : _a.focus(); },
            hasFocus: function () { return hasFocus; },
        }); }, [inputElementRef, hasFocus]);
    };
    var SearchBoxBase = React__namespace.forwardRef(function (props, forwardedRef) {
        var ariaLabel = props.ariaLabel, className = props.className, _a = props.defaultValue, defaultValue = _a === void 0 ? '' : _a, disabled = props.disabled, underlined = props.underlined, styles = props.styles, 
        // eslint-disable-next-line deprecation/deprecation
        labelText = props.labelText, 
        // eslint-disable-next-line deprecation/deprecation
        _b = props.placeholder, 
        // eslint-disable-next-line deprecation/deprecation
        placeholder = _b === void 0 ? labelText : _b, theme = props.theme, _c = props.clearButtonProps, clearButtonProps = _c === void 0 ? defaultClearButtonProps : _c, _d = props.disableAnimation, disableAnimation = _d === void 0 ? false : _d, _e = props.showIcon, showIcon = _e === void 0 ? false : _e, customOnClear = props.onClear, customOnBlur = props.onBlur, customOnEscape = props.onEscape, customOnSearch = props.onSearch, customOnKeyDown = props.onKeyDown, iconProps = props.iconProps, role = props.role, onChange = props.onChange, 
        // eslint-disable-next-line deprecation/deprecation
        onChanged = props.onChanged;
        var _f = React__namespace.useState(false), hasFocus = _f[0], setHasFocus = _f[1];
        var prevChangeTimestamp = React__namespace.useRef();
        var _g = useControllableValue(props.value, defaultValue, function (ev, newValue) {
            if (ev && ev.timeStamp === prevChangeTimestamp.current) {
                // For historical reasons, SearchBox handles both onInput and onChange (we can't modify this
                // outside a major version due to potential to break partners' tests and possibly apps).
                // Only call props.onChange for one of the events.
                return;
            }
            prevChangeTimestamp.current = ev === null || ev === void 0 ? void 0 : ev.timeStamp;
            onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);
            onChanged === null || onChanged === void 0 ? void 0 : onChanged(newValue);
        }), uncastValue = _g[0], setValue = _g[1];
        var value = String(uncastValue);
        var rootElementRef = React__namespace.useRef(null);
        var inputElementRef = React__namespace.useRef(null);
        var mergedRootRef = useMergedRefs(rootElementRef, forwardedRef);
        var id = useId(COMPONENT_NAME, props.id);
        var customOnClearClick = clearButtonProps.onClick;
        var classNames = getClassNames$M(styles, {
            theme: theme,
            className: className,
            underlined: underlined,
            hasFocus: hasFocus,
            disabled: disabled,
            hasInput: value.length > 0,
            disableAnimation: disableAnimation,
            showIcon: showIcon,
        });
        var nativeProps = getNativeProps(props, inputProperties, [
            'className',
            'placeholder',
            'onFocus',
            'onBlur',
            'value',
            'role',
        ]);
        var onClear = React__namespace.useCallback(function (ev) {
            var _a;
            customOnClear === null || customOnClear === void 0 ? void 0 : customOnClear(ev);
            if (!ev.defaultPrevented) {
                setValue('');
                (_a = inputElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                ev.stopPropagation();
                ev.preventDefault();
            }
        }, [customOnClear, setValue]);
        var onClearClick = React__namespace.useCallback(function (ev) {
            customOnClearClick === null || customOnClearClick === void 0 ? void 0 : customOnClearClick(ev);
            if (!ev.defaultPrevented) {
                onClear(ev);
            }
        }, [customOnClearClick, onClear]);
        var onFocusCapture = function (ev) {
            var _a;
            setHasFocus(true);
            (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, ev);
        };
        var onClickFocus = function () {
            if (inputElementRef.current) {
                inputElementRef.current.focus();
                inputElementRef.current.selectionStart = inputElementRef.current.selectionEnd = 0;
            }
        };
        var onBlur = React__namespace.useCallback(function (ev) {
            setHasFocus(false);
            customOnBlur === null || customOnBlur === void 0 ? void 0 : customOnBlur(ev);
        }, [customOnBlur]);
        var onInputChange = function (ev) {
            setValue(ev.target.value, ev);
        };
        var onKeyDown = function (ev) {
            // eslint-disable-next-line deprecation/deprecation
            switch (ev.which) {
                case KeyCodes.escape:
                    customOnEscape === null || customOnEscape === void 0 ? void 0 : customOnEscape(ev);
                    // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key
                    // to propagate from the empty search box to a parent element such as a dialog, etc.
                    if (value && !ev.defaultPrevented) {
                        onClear(ev);
                    }
                    break;
                case KeyCodes.enter:
                    if (customOnSearch) {
                        customOnSearch(value);
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                    break;
                default:
                    // REVIEW: Why aren't we calling customOnKeyDown for Escape or Enter?
                    customOnKeyDown === null || customOnKeyDown === void 0 ? void 0 : customOnKeyDown(ev);
                    // REVIEW: Why are we calling stopPropagation if customOnKeyDown called preventDefault?
                    // customOnKeyDown should call stopPropagation if it needs it.
                    if (ev.defaultPrevented) {
                        ev.stopPropagation();
                    }
                    break;
            }
        };
        useDebugWarning(props);
        useComponentRef(props.componentRef, inputElementRef, hasFocus);
        return (React__namespace.createElement("div", { role: role, ref: mergedRootRef, className: classNames.root, onFocusCapture: onFocusCapture },
            React__namespace.createElement("div", { className: classNames.iconContainer, onClick: onClickFocus, "aria-hidden": true },
                React__namespace.createElement(Icon$1, tslib.__assign({ iconName: "Search" }, iconProps, { className: classNames.icon }))),
            React__namespace.createElement("input", tslib.__assign({}, nativeProps, { id: id, className: classNames.field, placeholder: placeholder, onChange: onInputChange, onInput: onInputChange, onBlur: onBlur, onKeyDown: onKeyDown, value: value, disabled: disabled, role: "searchbox", "aria-label": ariaLabel, ref: inputElementRef })),
            value.length > 0 && (React__namespace.createElement("div", { className: classNames.clearButton },
                React__namespace.createElement(IconButton$1, tslib.__assign({ onBlur: onBlur, styles: iconButtonStyles, iconProps: iconButtonProps }, clearButtonProps, { onClick: onClearClick }))))));
    });
    SearchBoxBase.displayName = COMPONENT_NAME;
    function useDebugWarning(props) {
        {
            // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional
            useWarnings({
                name: COMPONENT_NAME,
                props: props,
                deprecations: { labelText: 'placeholder' },
            });
        }
    }

    var GlobalClassNames = {
        root: 'ms-SearchBox',
        iconContainer: 'ms-SearchBox-iconContainer',
        icon: 'ms-SearchBox-icon',
        clearButton: 'ms-SearchBox-clearButton',
        field: 'ms-SearchBox-field',
    };
    function getStyles(props) {
        var _a, _b, _c, _d, _e;
        var theme = props.theme, underlined = props.underlined, disabled = props.disabled, hasFocus = props.hasFocus, className = props.className, hasInput = props.hasInput, disableAnimation = props.disableAnimation, showIcon = props.showIcon;
        var palette = theme.palette, fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;
        var classNames = getGlobalClassNames(GlobalClassNames, theme);
        // placeholder style constants
        var placeholderStyles = {
            color: semanticColors.inputPlaceholderText,
            opacity: 1,
        };
        var inputIconAlt = palette.neutralSecondary;
        var inputIconAltHovered = palette.neutralPrimary;
        var inputBorderDisabled = palette.neutralLighter;
        var inputBackgroundHovered = palette.neutralLighter;
        var inputBackgroundDisabled = palette.neutralLighter;
        return {
            root: [
                classNames.root,
                fonts.medium,
                normalize$1,
                {
                    color: semanticColors.inputText,
                    backgroundColor: semanticColors.inputBackground,
                    display: 'flex',
                    flexDirection: 'row',
                    flexWrap: 'nowrap',
                    alignItems: 'stretch',
                    // The 1px top and bottom padding ensure the input field does not overlap the border
                    padding: '1px 0 1px 4px',
                    borderRadius: effects.roundedCorner2,
                    border: "1px solid " + semanticColors.inputBorder,
                    height: 32,
                    selectors: (_a = {},
                        _a[HighContrastSelector] = {
                            borderColor: 'WindowText',
                        },
                        _a[':hover'] = {
                            borderColor: semanticColors.inputBorderHovered,
                            selectors: (_b = {},
                                _b[HighContrastSelector] = {
                                    borderColor: 'Highlight',
                                },
                                _b),
                        },
                        _a[":hover ." + classNames.iconContainer] = {
                            color: semanticColors.inputIconHovered,
                        },
                        _a),
                },
                !hasFocus &&
                    hasInput && {
                    selectors: (_c = {},
                        _c[":hover ." + classNames.iconContainer] = {
                            width: 4,
                        },
                        _c[":hover ." + classNames.icon] = {
                            opacity: 0,
                            pointerEvents: 'none',
                        },
                        _c),
                },
                hasFocus && [
                    'is-active',
                    {
                        position: 'relative',
                    },
                    getInputFocusStyle(semanticColors.inputFocusBorderAlt, underlined ? 0 : effects.roundedCorner2, underlined ? 'borderBottom' : 'border'),
                ],
                showIcon && [
                    {
                        selectors: (_d = {},
                            _d[":hover ." + classNames.iconContainer] = {
                                width: 32,
                            },
                            _d[":hover ." + classNames.icon] = {
                                opacity: 1,
                            },
                            _d),
                    },
                ],
                disabled && [
                    'is-disabled',
                    {
                        borderColor: inputBorderDisabled,
                        backgroundColor: inputBackgroundDisabled,
                        pointerEvents: 'none',
                        cursor: 'default',
                        selectors: (_e = {},
                            _e[HighContrastSelector] = {
                                borderColor: 'GrayText',
                            },
                            _e),
                    },
                ],
                underlined && [
                    'is-underlined',
                    {
                        borderWidth: '0 0 1px 0',
                        borderRadius: 0,
                        // Underlined SearchBox has a larger padding left to vertically align with the waffle in product
                        padding: '1px 0 1px 8px',
                    },
                ],
                underlined &&
                    disabled && {
                    backgroundColor: 'transparent',
                },
                hasInput && 'can-clear',
                className,
            ],
            iconContainer: [
                classNames.iconContainer,
                {
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    flexShrink: 0,
                    fontSize: 16,
                    width: 32,
                    textAlign: 'center',
                    color: semanticColors.inputIcon,
                    cursor: 'text',
                },
                hasFocus && {
                    width: 4,
                },
                disabled && {
                    color: semanticColors.inputIconDisabled,
                },
                !disableAnimation && {
                    transition: "width " + AnimationVariables.durationValue1,
                },
                showIcon &&
                    hasFocus && {
                    width: 32,
                },
            ],
            icon: [
                classNames.icon,
                {
                    opacity: 1,
                },
                hasFocus && {
                    opacity: 0,
                    pointerEvents: 'none',
                },
                !disableAnimation && {
                    transition: "opacity " + AnimationVariables.durationValue1 + " 0s",
                },
                showIcon &&
                    hasFocus && {
                    opacity: 1,
                },
            ],
            clearButton: [
                classNames.clearButton,
                {
                    display: 'flex',
                    flexDirection: 'row',
                    alignItems: 'stretch',
                    cursor: 'pointer',
                    flexBasis: '32px',
                    flexShrink: 0,
                    padding: 0,
                    margin: '-1px 0px',
                    selectors: {
                        '&:hover .ms-Button': {
                            backgroundColor: inputBackgroundHovered,
                        },
                        '&:hover .ms-Button-icon': {
                            color: inputIconAltHovered,
                        },
                        '.ms-Button': {
                            borderRadius: getRTL(theme) ? '1px 0 0 1px' : '0 1px 1px 0',
                        },
                        '.ms-Button-icon': {
                            color: inputIconAlt,
                        },
                    },
                },
            ],
            field: [
                classNames.field,
                normalize$1,
                getPlaceholderStyles(placeholderStyles),
                {
                    backgroundColor: 'transparent',
                    border: 'none',
                    outline: 'none',
                    fontWeight: 'inherit',
                    fontFamily: 'inherit',
                    fontSize: 'inherit',
                    color: semanticColors.inputText,
                    flex: '1 1 0px',
                    // The default implicit value of 'auto' prevents the input from shrinking. Setting min-width to
                    // 0px allows the input element to shrink to fit the container.
                    minWidth: '0px',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    // This padding forces the text placement to round up.
                    paddingBottom: 0.5,
                    // This removes the IE specific clear button in the input since we implemented our own
                    selectors: {
                        '::-ms-clear': {
                            display: 'none',
                        },
                    },
                },
                disabled && {
                    color: semanticColors.disabledText,
                },
            ],
        };
    }

    var SearchBox = styled(SearchBoxBase, getStyles, undefined, { scope: 'SearchBox' });

    var ThemeContext = React__namespace.createContext(undefined);

    /**
     * Get theme from CustomizerContext or Customizations singleton.
     */
    function useCompatTheme() {
        return useCustomizationSettings(['theme']).theme;
    }
    /**
     * React hook for programmatically accessing the theme.
     */
    var useTheme = function () {
        var theme = React.useContext(ThemeContext);
        var legacyTheme = useCompatTheme();
        return theme || legacyTheme || createTheme({});
    };

    var _seed = 0;
    var mergeStylesRenderer = {
        reset: function () {
            // If the stylesheet reset call is made, invalidate the cache keys.
            Stylesheet.getInstance().onReset(function () { return _seed++; });
        },
        getId: function () { return _seed; },
        renderStyles: function (styleSet, options) {
            return mergeCssSets((Array.isArray(styleSet) ? styleSet : [styleSet]), options);
        },
        renderFontFace: function (fontFace$1, options) {
            return fontFace(fontFace$1);
        },
        renderKeyframes: function (keyframes$1) {
            return keyframes(keyframes$1);
        },
    };

    var graphGet = function (graphNode, path) {
        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
            var key = path_1[_i];
            graphNode = graphNode.get(key);
            if (!graphNode) {
                return;
            }
        }
        return graphNode;
    };
    var graphSet = function (graphNode, path, value) {
        for (var i = 0; i < path.length - 1; i++) {
            var key = path[i];
            var current = graphNode.get(key);
            if (!current) {
                current = new Map();
                graphNode.set(key, current);
            }
            graphNode = current;
        }
        graphNode.set(path[path.length - 1], value);
    };
    /**
     * Registers a css object, optionally as a function of the theme.
     *
     * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`
     * and returns a css javascript object.
     *
     * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in
     * future versions of the library.
     */
    function makeStyles(styleOrFunction) {
        // Create graph of inputs to map to output.
        var graph = new Map();
        // eslint-disable-next-line deprecation/deprecation
        return function (options) {
            if (options === void 0) { options = {}; }
            var theme = options.theme;
            var win = useWindow();
            var contextualTheme = useTheme();
            theme = theme || contextualTheme;
            var renderer = mergeStylesRenderer;
            var id = renderer.getId();
            var isStyleFunction = typeof styleOrFunction === 'function';
            var path = isStyleFunction ? [id, win, theme] : [id, win];
            var value = graphGet(graph, path);
            if (!value) {
                var styles = isStyleFunction ? styleOrFunction(theme) : styleOrFunction;
                value = mergeStylesRenderer.renderStyles(styles, { targetWindow: win, rtl: !!theme.rtl });
                graphSet(graph, path, value);
            }
            return value;
        };
    }

    // eslint-disable-next-line deprecation/deprecation
    var useThemeProviderStyles = makeStyles(function (theme) {
        var semanticColors = theme.semanticColors, fonts = theme.fonts;
        return {
            body: [
                {
                    color: semanticColors.bodyText,
                    background: semanticColors.bodyBackground,
                    fontFamily: fonts.medium.fontFamily,
                    fontWeight: fonts.medium.fontWeight,
                    fontSize: fonts.medium.fontSize,
                    MozOsxFontSmoothing: fonts.medium.MozOsxFontSmoothing,
                    WebkitFontSmoothing: fonts.medium.WebkitFontSmoothing,
                },
            ],
        };
    });
    /**
     * Hook to add class to body element.
     */
    function useApplyClassToBody(state, classesToApply) {
        var _a;
        var applyTo = state.applyTo;
        var applyToBody = applyTo === 'body';
        var body = (_a = useDocument()) === null || _a === void 0 ? void 0 : _a.body;
        React__namespace.useEffect(function () {
            if (!applyToBody || !body) {
                return;
            }
            for (var _i = 0, classesToApply_1 = classesToApply; _i < classesToApply_1.length; _i++) {
                var classToApply = classesToApply_1[_i];
                if (classToApply) {
                    body.classList.add(classToApply);
                }
            }
            return function () {
                if (!applyToBody || !body) {
                    return;
                }
                for (var _i = 0, classesToApply_2 = classesToApply; _i < classesToApply_2.length; _i++) {
                    var classToApply = classesToApply_2[_i];
                    if (classToApply) {
                        body.classList.remove(classToApply);
                    }
                }
            };
        }, [applyToBody, body, classesToApply]);
    }
    function useThemeProviderClasses(state) {
        var classes = useThemeProviderStyles(state);
        var className = state.className, applyTo = state.applyTo;
        useApplyClassToBody(state, [classes.root, classes.body]);
        state.className = css(className, classes.root, applyTo === 'element' && classes.body);
    }

    var renderThemeProvider = function (state) {
        var theme = state.theme, customizerContext = state.customizerContext;
        var Root = state.as || 'div';
        var rootProps = typeof state.as === 'string' ? getNativeElementProps(state.as, state) : omit(state, ['as']);
        return (React__namespace.createElement(ThemeContext.Provider, { value: theme },
            React__namespace.createElement(CustomizerContext.Provider, { value: customizerContext },
                React__namespace.createElement(Root, tslib.__assign({}, rootProps)))));
    };

    var themeToIdMap = new Map();
    var getThemeId = function () {
        var themes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            themes[_i] = arguments[_i];
        }
        var ids = [];
        for (var _a = 0, themes_1 = themes; _a < themes_1.length; _a++) {
            var theme = themes_1[_a];
            if (theme) {
                var id = theme.id || themeToIdMap.get(theme);
                if (!id) {
                    id = getId('');
                    themeToIdMap.set(theme, id);
                }
                ids.push(id);
            }
        }
        return ids.join('-');
    };
    var useThemeProviderState = function (draftState) {
        var userTheme = draftState.theme;
        // Pull contextual theme.
        var parentTheme = useTheme();
        // Update the incoming theme with a memoized version of the merged theme.
        var theme = (draftState.theme = React__namespace.useMemo(function () {
            var mergedTheme = mergeThemes(parentTheme, userTheme);
            mergedTheme.id = getThemeId(parentTheme, userTheme);
            return mergedTheme;
        }, [parentTheme, userTheme]));
        draftState.customizerContext = React__namespace.useMemo(function () { return ({
            customizations: {
                inCustomizerContext: true,
                settings: { theme: theme },
                scopedSettings: theme.components || {},
            },
        }); }, [theme]);
        if (draftState.theme.rtl !== parentTheme.rtl) {
            draftState.dir = draftState.theme.rtl ? 'rtl' : 'ltr';
        }
    };

    /**
     * Returns the ThemeProvider render function and calculated state, given user input, ref, and
     * a set of default prop values.
     */
    var useThemeProvider = function (props, defaultProps) {
        var state = getPropsWithDefaults(defaultProps, props);
        // Apply changes to state.
        useThemeProviderState(state);
        return {
            state: state,
            render: renderThemeProvider,
        };
    };

    /**
     * ThemeProvider, used for providing css variables and registering stylesheets.
     */
    var ThemeProvider = React__namespace.forwardRef(function (props, ref) {
        var rootRef = useMergedRefs(ref, React__namespace.useRef(null));
        var _a = useThemeProvider(props, {
            ref: rootRef,
            as: 'div',
            applyTo: 'element',
        }), render = _a.render, state = _a.state;
        // Render styles.
        useThemeProviderClasses(state);
        // Apply focus rect class on key presses.
        useFocusRects(state.ref);
        // Return the rendered content.
        return render(state);
    });
    ThemeProvider.displayName = 'ThemeProvider';

    var Animation = {
      errorMessage: AnimationClassNames.slideDownIn20
    };

    /**
     * Helper function to return a value if a given expression is truthy.
     * @param bool to determine if value should be returned or not.
     * @param value the value that should be returned when bool i true.
     * @returns value if bool is true, undefined if false.
     */

    var takeIf = function takeIf(bool, value) {
      return bool ? value : undefined;
    };

    var generateId = function generateId() {
      return "" + Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER));
    };

    /*!
     * hotkeys-js v3.8.1
     * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
     * 
     * Copyright (c) 2020 kenny wong <wowohoo@qq.com>
     * http://jaywcjlove.github.io/hotkeys
     * 
     * Licensed under the MIT license.
     */

    var isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false; // 绑定事件

    function addEvent(object, event, method) {
      if (object.addEventListener) {
        object.addEventListener(event, method, false);
      } else if (object.attachEvent) {
        object.attachEvent("on".concat(event), function () {
          method(window.event);
        });
      }
    } // 修饰键转换成对应的键码


    function getMods(modifier, key) {
      var mods = key.slice(0, key.length - 1);

      for (var i = 0; i < mods.length; i++) {
        mods[i] = modifier[mods[i].toLowerCase()];
      }

      return mods;
    } // 处理传的key字符串转换成数组


    function getKeys(key) {
      if (typeof key !== 'string') key = '';
      key = key.replace(/\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等

      var keys = key.split(','); // 同时设置多个快捷键，以','分割

      var index = keys.lastIndexOf(''); // 快捷键可能包含','，需特殊处理

      for (; index >= 0;) {
        keys[index - 1] += ',';
        keys.splice(index, 1);
        index = keys.lastIndexOf('');
      }

      return keys;
    } // 比较修饰键的数组


    function compareArray(a1, a2) {
      var arr1 = a1.length >= a2.length ? a1 : a2;
      var arr2 = a1.length >= a2.length ? a2 : a1;
      var isIndex = true;

      for (var i = 0; i < arr1.length; i++) {
        if (arr2.indexOf(arr1[i]) === -1) isIndex = false;
      }

      return isIndex;
    }

    var _keyMap = {
      backspace: 8,
      tab: 9,
      clear: 12,
      enter: 13,
      return: 13,
      esc: 27,
      escape: 27,
      space: 32,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      del: 46,
      delete: 46,
      ins: 45,
      insert: 45,
      home: 36,
      end: 35,
      pageup: 33,
      pagedown: 34,
      capslock: 20,
      '⇪': 20,
      ',': 188,
      '.': 190,
      '/': 191,
      '`': 192,
      '-': isff ? 173 : 189,
      '=': isff ? 61 : 187,
      ';': isff ? 59 : 186,
      '\'': 222,
      '[': 219,
      ']': 221,
      '\\': 220
    }; // Modifier Keys

    var _modifier = {
      // shiftKey
      '⇧': 16,
      shift: 16,
      // altKey
      '⌥': 18,
      alt: 18,
      option: 18,
      // ctrlKey
      '⌃': 17,
      ctrl: 17,
      control: 17,
      // metaKey
      '⌘': 91,
      cmd: 91,
      command: 91
    };
    var modifierMap = {
      16: 'shiftKey',
      18: 'altKey',
      17: 'ctrlKey',
      91: 'metaKey',
      shiftKey: 16,
      ctrlKey: 17,
      altKey: 18,
      metaKey: 91
    };
    var _mods = {
      16: false,
      18: false,
      17: false,
      91: false
    };
    var _handlers = {}; // F1~F12 special key

    for (var k = 1; k < 20; k++) {
      _keyMap["f".concat(k)] = 111 + k;
    }

    var _downKeys = []; // 记录摁下的绑定键

    var _scope = 'all'; // 默认热键范围

    var elementHasBindEvent = []; // 已绑定事件的节点记录
    // 返回键码

    var code = function code(x) {
      return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
    }; // 设置获取当前范围（默认为'所有'）


    function setScope(scope) {
      _scope = scope || 'all';
    } // 获取当前范围


    function getScope() {
      return _scope || 'all';
    } // 获取摁下绑定键的键值


    function getPressedKeyCodes() {
      return _downKeys.slice(0);
    } // 表单控件控件判断 返回 Boolean
    // hotkey is effective only when filter return true


    function filter(event) {
      var target = event.target || event.srcElement;
      var tagName = target.tagName;
      var flag = true; // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>

      if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {
        flag = false;
      }

      return flag;
    } // 判断摁下的键是否为某个键，返回true或者false


    function isPressed(keyCode) {
      if (typeof keyCode === 'string') {
        keyCode = code(keyCode); // 转换成键码
      }

      return _downKeys.indexOf(keyCode) !== -1;
    } // 循环删除handlers中的所有 scope(范围)


    function deleteScope(scope, newScope) {
      var handlers;
      var i; // 没有指定scope，获取scope

      if (!scope) scope = getScope();

      for (var key in _handlers) {
        if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
          handlers = _handlers[key];

          for (i = 0; i < handlers.length;) {
            if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;
          }
        }
      } // 如果scope被删除，将scope重置为all


      if (getScope() === scope) setScope(newScope || 'all');
    } // 清除修饰键


    function clearModifier(event) {
      var key = event.keyCode || event.which || event.charCode;

      var i = _downKeys.indexOf(key); // 从列表中清除按压过的键


      if (i >= 0) {
        _downKeys.splice(i, 1);
      } // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题


      if (event.key && event.key.toLowerCase() === 'meta') {
        _downKeys.splice(0, _downKeys.length);
      } // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除


      if (key === 93 || key === 224) key = 91;

      if (key in _mods) {
        _mods[key] = false; // 将修饰键重置为false

        for (var k in _modifier) {
          if (_modifier[k] === key) hotkeys[k] = false;
        }
      }
    }

    function unbind(keysInfo) {
      // unbind(), unbind all keys
      if (!keysInfo) {
        Object.keys(_handlers).forEach(function (key) {
          return delete _handlers[key];
        });
      } else if (Array.isArray(keysInfo)) {
        // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])
        keysInfo.forEach(function (info) {
          if (info.key) eachUnbind(info);
        });
      } else if (typeof keysInfo === 'object') {
        // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})
        if (keysInfo.key) eachUnbind(keysInfo);
      } else if (typeof keysInfo === 'string') {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        // support old method
        // eslint-disable-line
        var scope = args[0],
            method = args[1];

        if (typeof scope === 'function') {
          method = scope;
          scope = '';
        }

        eachUnbind({
          key: keysInfo,
          scope: scope,
          method: method,
          splitKey: '+'
        });
      }
    } // 解除绑定某个范围的快捷键


    var eachUnbind = function eachUnbind(_ref) {
      var key = _ref.key,
          scope = _ref.scope,
          method = _ref.method,
          _ref$splitKey = _ref.splitKey,
          splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;
      var multipleKeys = getKeys(key);
      multipleKeys.forEach(function (originKey) {
        var unbindKeys = originKey.split(splitKey);
        var len = unbindKeys.length;
        var lastKey = unbindKeys[len - 1];
        var keyCode = lastKey === '*' ? '*' : code(lastKey);
        if (!_handlers[keyCode]) return; // 判断是否传入范围，没有就获取范围

        if (!scope) scope = getScope();
        var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
        _handlers[keyCode] = _handlers[keyCode].map(function (record) {
          // 通过函数判断，是否解除绑定，函数相等直接返回
          var isMatchingMethod = method ? record.method === method : true;

          if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {
            return {};
          }

          return record;
        });
      });
    }; // 对监听对应快捷键的回调函数进行处理


    function eventHandler(event, handler, scope) {
      var modifiersMatch; // 看它是否在当前范围

      if (handler.scope === scope || handler.scope === 'all') {
        // 检查是否匹配修饰符（如果有返回true）
        modifiersMatch = handler.mods.length > 0;

        for (var y in _mods) {
          if (Object.prototype.hasOwnProperty.call(_mods, y)) {
            if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {
              modifiersMatch = false;
            }
          }
        } // 调用处理程序，如果是修饰键不做处理


        if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {
          if (handler.method(event, handler) === false) {
            if (event.preventDefault) event.preventDefault();else event.returnValue = false;
            if (event.stopPropagation) event.stopPropagation();
            if (event.cancelBubble) event.cancelBubble = true;
          }
        }
      }
    } // 处理keydown事件


    function dispatch(event) {
      var asterisk = _handlers['*'];
      var key = event.keyCode || event.which || event.charCode; // 表单控件过滤 默认表单控件不触发快捷键

      if (!hotkeys.filter.call(this, event)) return; // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致
      // Webkit左右 command 键值不一样

      if (key === 93 || key === 224) key = 91;
      /**
       * Collect bound keys
       * If an Input Method Editor is processing key input and the event is keydown, return 229.
       * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229
       * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
       */

      if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);
      /**
       * Jest test cases are required.
       * ===============================
       */

      ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {
        var keyNum = modifierMap[keyName];

        if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
          _downKeys.push(keyNum);
        } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
          _downKeys.splice(_downKeys.indexOf(keyNum), 1);
        } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {
          /**
           * Fix if Command is pressed:
           * ===============================
           */
          if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
            _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
          }
        }
      });
      /**
       * -------------------------------
       */

      if (key in _mods) {
        _mods[key] = true; // 将特殊字符的key注册到 hotkeys 上

        for (var k in _modifier) {
          if (_modifier[k] === key) hotkeys[k] = true;
        }

        if (!asterisk) return;
      } // 将 modifierMap 里面的修饰键绑定到 event 中


      for (var e in _mods) {
        if (Object.prototype.hasOwnProperty.call(_mods, e)) {
          _mods[e] = event[modifierMap[e]];
        }
      }
      /**
       * https://github.com/jaywcjlove/hotkeys/pull/129
       * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.
       * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.
       * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate
       */


      if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {
        if (_downKeys.indexOf(17) === -1) {
          _downKeys.push(17);
        }

        if (_downKeys.indexOf(18) === -1) {
          _downKeys.push(18);
        }

        _mods[17] = true;
        _mods[18] = true;
      } // 获取范围 默认为 `all`


      var scope = getScope(); // 对任何快捷键都需要做的处理

      if (asterisk) {
        for (var i = 0; i < asterisk.length; i++) {
          if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {
            eventHandler(event, asterisk[i], scope);
          }
        }
      } // key 不在 _handlers 中返回


      if (!(key in _handlers)) return;

      for (var _i = 0; _i < _handlers[key].length; _i++) {
        if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {
          if (_handlers[key][_i].key) {
            var record = _handlers[key][_i];
            var splitKey = record.splitKey;
            var keyShortcut = record.key.split(splitKey);
            var _downKeysCurrent = []; // 记录当前按键键值

            for (var a = 0; a < keyShortcut.length; a++) {
              _downKeysCurrent.push(code(keyShortcut[a]));
            }

            if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {
              // 找到处理内容
              eventHandler(event, record, scope);
            }
          }
        }
      }
    } // 判断 element 是否已经绑定事件


    function isElementBind(element) {
      return elementHasBindEvent.indexOf(element) > -1;
    }

    function hotkeys(key, option, method) {
      _downKeys = [];
      var keys = getKeys(key); // 需要处理的快捷键列表

      var mods = [];
      var scope = 'all'; // scope默认为all，所有范围都有效

      var element = document; // 快捷键事件绑定节点

      var i = 0;
      var keyup = false;
      var keydown = true;
      var splitKey = '+'; // 对为设定范围的判断

      if (method === undefined && typeof option === 'function') {
        method = option;
      }

      if (Object.prototype.toString.call(option) === '[object Object]') {
        if (option.scope) scope = option.scope; // eslint-disable-line

        if (option.element) element = option.element; // eslint-disable-line

        if (option.keyup) keyup = option.keyup; // eslint-disable-line

        if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line

        if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line
      }

      if (typeof option === 'string') scope = option; // 对于每个快捷键进行处理

      for (; i < keys.length; i++) {
        key = keys[i].split(splitKey); // 按键列表

        mods = []; // 如果是组合快捷键取得组合快捷键

        if (key.length > 1) mods = getMods(_modifier, key); // 将非修饰键转化为键码

        key = key[key.length - 1];
        key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键
        // 判断key是否在_handlers中，不在就赋一个空数组

        if (!(key in _handlers)) _handlers[key] = [];

        _handlers[key].push({
          keyup: keyup,
          keydown: keydown,
          scope: scope,
          mods: mods,
          shortcut: keys[i],
          method: method,
          key: keys[i],
          splitKey: splitKey
        });
      } // 在全局document上设置快捷键


      if (typeof element !== 'undefined' && !isElementBind(element) && window) {
        elementHasBindEvent.push(element);
        addEvent(element, 'keydown', function (e) {
          dispatch(e);
        });
        addEvent(window, 'focus', function () {
          _downKeys = [];
        });
        addEvent(element, 'keyup', function (e) {
          dispatch(e);
          clearModifier(e);
        });
      }
    }

    var _api = {
      setScope: setScope,
      getScope: getScope,
      deleteScope: deleteScope,
      getPressedKeyCodes: getPressedKeyCodes,
      isPressed: isPressed,
      filter: filter,
      unbind: unbind
    };

    for (var a in _api) {
      if (Object.prototype.hasOwnProperty.call(_api, a)) {
        hotkeys[a] = _api[a];
      }
    }

    if (typeof window !== 'undefined') {
      var _hotkeys = window.hotkeys;

      hotkeys.noConflict = function (deep) {
        if (deep && window.hotkeys === hotkeys) {
          window.hotkeys = _hotkeys;
        }

        return hotkeys;
      };

      window.hotkeys = hotkeys;
    }

    function useHotkeys(keys, callback, options, deps) {
      if (options instanceof Array) {
        deps = options;
        options = undefined;
      }

      var _a = options || {},
          enableOnTags = _a.enableOnTags,
          filter = _a.filter;

      var ref = React.useRef(null);
      var memoisedCallback = React.useCallback(function (keyboardEvent, hotkeysEvent) {
        if (ref.current === null || document.activeElement === ref.current) {
          callback(keyboardEvent, hotkeysEvent);
          return true;
        }

        return false;
      }, // eslint-disable-next-line react-hooks/exhaustive-deps
      deps ? tslib.__spreadArray([ref], deps) : [ref]);
      React.useEffect(function () {
        if (options && options.enableOnTags) {
          hotkeys.filter = function (_a) {
            var target = _a.target,
                srcElement = _a.srcElement;
            var targetTagName = //@ts-ignore
            target && target.tagName || srcElement && srcElement.tagName;
            return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));
          };
        }

        if (filter) hotkeys.filter = filter;
        hotkeys(keys, options || {}, memoisedCallback);
        return function () {
          return hotkeys.unbind(keys, memoisedCallback);
        };
      }, [memoisedCallback, options, enableOnTags, filter, keys]);
      return ref;
    }

    var getClassNames$L = function getClassNames(props) {
      var noSpacing = props.noSpacing,
          rowSpacing = props.rowSpacing,
          colPadding = props.colPadding,
          centered = props.centered,
          padding = props.padding,
          sm = props.sm,
          md = props.md,
          lg = props.lg,
          xl = props.xl,
          xxl = props.xxl,
          xxxl = props.xxxl,
          smPush = props.smPush,
          mdPush = props.mdPush,
          lgPush = props.lgPush,
          xlPush = props.xlPush,
          xxlPush = props.xxlPush,
          xxxlPush = props.xxxlPush,
          smPull = props.smPull,
          mdPull = props.mdPull,
          lgPull = props.lgPull,
          xlPull = props.xlPull,
          xxlPull = props.xxlPull,
          xxxlPull = props.xxxlPull,
          hiddenSm = props.hiddenSm,
          hiddenMd = props.hiddenMd,
          hiddenMdUp = props.hiddenMdUp,
          hiddenMdDown = props.hiddenMdDown,
          hiddenLg = props.hiddenLg,
          hiddenLgUp = props.hiddenLgUp,
          hiddenLgDown = props.hiddenLgDown,
          hiddenXl = props.hiddenXl,
          hiddenXlUp = props.hiddenXlUp,
          hiddenXlDown = props.hiddenXlDown,
          hiddenXxl = props.hiddenXxl,
          hiddenXxlUp = props.hiddenXxlUp,
          hiddenXxlDown = props.hiddenXxlDown,
          hiddenXxxl = props.hiddenXxxl; // @ts-ignore TODO

      return mergeStyleSets({
        grid: {
          displayName: 'ske-Grid',
          boxSizing: 'border-box',
          zoom: 1,
          padding: padding || '0 8px',
          selectors: {
            '&::before, &::after': {
              display: 'table',
              content: '""',
              lineHeight: '0'
            },
            '&::after': {
              clear: 'both'
            }
          }
        },
        row: {
          displayName: 'ske-Grid-row',
          boxSizing: 'border-box',
          zoom: 1,
          margin: rowSpacing + " 0",
          selectors: {
            '&::before, &::after': {
              display: 'table',
              content: '""',
              lineHeight: '0'
            },
            '&::after': {
              clear: 'both'
            }
          }
        },
        col: {
          displayName: 'ske-Grid-col',
          position: 'relative',
          minHeight: '1px',
          paddingLeft: !noSpacing && '8px',
          paddingRight: !noSpacing && '8px',
          padding: colPadding,
          boxSizing: 'border-box',
          width: '100%',
          selectors: {
            '& $grid': {
              padding: '0'
            },
            "[dir='ltr'] &": {
              "float": centered ? 'none' : 'left',
              margin: centered ? '0 auto' : '0 0',
              selectors: {
                '@media (min-width: 320px)': {
                  width: 100 / 12 * sm + "%",
                  left: 100 / 12 * smPush + "%",
                  right: 100 / 12 * smPull + "%"
                },
                '@media (min-width: 480px)': {
                  width: 100 / 12 * md + "%",
                  left: 100 / 12 * mdPush + "%",
                  right: 100 / 12 * mdPull + "%"
                },
                '@media (min-width: 640px)': {
                  width: 100 / 12 * lg + "%",
                  left: 100 / 12 * lgPush + "%",
                  right: 100 / 12 * lgPull + "%"
                },
                '@media (min-width: 1024px)': {
                  width: 100 / 12 * xl + "%",
                  left: 100 / 12 * xlPush + "%",
                  right: 100 / 12 * xlPull + "%"
                },
                '@media (min-width: 1366px)': {
                  width: 100 / 12 * xxl + "%",
                  left: 100 / 12 * xxlPush + "%",
                  right: 100 / 12 * xxlPull + "%"
                }
              }
            },
            "[dir='rtl'] &": {
              "float": 'right',
              selectors: {
                '@media (min-width: 320px)': {
                  width: 100 / 12 * sm + "%",
                  right: 100 / 12 * smPush + "%",
                  left: 100 / 12 * smPull + "%"
                },
                '@media (min-width: 480px)': {
                  width: 100 / 12 * md + "%",
                  right: 100 / 12 * mdPush + "%",
                  left: 100 / 12 * mdPull + "%"
                },
                '@media (min-width: 640px)': {
                  width: 100 / 12 * lg + "%",
                  right: 100 / 12 * lgPush + "%",
                  left: 100 / 12 * lgPull + "%"
                },
                '@media (min-width: 1024px)': {
                  width: 100 / 12 * xl + "%",
                  right: 100 / 12 * xlPush + "%",
                  left: 100 / 12 * xlPull + "%"
                },
                '@media (min-width: 1366px)': {
                  width: 100 / 12 * xxl + "%",
                  right: 100 / 12 * smPush + "%",
                  left: 100 / 12 * xxlPull + "%"
                }
              }
            },
            // SMALL
            '@media (max-width: 479px)': {
              display: (hiddenSm || hiddenMdDown || hiddenLgDown || hiddenXlDown || hiddenXxlDown) && 'none !important'
            },
            // MEDIUM
            '@media (min-width: 480px) and (max-width: 639px)': {
              display: (hiddenMd || hiddenMdUp || hiddenMdDown || hiddenLgDown || hiddenXlDown || hiddenXxlDown) && 'none !important'
            },
            // LARGE
            '@media (min-width: 640px) and (max-width: 1023px)': {
              display: (hiddenMdUp || hiddenLg || hiddenLgUp || hiddenLgDown || hiddenXlDown || hiddenXxlDown) && 'none !important'
            },
            // EXTRA LARGE
            '@media (min-width: 1024px) and (max-width: 1365px)': {
              display: (hiddenMdUp || hiddenLgUp || hiddenXl || hiddenXlUp || hiddenXlDown || hiddenXxlDown) && 'none !important'
            },
            // EXTRA EXTRA LARGE
            '@media (min-width: 1366px) and (max-width: 1919px)': {
              display: (hiddenMdUp || hiddenLgUp || hiddenXlUp || hiddenXxl || hiddenXxlUp || hiddenXxlDown) && 'none !important'
            },
            // EXTRA EXTRA EXTRA LARGE
            '@media (min-width: 1920px)': {
              display: (hiddenMdUp || hiddenLgUp || hiddenXlUp || hiddenXxlUp || hiddenXxxl) && 'none !important',
              width: 100 / 12 * xxxl + "%",
              selectors: {
                "[dir='ltr'] &": {
                  left: 100 / 12 * xxxlPush + "%",
                  right: 100 / 12 * xxxlPull + "%"
                },
                "[dir='rtl'] &": {
                  right: 100 / 12 * xxxlPush + "%",
                  left: 100 / 12 * xxxlPull + "%"
                }
              }
            }
          }
        }
      });
    };

    var Col =
    /** @class */
    function (_super) {
      tslib.__extends(Col, _super);

      function Col() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Col.prototype.render = function () {
        var _a = this.props,
            children = _a.children,
            _b = _a.className,
            className = _b === void 0 ? '' : _b,
            _c = _a.tag,
            tag = _c === void 0 ? 'div' : _c;
        return /*#__PURE__*/React__namespace.createElement(tag, {
          className: getClassNames$L(this.props).col + " " + className
        }, children);
      };

      Col.displayName = 'GridCol';
      return Col;
    }(React__namespace.Component);

    var Row =
    /** @class */
    function (_super) {
      tslib.__extends(Row, _super);

      function Row() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Row.prototype.render = function () {
        var _a = this.props,
            children = _a.children,
            _b = _a.className,
            className = _b === void 0 ? '' : _b,
            _c = _a.tag,
            tag = _c === void 0 ? 'div' : _c;
        return /*#__PURE__*/React__namespace.createElement(tag, {
          className: getClassNames$L(this.props).row + " " + className
        }, children);
      };

      Row.displayName = 'GridRow';
      Row.defaultProps = {
        rowSpacing: '8px'
      };
      return Row;
    }(React__namespace.Component);

    /*
     * visibleName Grid (Rutenett)
     */

    var Grid =
    /** @class */
    function (_super) {
      tslib.__extends(Grid, _super);

      function Grid() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Grid.prototype.render = function () {
        var _a = this.props,
            children = _a.children,
            _b = _a.className,
            className = _b === void 0 ? '' : _b,
            _c = _a.tag,
            tag = _c === void 0 ? 'div' : _c;
        return /*#__PURE__*/React__namespace.createElement(tag, {
          dir: 'ltr',
          className: getClassNames$L(this.props).grid + " " + className
        }, children);
      };

      Grid.Col = Col;
      Grid.Row = Row;
      Grid.SPACE_NONE = '0px';
      Grid.SPACE_SMALL = '8px';
      Grid.SPACE_MEDIUM = '16px';
      Grid.SPACE_LARGE = '24px';
      Grid.defaultProps = {
        padding: '0 8px'
      };
      return Grid;
    }(React__namespace.Component);

    var designtokenBreakpoints = {
    	"ske-breakpoint-sm": "480px",
    	"ske-breakpoint-md": "640px",
    	"ske-breakpoint-lg": "1024px",
    	"ske-breakpoint-xl": "1366px",
    	"ske-breakpoint-xxl": "1920px"
    };

    var designtokenSpacing = {
    	"ske-spacing-xs": "0.125rem",
    	"ske-spacing-sm": "0.25rem",
    	"ske-spacing-md": "0.5rem",
    	"ske-spacing-lg": "1rem",
    	"ske-spacing-xl": "1.5rem",
    	"ske-spacing-xxl": "2rem",
    	"ske-spacing-xxxl": "3rem",
    	"ske-spacing-mega": "4rem"
    };

    var designtokenFontSizes = {
    	"ske-font-size-base": "16px",
    	"ske-font-size-xxs": "0.625rem",
    	"ske-font-size-xs": "0.75rem",
    	"ske-font-size-s": "0.875rem",
    	"ske-font-size-m": "1rem",
    	"ske-font-size-l": "1.125rem",
    	"ske-font-size-xl": "1.375rem",
    	"ske-font-size-xxl": "1.875rem",
    	"ske-font-size-xxxl": "2.625rem",
    	"ske-font-size-mega": "4.25rem",
    	"ske-line-height-xxs": "1.6",
    	"ske-line-height-s": "1.75",
    	"ske-line-height-m": "1.5",
    	"ske-line-height-l": "1.6666",
    	"ske-line-height-xl": "1.333",
    	"ske-font-weight-light": "100",
    	"ske-font-weight-semilight": "300",
    	"ske-font-weight-regular": "400",
    	"ske-font-weight-medium": "500",
    	"ske-font-weight-semibold": "600",
    	"ske-font-weight-bold": "700",
    	"ske-font-size-icon-xs": "0.625rem",
    	"ske-font-size-icon-s": "0.75rem",
    	"ske-font-size-icon-m": "1rem",
    	"ske-font-size-icon-l": "1.25rem",
    	"ske-font-size-icon-xl": "1.5rem",
    	"ske-font-size-icon-xxl": "2rem",
    	"ske-font-size-icon-mega": "2.5rem"
    };

    function getClassNames$K() {
      var _a, _b, _c;

      var paddingAccordionContent = "0 0 " + designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-md'];
      return mergeStyleSets({
        containerStep: {
          margin: '0 auto'
        },
        wrapperStep: {
          position: 'relative'
        },
        accordion: {
          position: 'relative',
          backgroundColor: designtokenColors['ske-color-white-100'],
          marginBottom: designtokenSpacing['ske-spacing-lg'],
          selectors: {
            '& hr': {
              margin: 0,
              border: 'solid',
              borderWidth: '1px',
              color: designtokenColors['ske-color-grey-30']
            }
          }
        },
        content: {
          backgroundColor: designtokenColors['ske-color-white-100'],
          padding: paddingAccordionContent,
          selectors: {
            '&:focus': {
              background: designtokenColors['ske-color-blue-10']
            }
          }
        },
        heading: {
          fontSize: designtokenFontSizes['ske-font-size-icon-l'],
          margin: '0'
        },
        stepNumber: {
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: designtokenColors['ske-color-white-100'],
          border: 'solid',
          width: designtokenSpacing['ske-spacing-xxl'],
          height: designtokenSpacing['ske-spacing-xxl'],
          borderRadius: '50%',
          borderWidth: '2px',
          borderColor: designtokenColors['ske-color-black-100'],
          fontSize: designtokenFontSizes['ske-font-size-l'],
          fontWeight: designtokenFontSizes['ske-font-weight-bold'],
          zIndex: 10,
          marginTop: designtokenSpacing['ske-spacing-lg'],
          selectors: (_a = {}, _a["@media (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
            fontSize: designtokenFontSizes['ske-font-size-m'],
            width: designtokenSpacing['ske-spacing-xl'],
            height: designtokenSpacing['ske-spacing-xl']
          }, _a)
        },
        stepLine: {
          display: 'block',
          position: 'absolute',
          width: 2,
          backgroundColor: designtokenColors['ske-color-grey-30'],
          top: designtokenSpacing['ske-spacing-xxl'],
          left: '0.8rem',
          height: '100%',
          selectors: (_b = {}, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
            top: designtokenSpacing['ske-spacing-xl'],
            left: designtokenSpacing['ske-spacing-lg'],
            marginLeft: 1
          }, _b)
        },
        toggleButton: {
          width: '100%',
          border: 'none',
          textAlign: 'left',
          color: designtokenColors['ske-color-interactive'],
          fontSize: designtokenFontSizes['ske-font-size-m'],
          fontWeight: designtokenFontSizes['ske-font-weight-bold'],
          padding: designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-md'],
          background: 'none',
          position: 'relative',
          cursor: 'pointer',
          marginTop: 0,
          marginBottom: 0,
          selectors: (_c = {}, _c["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
            fontSize: designtokenFontSizes['ske-font-size-icon-l']
          }, _c['&:hover, &:focus'] = {
            background: designtokenColors['ske-color-interactive-light']
          }, _c['&:focus'] = {
            outline: 'none'
          }, _c['& h1, h2, h3, h4, h5, h6'] = {
            fontSize: designtokenFontSizes['ske-font-size-icon-l'],
            margin: '0'
          }, _c['& i'] = {
            alignSelf: 'flex-start',
            transition: '.2s',
            marginTop: '-2px',
            fontSize: designtokenFontSizes['ske-font-size-icon-xl'],
            selectors: {
              '@media (min-width: 640px)': {
                fontSize: designtokenFontSizes['ske-font-size-icon-xxl']
              }
            }
          }, _c)
        },
        toggleButtonOpen: {
          selectors: {
            '& i': {
              transform: 'rotate(180deg)'
            }
          }
        },
        toggleButtonContent: {
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'center'
        },
        subtitle: {
          display: 'block',
          color: designtokenColors['ske-color-black-100'],
          width: '100%',
          border: 'none',
          textAlign: 'left',
          fontSize: designtokenFontSizes['ske-font-size-l'],
          fontWeight: designtokenFontSizes['ske-font-weight-regular'],
          margin: 0,
          padding: designtokenSpacing['ske-spacing-md'] + " " + designtokenSpacing['ske-spacing-sm'] + " 0 0"
        }
      });
    }

    /*
     * visibleName Accordion (Trekkspill)
     */

    var Accordion = function Accordion(props) {
      var processList = props.processList,
          stepId = props.stepId,
          className = props.className,
          children = props.children,
          ariaLabel = props.ariaLabel,
          headingLevel = props.headingLevel,
          htmlAttributes = tslib.__rest(props, ["processList", "stepId", "className", "children", "ariaLabel", "headingLevel"]);

      var accordion = getClassNames$K().accordion;
      var validChildren = React__namespace.Children.toArray(children).filter(function (child) {
        return /*#__PURE__*/React__namespace.isValidElement(child);
      });
      var totalSteps = React__namespace.Children.count(validChildren);
      return jsxRuntime.jsx("div", tslib.__assign({
        className: classnames__default['default'](accordion, className),
        "aria-label": ariaLabel
      }, htmlAttributes, {
        children: jsxRuntime.jsx(Grid, tslib.__assign({
          padding: "0px"
        }, {
          children: React__namespace.Children.map(validChildren, function (child, index) {
            if ( /*#__PURE__*/React__namespace.isValidElement(child)) {
              return /*#__PURE__*/React__namespace.cloneElement(child, {
                stepNumber: index + 1,
                id: stepId && stepId + index + 1,
                totalSteps: totalSteps,
                processList: processList,
                headingLevel: child.props.headingLevel ? child.props.headingLevel : headingLevel
              });
            }
          })
        }), void 0)
      }), void 0);
    };

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    var AliasIcons = {
      style: {
        MozOsxFontSmoothing: 'grayscale',
        WebkitFontSmoothing: 'antialiased',
        fontStyle: 'normal',
        fontWeight: 'normal',
        speak: 'none',
        display: 'inline-block',
        transform: 'translate(0, 0)',
        textRendering: 'auto',
        fontSize: 'inherit'
      },
      fontFace: {
        fontFamily: '"SkeIconfont"',
        src: ["url(\"" + SkeIconfontWOFF + "\") format(\"woff\")"].join(', ')
      },
      icons: {
        'clear': "\uEA17",
        'checkmark': "\uEA1B",
        'blocked2': "\uEA53",
        'statuscirclecheckmark': "\uEA28",
        'errorbadge': "\uEA35" //tilsvarer ErrorOutline

      }
    };

    /*
     * visibleName Icon (Ikon)
     */

    var Icon = function Icon(props) {
      var className = props.className,
          rest = tslib.__rest(props, ["className"]);

      return jsxRuntime.jsx(Icon$1, tslib.__assign({}, rest, {
        className: className
      }), void 0);
    };
    Icon.defaultProps = {
      iconName: undefined,
      imageProps: undefined
    };

    var ToggleContent = function ToggleContent(props) {
      var toggleContent = props.toggleContent,
          isContentOpen = props.isContentOpen,
          styles = props.styles,
          toggleButtonText = props.toggleButtonText,
          onClick = props.onClick,
          subtitle = props.subtitle,
          headingLevel = props.headingLevel,
          stepId = props.stepId,
          processList = props.processList;

      if (!toggleContent) {
        return null;
      }

      return jsxRuntime.jsx("button", tslib.__assign({
        className: isContentOpen ? classnames__default['default']["default"](styles.toggleButton, styles.toggleButtonOpen) : styles.toggleButton,
        "aria-expanded": isContentOpen,
        onClick: onClick,
        "aria-describedby": processList ? 'StepId' + stepId : undefined
      }, {
        children: jsxRuntime.jsxs("span", tslib.__assign({
          className: styles.toggleButtonContent
        }, {
          children: [jsxRuntime.jsxs("span", {
            children: [headingLevel && toggleButtonText ? jsxRuntime.jsx(Heading, {
              text: toggleButtonText,
              level: headingLevel
            }, void 0) : jsxRuntime.jsx("span", {
              children: toggleButtonText
            }, void 0), subtitle && (_typeof(subtitle) === 'object' ? jsxRuntime.jsx("span", tslib.__assign({
              className: styles.subtitle
            }, {
              children: subtitle
            }), void 0) : jsxRuntime.jsx("span", tslib.__assign({
              className: styles.subtitle,
              "aria-label": subtitle
            }, {
              children: subtitle
            }), void 0))]
          }, void 0), jsxRuntime.jsx(Icon, {
            iconName: 'ChevronDown'
          }, void 0)]
        }), void 0)
      }), void 0);
    };
    /*
     * visibleName AccordionItem (Rad i trekkspill)
     */


    var AccordionItem = function AccordionItem(props) {
      var _a = React__namespace.useState(props.isOpen || false),
          isContentOpen = _a[0],
          setContentOpen = _a[1];

      var toggleVisibility = function toggleVisibility() {
        setContentOpen(!isContentOpen);
      };

      var title = props.title,
          subtitle = props.subtitle,
          toggleContent = props.toggleContent,
          toggleButtonText = props.toggleButtonText,
          stepNumber = props.stepNumber,
          className = props.className,
          icon = props.icon,
          ariaLabel = props.ariaLabel,
          children = props.children,
          totalSteps = props.totalSteps,
          stepId = props.stepId,
          processList = props.processList,
          headingLevel = props.headingLevel;
          props.id;
          props.isOpen;
          var onChange = props.onChange,
          onClick = props.onClick,
          htmlAttributes = tslib.__rest(props, ["title", "subtitle", "toggleContent", "toggleButtonText", "stepNumber", "className", "icon", "ariaLabel", "children", "totalSteps", "stepId", "processList", "headingLevel", "id", "isOpen", "onChange", "onClick"]);

      var clickHandler = function clickHandler() {
        if (onChange) {
          onChange();
        }

        if (onClick && !isContentOpen) {
          onClick();
        }

        toggleVisibility();
      };

      var styles = getClassNames$K();
      return jsxRuntime.jsxs("div", tslib.__assign({
        className: classnames__default['default'](styles.wrapperStep, className)
      }, htmlAttributes, {
        children: [processList && stepNumber !== totalSteps && jsxRuntime.jsx("span", {
          className: styles.stepLine
        }, void 0), jsxRuntime.jsx(Grid.Row, tslib.__assign({
          rowSpacing: Grid.SPACE_NONE
        }, {
          children: jsxRuntime.jsx(Grid.Col, tslib.__assign({
            noSpacing: true
          }, {
            children: jsxRuntime.jsxs(Grid.Row, tslib.__assign({
              rowSpacing: Grid.SPACE_NONE
            }, {
              children: [processList && jsxRuntime.jsx(Grid.Col, tslib.__assign({
                noSpacing: true,
                sm: 2,
                md: 1,
                xl: 1
              }, {
                children: jsxRuntime.jsx("div", tslib.__assign({
                  className: styles.stepNumber
                }, {
                  children: jsxRuntime.jsx("span", tslib.__assign({
                    id: 'StepId' + stepId,
                    "aria-label": ariaLabel ? ariaLabel : 'Steg ' + stepNumber
                  }, {
                    children: icon ? jsxRuntime.jsx(Icon, {
                      iconName: icon
                    }, void 0) : stepNumber
                  }), void 0)
                }), void 0)
              }), void 0), jsxRuntime.jsxs(Grid.Col, tslib.__assign({
                noSpacing: true,
                sm: processList ? 9 : 12,
                md: processList ? 10 : 12,
                xl: processList ? 11 : 12
              }, {
                children: [jsxRuntime.jsx("hr", {}, void 0), jsxRuntime.jsx(ToggleContent, {
                  styles: styles,
                  toggleContent: toggleContent,
                  toggleButtonText: toggleButtonText,
                  stepId: stepId,
                  isContentOpen: isContentOpen,
                  subtitle: subtitle,
                  onClick: clickHandler,
                  headingLevel: headingLevel,
                  processList: processList
                }, void 0), (isContentOpen || !toggleContent) && jsxRuntime.jsxs("div", tslib.__assign({
                  className: styles.content,
                  id: stepId
                }, {
                  children: [headingLevel && title ? headingLevel <= 5 ? jsxRuntime.jsx(Heading, {
                    text: title,
                    level: headingLevel + 1
                  }, void 0) : {
                    title: title
                  } : title ? jsxRuntime.jsx("h2", tslib.__assign({
                    className: styles.heading
                  }, {
                    children: title
                  }), void 0) : '', children]
                }), void 0), stepNumber === totalSteps && jsxRuntime.jsx("hr", {}, void 0)]
              }), void 0)]
            }), void 0)
          }), void 0)
        }), void 0)]
      }), stepNumber);
    };

    function getClassNames$J(props) {
      var palette = getTheme().palette;
      var flex = props.flex;
      return mergeStyleSets({
        accordionMenu: {
          padding: 0,
          margin: '0 !important',
          selectors: {
            li: {
              listStyle: 'none',
              margin: '0 !important',
              selectors: {
                '&:last-child': {
                  borderBottom: "2px solid " + palette.skeColor.grey
                }
              }
            }
          }
        },
        menuItem: {
          backgroundColor: palette.skeColor.white,
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'center',
          width: '100%',
          border: 'none',
          borderTop: "2px solid " + palette.skeColor.grey,
          textAlign: 'left',
          padding: '0 15px',
          selectors: {
            '&:hover': {
              backgroundColor: palette.skeColor.backgroundHoverColor,
              cursor: 'pointer'
            },
            '&:focus': {
              backgroundColor: palette.skeColor.backgroundFocusColor,
              outline: 'none'
            },
            '&:active': {
              color: palette.skeColor.darkBlue
            }
          }
        },
        menuItemIsOpen: {
          borderTop: "2px solid " + palette.skeColor.grey + " !important"
        },
        menuItemTitle: {
          display: 'flex',
          alignItems: 'center',
          flex: flex ? '1 1 auto' : undefined
        },
        title: {
          fontSize: exports.FontSizes.medium,
          display: flex ? 'flex' : undefined,
          flex: flex ? '1 1 auto' : undefined,
          margin: '0 15px 0 15px',
          padding: '10px 0'
        },
        iconWrapper: {
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexGrow: '0',
          flexShrink: '0',
          height: 40,
          width: 40,
          border: "2px solid " + palette.skeColor.blackAlt,
          borderRadius: '50%',
          margin: '8px 0 8px 0',
          fontSize: exports.IconFontSizes.xlarge
        },
        toggleButton: {
          color: palette.skeColor.blue,
          selectors: {
            i: {
              fontSize: exports.IconFontSizes.xlarge,
              paddingLeft: '1px'
            }
          }
        },
        toggleButtonOpen: {
          color: palette.skeColor.blue,
          selectors: {
            i: {
              transform: 'rotate(180deg)',
              paddingLeft: '1px'
            }
          }
        },
        content: {
          borderTop: "2px solid " + palette.skeColor.grey,
          padding: 15,
          background: palette.skeColor.grey5,
          display: 'block'
        }
      });
    }

    /*
     * visibleName AccordionMenu (Trekkspillmeny)
     */

    var AccordionMenu = function AccordionMenu(_a) {
      var className = _a.className,
          children = _a.children,
          ariaLabel = _a.ariaLabel,
          flex = _a.flex;
      var styles = getClassNames$J({
        flex: flex
      });
      var totalSteps = React__namespace.Children.count(children);
      return jsxRuntime.jsx("ul", tslib.__assign({
        className: classnames__default['default'](styles.accordionMenu, className),
        "aria-label": ariaLabel
      }, {
        children: React__namespace.Children.map(children, function (child) {
          if ( /*#__PURE__*/React__namespace.isValidElement(child)) {
            return /*#__PURE__*/React__namespace.cloneElement(child, {
              totalSteps: totalSteps
            });
          }
        })
      }), void 0);
    };

    /*
     * visibleName AccordionMenuItem (Element i trekkspillmeny)
     */

    var AccordionMenuItem = function AccordionMenuItem(props) {
      var styles = getClassNames$J(props);
      var heading = props.heading,
          icon = props.icon,
          onClick = props.onClick,
          className = props.className,
          children = props.children,
          ariaLabel = props.ariaLabel;

      var _a = React__namespace.useState(props.isOpen || false),
          isContentOpen = _a[0],
          setContentOpen = _a[1];

      var toggleVisibility = function toggleVisibility() {
        setContentOpen(!isContentOpen);
      };

      var clickHandler = function clickHandler() {
        if (onClick && !isContentOpen) {
          onClick();
        }

        toggleVisibility();
      };

      return jsxRuntime.jsxs("li", tslib.__assign({
        className: className,
        "aria-label": ariaLabel
      }, {
        children: [jsxRuntime.jsxs("button", tslib.__assign({
          onClick: clickHandler,
          className: isContentOpen ? classnames__default['default'](styles.menuItem, styles.menuItemIsOpen) : styles.menuItem,
          "aria-expanded": isContentOpen
        }, {
          children: [jsxRuntime.jsxs("div", tslib.__assign({
            className: styles.menuItemTitle
          }, {
            children: [jsxRuntime.jsx(Icon, {
              iconName: icon,
              className: styles.iconWrapper
            }, void 0), jsxRuntime.jsx("div", tslib.__assign({
              className: styles.title
            }, {
              children: heading
            }), void 0)]
          }), void 0), jsxRuntime.jsx("div", tslib.__assign({
            className: isContentOpen ? classnames__default['default'](styles.toggleButton, styles.toggleButtonOpen) : styles.toggleButton
          }, {
            children: jsxRuntime.jsx(Icon, {
              iconName: "ChevronDown"
            }, void 0)
          }), void 0)]
        }), void 0), isContentOpen && jsxRuntime.jsx("section", tslib.__assign({
          className: styles.content
        }, {
          children: children
        }), void 0)]
      }), void 0);
    };

    function getTypeColor$2(props) {
      var palette = getTheme().palette;

      switch (props.color) {
        case 'blue':
          return {
            color: palette.skeColor.interactive
          };

        case 'red':
          return {
            color: palette.skeColor.statusError
          };

        case 'green':
          return {
            color: palette.skeColor.green100
          };

        case 'white':
          return {
            color: palette.skeColor.white
          };

        default:
          return {
            color: palette.bodyText
          };
      }
    }

    function getIconColor$1(props) {
      var palette = getTheme().palette;

      switch (props.color) {
        case 'black':
          return {
            color: palette.skeColor.black100
          };

        case 'green':
          return {
            color: palette.skeColor.statusOk
          };

        case 'red':
          return {
            color: palette.skeColor.statusError
          };

        case 'white':
          return {
            color: palette.skeColor.white
          };

        default:
          return {
            color: palette.skeColor.interactive
          };
      }
    }

    function getBorder(props) {
      var palette = getTheme().palette;
      var border = props.border;

      switch (props.color) {
        case 'black':
          return {
            borderBottom: border ? "2px solid " + palette.skeColor.grey70 : "2px solid " + palette.skeColor.transparent
          };

        case 'red':
          return {
            borderBottom: border ? "2px solid " + palette.skeColor.burgundy70 : "2px solid " + palette.skeColor.transparent
          };

        case 'green':
          return {
            borderBottom: border ? "2px solid " + palette.skeColor.green70 : "2px solid " + palette.skeColor.transparent
          };

        case 'white':
          return {
            borderBottom: border ? "2px solid " + palette.skeColor.white : "2px solid " + palette.skeColor.transparent
          };

        default:
          return {
            borderBottom: border ? "2px solid " + palette.skeColor.interactive : "2px solid " + palette.skeColor.transparent
          };
      }
    }

    function getClassNames$I(props) {
      var palette = getTheme().palette;
      var border = props.border,
          disabled = props.disabled;
      var inset = -3;
      var radius = '4px';
      return mergeStyles(getFocusStyle$1({
        palette: palette
      }, inset, 'relative', radius), {
        selectors: {
          '&.ms-Button.ms-Button--action': tslib.__assign(tslib.__assign({
            height: 'auto',
            minHeight: '32px',
            padding: border ? '3px 6px 3px 4px' : '3px 4px',
            textAlign: props.iconAfter ? 'right' : 'left'
          }, getTypeColor$2(props)), getBorder(props)),
          '& span': {
            flexDirection: props.iconAfter ? 'row-reverse' : 'row'
          },
          '&.ms-Button.ms-Button--action, &.ms-Button--action .ms-Button-icon': tslib.__assign({
            fontWeight: exports.FontWeights['medium']
          }, getTypeColor$2(props)),
          '& .ms-Button-flexContainer': {
            alignItems: 'baseline'
          },
          '&.ms-Button--action .ms-Button-icon': tslib.__assign({
            // @ts-ignore TODO
            fontSize: exports.IconFontSizes[props.iconSize],
            marginLeft: '0',
            transform: 'translateY(4px)'
          }, getIconColor$1(props)),
          '&.ms-Button--action .ms-Button-label': {
            lineHeight: '1.5'
          },
          '&.ms-Button--action:hover ': {
            backgroundColor: disabled ? 'undefined' : palette.skeColor.interactiveLight,
            transition: 'background 0.3s'
          },
          '&.ms-Button--action:active ': {
            transition: '0.15s',
            transform: disabled ? '0s' : 'translateY(2px)',
            transitionTimingFunction: 'ease'
          },
          '&.ms-Button--action:active .ms-Button-label': {
            textAlign: props.iconAfter ? 'right' : 'left',
            textDecoration: 'none'
          },
          '&.ms-Button--action:disabled, &.ms-Button--action:disabled i': {
            color: palette.skeColor.lightGrey,
            cursor: 'not-allowed'
          }
        }
      });
    }

    var ActionButton =
    /** @class */
    function (_super) {
      tslib.__extends(ActionButton, _super);

      function ActionButton() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      ActionButton.prototype.render = function () {
        var _a = this.props,
            children = _a.children,
            icon = _a.icon,
            ariaLabel = _a.ariaLabel;
            _a.iconSize;
            var color = _a.color,
            className = _a.className;
            _a.border;
            var props = tslib.__rest(_a, ["children", "icon", "ariaLabel", "iconSize", "color", "className", "border"]);

        return jsxRuntime.jsx(ActionButton$1, tslib.__assign({}, props, {
          className: classnames__default['default'](getClassNames$I(this.props), className),
          color: color,
          iconProps: {
            iconName: icon
          },
          ariaLabel: ariaLabel
        }, {
          children: children
        }), void 0);
      };

      ActionButton.NORMAL = 'large';
      ActionButton.LARGE = 'xlarge';
      ActionButton.defaultProps = {
        color: 'blue',
        disabled: false,
        border: false,
        icon: undefined,
        iconSize: ActionButton.NORMAL,
        onClick: undefined,
        ariaLabel: ''
      };
      return ActionButton;
    }(React__namespace.PureComponent);

    function getTypeColor$1(props) {
      var _a, _b, _c, _d, _e;

      var radius = '200px';
      var interactiveColor = designtokenColors['ske-color-interactive'];
      var whiteColor = designtokenColors['ske-color-white-100'];
      var sizeNormal = {
        height: 'auto',
        minHeight: '32px',
        padding: '7px 15px'
      };

      switch (props.buttonStyle) {
        case 'primaryCornered':
          return tslib.__assign(tslib.__assign({
            borderRadius: '7px',
            borderColor: interactiveColor,
            background: interactiveColor,
            color: whiteColor
          }, sizeNormal), {
            selectors: (_a = {}, _a["@media  only screen and (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
              width: props.mobileFullWidth ? '100%' : 'auto'
            }, _a)
          });

        case 'callToAction':
          return {
            borderColor: interactiveColor,
            background: interactiveColor,
            color: whiteColor,
            boxShadow: "0 8px 6px -6px " + designtokenColors['ske-color-grey-30'],
            fontSize: designtokenFontSizes['ske-font-size-xl'],
            borderWidth: '3px',
            borderRadius: '8px',
            fontWeight: designtokenFontSizes['ske-font-weight-semibold'],
            padding: '25px',
            height: '80px',
            maxWidth: 'calc((75*550px)/100)'
          };

        case 'primary':
          return tslib.__assign(tslib.__assign({
            borderRadius: radius,
            borderColor: interactiveColor,
            background: interactiveColor,
            color: whiteColor
          }, sizeNormal), {
            selectors: (_b = {}, _b["@media  only screen and (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
              width: props.mobileFullWidth ? '100%' : undefined
            }, _b)
          });

        case 'warning':
          return tslib.__assign(tslib.__assign({
            borderRadius: radius,
            borderColor: designtokenColors['ske-color-burgundy-50'],
            background: designtokenColors['ske-color-burgundy-10'],
            color: designtokenColors['ske-color-black-100']
          }, sizeNormal), {
            selectors: (_c = {}, _c["@media  only screen and (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
              width: props.mobileFullWidth ? '100%' : 'auto'
            }, _c)
          });

        case 'secondarySimple':
          return tslib.__assign(tslib.__assign({
            borderWidth: 3,
            borderRadius: radius,
            borderColor: 'transparent',
            background: 'none',
            color: interactiveColor
          }, sizeNormal), {
            selectors: (_d = {}, _d["@media  only screen and (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
              width: props.mobileFullWidth ? '100%' : 'auto'
            }, _d['.ms-Button-textContainer'] = {
              textDecoration: 'underline'
            }, _d)
          });

        default:
          // secondary
          return tslib.__assign(tslib.__assign({
            borderRadius: radius,
            borderColor: interactiveColor,
            background: whiteColor,
            color: interactiveColor
          }, sizeNormal), {
            selectors: (_e = {}, _e["@media  only screen and (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
              width: props.mobileFullWidth ? '100%' : 'auto'
            }, _e)
          });
      }
    }

    function getTypeHoverColor(props) {
      var interactiveColor = designtokenColors['ske-color-interactive'];
      var interactiveDarkColor = designtokenColors['ske-color-interactive-dark'];
      var interactiveLightColor = designtokenColors['ske-color-interactive-light'];
      var errorColor = designtokenColors['ske-color-status-error'];
      var whiteColor = designtokenColors['ske-color-white-100'];

      switch (props.buttonStyle) {
        case 'warning':
          return {
            borderColor: errorColor,
            background: errorColor,
            color: whiteColor
          };

        case 'secondarySimple':
          return {
            borderColor: interactiveColor,
            background: interactiveLightColor,
            textDecoration: 'none',
            selectors: {
              '.ms-Button-textContainer': {
                textDecoration: 'none'
              }
            }
          };

        case 'primaryCornered':
        case 'primary':
        case 'callToAction':
          return {
            borderColor: interactiveDarkColor,
            background: interactiveDarkColor,
            color: whiteColor
          };

        default:
          return {
            borderColor: interactiveColor,
            background: interactiveLightColor,
            color: interactiveColor
          };
      }
    }

    function getDisabledColor(props) {
      switch (props.buttonStyle) {
        case 'primary':
          return {
            boxShadow: "none"
          };

        case 'secondary':
          return {
            background: 'none'
          };

        default:
          return;
      }
    }

    function setFocusRadius(props) {
      if (props.buttonStyle === 'primaryCornered') {
        return '8px';
      }

      if (props.buttonStyle === 'callToAction') {
        return '10px';
      } else {
        return '21px';
      }
    }

    function getClassNames$H(props) {
      var theme = getTheme();
      var inset = props.buttonStyle === 'secondarySimple' ? -4 : -8;
      var disabled = props.disabled;
      var radius = setFocusRadius(props);
      return mergeStyles([getFocusStyle$1(theme, inset, 'relative', radius), {
        displayName: "ske-" + props.buttonStyle + "-button",
        selectors: {
          '&.ms-Button': tslib.__assign({
            borderWidth: '3px',
            fontWeight: 'normal',
            padding: '15px',
            transition: '0.2s',
            textAlign: 'center',
            verticalAlign: 'top'
          }, getTypeColor$1(props)),
          '&.ms-Button:hover': tslib.__assign({}, getTypeHoverColor(props)),
          '&.ms-Button:active': {
            transition: '0.15s',
            boxShadow: 'none',
            transform: disabled ? 'none' : 'translateY(2px)',
            transitionTimingFunction: 'ease'
          },
          '&.ms-Button:disabled': tslib.__assign({
            background: designtokenColors['ske-color-grey-10'],
            borderColor: designtokenColors['ske-color-grey-30'],
            color: designtokenColors['ske-color-grey-30'],
            cursor: 'not-allowed'
          }, getDisabledColor(props)),
          '&.ms-Button i': {
            fontSize: designtokenFontSizes['ske-font-size-icon-l']
          }
        }
      }]);
    }

    /*
     * visibleName Button (Knapp)
     */

    var Button = function Button(props) {
      var children = props.children,
          icon = props.icon,
          className = props.className,
          iconProps = props.iconProps;
          props.buttonType;
          var rest = tslib.__rest(props, ["children", "icon", "className", "iconProps", "buttonType"]);

      return jsxRuntime.jsx(DefaultButton, tslib.__assign({}, rest, {
        className: classnames__default['default'](getClassNames$H(props), className),
        iconProps: icon ? {
          iconName: icon
        } : iconProps
      }, {
        children: children
      }), void 0);
    };
    Button.defaultProps = {
      disabled: false,
      icon: undefined,
      onClick: undefined,
      primary: false,
      buttonStyle: 'secondary',
      mobileFullWidth: false
    };

    var getClassNames$G = function getClassNames() {
      var palette = getTheme().palette;
      return mergeStyleSets({
        buttonLink: {
          display: 'inline-block',
          borderColor: palette.skeColor.blue,
          background: palette.skeColor.blue,
          color: palette.skeColor.white,
          boxShadow: "0 8px 6px -6px " + palette.skeColor.grey30,
          fontSize: exports.FontSizes.largePlus,
          borderWidth: '3px',
          borderRadius: '7px',
          borderStyle: 'solid',
          fontWeight: exports.FontWeights.semibold,
          padding: '25px',
          maxWidth: 'calc((75*550px)/100)',
          textDecoration: 'none',
          transition: '0.2s',
          selectors: {
            '&:hover': {
              borderColor: palette.skeColor.interactiveDark,
              background: palette.skeColor.interactiveDark,
              color: palette.white
            },
            '&:focus': {
              outline: '2px solid ' + palette.skeColor.interactive,
              outlineOffset: '3px'
            },
            '&:active': {
              transform: 'translateY(2px)',
              transitionTimingFunction: 'ease',
              transition: '0.15s',
              boxShadow: 'none'
            }
          }
        }
      });
    };

    /*
     * visibleName ButtonLink (Knappelenke)
     */

    var ButtonLink = function ButtonLink(props) {
      var path = props.path,
          text = props.text,
          className = props.className,
          openInNew = props.openInNew,
          htmlAttributes = tslib.__rest(props, ["path", "text", "className", "openInNew"]);

      var styles = getClassNames$G();

      if (openInNew) {
        return jsxRuntime.jsx("a", tslib.__assign({
          href: path,
          className: classnames__default['default'](className, styles.buttonLink),
          role: "button"
        }, htmlAttributes, {
          target: "_blank",
          rel: "noopener noreferrer"
        }, {
          children: text
        }), void 0);
      }

      return jsxRuntime.jsx("a", tslib.__assign({
        href: path,
        className: classnames__default['default'](className, styles.buttonLink),
        role: "button"
      }, htmlAttributes, {
        children: text
      }), void 0);
    };
    ButtonLink.defaultProps = {};

    function getTypeColor(props) {
      switch (props.buttonSize) {
        case 'xSmall':
          return {
            width: '26px',
            height: '26px'
          };

        case 'small':
          return {
            width: '35px',
            height: '35px'
          };

        case 'medium':
          return {
            width: '40px',
            height: '40px'
          };

        case 'large':
          return {
            width: '50px',
            height: '50px'
          };

        case 'xLarge':
          return {
            width: '60px',
            height: '60px'
          };

        default:
          return {};
      }
    }

    function getCircleStyles(props) {
      var palette = getTheme().palette;

      if (props.circle === true) {
        return {
          border: '3px solid ' + palette.skeColor.interactive
        };
      } else {
        return {
          border: '3px solid ' + palette.skeColor.transparent
        };
      }
    }

    function getCircleHoverStyles(props) {
      var palette = getTheme().palette;
      return {
        color: palette.skeColor.blue,
        //borderWidth: '3px',
        //borderColor: palette.skeColor.blue,
        background: palette.skeColor.lightBlue
      };
    }

    function getIconSize(props) {
      switch (props.buttonSize) {
        case 'xSmall':
          return {
            fontsize: exports.FontSizes.smallPlus
          };

        case 'small':
          return {
            fontSize: exports.FontSizes.mediumPlus
          };

        case 'medium':
          return {
            fontSize: exports.FontSizes.largePlus
          };

        case 'large':
          return {
            fontSize: exports.FontSizes.xxLarge
          };

        case 'xLarge':
          return {
            fontSize: exports.FontSizes.superLarge
          };

        default:
          return {
            fontSize: exports.FontSizes.icon
          };
      }
    }

    var getClassNames$F = function getClassNames(props) {
      var palette = getTheme().palette;
      var inset = props.circle ? -8 : -4;
      var radius = '50px';
      var disabled = props.disabled;
      return mergeStyles([getFocusStyle$1({
        palette: palette
      }, inset, 'relative', radius), {
        displayName: "ske-icon" + props.buttonSize + "-button",
        selectors: {
          '&.ms-Button--icon': tslib.__assign(tslib.__assign({
            width: '40px',
            height: '40px',
            borderRadius: '50%',
            padding: 0,
            background: 'none',
            color: palette.skeColor.blue
          }, getTypeColor(props)), getCircleStyles(props)),
          '&.ms-Button--icon i': tslib.__assign({}, getIconSize(props)),
          '&.ms-Button--icon:hover': tslib.__assign({
            transition: 'background-color 0.2s'
          }, getCircleHoverStyles()),
          '&:focus&:after': {//borderColor: 'transparent',
          },
          '&.ms-Button--icon:active': {
            //color: palette.skeColor.interactiveDark,
            transition: '0.15s',
            transform: disabled ? 'none' : 'translateY(2px)'
          },
          '&.ms-Button--icon:disabled': tslib.__assign(tslib.__assign({}, getCircleStyles(props)), {
            color: palette.skeColor.lightGrey,
            borderColor: palette.skeColor.lightGrey,
            cursor: 'not-allowed'
          }),
          '&.ms-Button--icon:disabled i': {
            color: palette.skeColor.lightGrey
          }
        }
      }]);
    };

    /*
     * visibleName IconButton (Ikonknapp)
     */

    var IconButton = function IconButton(props) {
      var icon = props.icon,
          className = props.className,
          rest = tslib.__rest(props, ["icon", "className"]);

      return (// @ts-ignore
        jsxRuntime.jsx(IconButton$1, tslib.__assign({}, rest, {
          className: classnames__default['default'](getClassNames$F(props), className),
          iconProps: {
            iconName: icon
          }
        }), void 0)
      );
    };
    IconButton.defaultProps = {
      alt: ' ',
      circle: false,
      disabled: undefined,
      icon: undefined,
      onClick: undefined,
      title: undefined
    };

    function getCalloutBorder(props) {
      if (props.color === 'ske-color-white-100' || props.border) {
        return {
          border: "2px solid " + designtokenColors['ske-color-black-100']
        };
      } else {
        return {
          border: 'none'
        };
      }
    }

    var getClassNames$E = function getClassNames(props, widthBtnLabel) {
      return mergeStyleSets({
        main: tslib.__assign(tslib.__assign({
          displayName: 'SkeCallout',
          boxShadow: 'none !important',
          zIndex: 1000000
        }, getCalloutBorder(props)), {
          selectors: {
            '.ms-Callout-main': {
              width: '100%',
              backgroundColor: designtokenColors[props.color],
              boxShadow: 'none',
              'box-sizing': 'border-box',
              padding: designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-xxl'] + " " + designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-lg'] //'1rem 2.5rem 1rem 1rem',

            },
            '.ms-Callout-beak': {
              backgroundColor: designtokenColors[props.color],
              left: 'calc('.concat(widthBtnLabel, '/2) !important')
            },
            '& p': {
              margin: '0 '
            },
            '&& h3': {
              marginTop: '0',
              fontSize: designtokenFontSizes['ske-font-size-m']
            }
          }
        }),
        calloutWrapper: {
          width: '100%'
        },
        closeButton: {
          backgroundColor: 'transparent',
          border: 'none',
          position: 'absolute',
          color: designtokenColors['ske-color-black-100'] + " !important",
          right: '1px',
          top: '1px',
          opacity: 1,
          selectors: {
            '&& i': {
              fontWeight: designtokenFontSizes['ske-font-weight-bold']
            },
            '&:hover i': {
              transition: 'opacity 300ms ease-out'
            }
          }
        }
      });
    };

    exports.CalloutColor = void 0;

    (function (CalloutColor) {
      CalloutColor["HELP"] = "ske-color-green-10";
      CalloutColor["INFO"] = "ske-color-brown-10";
      CalloutColor["ERROR"] = "ske-color-burgundy-10";
      CalloutColor["WARNING"] = "ske-color-brown-10";
      CalloutColor["BASIC"] = "ske-color-white-100";
    })(exports.CalloutColor || (exports.CalloutColor = {}));

    /*
     * visibleName Callout (Utropsboks)
     */

    var Callout =
    /** @class */
    function (_super) {
      tslib.__extends(Callout, _super);

      function Callout(props) {
        var _this = _super.call(this, props) || this;

        _this.state = {
          widthBtnLabel: '',
          target: undefined,
          isCalloutVisible: props.isCalloutVisible
        };
        return _this;
      }

      Callout.prototype.render = function () {
        var _this = this;

        var _a = this.props,
            children = _a.children,
            className = _a.className,
            id = _a.id,
            props = tslib.__rest(_a, ["children", "className", "id"]);

        var styles = getClassNames$E(props, this.state.widthBtnLabel);

        window.onclick = function (e) {
          if (e.target && e.target.parentElement !== _this.state.target && e.target.parentElement.className.indexOf('ms-Button-textContainer') > -1 || e.target.className.indexOf('ms-Button-textContainer') > -1) {
            _this.setState({
              target: e.target.parentElement,
              widthBtnLabel: window.getComputedStyle(e.target.parentElement).width
            });
          }
        };

        window.onresize = function () {
          if (_this.state.target) {
            _this.setState({
              //@ts-ignore
              widthBtnLabel: window.getComputedStyle(_this.state.target).width
            });
          }
        };

        return jsxRuntime.jsx("div", tslib.__assign({
          id: id,
          className: classnames__default['default'](styles.calloutWrapper, className)
        }, {
          children: jsxRuntime.jsxs(Callout$1, tslib.__assign({}, props, {
            className: classnames__default['default'](styles.main, className),
            isBeakVisible: true
          }, {
            children: [children, jsxRuntime.jsx(IconButton, {
              "aria-label": "Lukk",
              icon: "Cancel",
              className: styles.closeButton,
              buttonSize: "small",
              onClick: props.onClose
            }, void 0)]
          }), void 0)
        }), void 0);
      };

      Callout.prototype._onDismiss = function () {
        this.setState({
          isCalloutVisible: false
        });

        if (this.props.autoDismiss) {
          this.props.onDismiss && this.props.onDismiss();
        }
      };

      Callout.HELP = exports.CalloutColor.HELP;
      Callout.INFO = exports.CalloutColor.INFO;
      Callout.ERROR = exports.CalloutColor.ERROR;
      Callout.WARNING = exports.CalloutColor.WARNING;
      Callout.BASIC = exports.CalloutColor.BASIC;
      Callout.POS_TOP_CENTER = DirectionalHint.topCenter;
      Callout.POS_TOP_LEFT = DirectionalHint.topLeftEdge;
      Callout.POS_TOP_RIGHT = DirectionalHint.topRightEdge;
      Callout.POS_BOTTOM_CENTER = DirectionalHint.bottomCenter;
      Callout.POS_BOTTOM_LEFT = DirectionalHint.bottomLeftEdge;
      Callout.POS_BOTTOM_RIGHT = DirectionalHint.bottomRightEdge;
      Callout.defaultProps = {
        autoDismiss: true,
        color: Callout.HELP,
        directionalHint: Callout.POS_TOP_CENTER,
        doNotLayer: true,
        role: undefined,
        border: true
      };
      return Callout;
    }(React.PureComponent);

    exports.CardColor = void 0;

    (function (CardColor) {
      CardColor["GREY"] = "grey10";
      CardColor["GREEN"] = "green10";
      CardColor["BEIGE"] = "brown10";
      CardColor["WHITE"] = "white";
      CardColor["RED"] = "burgundy10";
    })(exports.CardColor || (exports.CardColor = {}));

    exports.CardBorder = void 0;

    (function (CardBorder) {
      CardBorder["GREEN_BORDER"] = "green50";
      CardBorder["RED_BORDER"] = "burgundy50";
      CardBorder["YELLOW_BORDER"] = "brown50";
      CardBorder["GREY_BORDER"] = "grey50";
      CardBorder["WHITE_BORDER"] = "white";
    })(exports.CardBorder || (exports.CardBorder = {}));

    var fadeIn = keyframes({
      from: {
        opacity: 0
      },
      to: {
        opacity: 1
      }
    });

    function getCardBorder(props) {
      var palette = getTheme().palette;

      switch (props.border) {
        case exports.CardBorder.YELLOW_BORDER:
          return {
            border: "4px solid " + palette.skeColor.brown
          };

        case exports.CardBorder.GREEN_BORDER:
          return {
            border: "4px solid " + palette.skeColor.green
          };

        case exports.CardBorder.RED_BORDER:
          return {
            border: "4px solid " + palette.skeColor.pink
          };

        case exports.CardBorder.GREY_BORDER:
          return {
            border: "4px solid " + palette.skeColor.grey
          };

        case exports.CardBorder.WHITE_BORDER:
          return {
            border: "4px solid " + palette.skeColor.white
          };

        default:
          return {
            border: 'none'
          };
      }
    }

    function getMargin(props) {
      switch (props.margin) {
        case 'none':
          return {
            margin: '0px'
          };

        case 'small':
          return {
            margin: '4px'
          };

        case 'medium':
          return {
            margin: '12px'
          };

        case 'large':
          return {
            margin: '24px'
          };

        case 'xlarge':
          return {
            margin: '64px'
          };

        default:
          return {
            margin: '8px'
          };
      }
    }

    var getClassNames$D = function getClassNames(props, state) {
      var theme = getTheme();
      var palette = theme.palette;
      var isExpandedState = state.isExpandedState;
      var title = props.title,
          titlesize = props.titlesize,
          expand = props.expand;
      return mergeStyleSets({
        root: tslib.__assign(tslib.__assign({
          displayName: 'SkeCard',
          color: theme.semanticColors.bodyText,
          backgroundColor: palette.skeColor[props.color],
          marginBottom: props.marginbottom
        }, getCardBorder(props)), {
          padding: 0,
          display: 'flow-root',
          boxSizing: 'border-box',
          selectors: {
            ':hover': {
              cursor: expand ? 'pointer' : 'default'
            },
            ':focus': {
              outline: 'none'
            }
          }
        }),
        expandIcon: {
          color: palette.skeColor.blue,
          borderTopWidth: '0px',
          border: 'none',
          height: '46px',
          width: '46px',
          borderRadius: '50%',
          marginRight: '8px',
          selectors: {
            i: {
              transform: isExpandedState ? 'rotate(-180deg)' : '0',
              fontSize: exports.FontSizes.superLarge
            },
            ':hover': {
              borderColor: palette.skeColor.blue,
              background: palette.skeColor.lightBlue
            }
          }
        },
        titlecontainer: tslib.__assign(tslib.__assign({}, getMargin(props)), {
          marginBottom: '2px',
          textAlign: 'left',
          outline: 'none',
          selectors: {
            ':focus': {
              textDecoration: 'underline'
            }
          }
        }),
        header: {
          width: '100%',
          backgroundColor: 'inherit',
          border: 'none',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: 0,
          position: 'relative',
          wordBreak: 'break-word',
          selectors: {
            ':hover': {
              cursor: expand ? 'pointer' : ''
            },
            ':active': {
              color: expand ? palette.skeColor.blue : palette.skeColor.blackAlt
            },
            ':focus': {
              outlineColor: palette.skeColor.blue
            },
            ':focus:not(:focus-visible)': {
              outline: 'none'
            },
            ':focus-visible': {
              outlineColor: palette.skeColor.blue
            }
          }
        },
        title: {
          flex: '1 1 1px',
          fontSize: titlesize,
          fontWeight: exports.FontWeights.semibold
        },
        titleExpand: {
          flex: '1 1 1px',
          fontSize: titlesize,
          fontWeight: exports.FontWeights.semibold,
          margin: 0,
          selectors: {
            ':hover': {
              textDecoration: 'underline'
            }
          }
        },
        actions: {
          fontSize: exports.FontSizes.medium
        },
        subtitle: {
          width: '100%',
          fontSize: exports.FontSizes.large,
          fontWeight: exports.FontWeights.regular,
          padding: '5px 0 5px 0'
        },
        body: tslib.__assign(tslib.__assign({
          textAlign: 'left',
          animationName: fadeIn,
          fontSize: exports.FontSizes.medium
        }, getMargin(props)), {
          marginTop: title ? '0' : undefined
        })
      });
    };

    /*
     * visibleName Card (Innholdskort)
     */

    var Card =
    /** @class */
    function (_super) {
      tslib.__extends(Card, _super);

      function Card(props) {
        var _this = _super.call(this, props) || this;

        _this._toggleExpand = function () {
          _this.setState({
            isExpandedState: !_this.state.isExpandedState
          });

          _this.props.onClick && _this.props.onClick();
        };

        var isExpanded = props.isExpanded;
        _this.state = {
          isExpandedState: isExpanded || false
        };
        return _this;
      }

      Card.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.state.isExpandedState !== prevState.isExpandedState) {
          this.props.onChange && this.props.onChange(this.state.isExpandedState);
        }
      };

      Card.prototype.render = function () {
        var isExpandedState = this.state.isExpandedState;

        var _a = this.props,
            children = _a.children,
            title = _a.title,
            titleTagName = _a.titleTagName,
            subtitle = _a.subtitle,
            expand = _a.expand,
            className = _a.className,
            id = _a.id,
            buttonType = _a.buttonType;
            _a.ariaLabel;
            _a.isExpanded;
            _a.titlesize;
            _a.color;
            _a.border;
            _a.marginbottom;
            _a.margin;
            _a.onChange;
            _a.onClick;
            var htmlAttributes = tslib.__rest(_a, ["children", "title", "titleTagName", "subtitle", "expand", "className", "id", "buttonType", "ariaLabel", "isExpanded", "titlesize", "color", "border", "marginbottom", "margin", "onChange", "onClick"]);

        var TitleTag = titleTagName;
        var styles = getClassNames$D(this.props, this.state);

        var expandCard = jsxRuntime.jsxs("button", tslib.__assign({
          className: styles.header,
          onClick: expand ? this._toggleExpand : undefined,
          "aria-expanded": isExpandedState,
          type: buttonType
        }, {
          children: [jsxRuntime.jsxs("div", tslib.__assign({
            className: styles.titlecontainer
          }, {
            children: [jsxRuntime.jsx(TitleTag, tslib.__assign({
              "aria-label": title,
              className: styles.titleExpand
            }, {
              children: title
            }), void 0), jsxRuntime.jsx("div", tslib.__assign({
              className: styles.subtitle,
              "aria-label": subtitle
            }, {
              children: subtitle
            }), void 0)]
          }), void 0), jsxRuntime.jsx("div", tslib.__assign({
            className: styles.expandIcon
          }, {
            children: jsxRuntime.jsx(Icon, {
              iconName: 'ChevronDown'
            }, void 0)
          }), void 0)]
        }), void 0);

        var regularCard = jsxRuntime.jsx("div", tslib.__assign({
          className: styles.header
        }, {
          children: jsxRuntime.jsxs("div", tslib.__assign({
            className: styles.titlecontainer
          }, {
            children: [jsxRuntime.jsx(TitleTag, tslib.__assign({
              className: styles.title,
              "aria-label": title
            }, {
              children: title
            }), void 0), jsxRuntime.jsx("div", tslib.__assign({
              className: styles.subtitle,
              "aria-label": subtitle
            }, {
              children: subtitle
            }), void 0)]
          }), void 0)
        }), void 0);

        return jsxRuntime.jsxs("div", tslib.__assign({
          id: id,
          className: classnames__default['default'](styles.root, className)
        }, htmlAttributes, {
          children: [expand ? expandCard : title || subtitle ? regularCard : null, isExpandedState && jsxRuntime.jsx("div", tslib.__assign({
            className: styles.body
          }, {
            children: children
          }), void 0)]
        }), void 0);
      };

      Card.Color = exports.CardColor;
      Card.Border = exports.CardBorder;
      Card.defaultProps = {
        title: undefined,
        titleTagName: 'div',
        subtitle: undefined,
        titlesize: 'x-large',
        expand: false,
        isExpanded: true,
        color: exports.CardColor.BEIGE,
        marginbottom: '2px',
        margin: 'medium',
        buttonType: 'button'
      };
      return Card;
    }(React__namespace.PureComponent);

    var getClassNames$C = function getClassNames(error) {
      var theme = getTheme();
      var inset = -4;
      var radius = '0';
      return mergeStyles([getFocusStyle$1(theme, inset, 'relative', radius), {
        displayName: 'SkeAvkrysningsboks',
        selectors: {
          '&.ms-Checkbox': {
            padding: '4px',
            border: error === true ? "2px solid " + designtokenColors['ske-color-status-error'] : 'none'
          },
          '&.is-enabled .ms-Checkbox-checkbox': {
            borderRadius: '0px',
            content: '',
            display: 'inline-block',
            border: "2px solid " + designtokenColors['ske-color-black-100'],
            cursor: 'pointer',
            fontSize: designtokenFontSizes['ske-font-size-m'],
            backgroundColor: designtokenColors['ske-color-white-100']
          },
          'span.ms-Checkbox-text': {
            fontSize: designtokenFontSizes['ske-font-size-m']
          },
          '&.is-checked .ms-Checkbox-checkbox': {
            border: 'none',
            fontSize: designtokenFontSizes['ske-font-size-m'],
            backgroundColor: designtokenColors['ske-color-interactive']
          },
          '&.is-disabled .ms-Checkbox-checkbox': {
            borderRadius: 0,
            paddingTop: 0,
            fontSize: designtokenFontSizes['ske-font-size-m'],
            backgroundColor: designtokenColors['ske-color-grey-10'],
            border: "2px solid " + designtokenColors['ske-color-grey-50']
          },
          '&.is-disabled i.ms-Checkbox-checkmark': {
            paddingTop: 0,
            color: designtokenColors['ske-color-grey-50'],
            paddingLeft: 0
          },
          'i.ms-Checkbox-checkmark': {
            paddingLeft: '1.5px',
            paddingTop: '1.5px',
            fontSize: designtokenFontSizes['ske-font-size-m']
          },
          '&:hover .ms-Checkbox-checkmark': {
            opacity: 0
          },
          '&.is-checked:hover .ms-Checkbox-checkmark': {
            opacity: 1
          },
          '& i': {
            fontWeight: designtokenFontSizes['ske-font-weight-bold']
          },
          '.ms-Checkbox-label:hover i': {
            opacity: 0
          }
        }
      }]);
    };

    /*
     * visibleName CheckBox (Avkrysningsboks)
     */

    var CheckBox =
    /** @class */
    function (_super) {
      tslib.__extends(CheckBox, _super);

      function CheckBox() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      CheckBox.prototype.render = function () {
        var _a = this.props,
            checked = _a.checked,
            defaultChecked = _a.defaultChecked,
            className = _a.className,
            inputProps = _a.inputProps,
            props = tslib.__rest(_a, ["checked", "defaultChecked", "className", "inputProps"]);

        var checkedProps = defaultChecked ? {
          defaultChecked: defaultChecked
        } : {
          checked: checked
        };

        var inputPropsWithRole = tslib.__assign(tslib.__assign({}, inputProps), {
          role: 'checkbox'
        });

        return jsxRuntime.jsx(Checkbox, tslib.__assign({}, props, {
          className: classnames__default['default'](getClassNames$C(this.props.error), className),
          inputProps: inputPropsWithRole
        }, checkedProps), void 0);
      };

      CheckBox.defaultProps = {
        boxSide: 'end'
      };
      return CheckBox;
    }(React__namespace.PureComponent);

    var getClassNames$B = function getClassNames(props) {
      var palette = getTheme().palette;
      return mergeStyles({
        displayName: "ske-chip",
        display: 'inline-block',
        color: palette.skeColor.blackAlt,
        fontWeight: '400',
        border: "1px solid " + palette.skeColor.white,
        verticalAlign: 'middle',
        padding: '3px 12px',
        fontSize: props.size,
        borderRadius: '5px',
        backgroundColor: palette.skeColor[props.type],
        selectors: {
          '& > div': {
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center'
          },
          '& a': {
            textDecoration: 'underlined',
            color: palette.skeColor.blackAlt
          },
          '& i': {
            verticalAlign: 'text-bottom'
          }
        }
      });
    };

    var ChipType;

    (function (ChipType) {
      ChipType["WARNING"] = "lightPink";
      ChipType["OK"] = "lightGreen";
      ChipType["NEUTRAL"] = "beige";
    })(ChipType || (ChipType = {}));

    /*
     * visibleName Chip (Emneknagg)
     */

    var Chip =
    /** @class */
    function (_super) {
      tslib.__extends(Chip, _super);

      function Chip() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Chip.prototype.render = function () {
        var _a = this.props,
            children = _a.children,
            className = _a.className,
            ariaLabel = _a.ariaLabel,
            props = tslib.__rest(_a, ["children", "className", "ariaLabel"]);

        var styles = getClassNames$B(this.props);
        return jsxRuntime.jsx("div", tslib.__assign({
          className: classnames__default['default'](styles, className),
          "aria-label": ariaLabel
        }, props, {
          children: children
        }), void 0);
      };

      Chip.WARNING = ChipType.WARNING;
      Chip.OK = ChipType.OK;
      Chip.NEUTRAL = ChipType.NEUTRAL;
      Chip.defaultProps = {
        size: 'standard',
        type: Chip.NEUTRAL
      };
      return Chip;
    }(React__namespace.PureComponent);

    function getFieldTypeStyles$3(props) {
      var errorMessage = props.errorMessage;
      var palette = getTheme().palette;
      var color = errorMessage ? palette.skeColor.error : palette.skeColor.blackAlt;

      if (props.inputSize === 'large') {
        return {
          '& .ms-ComboBox': {
            borderWidth: '2px',
            borderRadius: '0px',
            height: '46px',
            padding: '5px 12px',
            borderColor: palette.skeColor.blackAlt
          },
          '& .ms-ComboBox:after': {
            borderRadius: '0px',
            borderWidth: '2px',
            borderColor: errorMessage && color
          },
          '& .ms-ComboBox:focus': {
            borderColor: palette.skeColor.blue + " !important"
          },
          '& .ms-ComboBox-Input': {
            fontSize: exports.FontSizes.large
          },
          'i.ms-Button-icon': {
            fontSize: exports.IconFontSizes.large,
            paddingRight: '4px'
          },
          '& ::placeholder': {
            color: palette.skeColor.darkGrey + " !important"
          }
        };
      } else {
        return {
          '& .ms-ComboBox-Input': {
            fontSize: exports.FontSizes.medium
          }
        };
      }
    }

    var getClassNames$A = function getClassNames(props) {
      var errorMessage = props.errorMessage;
      var palette = getTheme().palette;
      var errorIcon = "'" + SkeIcons.icons.Error + "'";
      var color = errorMessage ? palette.skeColor.error : palette.skeColor.blackAlt;
      return mergeStyleSets({
        main: {
          selectors: tslib.__assign({
            //@ts-ignore
            '& .ms-ComboBox': {
              borderRadius: '0px',
              height: '32px',
              padding: '0px 32px 1px 8px'
            },
            //@ts-ignore
            '& .ms-ComboBox:focus': {
              outline: "2px solid " + palette.skeColor.blue,
              borderColor: palette.skeColor.blue
            },
            //@ts-ignore
            '& .ms-ComboBox:after': {
              borderRadius: '0px',
              borderColor: errorMessage && color,
              borderWidth: errorMessage && '2px'
            },
            '& .ms-ComboBox-Input.is-disabled': {
              backgroundColor: palette.skeColor.whiteGrey
            },
            '& .is-disabled .ms-ComboBox-Input:hover': {
              cursor: 'not-allowed'
            },
            '& .ms-ComboBox.is-disabled': {
              border: "1px solid " + palette.skeColor.lightGrey
            },
            '& .ms-ComboBox.is-disabled button': {
              color: palette.skeColor.grey
            },
            '.ms-ComboBox-CaretDown-button': {
              // Negative positioning to account for the 2px border
              right: '0',
              top: '0',
              color: palette.skeColor.blue
            },
            '& div[role=alert]::before': {
              fontFamily: SkeIcons.fontFace.fontFamily,
              fontSize: 16,
              content: errorMessage && errorIcon,
              marginRight: '3px',
              verticalAlign: 'text-bottom'
            },
            '& div[role=alert]': {
              fontWeight: exports.FontWeights.medium,
              fontSize: exports.FontSizes.small
            }
          }, getFieldTypeStyles$3(props))
        },
        readOnly: {
          borderStyle: 'none',
          fontSize: exports.FontSizes.medium,
          fontWeight: 700,
          display: 'block',
          padding: 0
        }
      });
    };
    var getOptionsClassNames = function getOptionsClassNames(props) {
      var palette = getTheme().palette;
      return mergeStyles({
        displayName: 'SkeComboBoxOptions',
        selectors: {
          '& .ms-ComboBox-option': {
            border: "2px solid " + palette.skeColor.transparent,
            selectors: {
              ':hover': {
                background: palette.skeColor.lightBlue,
                textDecoration: 'underline'
              }
            }
          },
          '& .ms-ComboBox-option.is-checked': {
            background: palette.skeColor.lightBlue,
            textDecoration: 'underline',
            outline: 'none',
            selectors: {
              ':active': {
                background: palette.skeColor.lightBlue + " !important",
                border: "2px solid " + palette.skeColor.blue,
                textDecoration: 'none'
              }
            }
          },
          '& .ms-ComboBox-option.is-checked:after': {
            border: 'none',
            outline: 'none'
          },
          '& .ms-ComboBox-optionText': {
            whiteSpace: 'normal !important'
          },
          'button.ms-ComboBox-option': {
            marginTop: '4px',
            marginBottom: '4px'
          }
        }
      });
    };

    function getLabelSize(props) {
      switch (props.inputSize) {
        case 'small':
          return {
            fontSize: designtokenFontSizes['ske-font-size-xs']
          };

        case 'large':
          return {
            fontSize: designtokenFontSizes['ske-font-size-icon-l']
          };

        default:
          return {
            fontSize: designtokenFontSizes['ske-font-size-m']
          };
      }
    }

    function getDisplay(props) {
      var help = props.help,
          warning = props.warning;
      return help !== undefined || warning !== undefined ? 'initial' : 'inline-block';
    }

    var getClassNames$z = function getClassNames(props) {
      var calloutFloating = props.calloutFloating;
      return mergeStyleSets({
        calloutLabelWrapper: {
          display: 'flex'
        },
        calloutContext: {
          selectors: {
            '& .ms-Callout-container': {
              position: !calloutFloating ? 'inherit' : undefined,
              margin: !calloutFloating ? designtokenSpacing['ske-spacing-lg'] + " 0" : 0,
              width: '100%'
            },
            '& .ms-Callout': !calloutFloating && {
              left: '0 !important',
              top: '0 !important',
              position: 'inherit'
            },
            '& .ms-Callout-main': !calloutFloating && {
              maxWidth: '100%',
              display: 'inline-block',
              overflow: 'initial'
            },
            '& .ms-Callout-beak': !calloutFloating && {
              left: designtokenSpacing['ske-spacing-xl'] + " !important",
              top: "-" + designtokenSpacing['ske-spacing-md'] + " !important"
            },
            '& .ms-Callout-beakCurtain': {
              backgroundColor: 'transparent'
            }
          }
        },
        label: tslib.__assign(tslib.__assign({
          paddingBottom: designtokenSpacing['ske-spacing-sm'],
          paddingLeft: 0,
          lineHeight: designtokenFontSizes['ske-line-height-m'],
          display: getDisplay(props),
          color: designtokenColors['ske-color-black-100'],
          fontWeight: designtokenFontSizes['ske-font-weight-regular']
        }, getLabelSize(props)), {
          selectors: {
            '& .ms-Label': {
              fontWeight: designtokenFontSizes['ske-font-weight-regular']
            }
          }
        }),
        labelAsLegend: tslib.__assign(tslib.__assign({
          paddingLeft: 0,
          paddingBottom: designtokenSpacing['ske-spacing-sm'],
          display: 'inline-block',
          color: designtokenColors['ske-color-black-100'],
          fontWeight: designtokenFontSizes['ske-font-weight-regular']
        }, getLabelSize(props)), {
          selectors: {
            '& .ms-Label': {
              fontWeight: designtokenFontSizes['ske-font-weight-regular']
            },
            '@supports (display: contents)': {
              display: 'contents'
            }
          }
        }),
        labelIconArea: {
          height: designtokenSpacing['ske-spacing-xl'],
          display: 'inline-block',
          selectors: {
            '& button ': {
              height: designtokenSpacing['ske-spacing-xl'],
              width: designtokenSpacing['ske-spacing-xl'],
              marginLeft: designtokenSpacing['ske-spacing-xs'],
              borderRadius: '100%'
            }
          }
        },
        icon: {
          color: designtokenColors['ske-color-interactive'],
          selectors: {
            '& i': {
              fontSize: designtokenFontSizes['ske-font-size-l']
            },
            '&:hover': {
              background: designtokenColors['ske-color-interactive-light']
            },
            '&:focus': {
              background: designtokenColors['ske-color-white']
            },
            '&:focus&:after': {
              border: "2px solid " + designtokenColors['ske-color-interactive'],
              borderRadius: '100%',
              inset: '-1px',
              outline: 'none'
            }
          }
        },
        warningicon: {
          color: designtokenColors['ske-color-interactive'],
          selectors: {
            '& i': {
              fontSize: designtokenFontSizes['ske-font-size-l']
            },
            '&:hover': {
              background: designtokenColors['ske-color-interactive-light']
            },
            '&:focus': {
              background: designtokenColors['ske-color-white']
            },
            '&:focus&:after': {
              border: "2px solid " + designtokenColors['ske-color-interactive'],
              borderRadius: '100%',
              inset: '-1px',
              outline: 'none'
            }
          }
        },
        errorIcon: {
          position: 'absolute',
          left: "-" + designtokenSpacing['ske-spacing-xl'],
          bottom: designtokenSpacing['ske-spacing-xxl'],
          selectors: {
            '& i': {
              color: designtokenColors['ske-color-status-error'],
              fontSize: designtokenFontSizes['ske-font-size-l']
            }
          }
        }
      });
    };

    var calloutState;

    (function (calloutState) {
      calloutState["OPEN"] = "OPEN";
      calloutState["CLOSED"] = "CLOSED";
    })(calloutState || (calloutState = {}));

    /*
     * visibleName LabelWithCallout (Merkelapp med utropsboks)
     */

    var LabelWithCallout = function LabelWithCallout(props) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

      var id = props.id,
          inputId = props.inputId,
          label = props.label,
          ariaLabel = props.ariaLabel,
          buttonAriaLabel = props.buttonAriaLabel,
          buttonTitle = props.buttonTitle,
          _l = props.calloutFloating,
          calloutFloating = _l === void 0 ? false : _l,
          customClassNames = props.customClassNames,
          editable = props.editable,
          requiredMark = props.requiredMark,
          editFunction = props.editFunction,
          help = props.help,
          inFieldset = props.inFieldset,
          readOnly = props.readOnly,
          warning = props.warning,
          onRenderLabel = props.onRenderLabel,
          onCalloutToggle = props.onCalloutToggle,
          calloutProps = props.calloutProps;
      var styles = getClassNames$z(tslib.__assign({
        calloutFloating: calloutFloating
      }, props));

      var _m = React__namespace.useState(false),
          isCalloutVisible = _m[0],
          setIsCalloutVisible = _m[1];

      var _o = React__namespace.useState(calloutState.CLOSED),
          currentCalloutState = _o[0],
          setCurrentCalloutState = _o[1];

      var iconButtonElementRef = React__namespace.useRef(null);
      var helpElement = /*#__PURE__*/React__namespace.isValidElement(help) ? help : jsxRuntime.jsx("p", tslib.__assign({
        className: (_a = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.helpPragraph) !== null && _a !== void 0 ? _a : ''
      }, {
        children: help
      }), void 0);
      var warningElement = /*#__PURE__*/React__namespace.isValidElement(warning) ? warning : jsxRuntime.jsx("p", tslib.__assign({
        className: (_b = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.warningPragraph) !== null && _b !== void 0 ? _b : ''
      }, {
        children: warning
      }), void 0);
      var requiredSymbol = requiredMark ? ' *' : '';

      var toggleEvent = function toggleEvent() {
        if (onCalloutToggle) {
          var oldCalloutState = currentCalloutState;
          var newCalloutState = isCalloutVisible ? calloutState.CLOSED : calloutState.OPEN;
          setCurrentCalloutState(newCalloutState);
          onCalloutToggle(oldCalloutState, newCalloutState);
        }

        return;
      };

      return onRenderLabel ? onRenderLabel : jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [jsxRuntime.jsxs("div", tslib.__assign({
          className: styles.calloutLabelWrapper + " " + ((_c = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.wrapper) !== null && _c !== void 0 ? _c : '')
        }, {
          children: [inFieldset ? label ? jsxRuntime.jsx("legend", tslib.__assign({
            id: id,
            className: styles.labelAsLegend + " " + ((_d = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.legend) !== null && _d !== void 0 ? _d : ''),
            "aria-label": ariaLabel
          }, {
            children: label + requiredSymbol
          }), void 0) : null : label ? jsxRuntime.jsx("label", tslib.__assign({
            id: id,
            htmlFor: inputId,
            className: styles.label + " " + ((_e = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.label) !== null && _e !== void 0 ? _e : ''),
            "aria-label": ariaLabel
          }, {
            children: label + requiredSymbol
          }), void 0) : null, help && !warning && jsxRuntime.jsx("span", tslib.__assign({
            className: styles.labelIconArea,
            ref: iconButtonElementRef
          }, {
            children: jsxRuntime.jsx(IconButton$1, {
              title: buttonTitle ? buttonTitle : 'Hjelp',
              iconProps: {
                iconName: 'HelpOutline'
              },
              className: styles.icon + " " + ((_f = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.helpicon) !== null && _f !== void 0 ? _f : ''),
              onClick: function onClick() {
                setIsCalloutVisible(!isCalloutVisible);
                toggleEvent();
              },
              "aria-describedby": id,
              ariaLabel: buttonAriaLabel ? buttonAriaLabel : 'Hjelp',
              "aria-expanded": isCalloutVisible
            }, void 0)
          }), void 0), warning && jsxRuntime.jsx("span", tslib.__assign({
            className: styles.labelIconArea,
            ref: iconButtonElementRef
          }, {
            children: jsxRuntime.jsx(IconButton$1, {
              title: buttonTitle ? buttonTitle : 'Varsel',
              iconProps: {
                iconName: 'WarningOutline'
              },
              className: styles.warningicon + " " + ((_g = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.warningicon) !== null && _g !== void 0 ? _g : ''),
              onClick: function onClick() {
                setIsCalloutVisible(!isCalloutVisible);
                toggleEvent();
              },
              "aria-describedby": id,
              ariaLabel: buttonAriaLabel ? buttonAriaLabel : 'Varsel',
              "aria-expanded": isCalloutVisible
            }, void 0)
          }), void 0), readOnly && jsxRuntime.jsx("span", tslib.__assign({
            className: styles.labelIconArea + " " + ((_h = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.readonlyarea) !== null && _h !== void 0 ? _h : '')
          }, {
            children: editable && jsxRuntime.jsx(IconButton$1, {
              title: buttonTitle ? buttonTitle : 'Rediger',
              iconProps: {
                iconName: 'Edit'
              },
              className: styles.icon + " " + ((_j = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.editicon) !== null && _j !== void 0 ? _j : ''),
              "aria-describedby": id,
              ariaLabel: buttonAriaLabel ? buttonAriaLabel : 'Rediger',
              "aria-expanded": isCalloutVisible,
              onClick: editFunction
            }, void 0)
          }), void 0)]
        }), void 0), isCalloutVisible && jsxRuntime.jsx(Callout, tslib.__assign({}, calloutProps, {
          ref: calloutProps === null || calloutProps === void 0 ? void 0 : calloutProps.ref,
          className: styles.calloutContext + " " + ((_k = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.callout) !== null && _k !== void 0 ? _k : ''),
          color: help && !warning ? Callout.HELP : Callout.WARNING,
          target: iconButtonElementRef.current,
          directionalHint: calloutFloating ? Callout.POS_BOTTOM_LEFT : Callout.POS_TOP_LEFT,
          onClose: function onClose() {
            setIsCalloutVisible(false);
            toggleEvent();
          },
          onDismiss: function onDismiss() {
            if (calloutProps === null || calloutProps === void 0 ? void 0 : calloutProps.autoDismiss) {
              setIsCalloutVisible(false);
              toggleEvent();
            }
          }
        }, {
          children: help && !warning ? helpElement : warningElement
        }), void 0)]
      }, void 0);
    };

    var ComboBox = function ComboBox(props) {
      var children = props.children,
          errorMessage = props.errorMessage,
          label = props.label,
          help = props.help,
          className = props.className,
          id = props.id,
          _a = props.required,
          required = _a === void 0 ? false : _a,
          labelButtonAriaLabel = props.labelButtonAriaLabel,
          labelWithCalloutProps = props.labelWithCalloutProps,
          onCalloutToggle = props.onCalloutToggle,
          calloutProps = props.calloutProps,
          readOnly = props.readOnly,
          _b = props.requiredWithMark,
          requiredWithMark = _b === void 0 ? false : _b,
          ref = props.ref,
          rest = tslib.__rest(props, ["children", "errorMessage", "label", "help", "className", "id", "required", "labelButtonAriaLabel", "labelWithCalloutProps", "onCalloutToggle", "calloutProps", "readOnly", "requiredWithMark", "ref"]);

      var generatedId = generateId();
      var mainId = id ? id : 'combobox-' + generatedId;
      var inputId = mainId + '-input';
      var labelId = mainId + '-label';
      var styles = getClassNames$A(props);
      return jsxRuntime.jsxs("div", tslib.__assign({
        id: mainId,
        ref: ref
      }, {
        children: [jsxRuntime.jsx(LabelWithCallout, tslib.__assign({
          id: labelId,
          inputId: readOnly ? inputId : inputId + '-input',
          label: label,
          requiredMark: requiredWithMark,
          buttonAriaLabel: labelButtonAriaLabel,
          help: help,
          onCalloutToggle: onCalloutToggle
        }, labelWithCalloutProps), void 0), readOnly ? jsxRuntime.jsx("input", {
          id: inputId,
          type: "text",
          readOnly: true,
          className: styles.readOnly,
          value: props.text ? props.text : props.options.filter(function (option) {
            return option.key === props.defaultSelectedKey;
          })[0].text
        }, void 0) : jsxRuntime.jsx(VirtualizedComboBox, tslib.__assign({}, rest, {
          id: inputId,
          ariaLabel: label,
          required: required || requiredWithMark,
          className: classnames__default['default'](styles.main, className),
          errorMessage: errorMessage,
          "aria-invalid": errorMessage ? true : false,
          calloutProps: tslib.__assign(tslib.__assign({}, calloutProps), {
            className: getOptionsClassNames()
          })
        }, {
          children: children
        }), void 0)]
      }), void 0);
    };
    ComboBox.defaultProps = {
      autoComplete: 'on',
      allowFreeform: false,
      label: undefined,
      errorMessage: undefined,
      help: undefined,
      disabled: false
    };

    (function (global, factory) {
       typeof exports === 'object' && typeof module !== 'undefined'
           && typeof require === 'function' ? factory(require('../moment')) :
       typeof define === 'function' && define.amd ? define(['../moment'], factory) :
       factory(global.moment);
    }(undefined, (function (moment) {
        //! moment.js locale configuration

        var nb = moment.defineLocale('nb', {
            months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
                '_'
            ),
            monthsShort:
                'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
            monthsParseExact: true,
            weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
            weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
            weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD.MM.YYYY',
                LL: 'D. MMMM YYYY',
                LLL: 'D. MMMM YYYY [kl.] HH:mm',
                LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
            },
            calendar: {
                sameDay: '[i dag kl.] LT',
                nextDay: '[i morgen kl.] LT',
                nextWeek: 'dddd [kl.] LT',
                lastDay: '[i går kl.] LT',
                lastWeek: '[forrige] dddd [kl.] LT',
                sameElse: 'L',
            },
            relativeTime: {
                future: 'om %s',
                past: '%s siden',
                s: 'noen sekunder',
                ss: '%d sekunder',
                m: 'ett minutt',
                mm: '%d minutter',
                h: 'en time',
                hh: '%d timer',
                d: 'en dag',
                dd: '%d dager',
                w: 'en uke',
                ww: '%d uker',
                M: 'en måned',
                MM: '%d måneder',
                y: 'ett år',
                yy: '%d år',
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
                dow: 1, // Monday is the first day of the week.
                doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
        });

        return nb;

    })));

    var errorIcon$1 = "'" + SkeIcons.icons.Error + "'";

    function getFieldTypeStyles$2(props) {
      if (props.inputSize === 'large') {
        return {
          '& .ms-TextField-fieldGroup': {
            borderWidth: designtokenSpacing['ske-spacing-xs'],
            height: designtokenSpacing['ske-spacing-xxxl'],
            margin: designtokenSpacing['ske-spacing-sm'] + " 0",
            fontSize: designtokenFontSizes['ske-font-size-l']
          },
          '& input.ms-TextField-field': {
            fontSize: designtokenFontSizes['ske-font-size-l'] + " !important"
          },
          'i.ms-DatePicker-event--without-label': {
            marginTop: designtokenSpacing['ske-spacing-xs'],
            padding: designtokenSpacing['ske-spacing-sm'],
            fontSize: designtokenFontSizes['ske-font-size-xl'],
            color: designtokenColors['ske-color-interactive'],
            lineHeight: designtokenSpacing['ske-spacing-xxl']
          }
        };
      } else {
        return {
          '& .ms-TextField-fieldGroup': {
            fontSize: designtokenFontSizes['ske-font-size-s']
          },
          'i.ms-DatePicker-event--without-label': {
            color: designtokenColors['ske-color-interactive']
          }
        };
      }
    }

    function getTextFieldStyles(props) {
      if (props.readonlyMode === true) {
        return {
          '& .ms-TextField-fieldGroup': {
            border: 'none'
          },
          '& .ms-TextField-fieldGroup:focus .ms-TextField-field': {
            cursor: 'not-allowed'
          },
          '& .ms-TextField-field': {
            paddingLeft: 0,
            pointerEvents: 'none'
          }
        };
      } else {
        return {};
      }
    }

    var getCalendarClassNames = function getCalendarClassNames(props) {
      return mergeStyles({
        displayName: 'SkeCalendar',
        color: designtokenColors['ske-color-black-100'],
        selectors: {
          '& .ms-DatePicker-monthOption:hover': {
            color: designtokenColors['ske-color-black-100'] + " !important"
          },
          '& .ms-DatePicker-day--highlighted': {
            backgroundColor: designtokenColors['ske-color-interactive-light'],
            color: designtokenColors['ske-color-black-100']
          },
          '& .ms-DatePicker-day--today': {
            backgroundColor: designtokenColors['ske-color-interactive-light'],
            color: designtokenColors['ske-color-black-100']
          }
        }
      });
    };
    var getClassNames$y = function getClassNames(props) {
      var errorMessage = props.errorMessage,
          readonlyMode = props.readonlyMode;
      var color = errorMessage ? designtokenColors['ske-color-status-error'] : designtokenColors['ske-color-interactive'];
      return mergeStyles({
        displayName: 'SkeDatePicker',
        outline: 'transparent',
        position: 'relative',
        selectors: tslib.__assign(tslib.__assign({
          '&& .ms-TextField-fieldGroup': {
            borderRadius: 0,
            borderColor: designtokenColors['ske-color-black-100']
          },
          '& .ms-TextField-field': {
            fontSize: designtokenFontSizes['ske-font-size-m']
          },
          '&& .ms-TextField-fieldGroup.ms-TextField-fieldGroup:after': {
            content: '""'
          },
          '& .ms-TextField-fieldGroup::before': {
            display: 'none'
          },
          '& .ms-TextField.is-disabled': !readonlyMode && {
            borderColor: designtokenColors['ske-color-grey-50'],
            borderStyle: 'solid',
            borderWidth: 0,
            backgroundColor: designtokenColors['ske-color-grey-5']
          },
          '& .ms-TextField.is-disabled i': {
            color: designtokenColors['ske-color-grey-50']
          },
          '& .ms-TextField.is-disabled input': {
            padding: designtokenSpacing['ske-spacing-md'],
            cursor: 'not-allowed',
            color: designtokenColors['ske-color-black-100']
          },
          '& .ms-TextField.is-disabled .ms-TextField-fieldGroup': {
            backgroundColor: readonlyMode ? 'transparent' : undefined,
            borderColor: designtokenColors['ske-color-grey-50'],
            borderStyle: 'solid',
            borderWidth: '1px'
          },
          '& .ms-TextField .ms-TextField-fieldGroup .ms-TextField-field': readonlyMode && {
            fontWeight: designtokenFontSizes['ske-font-weight-bold'],
            fontSize: designtokenFontSizes['ske-font-size-medium'],
            color: designtokenColors['ske-color-black-100']
          },
          '.ms-TextField i': readonlyMode && {
            display: 'none'
          },
          // style customization for underlined mode
          '& .ms-TextField.ms-TextField--underlined .ms-TextField-wrapper': {
            border: "1px solid " + color
          },
          '& .ms-TextField.ms-TextField--underlined .ms-TextField-wrapper:hover': {
            border: "1px solid " + designtokenColors['ske-color-black-100']
          },
          '& .ms-TextField-errorMessage': {
            color: designtokenColors['ske-color-status-error'],
            fontWeight: designtokenFontSizes['ske-font-weight-medium'],
            selectors: {
              ':before': {
                fontFamily: SkeIcons.fontFace.fontFamily,
                fontSize: designtokenFontSizes['ske-font-size-l'],
                display: 'block',
                content: errorIcon$1,
                marginRight: designtokenSpacing['ske-spacing-sm']
              }
            }
          },
          '& .ms-TextField .ms-TextField-fieldGroup': errorMessage && {
            borderColor: designtokenColors['ske-color-status-error'],
            borderWidth: designtokenSpacing['ske-spacing-xs']
          },
          '& .ms-TextField.is-active .ms-TextField-fieldGroup': errorMessage && {
            outlineColor: designtokenColors['ske-color-status-interactive'],
            borderColor: designtokenColors['ske-color-status-interactive']
          }
        }, getFieldTypeStyles$2(props)), getTextFieldStyles(props))
      });
    };

    var errorIcon = "'" + SkeIcons.icons.Error + "'";
    var getClassNames$x = function getClassNames() {
      var theme = getTheme();
      var fonts = theme.fonts;
      var palette = theme.palette;
      var classNames = getGlobalClassNames({}, theme);
      return mergeStyles([// @ts-ignore TODO
      classNames.error, AnimationClassNames.slideDownIn20, fonts.small, {
        display: 'block',
        color: palette.skeColor.error,
        fontWeight: 500,
        lineHeight: '1rem',
        paddingTop: 5,
        selectors: {
          ':before': {
            fontFamily: SkeIcons.fontFace.fontFamily,
            fontSize: fonts.small,
            content: errorIcon,
            marginRight: 3,
            verticalAlign: 'text-bottom'
          }
        }
      }]);
    };

    /*
     * visibleName ErrorMessage (Feilmelding)
     */

    var ErrorMessage = function ErrorMessage(props) {
      var errorClassNames = getClassNames$x();
      var className = props.className;
      var showError = props.showError !== undefined ? props.showError : true;

      if (!showError) {
        return null;
      }

      return jsxRuntime.jsx("span", tslib.__assign({
        role: "alert",
        "aria-atomic": "true",
        className: classnames__default['default'](errorClassNames, className)
      }, {
        children: props.children
      }), void 0);
    };

    var DEFAULT_DATE_FORMAT = 'DD.MM.YYYY';

    var DEFAULTFORMATDATE = function DEFAULTFORMATDATE(date) {
      if (date) {
        return moment__default['default'](date).format(DEFAULT_DATE_FORMAT);
      }

      return '';
    };

    var DEFAULTPARSEDATEFROMSTRING = function DEFAULTPARSEDATEFROMSTRING(date) {
      if (date) {
        return moment__default['default'](date, DEFAULT_DATE_FORMAT).toDate();
      }

      return null;
    };
    /*
     * visibleName DatePicker (Datovelger)
     */


    var DatePicker = function DatePicker(props) {
      var ariaLabel = props.ariaLabel,
          calloutFloating = props.calloutFloating,
          datepickerCalloutProps = props.datepickerCalloutProps,
          children = props.children,
          className = props.className,
          editable = props.editable,
          _a = props.errorMessage,
          errorMessage = _a === void 0 ? undefined : _a,
          id = props.id,
          invalidInputErrorMessage = props.invalidInputErrorMessage,
          isOutOfBoundsErrorMessage = props.isOutOfBoundsErrorMessage,
          isRequired = props.isRequired,
          isRequiredErrorMessage = props.isRequiredErrorMessage,
          help = props.help,
          label = props.label,
          labelButtonAriaLabel = props.labelButtonAriaLabel,
          labelWithCalloutProps = props.labelWithCalloutProps,
          language = props.language,
          onCalloutToggle = props.onCalloutToggle,
          readonlyMode = props.readonlyMode,
          _b = props.requiredWithMark,
          requiredWithMark = _b === void 0 ? false : _b,
          rest = tslib.__rest(props, ["ariaLabel", "calloutFloating", "datepickerCalloutProps", "children", "className", "editable", "errorMessage", "id", "invalidInputErrorMessage", "isOutOfBoundsErrorMessage", "isRequired", "isRequiredErrorMessage", "help", "label", "labelButtonAriaLabel", "labelWithCalloutProps", "language", "onCalloutToggle", "readonlyMode", "requiredWithMark"]);

      var defaultValues = {
        allowTextInput: true,
        dateTimeFormatter: undefined,
        disabled: false,
        firstDayOfWeek: language !== 'en' ? exports.DayOfWeek.Monday : exports.DayOfWeek.Sunday,
        firstWeekOfYear: 0,
        formatDate: DEFAULTFORMATDATE,
        initialPickerDate: new Date(),
        isMonthPickerVisible: true,
        isRequired: false,
        highlightCurrentMonth: true,
        parseDateFromString: DEFAULTPARSEDATEFROMSTRING,
        pickerAriaLabel: t('datepicker.ariaLabel'),
        showGoToToday: true,
        showMonthPickerAsOverlay: false,
        showWeekNumbers: true
      };
      var generatedId = generateId();
      var mainId = id ? id : 'datepicker-' + generatedId;
      var inputId = mainId + '-input';
      var labelId = mainId + '-label';
      var datePickerRef = React__namespace.useRef();

      var _c = React__namespace.useState(false),
          editMode = _c[0],
          setEditMode = _c[1];

      var _d = React__namespace.useState(readonlyMode && !editMode),
          readOnly = _d[0],
          setReadOnly = _d[1];

      var _e = React__namespace.useState(false),
          requiredInternalState = _e[0],
          setRequiredInternalState = _e[1];

      React__namespace.useEffect(function () {
        setReadOnly(readonlyMode && !editMode);
      }, [editMode, readonlyMode]);

      if (language) {
        i18n__default['default'].changeLanguage(language);
        moment__default['default'].locale(language);
      }

      var DEFAULT_STRINGS = {
        months: moment__default['default'].months(),
        shortMonths: moment__default['default'].monthsShort(),
        days: moment__default['default'].weekdays(),
        shortDays: moment__default['default'].weekdaysShort(),
        goToToday: t('datepicker.goToToday'),
        prevMonthAriaLabel: t('datepicker.prevMonthAriaLabel'),
        nextMonthAriaLabel: t('datepicker.nextMonthAriaLabel'),
        prevYearAriaLabel: t('datepicker.prevYearAriaLabel'),
        nextYearAriaLabel: t('datepicker.nextYearAriaLabel'),
        invalidInputErrorMessage: i18n__default['default'].t('datepicker.invalidInputErrorMessage', {
          DEFAULT_DATE_FORMAT: DEFAULT_DATE_FORMAT
        }),

        /** Automatisk utvide høyde (ved multiline) */
        isOutOfBoundsErrorMessage: 'Datoen er ikke innenfor gyldig periode',
        isRequiredErrorMessage: t('datepicker.isRequiredErrorMessage')
      };

      var onEdit = function onEdit() {
        if (!editMode) {
          datePickerRef.current && datePickerRef.current.focus();
        }

        setEditMode(!editMode);
      };

      var onBlur = function onBlur(e) {
        rest.onBlur && rest.onBlur(e);
        setRequiredInternalState(isRequired || requiredWithMark); // TO-DO datepicker er blitt en FunctionComponent. Det er ikke mulig å aksessere intern state på denne måten
        // Filled out feature request here: https://github.com/microsoft/fluentui/issues/19512
        // if (editMode && !datePickerRef.current?.state.isDatePickerShown) {
        //   setEditMode(!editMode);
        // }
      };

      return jsxRuntime.jsxs("div", tslib.__assign({
        id: id
      }, {
        children: [jsxRuntime.jsx(LabelWithCallout, tslib.__assign({
          id: labelId,
          inputId: inputId + '-label',
          label: label,
          requiredMark: requiredWithMark,
          buttonAriaLabel: labelButtonAriaLabel,
          help: help,
          calloutFloating: calloutFloating,
          onCalloutToggle: onCalloutToggle,
          editable: editable,
          editFunction: onEdit,
          readOnly: readonlyMode,
          calloutProps: tslib.__assign({}, labelWithCalloutProps === null || labelWithCalloutProps === void 0 ? void 0 : labelWithCalloutProps.calloutProps)
        }, labelWithCalloutProps), void 0), jsxRuntime.jsx(DatePicker$1, tslib.__assign({}, defaultValues, rest, {
          id: inputId,
          ariaLabel: ariaLabel,
          className: classnames__default['default'](getClassNames$y(tslib.__assign({
            errorMessage: errorMessage,
            readonlyMode: readOnly
          }, rest)), className),
          isRequired: requiredInternalState,
          componentRef: function componentRef(ref) {
            datePickerRef.current = ref;
          },
          calloutProps: tslib.__assign(tslib.__assign({}, datepickerCalloutProps), {
            className: classnames__default['default'](getCalendarClassNames(), datepickerCalloutProps === null || datepickerCalloutProps === void 0 ? void 0 : datepickerCalloutProps.className)
          }),
          disabled: readOnly ? true : rest.disabled,
          onBlur: onBlur,
          strings: tslib.__assign(tslib.__assign({}, DEFAULT_STRINGS), {
            isRequiredErrorMessage: isRequiredErrorMessage ? isRequiredErrorMessage : DEFAULT_STRINGS.isRequiredErrorMessage,
            isOutOfBoundsErrorMessage: isOutOfBoundsErrorMessage ? isOutOfBoundsErrorMessage : DEFAULT_STRINGS.isOutOfBoundsErrorMessage,
            invalidInputErrorMessage: invalidInputErrorMessage ? invalidInputErrorMessage : DEFAULT_STRINGS.invalidInputErrorMessage
          })
        }, {
          children: children
        }), void 0), errorMessage && typeof errorMessage === 'string' ? jsxRuntime.jsx(ErrorMessage, {
          children: errorMessage
        }, void 0) : errorMessage]
      }), void 0);
    };

    function getBackgroundColor$1(props) {
      var palette = getTheme().palette;

      if (props.background === 'white') {
        return palette.skeColor.white;
      } else {
        return 'none';
      }
    }

    function getHoverColor(props) {
      var palette = getTheme().palette;
      return palette.skeColor.lightBlue;
    }

    var getClassNames$w = function getClassNames(props) {
      var palette = getTheme().palette;
      var inset = 0;
      var position = 'relative';
      var radius = '0';
      var noHover = props.noHover && props.checkboxVisibility === 2;
      return mergeStyles({
        outline: 'transparent',
        position: position,
        background: palette.themePrimary,
        selectors: {
          '::-moz-focus-inner': {
            border: '0'
          },
          '.ms-Fabric.is-focusVisible.is-focusVisible & .ms-DetailsRow:focus': {
            backgroundColor: palette.themePrimary,
            color: palette.white
          },
          '.ms-Fabric.is-focusVisible.is-focusVisible & .ms-DetailsRow:focus:after': {
            border: '2px solid ' + palette.themePrimary,
            borderRadius: radius,
            bottom: inset + 1,
            content: '""',
            left: inset + 1,
            outline: 'transparent',
            position: 'absolute',
            right: inset + 1,
            top: inset + 1,
            zIndex: 1
          },
          '.ms-Fabric.is-focusVisible.is-focusVisible & .ms-DetailsHeader-cellTitle:focus:after': {
            border: '2px solid ' + palette.themePrimary,
            borderRadius: radius,
            bottom: inset + 1,
            content: '""',
            left: inset + 1,
            outline: 'transparent',
            position: 'absolute',
            right: inset + 1,
            top: inset + 1,
            zIndex: 1
          },
          '.ms-GroupHeader': {
            background: getBackgroundColor$1(props)
          },
          '.ms-GroupHeader .ms-GroupHeader-expand': {
            width: 20,
            height: 20,
            color: palette.skeColor.blue,
            border: '2px solid ' + palette.skeColor.blue,
            borderRadius: '50%',
            position: 'relative',
            margin: 9
          },
          '.ms-GroupHeader .ms-GroupHeader-expand i': {
            position: 'absolute',
            transformOrigin: 'center center',
            fontWeight: exports.FontWeights.bold
          },
          '.ms-DetailsHeader-collapseButton': {
            color: palette.skeColor.blue
          },
          '&.ms-DetailsList': {
            background: 'none',
            fontSize: exports.FontSizes.medium
          },
          '.ms-GroupHeader-title': {
            fontSize: exports.FontSizes.medium,
            fontWeight: exports.FontWeights.semibold,
            paddingLeft: '6px'
          },
          '& .ms-DetailsHeader-cell [data-icon-name="SortDown"], & .ms-DetailsHeader-cell [data-icon-name="SortUp"]': {
            color: palette.skeColor.blue,
            fontSize: exports.FontSizes.icon
          },
          '& .ms-DetailsHeader-cell': {
            fontSize: exports.FontSizes.medium,
            fontWeight: exports.FontWeights.semibold,
            minHeight: 32,
            selectors: {
              ':hover': {
                background: noHover ? 'none' : getHoverColor()
              }
            }
          },
          '& .ms-DetailsHeader-cellTitle': {
            paddingLeft: '8px'
          },
          '.ms-List-cell': {
            minHeight: 32,
            borderBottom: '1px solid' + palette.skeColor.lightGrey
          },
          //row
          '& .ms-FocusZone.ms-DetailsHeader': {
            paddingBottom: 0,
            borderBottom: '2px solid' + palette.skeColor.black,
            background: getBackgroundColor$1(props)
          },
          '& .ms-FocusZone.ms-DetailsRow': {
            minHeight: 26,
            background: getBackgroundColor$1(props),
            selectors: {
              ':hover': {
                background: noHover ? 'none' : getHoverColor(),
                color: noHover ? 'rgba(55, 55, 55, 0.95)' : 'inherit'
              },
              '& .is-selected': {
                background: palette.neutralQuaternaryAlt
              }
            }
          },
          //cell
          '& .ms-DetailsRow-cell': {
            fontSize: exports.FontSizes.medium,
            minHeight: '32px',
            padding: '8px',
            selectors: {
              '& .ms-DetailsRow-cellCheck': {
                padding: 0
              },
              ':hover': {
                textDecoration: noHover ? 'none' : 'underline'
              }
            }
          },
          '& .ms-DetailsRow.is-selected': {
            // @ts-ignore todo finnes ikke?
            background: palette.skeColor.neutralQuaternaryAlt
          },
          '& .ms-FocusZone .ms-DetailsRow.is-selected': {
            // @ts-ignore todo finnes ikke?
            background: palette.skeColor.neutralQuaternaryAlt
          },
          // hack to overrride checkbox style used in Fabric detaillist
          '& .ms-DetailsRow-check': {
            height: 32,
            width: 32,
            selectors: {
              '.ms-Check': {
                width: 20,
                height: 20
              },
              '.ms-Check:before, .ms-Check.is-checked:before': {
                background: 'none',
                borderRadius: 0,
                width: 20,
                height: 20
              },
              '.ms-Check.is-checked:before': {
                background: palette.skeColor.blue
              },
              '.ms-Check-circle': {
                fontFamily: 'none',
                fontSize: 0,
                height: 20,
                width: 20,
                border: '1px solid #000'
              },
              '.ms-Check-check': {
                margin: '3px 0 0 1px'
              },
              '.ms-Check-check:hover': {
                opacity: 0,
                cursor: 'pointer'
              },
              '.ms-Check.is-checked .ms-Check-check:hover': {
                opacity: 1
              }
            }
          }
        }
      });
    };

    /*
     * visibleName DetailsList (Sammensatt tabell)
     */

    var DetailsList =
    /** @class */
    function (_super) {
      tslib.__extends(DetailsList, _super);

      function DetailsList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this.sortColumn = function (sortItems) {
          return function (ev, column) {
            var _a = _this.props,
                items = _a.items,
                columns = _a.columns;
            var currentColumn = columns && columns.filter(function (currCol) {
              return currCol.key === column.key;
            })[0];
            var newColumns = columns && columns.map(function (newCol) {
              if (newCol === currentColumn) {
                return tslib.__assign(tslib.__assign({}, newCol), {
                  isSorted: true,
                  isSortedDescending: !currentColumn.isSortedDescending
                });
              }

              return tslib.__assign(tslib.__assign({}, newCol), {
                isSorted: false,
                isSortedDescending: true
              });
            });
            var sortedItems = sortItems({
              isDescending: currentColumn && currentColumn.isSortedDescending,
              fieldName: currentColumn && currentColumn.fieldName,
              items: items
            });
            _this.props.onSortUpdate && _this.props.onSortUpdate({
              columns: newColumns,
              items: sortedItems
            });
          };
        };

        return _this;
      }

      DetailsList.prototype.render = function () {
        var _this = this;

        var _a = this.props;
            _a.background;
            var columns = _a.columns,
            className = _a.className,
            props = tslib.__rest(_a, ["background", "columns", "className"]);

        var enhancedColumns = columns && columns.map(function (col) {
          return !col.sortItems ? col : tslib.__assign(tslib.__assign({}, col), {
            onColumnClick: _this.sortColumn(col.sortItems)
          });
        });
        return jsxRuntime.jsx(DetailsList$1, tslib.__assign({}, props, {
          className: classnames__default['default'](getClassNames$w(this.props), className),
          setKey: "set",
          columns: enhancedColumns,
          checkboxCellClassName: 'DetailsListCheckBox'
        }), void 0);
      };

      DetailsList.ConstrainMode = ConstrainMode;
      DetailsList.SelectionMode = SelectionMode;
      DetailsList.CheckBoxVisibility = CheckboxVisibility;
      DetailsList.DetailsListLayoutMode = DetailsListLayoutMode;
      DetailsList.Selection = Selection;
      DetailsList.defaultProps = {
        background: 'white',
        checkboxVisibility: DetailsList.CheckBoxVisibility.hidden,
        constrainMode: DetailsList.ConstrainMode.unconstrained,
        items: [],
        layoutMode: DetailsList.DetailsListLayoutMode.justified,
        selectionMode: DetailsList.SelectionMode.none
      };
      return DetailsList;
    }(React__namespace.PureComponent);

    var img$i = "data:image/svg+xml,%3csvg focusable='false' className='footer-decoration-svg' xmlns='http://www.w3.org/2000/svg' width='100%25' preserveAspectRatio='none' viewBox='0 0 1440 100' version='1.1' %3e %3ctitle%3efooter/desktop/standard%3c/title%3e %3cdesc /%3e %3cdefs /%3e %3cg stroke='none' strokeWidth='0' fill='none' fillRule='evenodd'%3e %3cg id='bakgrunn'%3e %3cpolygon fill='%23C0797E' points='0 99.6400524 1440 99.6400524 1440 69.2255838 0 17.1793194' /%3e %3cpath d='M1440%2c98 L1440%2c629 L0%2c629 L0%2c98 L1440%2c0 L1440%2c98 Z' fill='%236F2C3F' /%3e %3c/g%3e %3c/g%3e %3c/svg%3e";

    var img$h = "data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 85.04 85.04'%3e%3cdefs%3e%3cstyle%3e.a%7bfill:%23030405%3b%7d.b%7bfill:white%3b%7d%3c/style%3e%3c/defs%3e%3ctitle%3eArtboard 1%3c/title%3e%3crect class='a' width='85.04' height='85.04'/%3e%3cpath class='b' d='M15%2c44.51c0%2c8%2c11.84%2c14.43%2c26.45%2c14.43S67.9%2c52.48%2c67.9%2c44.51C67.9%2c39%2c62.27%2c34.23%2c54%2c31.8L41.48%2c44.51V37.27L54%2c24.69A45.17%2c45.17%2c0%2c0%2c0%2c41.41%2c23v7.11C26.83%2c30.1%2c15%2c36.56%2c15%2c44.51Z'/%3e%3c/svg%3e";

    function setMinMaxWidth(props) {
      return {
        minWidth: props.minWidth,
        maxWidth: props.maxWidth
      };
    }

    function getMainBackgroundStyle(props) {
      if (props.layoutStyle === 'important') {
        return {
          background: "url(" + img$i + ")",
          backgroundSize: 'calc(100% + 1px) 20px',
          backgroundRepeat: 'no-repeat',
          backgroundPosition: 'bottom left',
          paddingBottom: 30,
          backgroundColor: designtokenColors['ske-color-white-100'],
          border: 'none !important'
        };
      } else {
        return {};
      }
    }

    function getHeaderBackgroundStyle(props) {
      if (props.layoutStyle === 'important') {
        var logoPlacement = props.title ? '-30px' : '-18px';
        return {
          backgroundImage: "url(" + img$h + ")",
          backgroundSize: '40px 100%',
          backgroundRepeat: 'no-repeat',
          backgroundPosition: "top " + logoPlacement + " left 20px",
          paddingTop: 70
        };
      } else {
        return {};
      }
    }

    var getClassNames$v = function getClassNames(props, tag) {
      var _a, _b;

      if (tag === void 0) {
        tag = 'SKE';
      }

      var primaryColor;

      switch (tag) {
        case 'INK':
          {
            primaryColor = designtokenColors['ske-color-green-100'];
            break;
          }

        case 'LSO':
          {
            primaryColor = designtokenColors['ske-color-black-100'];
            break;
          }

        default:
          {
            primaryColor = designtokenColors['ske-color-burgundy-100'];
            break;
          }
      }

      var overflows = props.tabletContentOverflows;
      return mergeStyleSets({
        main: {
          displayName: "SkeDialog",
          position: 'absolute',
          selectors: {
            '& .ms-Dialog-main': tslib.__assign({
              height: overflows ? '100%' : '',
              selectors: (_a = {}, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = tslib.__assign(tslib.__assign({}, setMinMaxWidth(props)), {
                borderColor: primaryColor,
                borderStyle: 'solid',
                borderWidth: '4px'
              }), _a)
            }, getMainBackgroundStyle(props)),
            '& .ms-Modal-scrollableContent': {
              overflowY: 'auto',
              overflowX: 'hidden',
              WebkitOverflowScrolling: 'touch',
              selectors: (_b = {}, _b["@media only screen and (min-device-width: 768px) and (max-device-width: " + '$ske-breakpoint-lg' + ")"] = {
                //iPad scrolling fix
                position: overflows ? 'absolute' : 'relative',
                top: 0,
                bottom: 0,
                minWidth: props.minWidth,
                maxWidth: props.maxWidth
              }, _b)
            },
            '& .ms-Dialog-header': tslib.__assign({}, getHeaderBackgroundStyle(props)),
            '& .ms-Button.ms-Dialog-button--close i': {
              fontWeight: designtokenFontSizes['ske-font-weight-bold'],
              fontSize: designtokenFontSizes['ske-font-size-icon-l'],
              opacity: 1
            },
            '& .ms-Button.ms-Dialog-button--close:hover i': {
              fontWeight: designtokenFontSizes['ske-font-weight-bold'],
              fontSize: designtokenFontSizes['ske-font-size-icon-l'],
              opacity: 0.7,
              transition: 'opacity 300ms ease-out'
            },
            '& .ms-Dialog-title': {
              fontSize: designtokenFontSizes['ske-font-size-xl'],
              fontWeight: designtokenFontSizes['ske-font-weight-semibold'],
              padding: props.layoutStyle === 'airy' ? '128px 64px 0 64px' : '20px 50px 20px 20px'
            },
            '& .ms-Dialog-subText': {
              fontSize: designtokenFontSizes['ske-font-size-m']
            },
            '& .ms-Overlay': {
              backgroundColor: 'rgba(255, 255, 255, 0.8)'
            },
            '& .ms-Dialog-inner': {
              padding: props.layoutStyle === 'airy' ? '0 64px 64px ' : '0 20px 20px 20px'
            },
            '& .wait-alert-btn': {
              width: '100%'
            },
            '& .wait-alert-content': {
              overflowX: 'hidden',
              overflowY: 'hidden',
              maxWidth: '100%',
              maxHeight: '100%'
            },
            '& .wait-alert-heading': {
              fontSize: designtokenFontSizes['ske-font-size-xl'],
              fontWeight: 'bold'
            },
            '& .wait-alert-svg': {
              width: '290px'
            }
          }
        },
        helpButton: {
          displayName: 'SkeHelpButton',
          zIndex: 100,
          position: 'absolute',
          bottom: '-60px',
          left: '-15px'
        }
      });
    };

    var brands = {
      SKE: {
        tag: 'SKE',
        primaryColor: DefaultPalette$1.skeColor.burgundy100,
        secondaryColor: DefaultPalette$1.skeColor.burgundy30
      },
      INK: {
        tag: 'INK',
        primaryColor: DefaultPalette$1.skeColor.green100,
        secondaryColor: DefaultPalette$1.skeColor.green30
      },
      LSO: {
        tag: 'LSO',
        primaryColor: DefaultPalette$1.skeColor.black100,
        secondaryColor: DefaultPalette$1.skeColor.grey30
      }
    };
    var BrandContext = /*#__PURE__*/React__namespace.createContext(brands.SKE //default brand
    );
    /*
     * visibleName SkeBasis (Basiskomponent)
     */

    var SkeBasis =
    /** @class */
    function (_super) {
      tslib.__extends(SkeBasis, _super);

      function SkeBasis(props) {
        var _this = _super.call(this, props) || this;

        var palette = props.palette,
            fonts = props.fonts,
            brand = props.brand;

        switch (brand) {
          case 'INK':
            _this.state = {
              brand: brands.INK
            };
            break;

          case 'LSO':
            _this.state = {
              brand: brands.LSO
            };
            break;

          default:
            _this.state = {
              brand: brands.SKE
            };
            break;
        }

        if (palette && fonts) {
          var theme = createTheme({
            palette: palette,
            fonts: fonts,
            isInverted: false
          });
          loadTheme(theme);
        }

        if (props.icons) {
          if (!getIcon$1('AccountEnk')) {
            props.icons.forEach(function (iconFont) {
              return registerIcons(iconFont);
            });
          }
        }

        return _this;
      }

      SkeBasis.prototype.render = function () {
        var fabricProps = tslib.__assign({
          dir: 'ltr'
        }, this.props);

        return jsxRuntime.jsx(BrandContext.Provider, tslib.__assign({
          value: this.state.brand
        }, {
          children: jsxRuntime.jsx(ThemeProvider, tslib.__assign({}, fabricProps, {
            children: this.props.children
          }), void 0)
        }), void 0);
      };

      SkeBasis.PALETTE = DefaultPalette$1;
      SkeBasis.FONTS = Fonts;
      SkeBasis.ICONS = {
        ske: SkeIcons,
        ali: AliasIcons
      };
      SkeBasis.defaultProps = {
        palette: SkeBasis.PALETTE,
        fonts: SkeBasis.FONTS,
        icons: [SkeBasis.ICONS.ske, SkeBasis.ICONS.ali],
        brand: 'SKE'
      };
      return SkeBasis;
    }(React__namespace.PureComponent);

    var img$g = "data:image/svg+xml,%3csvg id='a' xmlns='http://www.w3.org/2000/svg' width='1554.63' height='1069.54'%3e%3cdefs%3e%3cclipPath id='b'%3e%3cpath style='fill:none' d='m1173.82 700.34-94.16-3.39-39.17 14.2 108.38 4.42 24.95-15.23z'/%3e%3c/clipPath%3e%3cclipPath id='c'%3e%3cpath style='fill:none' d='M698.19 838.48H596.97l18.81-92.26h84.2l-1.79 92.26z'/%3e%3c/clipPath%3e%3cstyle%3e.d%2c.e%2c.f%2c.g%2c.h%2c.i%2c.j%2c.k%2c.l%7bfill:none%7d.e%7bstroke-width:3.07px%7d.e%2c.f%2c.g%2c.h%2c.i%2c.j%2c.k%2c.l%2c.m%7bstroke-miterlimit:10%7d.e%2c.h%2c.i%2c.l%7bstroke:gray%7d.n%7bfill:%23f3a7b0%7d.o%7bfill:%23f06b78%7d.m%2c.p%7bfill:white%7d.q%7bfill:%23e5e5e5%7d.r%7bfill:%23e4eaf4%7d.s%7bfill:%23332429%7d.t%7bfill:%23b8860b%7d.u%7bfill:%23af4c57%7d.v%7bfill:%23a9805b%7d.w%7bfill:%23b2b2b2%7d.x%7bfill:%23bea693%7d.y%7bfill:%23dee6f4%7d.aa%7bfill:gray%7d.ab%7bfill:%232c436b%7d.ac%7bfill:%235a77a8%7d.ad%7bfill:%234d4d4d%7d.f%7bstroke-width:6.18px%7d.f%2c.g%2c.j%2c.k%7bstroke:%231a1a1a%7d.g%7bstroke-width:3.21px%7d.h%7bstroke-width:5.07px%7d.i%2c.j%7bstroke-width:9.63px%7d.m%7bstroke:%23b8860b%3bstroke-width:3.6px%7d.ae%7bclip-path:url(%23c)%7d.af%7bclip-path:url(%23b)%7d.k%7bstroke-width:2.41px%7d.l%7bstroke-width:4.81px%7d%3c/style%3e%3c/defs%3e%3cpath d='M1326.47 417.43C1312.3 691.86 1085.3 910 807.35 910S287.52 677.26 287.52 390.17c0-155.42 68.21-294.91 176.32-390.17l862.63 417.43Z' style='fill:%23e4eaf4'/%3e%3cpath d='M1240.34 742.16c-27.3 9.34-57.01-5.2-66.35-32.5l98.87-33.84c9.34 27.3-5.22 57-32.52 66.34Z' style='fill:%23bea693'/%3e%3cpath style='fill:%23b2b2b2' d='m1244.26 686.94-172.43 4.27-111.3 23.75 192.7 20.72 91.03-48.74z'/%3e%3cpath style='fill:white' d='m1215.4 689.79-137.35 3.41-88.67 18.91 153.51 16.51 72.51-38.83z'/%3e%3cpath d='M1170.69 713.73s12.52-10.23 16.38 3.83l26.95-14.43s-4.81-8.59-19.37-4.53l-23.97 15.13Z' style='fill:%23b8860b'/%3e%3cg style='clip-path:url(%23b)'%3e%3cpath style='fill:none%3bstroke:gray%3bstroke-miterlimit:10%3bstroke-width:5.07px' d='m1168.57 695.43-46.14 23.21'/%3e%3cpath style='fill:none%3bstroke:gray%3bstroke-miterlimit:10%3bstroke-width:3.07px' d='m1138.24 695.75-46.14 23.21M1119.37 694.38l-46.14 23.21'/%3e%3c/g%3e%3cpath d='m1272.86 675.82-43.66-14.89-40.22 29.52s37.29 11.23 55.28-3.51l28.6-11.12Z' style='fill:%23bea693'/%3e%3cpath style='fill:white' d='m405.07 196.41 46.42 169.75 104.73-19.84-3.45-149.91h-147.7z'/%3e%3cpath style='fill:%23b2b2b2' d='m429.67 187.33-37.85 30.72 15.21 7.71 34.7-30.88-12.06-7.55zM536.73 192l21.87 21.57-3.96 12.19-34.7-30.88 16.79-2.88z'/%3e%3cpath d='m493.72 293.12-8.75-37.88c-20.92 0-33.97 16.96-29.14 37.88S481.54 331 502.46 331s33.97-16.96 29.14-37.88c-1.28-5.53-3.7-10.78-6.93-15.52l-30.95 15.52Z' style='fill:%23dee6f4'/%3e%3cpath d='M529.15 252.59c-8.97-13.18-24.31-22.37-39.7-22.37l8.75 37.88 30.95-15.52Z' style='fill:%23f3a7b0'/%3e%3cpath d='m576.08 426.51 34.95 100.39s66.38-62.39 103.02-87.1c5.38 43.82-2.88 93.43-45.92 110.1-50.84 19.69-108.03-5.56-127.72-56.41-7.61-19.65-8.5-40.25-3.8-59.27l39.47-7.71Z' style='fill:%23af4c57'/%3e%3ccircle cx='544.69' cy='411.23' r='30.9' style='fill:%23bea693'/%3e%3cpath style='fill:%23bea693' d='m546.22 392.59-3.11-73.6 30.03 86.5'/%3e%3cpath d='M1047.94 346.03 875.44 904.5l-78.62-41.33 47.74-490.3 25.03-20.44c36.03-10.03 178.35-6.39 178.35-6.39ZM835 394.45l-46.92 53.59 8.74 415.13L835 394.45z' style='fill:gray'/%3e%3cpath style='fill:gray' d='m1047.94 346.03 23.16 40.13-195.66 518.35 172.5-558.48z'/%3e%3cpath style='fill:%234d4d4d' d='M1047.94 346.03 883.68 845.84l-8.24 58.67 195.66-518.35-23.16-40.13z'/%3e%3cpath style='fill:%234d4d4d' d='m612.69 912.55 262.75-8.04 44.36-63.53-307.11-16.11v87.68z'/%3e%3cpath style='fill:%23f06b78' d='m856.64 467.83-10.56-55.18-68.75-18.79-49.83 19.96 3.52 54.01h125.62z'/%3e%3cpath d='M713.16 430.94c19.84-5.39 40.88-7.67 62.54-6.32 35.37 2.21 67.9 13.83 95.34 32.27l12.65 310.75c-36.03 28.71-52.79 24.32-98.02 3.75-40.59-18.46-101.74-62.89-130.67-84.41l58.17-256.04Z' style='fill:%23f06b78'/%3e%3cpath style='fill:%23af4c57' d='m849.56 430.84-47.07 26.57 49.95-11.54-2.88-15.03z'/%3e%3cpath style='fill:%23f06b78' d='m556.22 679.54 98.77 7.44 58.13-157.11-156.9 149.67z'/%3e%3cpath style='fill:%23f06b78' d='m713.16 430.94-39.04 39.96v166.72l39.04-206.68z'/%3e%3cpath style='fill:%23af4c57' d='m674.12 567.08-32.03 115.21 25 9.08 7.03-124.29z'/%3e%3cpath style='fill:%234d4d4d' d='m707.98 913.55 18.79 17.21 86.98-17.21H707.98z'/%3e%3cpath style='fill:white' d='M642.09 682.29 0 708.22l551.18 361.32 586.24-207.44-495.33-179.81z'/%3e%3cpath d='M478.02 710.3c1.56-25.55 23.54-45 49.1-43.44 25.55 1.56 45 23.54 43.44 49.1l-46.27-2.83' style='fill:%23bea693'/%3e%3cpath style='fill:%234d4d4d' d='m586.85 740.6 9.94-22.63-131.73 38.67-35.7-249-178.99 17.71 32.95 203.81 162.18 56.6 141.35-45.16z'/%3e%3cpath style='fill:gray' d='m596.79 717.97-138.93-11.55 7.2 50.22 131.73-38.67z'/%3e%3cpath style='fill:%23e5e5e5' d='m573.83 753.89-37.95 143.18 182.07-8.61-22.78-140.31-121.34 5.74z'/%3e%3cpath style='fill:%23b2b2b2' d='M626.79 724.24 574.1 862.68l181.98 10.44-8.01-141.92-121.28-6.96z'/%3e%3cpath style='fill:white' d='m605.62 737.53-39.4 124.57H727l-14.23-124.57H605.62z'/%3e%3cg style='clip-path:url(%23c)'%3e%3cpath style='fill:none%3bstroke:gray%3bstroke-miterlimit:10%3bstroke-width:9.63px' d='m595.78 834.02 105.39.3'/%3e%3cpath style='fill:none%3bstroke:gray%3bstroke-miterlimit:10%3bstroke-width:4.81px' d='m597.27 815.81 105.4.3M636.08 800.1l70.47.2M601.15 800.01l20.15.05M629.14 784.28l77.45.22M646.61 768.52l62.67.17M603.88 768.4l29.29.08M603.92 752.59l105.4.3'/%3e%3c/g%3e%3cpath style='fill:%23f06b78' d='m575.4 512.39 98.72 26.41v28.28l-39.45 38.05-59.27-61.26-4.51-23.47 4.51-8.01z'/%3e%3cpath d='M585.86 543.82c-19.1 12.05-44.35 6.33-56.4-12.77-12.05-19.1-6.33-44.35 12.77-56.4l21.82 34.59' style='fill:%23bea693'/%3e%3cpath style='fill:%234d4d4d' d='m581.57 515.23-10.68 5.17-50.11-79.18 26.33-1.42 34.46 75.43z'/%3e%3cpath d='M563.79 476.21c5.67-2.6 12.38-.11 14.98 5.56s.11 12.38-5.56 14.98l-4.71-10.27' style='fill:%23bea693'/%3e%3cpath style='fill:%23f06b78' d='m876.51 591.57 22.68 200.78-186.03 32.52-6.57-40.37 149.24-55.29 20.68-137.64z'/%3e%3cpath style='fill:%23bea693' d='m706.35 783.33-97.73 24.8 10.22 26.83 35.14 9.53 59.2-19.14-6.83-42.02z'/%3e%3cpath style='fill:%23af4c57' d='m837.56 735.97-2.78-98.35-56.21 94.22 36.07 12.63 22.92-8.5z'/%3e%3cpath style='fill:%23f06b78' d='m871.36 459.61 76.36 44.17 152.25-72.94v26.57l-174.2 122.05-15.89-34.78-38.52-85.07z'/%3e%3cpath style='fill:%23af4c57' d='m871.36 459.61 54.41 119.85 15.64-10.96-70.05-108.89z'/%3e%3cpath d='M1083.15 590.42c-8.84 47.03-42.76 87.72-91.65 102.87-70.37 21.81-145.09-17.55-166.9-87.91-17.07-55.08 3.33-112.82 46.75-145.77l83.54 184.48 128.25-53.67Z' style='fill:%23f06b78'/%3e%3cpath d='m1083.15 590.42 45.18-14.63 35.42 37.09c2.97 3.11 4.19 7.49 3.26 11.68l-.66 2.98-30.28-22.95s-40.31 22.68-52.91-14.16Z' style='fill:%23bea693'/%3e%3cpath style='fill:%231a1a1a' d='m1170.91 632.17 11.33 16.3-17.67-9.05 6.34-7.25z'/%3e%3cpath style='fill:none%3bstroke:%231a1a1a%3bstroke-miterlimit:10%3bstroke-width:9.63px' d='m1075.47 555.15 92.27 80.65'/%3e%3ccircle cx='1126.44' cy='619.59' r='14.46' style='fill:%23bea693'/%3e%3cpath d='M530.29 440.71c-.77-16.08.59-36.36 12.63-43.51 24.68-14.66 80.65 33.8 111.96 60.91 66.05 57.19 75.77 89.4 115.55 94.05 40.8 4.77 71.69-24.3 74.34-26.87 37-35.89 41.38-104.65 4.37-165.28' style='fill:none%3bstroke:%231a1a1a%3bstroke-miterlimit:10%3bstroke-width:3.21px'/%3e%3ccircle cx='809.74' cy='366.8' r='70.99' style='fill:%23bea693'/%3e%3cpath d='M832 290.45s-30.83 79.31-100.12 69.61c0 0 12.67-87.68 100.12-69.61Z' style='fill:%23a9805b'/%3e%3cpath d='m694.15 382.88 56.86-30.45c-4.38 20.74-17.44 36.16-34.11 37.63-8.1.71-15.93-1.98-22.76-7.18Z' style='fill:%23a9805b'/%3e%3cpath d='m697.12 356.3 53.9-3.87c-10.43 14.37-25.69 21.71-38.94 17.14-6.44-2.22-11.51-6.96-14.96-13.26Z' style='fill:%23a9805b'/%3e%3cpath d='m712.49 404.16 38.53-51.73c4.85 20.64-.41 40.14-14.88 48.56-7.03 4.09-15.26 4.98-23.65 3.17ZM820.24 285.95s-1.4 70.07 68.84 72.21c5.76-40.75-15.59-66.82-68.84-72.21Z' style='fill:%23a9805b'/%3e%3ccircle cx='837.41' cy='370.13' r='7.65' style='fill:%23332429'/%3e%3ccircle cx='869.59' cy='379.66' r='7.65' style='fill:%23332429'/%3e%3cellipse cx='738.87' cy='362.73' rx='27.67' ry='16.77' transform='rotate(-86.72 738.826 362.738)' style='fill:%231a1a1a'/%3e%3cpath d='M740.04 342.4s15.93-71.45 91.97-51.95' style='fill:none%3bstroke:%231a1a1a%3bstroke-miterlimit:10%3bstroke-width:6.18px'/%3e%3cpath d='M1124.29 489.48c-7.42 21.34-30.73 32.63-52.08 25.21l26.88-77.29c21.34 7.42 32.62 30.74 25.2 52.08Z' style='fill:%23bea693'/%3e%3cpath style='fill:%235a77a8' d='m1118.05 413.49-44.48 110.86-81.13-1.56 32.6-140.8 93.01 31.5z'/%3e%3cpath style='fill:%232c436b' d='m1118.05 413.49-1.68-7.22-68.75-45.98-9.14 26.25 79.57 26.95z'/%3e%3cpath style='fill:%23e5e5e5' d='m1118.05 413.49-1.68-7.22-70.78-40.15-13.12 18.39 85.58 28.98z'/%3e%3cpath style='fill:white%3bstroke:%23b8860b%3bstroke-miterlimit:10%3bstroke-width:3.6px' d='m1041.66 408.11 45.26 16.3-6.41 17.66-44.4-10.03 5.55-23.93z'/%3e%3cpath style='fill:white' d='m1043.81 368.61 53.68 30.02-58.06-23.87 4.38-6.15zM1035.93 379.66l38.89 13.53-40.13-11.79 1.24-1.74z'/%3e%3cpath style='fill:none%3bstroke:%231a1a1a%3bstroke-miterlimit:10%3bstroke-width:2.41px' d='m1047.4 423.53 27.32 7.58'/%3e%3cpath d='m642.09 682.29-71.54 33.67s-3.64-25.93-14.33-36.42l66.28-18.99 19.58 21.75Z' style='fill:%23f06b78'/%3e%3cpath style='fill:%232c436b' d='m1539 504.97-7.36 88.31 22.99-98.34-15.63 10.03zM1518.11 518.38l-17.9 98.8 8.21-4.22 28.89-106.91-19.2 12.33zM1489.11 575.79v47.08l10.61-5.44v-87.24l-226.86 145.63 13.79 50.89 186.37-95.59 16.09-55.33z'/%3e%3c/svg%3e";

    var WaitAlert = function WaitAlert(props) {
      return jsxRuntime.jsxs("div", tslib.__assign({
        className: 'wait-alert-content'
      }, {
        children: [jsxRuntime.jsx("img", {
          className: 'wait-alert-svg',
          src: img$g,
          alt: t('dialog.waitAlert.alt')
        }, void 0), props.children ? props.children : jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [jsxRuntime.jsx("div", tslib.__assign({
            role: "heading",
            id: 'waitAlertHeading',
            className: 'wait-alert-heading',
            "aria-level": 1
          }, {
            children: t('dialog.waitAlert.title')
          }), void 0), jsxRuntime.jsx("p", tslib.__assign({
            id: 'waitAlertText'
          }, {
            children: t('dialog.waitAlert.paragraph')
          }), void 0)]
        }, void 0), jsxRuntime.jsx(Button, tslib.__assign({
          buttonStyle: "primary",
          className: 'wait-alert-btn',
          onClick: function onClick() {
            props.onDismiss && props.onDismiss();
          }
        }, {
          children: props.waitAlertBtnText ? props.waitAlertBtnText : t('dialog.waitAlert.button_text')
        }), void 0)]
      }), void 0);
    };

    var Dialog =
    /** @class */
    function (_super) {
      tslib.__extends(Dialog, _super);

      function Dialog(props) {
        var _this = _super.call(this, props) || this;

        _this.state = {
          isCalloutVisible: false
        };
        _this._iconButtonElement = /*#__PURE__*/React__namespace.createRef();
        _this._onClick = _this._onClick.bind(_this);
        _this._onDismiss = _this._onDismiss.bind(_this);

        if (props.language) {
          i18n__default['default'].changeLanguage(props.language);
        }

        return _this;
      }

      Dialog.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.language !== this.props.language) {
          i18n__default['default'].changeLanguage(this.props.language);
        }
      };

      Dialog.prototype.render = function () {
        var _this = this;

        var _a = this.props,
            _children = _a.children,
            title = _a.title,
            subText = _a.subText,
            isBlocking = _a.isBlocking,
            isModeless = _a.isModeless,
            type = _a.type,
            className = _a.className;
            _a.layoutStyle;
            var closeButtonAriaLabel = _a.closeButtonAriaLabel,
            modalProps = _a.modalProps;
            _a.doNotLayer;
            var props = tslib.__rest(_a, ["children", "title", "subText", "isBlocking", "isModeless", "type", "className", "layoutStyle", "closeButtonAriaLabel", "modalProps", "doNotLayer"]);

        var isCalloutVisible = this.state.isCalloutVisible;
        return jsxRuntime.jsx(BrandContext.Consumer, {
          children: function children(_a) {
            var tag = _a.tag;
            return jsxRuntime.jsx("div", {
              children: jsxRuntime.jsxs(Dialog$1, tslib.__assign({}, props, {
                dialogContentProps: {
                  type: type,
                  title: title,
                  subText: subText,
                  closeButtonAriaLabel: closeButtonAriaLabel
                },
                modalProps: tslib.__assign({
                  isBlocking: isBlocking,
                  isModeless: isModeless,
                  className: classnames__default['default'](getClassNames$v(_this.props, tag).main, className)
                }, modalProps),
                ariaLabelledById: props.waitAlert ? 'waitAlertHeading' : undefined,
                ariaDescribedById: props.waitAlert ? 'waitAlertText' : undefined
              }, {
                children: [isCalloutVisible && jsxRuntime.jsx(Callout, {
                  directionalHint: Callout.POS_TOP_LEFT,
                  color: Callout.HELP,
                  ariaLabel: 'Hjelpetekst',
                  target: _this._iconButtonElement,
                  onClose: _this._onDismiss
                }, void 0), props.waitAlert ? jsxRuntime.jsx(WaitAlert, tslib.__assign({
                  onDismiss: props.onDismiss,
                  waitAlertBtnText: props.waitAlertBtnText
                }, {
                  children: _children
                }), void 0) : _children]
              }), void 0)
            }, void 0);
          }
        }, void 0);
      };

      Dialog.prototype._onClick = function () {
        this.setState({
          isCalloutVisible: !this.state.isCalloutVisible
        });
      };

      Dialog.prototype._onDismiss = function () {
        this.setState({
          isCalloutVisible: false
        });
      };

      Dialog.Footer = DialogFooter;
      Dialog.Type = DialogType;
      Dialog.defaultProps = {
        layoutStyle: 'normal',
        type: Dialog.Type.normal,
        closeButtonAriaLabel: 'Lukk',
        tabletContentOverflows: false,
        isModeless: false,
        isBlocking: undefined,
        waitAlert: false
      };
      return Dialog;
    }(React__namespace.PureComponent);

    var dropdownPaddingLarge = "0.375rem " + designtokenSpacing['ske-spacing-md'];

    function getFieldTypeStyles$1(props) {
      if (props.inputSize === 'large') {
        return {
          '.ms-Dropdown-title': {
            borderWidth: designtokenSpacing['ske-spacing-xs'],
            padding: dropdownPaddingLarge,
            borderRadius: '0',
            fontSize: designtokenFontSizes['ske-font-size-l'],
            height: designtokenSpacing['ske-spacing-xxxl'],
            lineHeight: designtokenSpacing['ske-spacing-xxl']
          },
          '& span.ms-Dropdown-caretDownWrapper': {
            top: designtokenSpacing['ske-spacing-md'],
            fontSize: designtokenFontSizes['ske-font-size-icon-l'],
            color: designtokenColors['ske-color-interactive']
          }
        };
      } else {
        return {
          '.ms-Dropdown-title': {
            fontSize: designtokenFontSizes['ske-font-size-s']
          },
          '& span.ms-Dropdown-caretDownWrapper': {
            color: designtokenColors['ske-color-interactive']
          }
        };
      }
    }

    var getClassNames$u = function getClassNames(props) {
      var errorMessage = props.errorMessage;
      var inset = 0;
      var radius = '0';
      var errorIcon = "'" + SkeIcons.icons.Error + "'";
      return mergeStyleSets({
        main: {
          selectors: tslib.__assign(tslib.__assign({}, getFieldTypeStyles$1(props)), {
            '& .ms-TextField-errorMessage': {
              fontSize: designtokenFontSizes['ske-font-size-s']
            },
            '::-moz-focus-inner': {
              border: '0'
            },
            '& .ms-Dropdown-title': {
              borderColor: designtokenColors['ske-color-black-100'],
              borderRadius: '0'
            },
            '& .ms-Dropdown-titleIsPlaceHolder': {
              borderColor: designtokenColors['ske-color-black-100']
            },
            '& .ms-Dropdown-title.ms-Dropdown-title': errorMessage && {
              borderColor: errorMessage ? designtokenColors['ske-color-status-error'] : designtokenColors['ske-color-black-100'],
              borderWidth: designtokenSpacing['ske-spacing-xs']
            },
            '& .ms-Dropdown.is-required::before': {
              display: 'none'
            },
            // hack
            '&:focus .ms-Dropdown-title.ms-Dropdown-title': {
              border: designtokenSpacing['ske-spacing-xs'] + " solid " + designtokenColors['ske-color-interactive']
            },
            '& .is-disabled .ms-Dropdown': {
              backgroundColor: designtokenColors['ske-color-status-error']
            },
            '& .is-disabled .ms-Dropdown-title': {
              borderColor: designtokenColors['ske-color-grey-50'],
              borderStyle: 'solid',
              borderWidth: 1,
              backgroundColor: designtokenColors['ske-color-grey-5']
            },
            '& .is-disabled .ms-Dropdown-caretDownWrapper': {
              color: designtokenColors['ske-color-grey-50']
            },
            '&:active .is-disabled .ms-Dropdown-title': {
              borderColor: designtokenColors['ske-color-grey-50']
            },
            '&:hover .is-disabled .ms-Dropdown-title': {
              borderColor: designtokenColors['ske-color-grey-50'],
              cursor: 'not-allowed'
            },
            '&:focus:after': !props.disabled && {
              content: '""',
              position: 'absolute',
              left: inset + 1,
              top: inset + 1,
              bottom: inset + 1,
              right: inset + 1,
              borderRadius: radius,
              outline: 'transparent',
              zIndex: 1
            },
            '& div[role=alert]': {
              fontWeight: designtokenFontSizes['ske-font-weight-medium']
            },
            '& div[role=alert]::before': {
              fontFamily: SkeIcons.fontFace.fontFamily,
              fontSize: designtokenFontSizes['ske-font-size-m'],
              content: errorIcon,
              marginRight: designtokenSpacing['ske-spacing-sm'],
              verticalAlign: 'text-bottom'
            }
          })
        },
        readOnly: {
          borderStyle: 'none',
          fontSize: designtokenFontSizes['ske-font-size-m'],
          fontWeight: designtokenFontSizes['ske-font-weight-bold'],
          display: 'block',
          padding: 0,
          marginLeft: 0,
          marginRight: 0,
          height: designtokenSpacing['ske-spacing-xxl']
        }
      });
    };
    var getCalloutStyles = function getCalloutStyles() {
      var inset = 0;
      var radius = '0';
      return {
        dropdownItem: {
          color: designtokenColors['ske-color-black-100'],
          marginTop: designtokenSpacing['ske-spacing-sm'],
          marginBottom: designtokenSpacing['ske-spacing-sm'],
          selectors: {
            '&:hover': {
              background: designtokenColors['ske-color-interactive-light'] + " !important",
              textDecoration: 'underline'
            },
            '&:active': {
              background: designtokenColors['ske-color-interactive-light'],
              textDecoration: 'none'
            },
            '&:focus': {
              background: designtokenColors['ske-color-interactive-light'],
              textDecoration: 'underline'
            },
            '&:hover:after, &:focus:after': {
              content: '""',
              position: 'absolute',
              left: inset + 1,
              top: inset + 1,
              bottom: inset + 1,
              right: inset + 1,
              borderRadius: radius,
              outline: 'transparent',
              zIndex: 1,
              color: designtokenColors['ske-color-black-100']
            }
          }
        },
        dropdownItemSelected: {
          color: designtokenColors['ske-color-black-100'],
          background: designtokenColors['ske-color-grey-5'] + " !important"
        },
        dropdownOptionText: {
          whiteSpace: 'normal !important'
        }
      };
    };

    /*
     * visibleName Dropdown (Nedtrekksliste)
     */

    var Dropdown = function Dropdown(props) {
      var children = props.children,
          errorMessage = props.errorMessage,
          label = props.label,
          labelButtonAriaLabel = props.labelButtonAriaLabel,
          help = props.help;
          props.onRenderLabel;
          var _a = props.required,
          required = _a === void 0 ? false : _a,
          className = props.className,
          id = props.id,
          labelWithCalloutProps = props.labelWithCalloutProps,
          onCalloutToggle = props.onCalloutToggle,
          calloutProps = props.calloutProps,
          readOnly = props.readOnly,
          _b = props.requiredWithMark,
          requiredWithMark = _b === void 0 ? false : _b,
          rest = tslib.__rest(props, ["children", "errorMessage", "label", "labelButtonAriaLabel", "help", "onRenderLabel", "required", "className", "id", "labelWithCalloutProps", "onCalloutToggle", "calloutProps", "readOnly", "requiredWithMark"]);

      var generatedId = generateId();
      var mainId = id ? id : 'dropdown-' + generatedId;
      var inputId = mainId + '-input';
      var labelId = mainId + '-label';
      var styles = getClassNames$u(props);
      var dropdownStyles = getCalloutStyles();
      return jsxRuntime.jsxs("div", tslib.__assign({
        id: mainId
      }, {
        children: [jsxRuntime.jsx(LabelWithCallout, {
          id: labelId,
          inputId: readOnly ? inputId : inputId + '-option',
          label: label,
          requiredMark: requiredWithMark,
          buttonAriaLabel: labelButtonAriaLabel,
          help: help,
          onCalloutToggle: onCalloutToggle,
          calloutProps: tslib.__assign({}, labelWithCalloutProps === null || labelWithCalloutProps === void 0 ? void 0 : labelWithCalloutProps.calloutProps)
        }, void 0), readOnly ? jsxRuntime.jsx("input", {
          id: inputId,
          type: "text",
          readOnly: true,
          className: styles.readOnly,
          "aria-invalid": errorMessage ? true : false,
          value: props.options.filter(function (option) {
            return option.key === (props.selectedKey || props.defaultSelectedKey);
          })[0].text
        }, void 0) : jsxRuntime.jsx(Dropdown$1, tslib.__assign({}, rest, {
          ariaLabel: label,
          "aria-invalid": errorMessage ? true : false,
          id: inputId,
          required: required || requiredWithMark,
          className: classnames__default['default'](styles.main, className),
          styles: dropdownStyles,
          onRenderCaretDown: function onRenderCaretDown() {
            return jsxRuntime.jsx(Icon, {
              iconName: 'ChevronDown'
            }, void 0);
          },
          errorMessage: errorMessage,
          calloutProps: tslib.__assign({}, calloutProps)
        }, {
          children: children
        }), void 0)]
      }), void 0);
    }; // @ts-ignore

    Dropdown.ItemType = SelectableOptionMenuItemType;

    var getClassNames$t = function getClassNames(props) {
      var _a, _b, _c;

      return mergeStyleSets({
        mainContainer: {
          border: '2px solid '.concat(designtokenColors['ske-color-status-error']),
          display: 'flex',
          backgroundColor: designtokenColors['ske-color-white-100'],
          justifyContent: 'flex-start',
          width: 'fit-content',
          selectors: {
            '& h1, h2, h3, h4, h5, h6': {
              fontSize: designtokenFontSizes['ske-font-size-l'],
              margin: '0'
            }
          },
          ul: {
            padding: 0
          },
          li: {
            display: 'block',
            cursor: 'pointer',
            lineHeight: designtokenFontSizes['ske-line-height-s']
          }
        },
        iconArea: {
          width: '4rem',
          backgroundColor: designtokenColors['ske-color-status-error'],
          textAlign: 'center',
          selectors: (_a = {}, _a["@media (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
            width: '2rem'
          }, _a)
        },
        errorIcon: {
          fontSize: '2.4rem',
          color: designtokenColors['ske-color-white-100'],
          padding: '6px 8px 8px 4px',
          selectors: (_b = {}, _b["@media (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
            fontSize: '1.4rem'
          }, _b)
        },
        errorListContainer: {
          padding: designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-xl'],
          selectors: (_c = {}, _c["@media (max-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
            padding: '8px 12px'
          }, _c)
        }
      });
    };

    var getClassNames$s = function getClassNames(props) {
      var palette = getTheme().palette;
      var linkGroup = props.linkGroup;
      return mergeStyleSets({
        icon: {
          color: palette.skeColor.blue,
          fontSize: linkGroup ? exports.FontSizes.medium : exports.FontSizes.large,
          fontWeight: linkGroup ? exports.FontWeights.bold : 'inherit',
          verticalAlign: linkGroup ? 'bottom' : 'middle',
          paddingLeft: linkGroup ? '0px' : '4px',
          paddingRight: linkGroup ? '10px' : '4px',
          borderBottom: 'none'
        },
        linkContainer: {
          margin: '0px',
          selectors: {
            ':hover>i': {
              color: linkGroup ? palette.skeColor.darkBlue : '',
              paddingLeft: '4px',
              paddingRight: linkGroup ? '6px' : '4px',
              transition: linkGroup ? '0.1s' : ''
            },
            ':hover>a': {
              backgroundColor: palette.skeColor.lightBlue
            }
          }
        },
        skipLink: {
          left: '-9999px',
          position: 'absolute',
          top: 'auto',
          opacity: 0,
          overflow: 'hidden',
          selectors: {
            '&:focus, &:active': {
              display: 'block',
              color: palette.skeColor.blackAlt,
              backgroundColor: '#fff',
              position: 'relative',
              left: 'auto',
              top: 'auto',
              height: 'auto',
              overflow: 'auto',
              textAlign: 'center',
              opacity: 1,
              padding: '12px 8px',
              outline: 'none'
            }
          }
        },
        iconLink: {
          color: palette.skeColor.blue,
          textDecoration: 'none',
          fontWeight: linkGroup ? exports.FontWeights.bold : exports.FontWeights.medium,
          borderBottom: "1px solid " + palette.skeColor.blue,
          selectors: {
            '&:hover': {
              color: palette.skeColor.darkBlue,
              borderBottom: '2px solid ' + palette.skeColor.darkBlue,
              backgroundColor: palette.skeColor.lightBlue
            },
            '&:focus': {
              color: palette.skeColor.darkBlue,
              borderBottom: '2px solid ' + palette.skeColor.darkBlue,
              backgroundColor: palette.skeColor.lightBlue,
              outline: 'none'
            }
          }
        }
      });
    };

    /*
     * visibleName Link (Lenke)
     */

    var Link = function Link(props) {
      props.className;
          props.placement;
          props.icon;
          props.path;
          props.text;
          var openInNew = props.openInNew,
          skipLink = props.skipLink;
          props.linkGroup;
          var renderContent = props.renderContent,
          htmlAttributes = tslib.__rest(props, ["className", "placement", "icon", "path", "text", "openInNew", "skipLink", "linkGroup", "renderContent"]);

      var styles = getClassNames$s(props);
      return jsxRuntime.jsxs("span", tslib.__assign({
        className: classnames__default['default'](styles.linkContainer, props.className)
      }, {
        children: [props.placement === 'before' && props.icon && jsxRuntime.jsx(Icon, {
          iconName: props.icon,
          className: styles.icon,
          role: "presentation"
        }, void 0), renderContent ? renderContent(classnames__default['default'](styles.iconLink)) : openInNew ? jsxRuntime.jsx("a", tslib.__assign({
          href: props.path,
          className: classnames__default['default'](styles.iconLink),
          target: "_blank",
          rel: "noopener noreferrer"
        }, htmlAttributes, {
          children: props.text
        }), void 0) : skipLink ? jsxRuntime.jsx("a", tslib.__assign({
          href: props.path,
          className: classnames__default['default'](styles.skipLink)
        }, htmlAttributes, {
          children: props.text
        }), void 0) : jsxRuntime.jsx("a", tslib.__assign({
          href: props.path,
          className: classnames__default['default'](styles.iconLink)
        }, htmlAttributes, {
          children: props.text
        }), void 0), props.placement === 'after' && props.icon && jsxRuntime.jsx(Icon, {
          iconName: props.icon,
          className: styles.icon,
          role: "presentation"
        }, void 0)]
      }), void 0);
    };

    var ErrorSummary = function ErrorSummary(props) {
      var _a = props.id,
          id = _a === void 0 ? 'errorsummary' : _a,
          shadowRootNode = props.shadowRootNode,
          _b = props.titleTagName,
          titleTagName = _b === void 0 ? 'h3' : _b,
          className = props.className,
          errors = props.errors,
          _onClick = props.onClick,
          children = props.children;
      var styles = getClassNames$t();
      var TitleTag = titleTagName;
      var errorsExist = errors && errors.length;

      var scrollToId = function scrollToId(elementId) {
        var element = shadowRootNode ? shadowRootNode.getElementById(elementId) : document.getElementById(elementId);

        if (element) {
          element.scrollIntoView({
            behavior: 'smooth'
          });
          element.focus();
        }
      };

      return errorsExist || children ? jsxRuntime.jsxs("div", tslib.__assign({
        className: classnames__default['default'](className, styles.mainContainer),
        id: id,
        role: "status",
        "aria-live": "assertive"
      }, {
        children: [jsxRuntime.jsx("div", tslib.__assign({
          className: styles.iconArea
        }, {
          children: jsxRuntime.jsx("div", tslib.__assign({
            className: styles.errorIcon
          }, {
            children: jsxRuntime.jsx(Icon, {
              iconName: 'Error'
            }, void 0)
          }), void 0)
        }), void 0), jsxRuntime.jsxs("div", tslib.__assign({
          className: styles.errorListContainer
        }, {
          children: [jsxRuntime.jsx(TitleTag, {
            children: props.title
          }, void 0), errors && jsxRuntime.jsx("ul", {
            children: errors.map(function (error) {
              return jsxRuntime.jsx("li", {
                children: jsxRuntime.jsx(Link, {
                  linkGroup: true,
                  tabIndex: 0,
                  icon: "ArrowForward",
                  placement: "before",
                  text: error.error,
                  onClick: function onClick() {
                    _onClick ? _onClick(error.id) : scrollToId(error.id);
                  }
                }, void 0)
              }, error.id);
            })
          }, void 0), children]
        }), void 0)]
      }), void 0) : null;
    };

    var getClassNames$r = function getClassNames(props) {
      var palette = getTheme().palette;
      return mergeStyleSets({
        acceptedFileFormats: {
          fontWeight: 'bold'
        },
        informationWrapper: {
          marginTop: '8px',
          fontSize: exports.FontSizes.xSmall,
          lineHeight: exports.LineHeightSizes.xSmall,
          color: palette.skeColor.darkGrey
        },
        errorColor: {
          color: palette.skeColor.error + " !important"
        },
        fileList: {
          listStyle: 'none !important',
          padding: 0,
          selectors: {
            i: {
              color: palette.skeColor.blue,
              "float": 'right'
            },
            li: {
              wordBreak: 'break-all',
              display: 'block'
            }
          }
        },
        fileListWrapper: {
          display: 'grid'
        },
        fileListCancelBtn: {
          backgroundColor: 'transparent',
          "float": 'right',
          padding: 0,
          border: 0,
          borderStyle: 'none',
          cursor: 'pointer',
          marginTop: 4,
          fontSize: '20px'
        },
        fileIcon: {
          fontSize: '20px'
        },
        fileName: {
          "float": 'left',
          width: '90%',
          display: 'inline',
          lineHeight: '1.4',
          selectors: {
            i: {
              "float": 'left',
              marginRight: '8px',
              color: palette.skeColor.grey
            },
            span: {
              display: 'flex',
              marginTop: '3px'
            }
          }
        },
        fileUploadInput: {
          opacity: 0,
          overflow: 'hidden',
          position: 'absolute',
          zIndex: -1
        },
        main: {},
        uploadArea: {
          border: "2px dashed " + palette.skeColor.blue,
          backgroundColor: palette.skeColor.lightBlue,
          padding: '16px',
          textAlign: 'center',
          marginTop: '8px',
          marginBottom: '8px',
          cursor: 'pointer',
          transition: 'all 80ms ease-in-out 0s',
          selectors: {
            ':hover': {
              border: "2px dashed " + palette.skeColor.blue,
              transform: 'scale(1.02) translateY(-1px)',
              boxShadow: 'rgba(0, 0, 0, 0.3) 0px 10px 6px -10px'
            },
            ':focus': {
              border: "2px solid " + palette.skeColor.blue,
              transform: 'scale(1.02) translateY(-1px)',
              boxShadow: 'rgba(0, 0, 0, 0.3) 0px 10px 6px -10px'
            },
            ':active': {
              border: "2px solid " + palette.skeColor.blue,
              transform: 'scale(1) translateY(0)',
              boxShadow: 'rgba(0, 0, 0, 0.0) 0px 0 0 0'
            }
          }
        },
        uploadAreaIcon: {
          fontSize: exports.FontSizes.icon,
          color: palette.skeColor.blue
        }
      });
    };

    var getClassNames$q = function getClassNames(props) {
      var palette = getTheme().palette;
      return mergeStyles([{
        selectors: {
          '.ms-Spinner-label': {
            color: props.spinnerColor
          },
          '&.ms-Spinner': {
            position: 'relative'
          },
          '.ms-Spinner-circle': {
            display: 'inline-block',
            borderRadius: '50%',
            border: '4px solid',
            borderColor: props.spinnerColor === 'white' ? palette.skeColor.white : palette.skeColor.blackAlt,
            borderTop: '4px solid transparent',
            animationDuration: '1s',
            animationIterationCount: 'linear infinite',
            animationTimingFunction: 'linear'
          }
        }
      }]);
    };

    /*
     * visibleName Spinner (Spinner)
     */

    var Spinner =
    /** @class */
    function (_super) {
      tslib.__extends(Spinner, _super);

      function Spinner() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Spinner.prototype.render = function () {
        var _a = this.props,
            className = _a.className,
            rest = tslib.__rest(_a, ["className"]);

        return jsxRuntime.jsx(Spinner$1, tslib.__assign({}, rest, {
          className: classnames__default['default'](getClassNames$q(this.props), className)
        }), void 0);
      };

      Spinner.Size = SpinnerSize;
      Spinner.defaultProps = {
        size: SpinnerSize.medium,
        spinnerColor: 'black'
      };
      return Spinner;
    }(React__namespace.PureComponent);

    var isCorrectFileFormat = function isCorrectFileFormat(file, acceptedFilformats) {
      if (!acceptedFilformats) {
        return true;
      }

      var fileExtention = file.name.toLowerCase().match(/\.[0-9a-z]+$/i);

      if (fileExtention && fileExtention[0]) {
        if (acceptedFilformats.indexOf(fileExtention[0]) > -1) {
          return true;
        }
      }

      return false;
    };
    var nonWordCharacterRegexp = /\W/g;
    var fileNameRegex = /\.(?=[^.]+$)/;

    var normalize = function normalize(file, invalidCharacterRegexp) {
      var nameList = file.name.split(fileNameRegex);
      var fileName = nameList[0];
      var normalizedName = fileName.replace(invalidCharacterRegexp || nonWordCharacterRegexp, '_');
      return normalizedName.concat('.', nameList[1]);
    };

    var FilTyperNavn;

    (function (FilTyperNavn) {
      FilTyperNavn["ExcelFile"] = "ExcelFile";
      FilTyperNavn["WordFile"] = "WordFile";
      FilTyperNavn["PDFFile"] = "PDFFile";
      FilTyperNavn["XMLFile"] = "XMLFile";
      FilTyperNavn["File"] = "File";
    })(FilTyperNavn || (FilTyperNavn = {}));

    var filtypeMap = function () {
      var map = new Map();
      map.set('xls', FilTyperNavn.ExcelFile);
      map.set('xlsx', FilTyperNavn.ExcelFile);
      map.set('doc', FilTyperNavn.WordFile);
      map.set('docx', FilTyperNavn.WordFile);
      map.set('pdf', FilTyperNavn.PDFFile);
      map.set('xml', FilTyperNavn.XMLFile);
      return map;
    }();

    var getFileIconName = function getFileIconName(fil) {
      var filutvidelse = fil.name.toLowerCase().split('.').pop();
      var fileType = filtypeMap.get(filutvidelse ? filutvidelse : '');
      return fileType ? fileType : FilTyperNavn.File;
    };

    var FileUploader = function FileUploader(props) {
      var acceptedFileFormats = props.acceptedFileFormats,
          acceptedFileFormatsLabel = props.acceptedFileFormatsLabel,
          addFileString = props.addFileString,
          afterUpload = props.afterUpload,
          axiosPath = props.axiosPath,
          className = props.className,
          deleteAllFiles = props.deleteAllFiles,
          deleteButtonAriaLabel = props.deleteButtonAriaLabel,
          deleteFile = props.deleteFile,
          exceedFileSizeLimitErrorMessage = props.exceedFileSizeLimitErrorMessage,
          files = props.files,
          fileSizeLimit = props.fileSizeLimit,
          help = props.help,
          id = props.id,
          info = props.info,
          _a = props.required,
          required = _a === void 0 ? false : _a,
          invalidCharacterRegexp = props.invalidCharacterRegexp,
          isLoading = props.isLoading,
          label = props.label,
          labelButtonAriaLabel = props.labelButtonAriaLabel,
          labelWithCalloutProps = props.labelWithCalloutProps,
          language = props.language,
          loading = props.loading,
          multipleFiles = props.multipleFiles,
          normalizeFileName = props.normalizeFileName,
          onCalloutToggle = props.onCalloutToggle,
          queryParams = props.queryParams,
          uploadFile = props.uploadFile,
          downloadFile = props.downloadFile;
      var styles = getClassNames$r();

      var _b = React.useState(files ? files : []),
          internalFiles = _b[0],
          setInternalFiles = _b[1];

      var _c = React.useState([]),
          internalErrorMessages = _c[0],
          setInternalErrorMessages = _c[1];

      var _d = React.useState(false),
          internalLoading = _d[0],
          setInternalLoading = _d[1];

      var inputRef = React.useRef(null);
      var uploadAreaRef = React.useRef(null);
      var randomId = generateId();
      var mainId = id !== null && id !== void 0 ? id : 'fileupload-' + randomId;
      var calloutId = mainId + '-callout';
      var fileuploadLabelId = mainId + '-label';
      var acceptedFileFormatsId = mainId + '-acceptedFileFormats';
      var informationId = mainId + '-information';

      if (language) {
        i18n__default['default'].changeLanguage(language);
      }

      React.useEffect(function () {
        if (files) {
          setInternalFiles(files);
        }
      }, [files]);

      var pushToInternalMessages = function pushToInternalMessages(msg) {
        return setInternalErrorMessages(function (prevState) {
          return tslib.__spreadArray(tslib.__spreadArray([], prevState), [msg]);
        });
      };

      var handleFileChange = function handleFileChange(event) {
        event.preventDefault();
        event.stopPropagation();

        if (event.target.files && event.target.files.length > 0) {
          handleNewFiles(Array.from(event.target.files));
        } // Må set input verdi til "" så at det er mulig å opplaste samme fil etter den blir fjernes i Chrome


        event.target.value = '';
      };

      var triggerUpdateFiles = function triggerUpdateFiles(validFiles) {
        if (uploadFile) {
          validFiles.forEach(function (file) {
            uploadFile(file);
          });
        }
      };

      var uploadFilePromise = function uploadFilePromise(url, file, params) {
        var formData = new FormData();
        formData.append('upload', file, normalizeFileName ? normalize(file, invalidCharacterRegexp) : undefined);
        return axios__default['default'].post(url, formData, {
          params: params
        });
      };

      var isValidFile = function isValidFile(file, sizeLimit) {
        return isCorrectFileFormat(file, acceptedFileFormats) && (sizeLimit ? file.size <= sizeLimit : true);
      };

      var handleNewFiles = function handleNewFiles(fileList) {
        setInternalErrorMessages([]);
        var exceedSizeLimitFiles = fileSizeLimit ? fileList.filter(function (file) {
          return file.size > fileSizeLimit;
        }) : [];

        if (fileSizeLimit && exceedSizeLimitFiles.length) {
          pushToInternalMessages(exceedFileSizeLimitErrorMessage || createDefaultOversizedFileErrorMessage(fileSizeLimit));
        }

        var invalidFileFormatFiles = fileList.filter(function (file) {
          return !isCorrectFileFormat(file, acceptedFileFormats);
        });

        if (invalidFileFormatFiles.length) {
          pushToInternalMessages(t('fileuploader.error.file_format'));
        }

        var validFiles = fileList.filter(function (file) {
          return isValidFile(file, fileSizeLimit);
        });
        triggerUpdateFiles(validFiles);

        if (!axiosPath) {
          return;
        }

        if (validFiles && validFiles.length) {
          setInternalLoading(true);
          var allPromises_1 = validFiles.map(function (file) {
            return uploadFilePromise(axiosPath, file, queryParams);
          });
          setTimeout(function () {
            axios__default['default'].all(allPromises_1).then(function (responses) {
              var updatedInternalFiles = tslib.__spreadArray(tslib.__spreadArray([], internalFiles), responses.map(function (res) {
                return res.data;
              }));

              setInternalFiles(updatedInternalFiles);

              if (afterUpload) {
                afterUpload(updatedInternalFiles);
              }
            })["catch"](function (error) {
              //TODO: Det trenger design om flere feilmeldinger
              if (error.response && error.response.status === 403) {
                pushToInternalMessages(t('fileuploader.error.upload.403'));
              } else {
                pushToInternalMessages(t('fileuploader.error.upload.general'));
              }

              if (afterUpload) {
                afterUpload(internalFiles);
              }
            })["finally"](function () {
              setInternalLoading(false);
            });
          }, props.forsinkelse || 0);
        }
      };

      var createDefaultOversizedFileErrorMessage = function createDefaultOversizedFileErrorMessage(filstoerrelsegrense) {
        return i18n__default['default'].t('fileuploader.error.file_size', {
          filstoerrelsegrense: bitToMegabyte(filstoerrelsegrense)
        });
      };

      var bitToMegabyte = function bitToMegabyte(size) {
        return (size / (1024 * 1024)).toFixed(1);
      };

      var handleDragOverAndDragEnter = function handleDragOverAndDragEnter(event) {
        event.preventDefault();
        event.stopPropagation();
      };

      var handleDragLeave = function handleDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
      };

      var handleDrop = function handleDrop(event) {
        event.preventDefault();
        event.stopPropagation();

        if (event.dataTransfer && event.dataTransfer.files && event.dataTransfer.files.length > 0) {
          handleNewFiles(Array.from(event.dataTransfer.files));
        }
      };

      var showFileName = function showFileName(file) {
        if (downloadFile) {
          return jsxRuntime.jsx(Link, {
            tabIndex: 0,
            text: file.name,
            onClick: function onClick() {
              return downloadFile(file);
            }
          }, void 0);
        } else {
          return jsxRuntime.jsx("span", {
            children: file.name
          }, void 0);
        }
      };

      var deleteFromList = function deleteFromList(fileToBeDeleted) {
        setInternalErrorMessages([]);

        if (axiosPath) {
          axios__default['default']["delete"](axiosPath + "/" + fileToBeDeleted.id, {
            params: queryParams,
            data: props.usesWebSealCompatibleDelete === true ? null : {} // body kreves av BigIP

          }).then(function () {
            var newList = internalFiles.filter(function (f) {
              return f.id !== fileToBeDeleted.id;
            });
            setInternalFiles(newList);
            triggerUpdateFiles(newList);
          })["catch"](function (error) {
            if (error.response && error.response.status === 403) {
              pushToInternalMessages(t('fileuploader.error.delete.403'));
            } else {
              pushToInternalMessages(t('fileuploader.error.delete.general'));
            }
          })["finally"](function () {
            if (deleteFile) {
              deleteFile(fileToBeDeleted, internalErrorMessages);
            }
          });
        } else {
          if (deleteFile) {
            deleteFile(fileToBeDeleted, internalErrorMessages);
          }
        }

        var ref = uploadAreaRef.current;

        if (ref) {
          ref.focus();
        }
      };

      if (deleteAllFiles && files) {
        files.forEach(function (file) {
          deleteFromList(file);
        });
      }

      React.useEffect(function () {
        isLoading && isLoading(loading || internalLoading);
      }, [loading, internalLoading, isLoading]);
      return jsxRuntime.jsxs("div", tslib.__assign({
        className: classnames__default['default'](styles.main, className)
      }, {
        children: [jsxRuntime.jsx(LabelWithCallout, tslib.__assign({
          id: calloutId + '-label',
          inputId: calloutId + '-input',
          label: label,
          requiredMark: required,
          buttonAriaLabel: labelButtonAriaLabel,
          help: help,
          onCalloutToggle: onCalloutToggle
        }, labelWithCalloutProps), void 0), jsxRuntime.jsx("label", tslib.__assign({
          id: fileuploadLabelId
        }, {
          children: jsxRuntime.jsx("div", tslib.__assign({
            ref: uploadAreaRef,
            className: styles.uploadArea,
            role: "button",
            "aria-describedby": fileuploadLabelId.concat(acceptedFileFormats ? ' '.concat(acceptedFileFormatsId) : '', info ? ' '.concat(informationId) : ''),
            tabIndex: 0,
            onDragEnter: handleDragOverAndDragEnter,
            onDragLeave: handleDragLeave,
            onDragOver: handleDragOverAndDragEnter,
            onDrop: handleDrop,
            onClick: function onClick(event) {
              event.preventDefault();

              if (inputRef.current) {
                inputRef.current.click();
              }
            },
            onKeyPress: function onKeyPress(ev) {
              if (ev.keyCode === 0 && inputRef.current) {
                inputRef.current.click();
              }
            }
          }, {
            children: loading || internalLoading ? jsxRuntime.jsx(Spinner, {}, void 0) : jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [jsxRuntime.jsx(Icon, {
                iconName: 'AttachFile',
                className: styles.uploadAreaIcon
              }, void 0), jsxRuntime.jsx("u", {
                children: addFileString ? addFileString : t('fileuploader.add.label')
              }, void 0)]
            }, void 0)
          }), void 0)
        }), void 0), jsxRuntime.jsx("input", {
          className: styles.fileUploadInput,
          type: "file",
          id: calloutId + '-input',
          ref: inputRef,
          multiple: multipleFiles,
          onChange: handleFileChange,
          tabIndex: -1,
          "aria-hidden": true
        }, void 0), acceptedFileFormats && jsxRuntime.jsxs("span", tslib.__assign({
          className: styles.informationWrapper,
          id: acceptedFileFormatsId
        }, {
          children: [acceptedFileFormatsLabel ? acceptedFileFormatsLabel : t('fileuploader.accepted_file_formats'), ' ', jsxRuntime.jsx("span", tslib.__assign({
            className: styles.acceptedFileFormats
          }, {
            children: acceptedFileFormats.map(function (fileFormat, index) {
              if (index === acceptedFileFormats.length - 1) {
                return fileFormat;
              } else {
                return fileFormat.concat(', ');
              }
            })
          }), void 0)]
        }), void 0), info && jsxRuntime.jsx("div", tslib.__assign({
          className: styles.informationWrapper,
          id: informationId
        }, {
          children: info
        }), void 0), internalErrorMessages && internalErrorMessages.map(function (msg) {
          return jsxRuntime.jsx("div", {
            children: jsxRuntime.jsx(ErrorMessage, {
              children: msg
            }, void 0)
          }, msg);
        }), jsxRuntime.jsx("div", tslib.__assign({
          role: "alert",
          "aria-atomic": "true",
          className: styles.fileListWrapper
        }, {
          children: internalFiles.length > 0 && jsxRuntime.jsxs(jsxRuntime.Fragment, {
            children: [jsxRuntime.jsx("span", tslib.__assign({
              className: "sr-only"
            }, {
              children: t('fileuploader.uploaded.sr_heading')
            }), void 0), jsxRuntime.jsx("ul", tslib.__assign({
              className: styles.fileList
            }, {
              children: internalFiles.map(function (file, index) {
                return jsxRuntime.jsxs("li", {
                  children: [jsxRuntime.jsxs("div", tslib.__assign({
                    className: styles.fileName
                  }, {
                    children: [jsxRuntime.jsx(Icon, {
                      className: styles.fileIcon,
                      iconName: getFileIconName(file)
                    }, void 0), showFileName(file)]
                  }), void 0), file.error ? jsxRuntime.jsx(Icon, {
                    iconName: 'Error',
                    className: styles.errorColor
                  }, void 0) : jsxRuntime.jsx("button", tslib.__assign({
                    className: styles.fileListCancelBtn,
                    onClick: function onClick() {
                      return deleteFromList(file);
                    },
                    "aria-label": deleteButtonAriaLabel ? deleteButtonAriaLabel : t('fileuploader.delete.ariaLabel')
                  }, {
                    children: jsxRuntime.jsx(Icon, {
                      iconName: 'Cancel'
                    }, void 0)
                  }), void 0)]
                }, file.name.concat(index.toString()));
              })
            }), void 0)]
          }, void 0)
        }), void 0)]
      }), void 0);
    };

    exports.FileFormatTypes = void 0;

    (function (FileFormatTypes) {
      FileFormatTypes["doc"] = ".doc";
      FileFormatTypes["docx"] = ".docx";
      FileFormatTypes["jpeg"] = ".jpeg";
      FileFormatTypes["jpg"] = ".jpg";
      FileFormatTypes["pdf"] = ".pdf";
      FileFormatTypes["png"] = ".png";
      FileFormatTypes["tif"] = ".tif";
      FileFormatTypes["txt"] = ".txt";
      FileFormatTypes["xml"] = ".xml";
      FileFormatTypes["csv"] = ".csv";
      FileFormatTypes["odf"] = ".odf";
      FileFormatTypes["odp"] = ".odp";
      FileFormatTypes["ods"] = ".ods";
      FileFormatTypes["odt"] = ".odt";
      FileFormatTypes["ppt"] = ".ppt";
      FileFormatTypes["pptx"] = ".pptx";
      FileFormatTypes["xls"] = ".xls";
      FileFormatTypes["xlsx"] = ".xlsx";
    })(exports.FileFormatTypes || (exports.FileFormatTypes = {}));

    /*
     * visibleName Image (Bilde)
     */

    var Image = function Image(props) {
      var children = props.children,
          className = props.className,
          rest = tslib.__rest(props, ["children", "className"]);

      return jsxRuntime.jsx(Image$1, tslib.__assign({}, rest, {
        className: className
      }, {
        children: children
      }), void 0);
    };

    var getClassNames$p = function getClassNames() {
      var palette = getTheme().palette;
      return mergeStyleSets({
        footerWrapperSKE: {
          backgroundColor: palette.skeColor.burgundy,
          color: palette.skeColor.white
        },
        footerContentSKE: {
          backgroundColor: palette.skeColor.burgundy,
          padding: '24px 4px',
          selectors: {
            '@media (max-width: 1023px)': {
              maxWidth: '100%',
              padding: '24px 16px'
            }
          }
        },

        /** BRAND VARIANTS INK */
        footerWrapperINK: {
          backgroundColor: palette.skeColor.green100,
          color: palette.skeColor.white
        },
        footerContentINK: {
          backgroundColor: palette.skeColor.green100,
          padding: '24px 4px',
          selectors: {
            '@media (max-width: 1023px)': {
              maxWidth: '100%',
              padding: '24px 16px'
            }
          }
        },

        /** BRAND VARIANTS LSO */
        footerWrapperLSO: {
          backgroundColor: palette.skeColor.black100,
          color: palette.skeColor.white
        },
        footerContentLSO: {
          backgroundColor: palette.skeColor.black100,
          padding: '24px 4px',
          selectors: {
            '@media (max-width: 1023px)': {
              maxWidth: '100%',
              padding: '24px 16px'
            }
          }
        },
        footerDecorContainer: {
          width: '100%',
          marginBottom: -5,
          lineHeight: 0,
          selectors: {
            svg: {
              height: '85px',
              overflow: 'hidden'
            }
          }
        }
      });
    };
    var getLogoClassNames = function getLogoClassNames() {
      return mergeStyles([{
        selectors: {
          '@media (max-width: 1023px)': {
            selectors: {
              img: {
                margin: '0 auto'
              },
              'div &': {
                marginBottom: '16px'
              }
            }
          }
        }
      }]);
    };

    var footerDekor = (function (primaryColor, secondaryColor) {
      if (primaryColor === void 0) {
        primaryColor = '#6F2C3F';
      }

      if (secondaryColor === void 0) {
        secondaryColor = '#F3A7B0';
      }

      return jsxRuntime.jsxs("svg", tslib.__assign({
        focusable: "false",
        className: "footer-decoration-svg",
        xmlns: "http://www.w3.org/2000/svg",
        width: "100%",
        height: "100%",
        preserveAspectRatio: "none",
        viewBox: "0 0 1440 100",
        version: "1.1"
      }, {
        children: [jsxRuntime.jsx("desc", {}, void 0), jsxRuntime.jsx("defs", {}, void 0), jsxRuntime.jsx("g", tslib.__assign({
          stroke: "none",
          strokeWidth: "0",
          fill: "none",
          fillRule: "evenodd"
        }, {
          children: jsxRuntime.jsxs("g", tslib.__assign({
            id: "bakgrunn"
          }, {
            children: [jsxRuntime.jsx("polygon", {
              fill: secondaryColor,
              points: "0 99.6400524 1440 99.6400524 1440 69.2255838 0 17.1793194"
            }, void 0), jsxRuntime.jsx("path", {
              d: "M1440,98 L1440,629 L0,629 L0,98 L1440,0 L1440,98 Z",
              fill: primaryColor
            }, void 0)]
          }), void 0)
        }), void 0)]
      }), void 0);
    });

    var img$f = "data:image/svg+xml,%3csvg id='logoNorskHvit' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 166.25 198.22454'%3e%3ctitle%3eSkatteetaten. Logo%3c/title%3e%3crect x='2' y='2' width='162.25' height='162.25' fill='none' stroke='white' stroke-miterlimit='10' stroke-width='4'%3e%3c/rect%3e%3cpath d='M46.64554%2c87.7021c0%2c15.19891%2c22.58859%2c27.51967%2c50.44866%2c27.51967%2c27.86353%2c0%2c50.46242-12.32076%2c50.46242-27.51967%2c0-10.49137-10.75612-19.61413-26.59807-24.25288L97.13548%2c87.7021V73.889l23.82307-24.00879A86.22088%2c86.22088%2c0%2c0%2c0%2c97.0048%2c46.62039l.00691%2c13.56894C69.18946%2c60.21346%2c46.64554%2c72.52039%2c46.64554%2c87.7021Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M27.59062%2c199a13.25465%2c13.25465%2c0%2c0%2c1-3.93153-.53339%2c8.48537%2c8.48537%2c0%2c0%2c1-2.89385-1.49735%2c6.684%2c6.684%2c0%2c0%2c1-1.829-2.31878%2c7.47354%2c7.47354%2c0%2c0%2c1-.706-2.99471h4.0033q.432%2c4.14732%2c5.38524%2c4.14682a6.97634%2c6.97634%2c0%2c0%2c0%2c1.64186-.18716%2c4.25912%2c4.25912%2c0%2c0%2c0%2c1.36837-.57606%2c2.6888%2c2.6888%2c0%2c0%2c0%2c1.252-2.376%2c2.44208%2c2.44208%2c0%2c0%2c0-.38889-1.42462%2c3.09637%2c3.09637%2c0%2c0%2c0-1.10847-.95039%2c8.039%2c8.039%2c0%2c0%2c0-1.74174-.66236q-1.02264-.2735-2.28967-.56249-1.49834-.34475-2.83664-.74866a8.18358%2c8.18358%2c0%2c0%2c1-2.33332-1.09393%2c5.19416%2c5.19416%2c0%2c0%2c1-1.58366-1.74271%2c5.3867%2c5.3867%2c0%2c0%2c1-.5906-2.664%2c5.7019%2c5.7019%2c0%2c0%2c1%2c.5906-2.663%2c5.32714%2c5.32714%2c0%2c0%2c1%2c1.6564-1.90079%2c7.68969%2c7.68969%2c0%2c0%2c1%2c2.505-1.15211%2c12.14891%2c12.14891%2c0%2c0%2c1%2c3.1683-.38889%2c9.10668%2c9.10668%2c0%2c0%2c1%2c5.86044%2c1.68452A6.60662%2c6.60662%2c0%2c0%2c1%2c35.1928%2c183.045H31.30491A3.50361%2c3.50361%2c0%2c0%2c0%2c29.923%2c180.6118a5.025%2c5.025%2c0%2c0%2c0-3.0529-.84953%2c5.22737%2c5.22737%2c0%2c0%2c0-2.89385.705%2c2.25537%2c2.25537%2c0%2c0%2c0-1.08035%2c2.00164%2c1.98069%2c1.98069%2c0%2c0%2c0%2c.37434%2c1.23843%2c2.96055%2c2.96055%2c0%2c0%2c0%2c1.08035.835%2c9.07451%2c9.07451%2c0%2c0%2c0%2c1.69907.60514q.99355.25893%2c2.23149.51787%2c1.49832.31713%2c2.86573.74868a9.064%2c9.064%2c0%2c0%2c1%2c2.4332%2c1.16666%2c5.45314%2c5.45314%2c0%2c0%2c1%2c1.7%2c1.88623%2c5.92572%2c5.92572%2c0%2c0%2c1%2c.63328%2c2.88028%2c6.179%2c6.179%2c0%2c0%2c1-.63328%2c2.85118%2c5.97215%2c5.97215%2c0%2c0%2c1-1.74271%2c2.07342%2c8.1073%2c8.1073%2c0%2c0%2c1-2.63492%2c1.2811A11.75606%2c11.75606%2c0%2c0%2c1%2c27.59062%2c199Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M42.45071%2c191.13791l-1.81448%2c1.8135v5.55884H37.00728V177.08371h3.62895v8.29364q0%2c1.09539-.04267%2c2.10251-.04363%2c1.0081-.07273%2c1.67094l5.78868-6.01947H50.658l-5.64417%2c5.616%2c6.30654%2c9.76288H47.05818Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M61.60116%2c198.51025a2.092%2c2.092%2c0%2c0%2c1-.3307-.73413%2c6.819%2c6.819%2c0%2c0%2c1-.18717-1.253H61.0251a6.4454%2c6.4454%2c0%2c0%2c1-1.87169%2c1.68453%2c5.70582%2c5.70582%2c0%2c0%2c1-2.96659.67692%2c7.26863%2c7.26863%2c0%2c0%2c1-2.088-.288%2c4.60986%2c4.60986%2c0%2c0%2c1-1.65543-.86409%2c4.13871%2c4.13871%2c0%2c0%2c1-1.09489-1.42559%2c4.555%2c4.555%2c0%2c0%2c1-.40247-1.97256%2c4.35527%2c4.35527%2c0%2c0%2c1%2c.4752-2.14614%2c3.72083%2c3.72083%2c0%2c0%2c1%2c1.31019-1.3674%2c6.69655%2c6.69655%2c0%2c0%2c1%2c1.9871-.79232%2c23.79881%2c23.79881%2c0%2c0%2c1%2c2.53406-.4461%2c10.65775%2c10.65775%2c0%2c0%2c0%2c2.85118-.64782%2c1.47288%2c1.47288%2c0%2c0%2c0%2c.9504-1.45469%2c2.03718%2c2.03718%2c0%2c0%2c0-.69147-1.61275%2c3.07159%2c3.07159%2c0%2c0%2c0-2.07341-.60418%2c3.45642%2c3.45642%2c0%2c0%2c0-2.31779.66236%2c2.44944%2c2.44944%2c0%2c0%2c0-.82142%2c1.81351H51.69475a4.7994%2c4.7994%2c0%2c0%2c1%2c.4461-1.88625%2c4.59305%2c4.59305%2c0%2c0%2c1%2c1.23843-1.59821A6.31064%2c6.31064%2c0%2c0%2c1%2c55.41%2c183.14587a8.74579%2c8.74579%2c0%2c0%2c1%2c2.85022-.418%2c12.27436%2c12.27436%2c0%2c0%2c1%2c2.34786.20172%2c4.97722%2c4.97722%2c0%2c0%2c1%2c1.77084.69146%2c4.71737%2c4.71737%2c0%2c0%2c1%2c2.18882%2c4.37763v8.09193a5.2776%2c5.2776%2c0%2c0%2c0%2c.15807%2c1.46924%2c1.235%2c1.235%2c0%2c0%2c0%2c.418.69048v.25991Zm-4.34854-2.1316a4.28382%2c4.28382%2c0%2c0%2c0%2c1.67-.30257%2c3.86181%2c3.86181%2c0%2c0%2c0%2c1.21029-.7768%2c3.311%2c3.311%2c0%2c0%2c0%2c1.00761-2.376v-2.27513a5.57733%2c5.57733%2c0%2c0%2c1-1.35382.5906q-.80591.24439-1.64089.417a9.1065%2c9.1065%2c0%2c0%2c0-2.62134.82045%2c1.84668%2c1.84668%2c0%2c0%2c0-.9213%2c1.77181%2c2.20024%2c2.20024%2c0%2c0%2c0%2c.21626%2c1.02215%2c1.75222%2c1.75222%2c0%2c0%2c0%2c.57606.66237%2c2.32125%2c2.32125%2c0%2c0%2c0%2c.84953.34524A4.93209%2c4.93209%2c0%2c0%2c0%2c57.25262%2c196.37865Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M65.57536%2c183.13133h2.36143v-4.8955h3.59987v4.8955h3.082v2.50593h-3.082V194.248a1.30074%2c1.30074%2c0%2c0%2c0%2c.43252%2c1.13755%2c2.08339%2c2.08339%2c0%2c0%2c0%2c1.20933.30259c.192%2c0%2c.39762-.0097.61873-.0291a3.62624%2c3.62624%2c0%2c0%2c0%2c.5615-.08631h.1736v2.85118q-.46113.08585-1.0658.15807a11.63848%2c11.63848%2c0%2c0%2c1-1.35383.07177%2c7.23748%2c7.23748%2c0%2c0%2c1-1.69907-.18717%2c3.49237%2c3.49237%2c0%2c0%2c1-1.32473-.60418%2c2.75309%2c2.75309%2c0%2c0%2c1-.84954-1.10943%2c4.23385%2c4.23385%2c0%2c0%2c1-.30258-1.69909v-9.41665H65.57536Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M75.10742%2c183.13133h2.36144v-4.8955h3.59986v4.8955h3.082v2.50593h-3.082V194.248a1.30072%2c1.30072%2c0%2c0%2c0%2c.43253%2c1.13755%2c2.08339%2c2.08339%2c0%2c0%2c0%2c1.20933.30259c.192%2c0%2c.39761-.0097.61873-.0291a3.62644%2c3.62644%2c0%2c0%2c0%2c.5615-.08631h.17359v2.85118q-.46113.08585-1.06579.15807a11.63861%2c11.63861%2c0%2c0%2c1-1.35383.07177%2c7.23742%2c7.23742%2c0%2c0%2c1-1.69907-.18717%2c3.49242%2c3.49242%2c0%2c0%2c1-1.32474-.60418%2c2.75307%2c2.75307%2c0%2c0%2c1-.84953-1.10943%2c4.23385%2c4.23385%2c0%2c0%2c1-.30258-1.69909v-9.41665H75.10742Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M92.617%2c198.9709a8.18518%2c8.18518%2c0%2c0%2c1-3.29728-.63328%2c7.21757%2c7.21757%2c0%2c0%2c1-2.4623-1.72816%2c7.47271%2c7.47271%2c0%2c0%2c1-1.541-2.5777%2c9.32129%2c9.32129%2c0%2c0%2c1-.53241-3.18187%2c9.18415%2c9.18415%2c0%2c0%2c1%2c.547-3.211%2c7.67166%2c7.67166%2c0%2c0%2c1%2c1.55457-2.5777%2c7.1681%2c7.1681%2c0%2c0%2c1%2c2.41963-1.71362%2c8.22559%2c8.22559%2c0%2c0%2c1%2c6.11937-.05819%2c6.798%2c6.798%2c0%2c0%2c1%2c2.28968%2c1.59919%2c7.6193%2c7.6193%2c0%2c0%2c1%2c1.67%2c2.95107%2c12.462%2c12.462%2c0%2c0%2c1%2c.51884%2c3.90244H88.412a5.67212%2c5.67212%2c0%2c0%2c0%2c1.253%2c3.211%2c3.71291%2c3.71291%2c0%2c0%2c0%2c2.98114%2c1.22387%2c4.02857%2c4.02857%2c0%2c0%2c0%2c2.17426-.53241%2c3.01081%2c3.01081%2c0%2c0%2c0%2c1.22388-1.48282H99.615a6.54579%2c6.54579%2c0%2c0%2c1-.87863%2c1.91437%2c6.03437%2c6.03437%2c0%2c0%2c1-1.48281%2c1.52644%2c6.989%2c6.989%2c0%2c0%2c1-2.05887%2c1.00859A8.72948%2c8.72948%2c0%2c0%2c1%2c92.617%2c198.9709Zm-.20171-13.59355a3.41844%2c3.41844%2c0%2c0%2c0-2.76487%2c1.124%2c5.50726%2c5.50726%2c0%2c0%2c0-1.18024%2c2.93749h7.66037a4.77511%2c4.77511%2c0%2c0%2c0-1.08035-2.98113A3.3551%2c3.3551%2c0%2c0%2c0%2c92.41527%2c185.37735Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M108.94583%2c198.9709a8.18523%2c8.18523%2c0%2c0%2c1-3.29729-.63328%2c7.21776%2c7.21776%2c0%2c0%2c1-2.4623-1.72816%2c7.47256%2c7.47256%2c0%2c0%2c1-1.541-2.5777%2c9.32129%2c9.32129%2c0%2c0%2c1-.53241-3.18187%2c9.18415%2c9.18415%2c0%2c0%2c1%2c.547-3.211%2c7.67152%2c7.67152%2c0%2c0%2c1%2c1.55458-2.5777%2c7.168%2c7.168%2c0%2c0%2c1%2c2.41962-1.71362%2c8.22561%2c8.22561%2c0%2c0%2c1%2c6.11938-.05819%2c6.798%2c6.798%2c0%2c0%2c1%2c2.28967%2c1.59919%2c7.6193%2c7.6193%2c0%2c0%2c1%2c1.67%2c2.95107%2c12.46166%2c12.46166%2c0%2c0%2c1%2c.51884%2c3.90244H104.74081a5.67219%2c5.67219%2c0%2c0%2c0%2c1.253%2c3.211%2c3.71291%2c3.71291%2c0%2c0%2c0%2c2.98114%2c1.22387%2c4.02865%2c4.02865%2c0%2c0%2c0%2c2.17427-.53241%2c3.01091%2c3.01091%2c0%2c0%2c0%2c1.22388-1.48282h3.57076a6.54579%2c6.54579%2c0%2c0%2c1-.87863%2c1.91437%2c6.0342%2c6.0342%2c0%2c0%2c1-1.48281%2c1.52644%2c6.989%2c6.989%2c0%2c0%2c1-2.05887%2c1.00859A8.72946%2c8.72946%2c0%2c0%2c1%2c108.94583%2c198.9709Zm-.20173-13.59355a3.41844%2c3.41844%2c0%2c0%2c0-2.76486%2c1.124%2c5.50734%2c5.50734%2c0%2c0%2c0-1.18024%2c2.93749h7.66037a4.77516%2c4.77516%2c0%2c0%2c0-1.08034-2.98113A3.35516%2c3.35516%2c0%2c0%2c0%2c108.7441%2c185.37735Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M116.43357%2c183.13133H118.795v-4.8955h3.59986v4.8955h3.082v2.50593h-3.082V194.248a1.30075%2c1.30075%2c0%2c0%2c0%2c.43253%2c1.13755%2c2.08337%2c2.08337%2c0%2c0%2c0%2c1.20933.30259c.192%2c0%2c.39762-.0097.61873-.0291a3.62624%2c3.62624%2c0%2c0%2c0%2c.5615-.08631h.1736v2.85118q-.46114.08585-1.0658.15807a11.63848%2c11.63848%2c0%2c0%2c1-1.35383.07177%2c7.23742%2c7.23742%2c0%2c0%2c1-1.69907-.18717%2c3.49242%2c3.49242%2c0%2c0%2c1-1.32474-.60418%2c2.75307%2c2.75307%2c0%2c0%2c1-.84953-1.10943%2c4.23385%2c4.23385%2c0%2c0%2c1-.30258-1.69909v-9.41665h-2.36144Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M136.85154%2c198.51025a2.092%2c2.092%2c0%2c0%2c1-.3307-.73413%2c6.81887%2c6.81887%2c0%2c0%2c1-.18718-1.253h-.05818a6.4454%2c6.4454%2c0%2c0%2c1-1.87169%2c1.68453%2c5.70583%2c5.70583%2c0%2c0%2c1-2.9666.67692%2c7.26861%2c7.26861%2c0%2c0%2c1-2.08795-.288%2c4.60986%2c4.60986%2c0%2c0%2c1-1.65543-.86409%2c4.13874%2c4.13874%2c0%2c0%2c1-1.0949-1.42559%2c4.55514%2c4.55514%2c0%2c0%2c1-.40246-1.97256%2c4.35527%2c4.35527%2c0%2c0%2c1%2c.4752-2.14614%2c3.72088%2c3.72088%2c0%2c0%2c1%2c1.31018-1.3674%2c6.69666%2c6.69666%2c0%2c0%2c1%2c1.9871-.79232%2c23.79972%2c23.79972%2c0%2c0%2c1%2c2.53406-.4461%2c10.65774%2c10.65774%2c0%2c0%2c0%2c2.85119-.64782%2c1.47287%2c1.47287%2c0%2c0%2c0%2c.95039-1.45469%2c2.03717%2c2.03717%2c0%2c0%2c0-.69146-1.61275%2c3.07159%2c3.07159%2c0%2c0%2c0-2.07341-.60418%2c3.45645%2c3.45645%2c0%2c0%2c0-2.3178.66236%2c2.44943%2c2.44943%2c0%2c0%2c0-.82141%2c1.81351h-3.45537a4.79941%2c4.79941%2c0%2c0%2c1%2c.44611-1.88625%2c4.59314%2c4.59314%2c0%2c0%2c1%2c1.23842-1.59821%2c6.3108%2c6.3108%2c0%2c0%2c1%2c2.03074-1.10847%2c8.74573%2c8.74573%2c0%2c0%2c1%2c2.85021-.418%2c12.27454%2c12.27454%2c0%2c0%2c1%2c2.34787.20172%2c4.97729%2c4.97729%2c0%2c0%2c1%2c1.77084.69146%2c4.71736%2c4.71736%2c0%2c0%2c1%2c2.18881%2c4.37763v8.09193a5.27753%2c5.27753%2c0%2c0%2c0%2c.15808%2c1.46924%2c1.235%2c1.235%2c0%2c0%2c0%2c.418.69048v.25991Zm-4.34855-2.1316a4.28375%2c4.28375%2c0%2c0%2c0%2c1.67-.30257%2c3.86174%2c3.86174%2c0%2c0%2c0%2c1.2103-.7768%2c3.311%2c3.311%2c0%2c0%2c0%2c1.00761-2.376v-2.27513a5.57733%2c5.57733%2c0%2c0%2c1-1.35382.5906q-.8059.24439-1.64089.417a9.1064%2c9.1064%2c0%2c0%2c0-2.62134.82045%2c1.84668%2c1.84668%2c0%2c0%2c0-.9213%2c1.77181%2c2.20011%2c2.20011%2c0%2c0%2c0%2c.21626%2c1.02215%2c1.75222%2c1.75222%2c0%2c0%2c0%2c.57606.66237%2c2.32111%2c2.32111%2c0%2c0%2c0%2c.84953.34524A4.93206%2c4.93206%2c0%2c0%2c0%2c132.503%2c196.37865Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M140.16336%2c183.13133h2.36145v-4.8955h3.59986v4.8955h3.082v2.50593h-3.082V194.248a1.30072%2c1.30072%2c0%2c0%2c0%2c.43252%2c1.13755%2c2.08339%2c2.08339%2c0%2c0%2c0%2c1.20933.30259c.192%2c0%2c.39761-.0097.61872-.0291a3.62673%2c3.62673%2c0%2c0%2c0%2c.56152-.08631h.1736v2.85118q-.46116.08585-1.06581.15807a11.63843%2c11.63843%2c0%2c0%2c1-1.35382.07177%2c7.23772%2c7.23772%2c0%2c0%2c1-1.69909-.18717%2c3.4924%2c3.4924%2c0%2c0%2c1-1.32472-.60418%2c2.75318%2c2.75318%2c0%2c0%2c1-.84954-1.10943%2c4.234%2c4.234%2c0%2c0%2c1-.30257-1.69909v-9.41665h-2.36145Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M157.58662%2c198.9709a8.18523%2c8.18523%2c0%2c0%2c1-3.29729-.63328%2c7.21752%2c7.21752%2c0%2c0%2c1-2.46229-1.72816%2c7.47258%2c7.47258%2c0%2c0%2c1-1.541-2.5777%2c9.32153%2c9.32153%2c0%2c0%2c1-.53241-3.18187%2c9.18415%2c9.18415%2c0%2c0%2c1%2c.547-3.211%2c7.6715%2c7.6715%2c0%2c0%2c1%2c1.55457-2.5777%2c7.1681%2c7.1681%2c0%2c0%2c1%2c2.41963-1.71362%2c8.22559%2c8.22559%2c0%2c0%2c1%2c6.11937-.05819%2c6.798%2c6.798%2c0%2c0%2c1%2c2.28967%2c1.59919%2c7.61932%2c7.61932%2c0%2c0%2c1%2c1.67%2c2.95107%2c12.462%2c12.462%2c0%2c0%2c1%2c.51883%2c3.90244H153.3816a5.6722%2c5.6722%2c0%2c0%2c0%2c1.253%2c3.211%2c3.71288%2c3.71288%2c0%2c0%2c0%2c2.98112%2c1.22387%2c4.02864%2c4.02864%2c0%2c0%2c0%2c2.17428-.53241%2c3.01086%2c3.01086%2c0%2c0%2c0%2c1.22388-1.48282h3.57076a6.54551%2c6.54551%2c0%2c0%2c1-.87862%2c1.91437%2c6.03441%2c6.03441%2c0%2c0%2c1-1.48282%2c1.52644%2c6.989%2c6.989%2c0%2c0%2c1-2.05886%2c1.00859A8.72952%2c8.72952%2c0%2c0%2c1%2c157.58662%2c198.9709Zm-.20172-13.59355a3.41846%2c3.41846%2c0%2c0%2c0-2.76487%2c1.124%2c5.50726%2c5.50726%2c0%2c0%2c0-1.18023%2c2.93749h7.66036a4.77511%2c4.77511%2c0%2c0%2c0-1.08035-2.98113A3.35512%2c3.35512%2c0%2c0%2c0%2c157.3849%2c185.37735Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3cpath d='M169.85446%2c185.37735h.08632a5.18275%2c5.18275%2c0%2c0%2c1%2c1.94345-1.97255%2c5.66893%2c5.66893%2c0%2c0%2c1%2c2.83664-.67692%2c5.21272%2c5.21272%2c0%2c0%2c1%2c3.90243%2c1.4256%2c5.37658%2c5.37658%2c0%2c0%2c1%2c1.3965%2c3.93153v10.42524h-3.65708v-9.82106a2.95459%2c2.95459%2c0%2c0%2c0-.76322-2.15972%2c2.91215%2c2.91215%2c0%2c0%2c0-2.17427-.77778%2c3.52149%2c3.52149%2c0%2c0%2c0-1.411.27446%2c3.169%2c3.169%2c0%2c0%2c0-1.09489.7768%2c3.66565%2c3.66565%2c0%2c0%2c0-.71959%2c1.19574%2c4.23483%2c4.23483%2c0%2c0%2c0-.25892%2c1.49736v9.0142h-3.65805V183.13133h3.57173Z' transform='translate(-16 -0.77546)' fill='white'%3e%3c/path%3e%3c/svg%3e";

    var img$e = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 24.3.0%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 500 542.5' style='enable-background:new 0 0 500 542.5%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:white%3b%7d%3c/style%3e%3cg%3e %3cg%3e %3cg%3e %3cpath class='st0' d='M0%2c428.5h34.5v6.8H21.2v35.7h-8v-35.7H0V428.5z'/%3e %3cpath class='st0' d='M46.7%2c442.1c0%2c1-0.1%2c2-0.1%2c2.8h0.2c1-1.6%2c2.3-2.9%2c3.9-3.8c1.5-0.9%2c3.4-1.4%2c5.6-1.4c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8 s2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3v-19.5c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5 c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3v-42.5h7.3V440C46.7%2c440.4%2c46.7%2c441.1%2c46.7%2c442.1z'/%3e %3cpath class='st0' d='M87.1%2c472c-2.4%2c0-4.6-0.4-6.5-1.3s-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1s-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4c0.7-2%2c1.8-3.7%2c3.1-5.1c1.3-1.5%2c2.9-2.6%2c4.8-3.4c1.9-0.8%2c3.9-1.2%2c6.2-1.2c2.2%2c0%2c4.2%2c0.4%2c6%2c1.1 c1.7%2c0.7%2c3.2%2c1.8%2c4.5%2c3.2c1.5%2c1.6%2c2.6%2c3.6%2c3.3%2c5.9c0.7%2c2.3%2c1.1%2c4.9%2c1%2c7.7H78.8c0.3%2c2.6%2c1.1%2c4.8%2c2.5%2c6.4c1.4%2c1.6%2c3.4%2c2.4%2c5.9%2c2.4 c1.7%2c0%2c3.2-0.4%2c4.3-1.1c1.1-0.7%2c1.9-1.7%2c2.4-2.9h7.1c-0.4%2c1.4-1%2c2.6-1.7%2c3.8c-0.8%2c1.2-1.8%2c2.2-2.9%2c3c-1.2%2c0.9-2.5%2c1.5-4.1%2c2 C90.7%2c471.7%2c89%2c472%2c87.1%2c472z M86.7%2c445c-2.4%2c0-4.2%2c0.7-5.5%2c2.2c-1.3%2c1.5-2%2c3.4-2.3%2c5.8h15.2c-0.1-2.5-0.9-4.5-2.1-5.9 C90.7%2c445.7%2c88.9%2c445%2c86.7%2c445z'/%3e %3cpath class='st0' d='M121.8%2c428.5h8.1l14.1%2c22.3c0.6%2c0.9%2c1.2%2c2%2c1.8%2c3.1c0.6%2c1.1%2c1.2%2c2.2%2c1.7%2c3.2c0.6%2c1.2%2c1.2%2c2.4%2c1.8%2c3.5h0.2 c-0.1-1.3-0.1-2.6-0.2-3.8c-0.1-1.1-0.1-2.3-0.2-3.5c0-1.3-0.1-2.4-0.1-3.5v-21.3h7.5v42.5h-8.1l-14.1-22.2 c-0.6-0.9-1.2-2-1.8-3.2c-0.6-1.2-1.2-2.2-1.7-3.2c-0.6-1.2-1.2-2.4-1.8-3.5h-0.1c0%2c1.3%2c0.1%2c2.6%2c0.2%2c3.8c0.1%2c1.1%2c0.1%2c2.3%2c0.2%2c3.5 c0%2c1.3%2c0.1%2c2.4%2c0.1%2c3.5v21.3h-7.5V428.5z'/%3e %3cpath class='st0' d='M177.9%2c472c-2.4%2c0-4.5-0.4-6.4-1.3c-1.9-0.8-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1s-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4s1.8-3.7%2c3.1-5.1c1.4-1.5%2c3-2.6%2c4.9-3.4c1.9-0.8%2c4.1-1.2%2c6.4-1.2s4.5%2c0.4%2c6.4%2c1.2c1.9%2c0.8%2c3.5%2c2%2c4.9%2c3.4 c1.4%2c1.4%2c2.4%2c3.1%2c3.1%2c5.1s1.1%2c4.1%2c1.1%2c6.4c0%2c2.3-0.4%2c4.4-1.1%2c6.3s-1.8%2c3.7-3.1%2c5.1c-1.3%2c1.5-3%2c2.6-4.9%2c3.4S180.2%2c472%2c177.9%2c472z M177.8%2c466.5c1.3%2c0%2c2.5-0.3%2c3.5-0.8c1-0.5%2c1.9-1.3%2c2.5-2.2c0.7-1%2c1.2-2.1%2c1.6-3.4c0.4-1.3%2c0.5-2.7%2c0.5-4.2 c0-1.5-0.2-2.9-0.5-4.3c-0.4-1.3-0.9-2.5-1.6-3.4c-0.7-1-1.5-1.7-2.5-2.3c-1-0.5-2.2-0.8-3.5-0.8c-1.3%2c0-2.5%2c0.3-3.5%2c0.8 c-1%2c0.5-1.9%2c1.3-2.6%2c2.3c-0.7%2c1-1.2%2c2.1-1.5%2c3.4c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.3c0%2c1.5%2c0.2%2c2.9%2c0.5%2c4.2c0.3%2c1.3%2c0.9%2c2.4%2c1.5%2c3.4 c0.7%2c0.9%2c1.5%2c1.7%2c2.6%2c2.2C175.3%2c466.2%2c176.5%2c466.5%2c177.8%2c466.5z'/%3e %3cpath class='st0' d='M205.4%2c446h0.2c1.9-4%2c4.9-5.9%2c8.8-5.9c0.9%2c0%2c1.5%2c0.1%2c1.9%2c0.3v6.5h-0.2c-0.6-0.1-1.3-0.2-2-0.2 c-2.4%2c0-4.4%2c0.7-6%2c2.3c-1.6%2c1.6-2.4%2c3.8-2.4%2c6.8v15.3h-7.3v-30.5h7V446z'/%3e %3cpath class='st0' d='M218.8%2c440.5h7.5l3.9%2c14.2c0.2%2c0.9%2c0.5%2c1.9%2c0.7%2c2.9c0.2%2c1.1%2c0.4%2c2.1%2c0.6%2c3c0.2%2c1.1%2c0.4%2c2.2%2c0.6%2c3.3h0.1 c0.2-1.1%2c0.4-2.1%2c0.6-3.2c0.2-0.9%2c0.4-1.9%2c0.6-3c0.2-1.1%2c0.5-2.1%2c0.7-3l3.8-14.2h6.4l3.9%2c14.2c0.2%2c0.9%2c0.5%2c1.8%2c0.7%2c2.9 c0.2%2c1.1%2c0.4%2c2.1%2c0.6%2c3c0.2%2c1.1%2c0.4%2c2.2%2c0.6%2c3.3h0.1c0.2-1.1%2c0.4-2.2%2c0.6-3.3c0.2-0.9%2c0.4-1.9%2c0.6-3c0.2-1.1%2c0.5-2.1%2c0.8-3 l4.1-14.2h7.3l-9.7%2c30.5h-7l-3.8-14.5c-0.2-0.8-0.4-1.7-0.6-2.7c-0.2-1-0.4-2-0.6-2.9c-0.2-1.1-0.4-2.2-0.6-3.3h-0.1 c-0.2%2c1.1-0.5%2c2.2-0.7%2c3.3c-0.2%2c0.9-0.4%2c1.9-0.6%2c2.9c-0.2%2c1-0.4%2c1.9-0.6%2c2.7l-3.9%2c14.5h-7L218.8%2c440.5z'/%3e %3cpath class='st0' d='M280.7%2c472c-2.4%2c0-4.6-0.4-6.5-1.3s-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1c-0.7-2-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4c0.7-2%2c1.8-3.7%2c3.1-5.1c1.3-1.5%2c2.9-2.6%2c4.8-3.4c1.9-0.8%2c3.9-1.2%2c6.2-1.2c2.2%2c0%2c4.2%2c0.4%2c6%2c1.1 c1.7%2c0.7%2c3.2%2c1.8%2c4.5%2c3.2c1.5%2c1.6%2c2.6%2c3.6%2c3.3%2c5.9c0.7%2c2.3%2c1.1%2c4.9%2c1%2c7.7h-22.8c0.3%2c2.6%2c1.1%2c4.8%2c2.5%2c6.4c1.4%2c1.6%2c3.4%2c2.4%2c5.9%2c2.4 c1.7%2c0%2c3.2-0.4%2c4.3-1.1c1.1-0.7%2c1.9-1.7%2c2.4-2.9h7.1c-0.4%2c1.4-1%2c2.6-1.7%2c3.8c-0.8%2c1.2-1.8%2c2.2-2.9%2c3s-2.5%2c1.5-4.1%2c2 C284.2%2c471.7%2c282.5%2c472%2c280.7%2c472z M280.3%2c445c-2.4%2c0-4.2%2c0.7-5.5%2c2.2c-1.3%2c1.5-2%2c3.4-2.3%2c5.8h15.2c-0.1-2.5-0.9-4.5-2.1-5.9 C284.2%2c445.7%2c282.5%2c445%2c280.3%2c445z'/%3e %3cpath class='st0' d='M313.7%2c481.7c-4.1%2c0-7.4-0.8-9.8-2.4c-2.4-1.6-3.8-3.8-4.2-6.7h7c0.5%2c2.5%2c2.8%2c3.8%2c6.9%2c3.8 c4.9%2c0%2c7.4-2.2%2c7.4-6.7v-0.7c0-0.8%2c0-1.6%2c0-2.3c0-0.7%2c0-1.4%2c0.1-1.9H321c-1%2c1.5-2.1%2c2.7-3.5%2c3.5c-1.4%2c0.8-3.1%2c1.2-5.1%2c1.2 c-1.9%2c0-3.6-0.3-5.2-1c-1.6-0.7-3-1.7-4.2-2.9c-1.2-1.3-2.1-2.8-2.8-4.6c-0.7-1.8-1-3.9-1-6.1c0-2.3%2c0.3-4.4%2c1-6.2 c0.7-1.9%2c1.6-3.4%2c2.7-4.7c1.1-1.3%2c2.5-2.3%2c4.1-3c1.6-0.7%2c3.3-1.1%2c5.1-1.1c4.2%2c0%2c7.2%2c1.6%2c9%2c4.7h0.1v-3.9h7v28.5c0%2c2.2-0.3%2c4-1%2c5.6 c-0.7%2c1.6-1.6%2c2.9-2.8%2c3.9c-1.3%2c1.1-2.8%2c1.8-4.6%2c2.3C317.9%2c481.4%2c315.9%2c481.7%2c313.7%2c481.7z M313.6%2c463.8c1.4%2c0%2c2.5-0.2%2c3.5-0.7 c1-0.5%2c1.8-1.1%2c2.4-1.9c0.6-0.8%2c1.1-1.8%2c1.3-2.9c0.3-1.1%2c0.4-2.4%2c0.4-3.7c0-2.7-0.6-4.9-1.9-6.6c-1.3-1.7-3.2-2.5-5.8-2.5 c-2.4%2c0-4.2%2c0.8-5.5%2c2.5c-1.3%2c1.7-1.9%2c3.9-1.9%2c6.7s0.6%2c5.1%2c1.9%2c6.7C309.4%2c463%2c311.2%2c463.8%2c313.6%2c463.8z'/%3e %3cpath class='st0' d='M333.5%2c428.5h7.4v7h-7.4V428.5z M333.6%2c440.5h7.3v30.5h-7.3V440.5z'/%3e %3cpath class='st0' d='M367.2%2c471.1c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.4-3.7%2c3.3 s-3.5%2c1.3-5.9%2c1.3c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-0.9-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9 c0-1.7%2c0.3-3.1%2c0.9-4.3c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3 s1.9-1.5%2c1.9-2.9c0-1.3-0.5-2.4-1.4-3.2s-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6h-6.9 c0-1.3%2c0.3-2.5%2c0.9-3.7c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2s3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4 c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4c2.9%2c1.8%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H367.2z M358.6%2c466.8 c1.3%2c0%2c2.4-0.2%2c3.3-0.6c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.4%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.9-2.7%2c1.2 c-1.1%2c0.3-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6c-1.2%2c0.7-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3 s1%2c0.5%2c1.7%2c0.7C357.3%2c466.8%2c357.9%2c466.8%2c358.6%2c466.8z'/%3e %3cpath class='st0' d='M384.6%2c445h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8 v20.7h-7.3v-19.5c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5s-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4 c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3v-30.5h7.1V445z'/%3e %3cpath class='st0' d='M0%2c499h34.5v6.8H21.2v35.7h-8v-35.7H0V499z'/%3e %3cpath class='st0' d='M52.6%2c541.5c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.5-3.7%2c3.3 c-1.5%2c0.9-3.5%2c1.3-5.9%2c1.3c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-1-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9 c0-1.7%2c0.3-3.1%2c0.9-4.3c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3 c1.3-0.5%2c1.9-1.5%2c1.9-2.9c0-1.3-0.5-2.4-1.4-3.2c-0.9-0.8-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6H33 c0-1.3%2c0.3-2.5%2c0.9-3.7c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2c1.6-0.5%2c3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4 c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4c2.9%2c1.7%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H52.6z M44%2c537.3 c1.3%2c0%2c2.4-0.2%2c3.3-0.6c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.3%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.8-2.7%2c1.2 c-1.1%2c0.3-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6s-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3 c0.5%2c0.3%2c1%2c0.6%2c1.7%2c0.7C42.7%2c537.2%2c43.3%2c537.3%2c44%2c537.3z'/%3e %3cpath class='st0' d='M73.7%2c525.5L63.8%2c511h8.3l3%2c4.8c0.3%2c0.5%2c0.6%2c1.1%2c0.9%2c1.7c0.3%2c0.6%2c0.6%2c1.2%2c0.9%2c1.7c0.3%2c0.7%2c0.7%2c1.3%2c1%2c1.9h0.1 c0.3-0.6%2c0.6-1.3%2c1-1.9c0.3-0.5%2c0.6-1.1%2c0.9-1.7c0.3-0.6%2c0.6-1.2%2c0.9-1.7l3.1-4.8h7.8l-9.7%2c14.2l11.2%2c16.3H85l-4-6.1 c-0.3-0.5-0.7-1.1-1.1-1.8c-0.4-0.7-0.7-1.3-1-1.9c-0.4-0.7-0.7-1.4-1-2.1h-0.1c-0.3%2c0.7-0.7%2c1.4-1.1%2c2.1c-0.3%2c0.6-0.7%2c1.3-1%2c1.9 c-0.4%2c0.7-0.7%2c1.3-1%2c1.8l-4.1%2c6.1h-8L73.7%2c525.5z'/%3e %3cpath class='st0' d='M125.2%2c499h8.5l15.5%2c42.5h-8.5l-3.4-10.1h-16.1l-3.4%2c10.1h-8L125.2%2c499z M123.2%2c525.6h12.2l-3.3-9.8 c-0.4-1.3-0.8-2.5-1.1-3.7c-0.3-1.2-0.6-2.3-0.8-3.3c-0.3-1.1-0.5-2.2-0.7-3.3h-0.1c-0.3%2c1.2-0.6%2c2.4-0.9%2c3.6 c-0.3%2c1-0.6%2c2.1-0.9%2c3.3c-0.3%2c1.2-0.7%2c2.3-1%2c3.3L123.2%2c525.6z'/%3e %3cpath class='st0' d='M163.9%2c542.5c-2%2c0-3.9-0.4-5.5-1.1c-1.6-0.7-3-1.8-4.2-3.2c-1.1-1.4-2-3.1-2.7-5.1c-0.6-2-0.9-4.2-0.9-6.7 c0-2.4%2c0.3-4.7%2c1-6.6c0.7-2%2c1.6-3.7%2c2.7-5.1c1.2-1.4%2c2.6-2.5%2c4.2-3.3s3.4-1.1%2c5.3-1.1c2.1%2c0%2c4%2c0.5%2c5.5%2c1.4 c1.6%2c0.9%2c2.8%2c2.2%2c3.8%2c3.8h0.1c-0.1-0.8-0.1-1.8-0.2-2.9c0-1.1-0.1-2.3-0.1-3.4V499h7.3v42.5h-7v-4.5h-0.1 c-0.9%2c1.8-2.2%2c3.1-3.8%2c4.1C167.9%2c542.1%2c166%2c542.5%2c163.9%2c542.5z M165.4%2c536.6c1.3%2c0%2c2.5-0.3%2c3.5-0.7c1-0.5%2c1.9-1.2%2c2.5-2.1 c0.7-0.9%2c1.2-2%2c1.5-3.3c0.3-1.3%2c0.5-2.6%2c0.5-4.1c0-1.5-0.2-2.9-0.5-4.2c-0.3-1.3-0.9-2.4-1.5-3.3c-0.7-0.9-1.5-1.7-2.5-2.2 c-1-0.5-2.2-0.8-3.5-0.8c-1.2%2c0-2.3%2c0.3-3.2%2c0.8c-0.9%2c0.5-1.7%2c1.2-2.3%2c2.2c-0.6%2c0.9-1.1%2c2-1.4%2c3.3c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.1 c0%2c3.1%2c0.6%2c5.5%2c1.8%2c7.4C161.1%2c535.6%2c162.9%2c536.6%2c165.4%2c536.6z'/%3e %3cpath class='st0' d='M187.1%2c511h7v4.6h0.2c1-1.7%2c2.2-3.1%2c3.7-4c1.5-0.9%2c3.3-1.4%2c5.4-1.4c1.9%2c0%2c3.6%2c0.5%2c5%2c1.4 c1.4%2c0.9%2c2.4%2c2.4%2c3.1%2c4.3h0.1c1.2-2%2c2.7-3.4%2c4.3-4.3c1.6-0.9%2c3.4-1.4%2c5.3-1.4c3.1%2c0%2c5.6%2c0.9%2c7.3%2c2.8c1.7%2c1.9%2c2.6%2c4.5%2c2.6%2c7.8 v20.7h-7.3v-19.7c0-1.8-0.5-3.1-1.4-4.1c-0.9-1-2.1-1.5-3.6-1.5c-1.8%2c0-3.3%2c0.7-4.4%2c2c-1.2%2c1.3-1.7%2c3.1-1.7%2c5.3v18.1h-7.3v-19.7 c0-1.8-0.4-3.1-1.3-4.1c-0.8-1-2-1.5-3.5-1.5c-0.8%2c0-1.6%2c0.2-2.4%2c0.5c-0.8%2c0.4-1.4%2c0.9-2%2c1.5c-0.6%2c0.6-1.1%2c1.4-1.4%2c2.3 c-0.3%2c0.9-0.5%2c1.9-0.5%2c2.9v18.1h-7.3V511z'/%3e %3cpath class='st0' d='M237.4%2c499h7.4v7h-7.4V499z M237.5%2c511h7.3v30.5h-7.3V511z'/%3e %3cpath class='st0' d='M258.4%2c515.5h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8 c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3V522c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5 c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3V511h7.1V515.5z'/%3e %3cpath class='st0' d='M284.9%2c499h7.4v7h-7.4V499z M285%2c511h7.3v30.5H285V511z'/%3e %3cpath class='st0' d='M311.1%2c542.5c-4.4%2c0-7.8-1-10.2-2.9c-2.4-1.9-3.7-4.4-4-7.5h7c0.3%2c1.8%2c1.1%2c3.2%2c2.4%2c4 c1.3%2c0.8%2c2.9%2c1.2%2c4.9%2c1.2c2%2c0%2c3.5-0.4%2c4.5-1.2c0.9-0.8%2c1.4-1.8%2c1.4-3c0-0.8-0.2-1.4-0.6-1.9c-0.4-0.5-0.9-0.9-1.6-1.2 c-0.7-0.3-1.5-0.6-2.5-0.8c-1-0.2-2-0.4-3.2-0.7c-1.4-0.3-2.8-0.6-4.2-1c-1.3-0.4-2.5-0.9-3.5-1.6c-1-0.7-1.9-1.5-2.5-2.6 c-0.6-1.1-0.9-2.5-0.9-4.2c0-1.4%2c0.3-2.7%2c0.9-3.9c0.6-1.1%2c1.4-2.1%2c2.5-2.9c1-0.8%2c2.3-1.4%2c3.8-1.8c1.5-0.4%2c3.1-0.6%2c4.9-0.6 c4.1%2c0%2c7.2%2c0.8%2c9.2%2c2.5c2.1%2c1.7%2c3.3%2c3.8%2c3.7%2c6.5H316c-0.5-2.7-2.6-4.1-6.1-4.1c-1.7%2c0-3%2c0.3-3.9%2c1c-0.9%2c0.7-1.3%2c1.6-1.3%2c2.6 c0%2c0.7%2c0.2%2c1.2%2c0.6%2c1.7s0.9%2c0.8%2c1.6%2c1.1c0.7%2c0.3%2c1.5%2c0.5%2c2.5%2c0.7c0.9%2c0.2%2c2%2c0.4%2c3.1%2c0.6c1.5%2c0.3%2c2.9%2c0.6%2c4.2%2c0.9 c1.4%2c0.4%2c2.6%2c0.9%2c3.7%2c1.6c1.1%2c0.7%2c2%2c1.6%2c2.6%2c2.8c0.6%2c1.2%2c1%2c2.7%2c1%2c4.5c0%2c1.6-0.3%2c3-1%2c4.2c-0.7%2c1.2-1.6%2c2.2-2.7%2c3.1 c-1.2%2c0.8-2.5%2c1.4-4.1%2c1.9S312.9%2c542.5%2c311.1%2c542.5z'/%3e %3cpath class='st0' d='M326.5%2c511h4.7v-9.7h7.1v9.7h6.1v5h-6.1v17.1c0%2c1.1%2c0.3%2c1.9%2c0.9%2c2.3c0.6%2c0.4%2c1.4%2c0.6%2c2.4%2c0.6 c0.4%2c0%2c0.8%2c0%2c1.2-0.1c0.4%2c0%2c0.8-0.1%2c1.1-0.2h0.3v5.7c-0.6%2c0.1-1.3%2c0.2-2.1%2c0.3c-0.8%2c0.1-1.7%2c0.1-2.7%2c0.1c-1.2%2c0-2.3-0.1-3.4-0.4 c-1-0.3-1.9-0.7-2.6-1.2c-0.7-0.5-1.3-1.3-1.7-2.2c-0.4-0.9-0.6-2-0.6-3.4V516h-4.7V511z'/%3e %3cpath class='st0' d='M356.6%2c516.5h0.2c1.9-4%2c4.9-5.9%2c8.8-5.9c0.9%2c0%2c1.5%2c0.1%2c1.9%2c0.3v6.5h-0.2c-0.6-0.1-1.3-0.2-2-0.2 c-2.4%2c0-4.4%2c0.7-6%2c2.3c-1.6%2c1.6-2.4%2c3.8-2.4%2c6.8v15.3h-7.3V511h7V516.5z'/%3e %3cpath class='st0' d='M391.1%2c541.5c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.5-3.7%2c3.3 c-1.5%2c0.9-3.5%2c1.3-5.9%2c1.3c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-1-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9 c0-1.7%2c0.3-3.1%2c0.9-4.3c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3 c1.3-0.5%2c1.9-1.5%2c1.9-2.9c0-1.3-0.5-2.4-1.4-3.2c-0.9-0.8-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6h-6.9 c0-1.3%2c0.3-2.5%2c0.9-3.7c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2c1.6-0.5%2c3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4 c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4c2.9%2c1.7%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H391.1z M382.4%2c537.3 c1.3%2c0%2c2.4-0.2%2c3.3-0.6c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.3%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.8-2.7%2c1.2 s-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6s-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3c0.5%2c0.3%2c1%2c0.6%2c1.7%2c0.7 C381.1%2c537.2%2c381.8%2c537.3%2c382.4%2c537.3z'/%3e %3cpath class='st0' d='M401.3%2c511h4.7v-9.7h7.1v9.7h6.1v5h-6.1v17.1c0%2c1.1%2c0.3%2c1.9%2c0.9%2c2.3c0.6%2c0.4%2c1.4%2c0.6%2c2.4%2c0.6 c0.4%2c0%2c0.8%2c0%2c1.2-0.1c0.4%2c0%2c0.8-0.1%2c1.1-0.2h0.3v5.7c-0.6%2c0.1-1.3%2c0.2-2.1%2c0.3c-0.8%2c0.1-1.7%2c0.1-2.7%2c0.1c-1.2%2c0-2.3-0.1-3.4-0.4 c-1-0.3-1.9-0.7-2.6-1.2c-0.7-0.5-1.3-1.3-1.7-2.2c-0.4-0.9-0.6-2-0.6-3.4V516h-4.7V511z'/%3e %3cpath class='st0' d='M424.2%2c499h7.4v7h-7.4V499z M424.3%2c511h7.3v30.5h-7.3V511z'/%3e %3cpath class='st0' d='M452.2%2c542.5c-2.4%2c0-4.5-0.4-6.4-1.3c-1.9-0.8-3.6-2-4.9-3.4c-1.3-1.5-2.4-3.2-3.1-5.1 c-0.7-2-1.1-4.1-1.1-6.3c0-2.3%2c0.4-4.4%2c1.1-6.4c0.7-2%2c1.8-3.7%2c3.1-5.1c1.4-1.5%2c3-2.6%2c4.9-3.4c1.9-0.8%2c4.1-1.2%2c6.4-1.2 c2.4%2c0%2c4.5%2c0.4%2c6.4%2c1.2c1.9%2c0.8%2c3.5%2c2%2c4.9%2c3.4c1.4%2c1.5%2c2.4%2c3.2%2c3.1%2c5.1c0.7%2c2%2c1.1%2c4.1%2c1.1%2c6.4c0%2c2.3-0.4%2c4.4-1.1%2c6.3 c-0.7%2c2-1.8%2c3.7-3.1%2c5.1c-1.3%2c1.4-3%2c2.6-4.9%2c3.4C456.7%2c542%2c454.5%2c542.5%2c452.2%2c542.5z M452.1%2c537c1.3%2c0%2c2.5-0.3%2c3.5-0.8 c1-0.5%2c1.9-1.3%2c2.5-2.2c0.7-0.9%2c1.2-2.1%2c1.6-3.4c0.4-1.3%2c0.5-2.7%2c0.5-4.2s-0.2-2.9-0.5-4.3c-0.4-1.3-0.9-2.5-1.6-3.4 c-0.7-1-1.5-1.7-2.5-2.3c-1-0.5-2.2-0.8-3.5-0.8c-1.3%2c0-2.5%2c0.3-3.5%2c0.8c-1%2c0.5-1.9%2c1.3-2.6%2c2.3c-0.7%2c1-1.2%2c2.1-1.5%2c3.4 c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.3s0.2%2c2.9%2c0.5%2c4.2c0.3%2c1.3%2c0.9%2c2.4%2c1.5%2c3.4c0.7%2c1%2c1.5%2c1.7%2c2.6%2c2.2C449.6%2c536.7%2c450.8%2c537%2c452.1%2c537z'/%3e %3cpath class='st0' d='M479.8%2c515.5h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8 c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3V522c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5 c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3V511h7.1V515.5z'/%3e %3c/g%3e %3cg%3e %3cpath class='st0' d='M71.7%2c212c0%2c37.9%2c56.4%2c68.7%2c125.9%2c68.7c69.6%2c0%2c126-30.8%2c126-68.7c0-26.2-26.8-49-66.4-60.5L197.7%2c212v-34.5 l59.5-59.9c-17.7-5.2-38.3-8.1-59.8-8.1l0%2c33.9C128%2c143.4%2c71.7%2c174.1%2c71.7%2c212z'/%3e %3c/g%3e %3c/g%3e %3cpath class='st0' d='M399.2%2c6v393H6.2V6H399.2 M405.2%2c0H0.2v405h405V0L405.2%2c0z'/%3e%3c/g%3e%3c/svg%3e";

    var img$d = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 25.4.1%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 269.3 60' style='enable-background:new 0 0 269.3 60%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:white%3b%7d%3c/style%3e%3cg%3e %3cg%3e %3cg%3e %3cpolygon class='st0' points='38.3%2c18 30%2c13.2 21.7%2c18 30%2c22.8 '/%3e %3cpolygon class='st0' points='46.7%2c37.2 46.7%2c27.6 38.3%2c22.8 38.3%2c32.4 30%2c37.2 21.7%2c32.4 21.7%2c22.8 13.4%2c27.6 13.4%2c37.2 30%2c46.8 '/%3e %3cpath class='st0' d='M0%2c0v60h60V0H0z M58.3%2c58.3H1.8V1.7h56.5V58.3z'/%3e %3c/g%3e %3cg%3e %3cpath class='st0' d='M72%2c30.4h3.8c0.2%2c1.8%2c1.3%2c2.6%2c3.4%2c2.6c1.4%2c0%2c2.8-0.6%2c2.8-1.9c0-1.4-1.4-1.7-3.7-2.3 c-3.2-0.7-5.7-1.5-5.7-4.9s2.7-4.9%2c6.3-4.9s6.1%2c1.7%2c6.4%2c4.8h-3.6c-0.2-1.3-1.2-2-2.8-2c-1.5%2c0-2.6%2c0.6-2.6%2c1.7 c0%2c1.3%2c1.4%2c1.5%2c4%2c2.1c2.9%2c0.6%2c5.6%2c1.6%2c5.6%2c5s-2.9%2c5.2-6.6%2c5.2C74.9%2c36%2c72.1%2c34%2c72%2c30.4z'/%3e %3cpath class='st0' d='M86.8%2c23.9h1.7v-3.7h3.4v3.7h2.3v2.2h-2.3v5.8c0%2c0.9%2c0.5%2c1.1%2c1.3%2c1.1c0.2%2c0%2c0.6%2c0%2c0.8-0.1h0.2v2.6 c-0.4%2c0.1-1.1%2c0.2-2%2c0.2c-2.2%2c0-3.6-0.7-3.6-3.1v-6.5h-1.7L86.8%2c23.9L86.8%2c23.9z'/%3e %3cpath class='st0' d='M103.3%2c34.2L103.3%2c34.2c-0.8%2c1.1-1.8%2c1.7-3.6%2c1.7c-2.3%2c0-4-1.2-4-3.5c0-2.6%2c2-3.2%2c4.6-3.5 c2.1-0.3%2c2.9-0.6%2c2.9-1.5c0-0.8-0.6-1.4-1.7-1.4c-1.3%2c0-2%2c0.6-2%2c1.5h-3.2c0.1-2%2c1.7-3.8%2c5.2-3.8c1.5%2c0%2c2.5%2c0.2%2c3.4%2c0.7 c1.2%2c0.7%2c1.8%2c1.9%2c1.8%2c3.5v6c0%2c0.9%2c0.1%2c1.4%2c0.4%2c1.6v0.2h-3.4C103.5%2c35.3%2c103.3%2c34.8%2c103.3%2c34.2z M103.3%2c31.4v-1.5 c-0.5%2c0.3-1.3%2c0.5-2%2c0.6c-1.5%2c0.3-2.2%2c0.7-2.2%2c1.7s0.8%2c1.4%2c1.7%2c1.4C102.3%2c33.6%2c103.3%2c32.7%2c103.3%2c31.4z'/%3e %3cpath class='st0' d='M108.1%2c23.9h1.7v-3.7h3.4v3.7h2.3v2.2h-2.3v5.8c0%2c0.9%2c0.5%2c1.1%2c1.3%2c1.1c0.2%2c0%2c0.6%2c0%2c0.8-0.1h0.2v2.6 c-0.4%2c0.1-1.1%2c0.2-2%2c0.2c-2.2%2c0-3.6-0.7-3.6-3.1v-6.5h-1.8V23.9L108.1%2c23.9z'/%3e %3cpath class='st0' d='M116.8%2c29.8c0-3.5%2c2.4-6.2%2c6-6.2c1.7%2c0%2c3%2c0.6%2c4%2c1.5c1.3%2c1.3%2c1.9%2c3.2%2c1.9%2c5.5h-8.6c0.2%2c1.7%2c1.2%2c2.8%2c2.8%2c2.8 c1.1%2c0%2c1.7-0.4%2c2.1-1.1h3.3c-0.6%2c2-2.5%2c3.6-5.5%2c3.6C119.1%2c35.9%2c116.8%2c33.3%2c116.8%2c29.8z M120.1%2c28.7h5c-0.1-1.6-1-2.6-2.4-2.6 C121.2%2c26%2c120.4%2c27.1%2c120.1%2c28.7z'/%3e %3cpath class='st0' d='M133.7%2c25.7L133.7%2c25.7c0.8-1.4%2c2-2.1%2c3.6-2.1c2.6%2c0%2c4.1%2c1.7%2c4.1%2c4.3v7.6H138v-7c0-1.3-0.7-2.1-2-2.1 s-2.2%2c1.1-2.2%2c2.6v6.6h-3.4V23.9h3.3V25.7z'/%3e %3cpath class='st0' d='M142.8%2c32h3.2c0.2%2c1.1%2c1%2c1.7%2c2.4%2c1.7c1.2%2c0%2c1.9-0.5%2c1.9-1.3c0-1-1.4-1.2-3-1.5c-2.1-0.4-4.2-0.9-4.2-3.6 c0-2.4%2c2.2-3.6%2c4.9-3.6c3.2%2c0%2c4.8%2c1.4%2c5.2%2c3.4H150c-0.2-0.8-0.9-1.3-2-1.3c-1%2c0-1.7%2c0.4-1.7%2c1.2c0%2c0.9%2c1.3%2c1%2c2.9%2c1.3 c2.1%2c0.4%2c4.4%2c0.9%2c4.4%2c3.8c0%2c2.5-2.2%2c3.8-5.2%2c3.8C145%2c35.9%2c143%2c34.3%2c142.8%2c32z'/%3e %3cpath class='st0' d='M160.6%2c19.3h3.5v3h-3.5V19.3z M160.6%2c23.9h3.4v11.6h-3.4V23.9z'/%3e %3cpath class='st0' d='M169.6%2c25.7L169.6%2c25.7c0.8-1.4%2c2-2.1%2c3.6-2.1c2.6%2c0%2c4.1%2c1.7%2c4.1%2c4.3v7.6h-3.4v-7c0-1.3-0.7-2.1-2-2.1 s-2.2%2c1.1-2.2%2c2.6v6.6h-3.4V23.9h3.3V25.7L169.6%2c25.7z'/%3e %3cpath class='st0' d='M182.8%2c25.7L182.8%2c25.7c0.8-1.4%2c2-2.1%2c3.6-2.1c2.6%2c0%2c4.1%2c1.7%2c4.1%2c4.3v7.6h-3.4v-7c0-1.3-0.7-2.1-2-2.1 s-2.2%2c1.1-2.2%2c2.6v6.6h-3.4V23.9h3.3L182.8%2c25.7L182.8%2c25.7z'/%3e %3cpath class='st0' d='M197.2%2c30.5l-1.2%2c1.2v3.9h-3.4V19.3h3.4v5.1c0%2c1.7-0.1%2c3-0.1%2c3.7l3.8-4.2h4l-4.1%2c4.3l4.6%2c7.3h-4L197.2%2c30.5z '/%3e %3cpath class='st0' d='M208.9%2c26L208.9%2c26c0.8-1.6%2c1.9-2.3%2c3.3-2.3c0.3%2c0%2c0.6%2c0%2c0.7%2c0.1v3h-0.1c-0.2%2c0-0.5-0.1-0.7-0.1 c-1.9%2c0-3.1%2c1.1-3.1%2c3.4v5.4h-3.4V23.9h3.3V26L208.9%2c26z'/%3e %3cpath class='st0' d='M213.8%2c29.8c0-3.5%2c2.4-6.2%2c6-6.2c1.7%2c0%2c3%2c0.6%2c4%2c1.5c1.3%2c1.3%2c1.9%2c3.2%2c1.9%2c5.5h-8.5c0.2%2c1.7%2c1.2%2c2.8%2c2.8%2c2.8 c1.1%2c0%2c1.7-0.4%2c2.1-1.1h3.3c-0.6%2c2-2.5%2c3.6-5.5%2c3.6C216.1%2c35.9%2c213.8%2c33.3%2c213.8%2c29.8z M217.2%2c28.7h5c-0.1-1.6-1-2.6-2.4-2.6 C218.2%2c26%2c217.4%2c27.1%2c217.2%2c28.7z'/%3e %3cpath class='st0' d='M226%2c23.9h3.5l1.4%2c4.7c0.5%2c1.5%2c0.9%2c4.1%2c0.9%2c4.1h0.1c0%2c0%2c0.4-2.5%2c0.9-4.1l1.5-4.7h3.4l-4.1%2c11.6H230L226%2c23.9 z'/%3e %3cpath class='st0' d='M239.1%2c19.3h3.5v3h-3.5V19.3z M239.1%2c23.9h3.4v11.6h-3.4V23.9z'/%3e %3cpath class='st0' d='M248.1%2c25.7L248.1%2c25.7c0.8-1.4%2c2-2.1%2c3.6-2.1c2.6%2c0%2c4.1%2c1.7%2c4.1%2c4.3v7.6h-3.4v-7c0-1.3-0.7-2.1-2-2.1 s-2.2%2c1.1-2.2%2c2.6v6.6h-3.4V23.9h3.3L248.1%2c25.7L248.1%2c25.7z'/%3e %3cpath class='st0' d='M257.8%2c36h3.4c0.2%2c0.7%2c0.9%2c1.2%2c2.2%2c1.2c1.6%2c0%2c2.4-0.8%2c2.4-2.2v-0.2c0-0.6%2c0-1.1%2c0.1-1.5h-0.1 c-0.7%2c1.1-1.7%2c1.7-3.1%2c1.7c-2.7%2c0-5.1-2-5.1-5.5c0-3.4%2c2-5.7%2c4.9-5.7c1.6%2c0%2c2.7%2c0.5%2c3.4%2c1.8h0.1V24h3.3v10.6c0%2c1.7-0.6%2c3-1.5%2c3.8 c-1%2c0.9-2.5%2c1.3-4.2%2c1.3C260.2%2c39.6%2c258.1%2c38.3%2c257.8%2c36z M265.9%2c29.2c0-1.7-0.8-3-2.5-3c-1.5%2c0-2.4%2c1.2-2.4%2c3s0.9%2c3%2c2.5%2c3 C265.1%2c32.3%2c265.9%2c31%2c265.9%2c29.2z'/%3e %3cpath class='st0' d='M71.5%2c53.6h6.3v1h-6.3V53.6z'/%3e %3cpath class='st0' d='M81.6%2c54.1c0-2%2c1.3-3.6%2c3.2-3.6c1%2c0%2c1.8%2c0.4%2c2.3%2c1c0.6%2c0.7%2c0.8%2c1.6%2c0.8%2c2.8h-5.2c0.1%2c1.3%2c0.8%2c2.3%2c2.1%2c2.3 c0.9%2c0%2c1.6-0.4%2c1.8-1.2h1.1c-0.3%2c1.3-1.4%2c2.1-2.9%2c2.1C82.8%2c57.6%2c81.6%2c56%2c81.6%2c54.1z M82.8%2c53.5h3.9c-0.1-1.3-0.7-2.1-1.9-2.1 C83.6%2c51.4%2c82.9%2c52.3%2c82.8%2c53.5z'/%3e %3cpath class='st0' d='M90.4%2c51.6L90.4%2c51.6c0.5-0.7%2c1.2-1.1%2c2.2-1.1c1.4%2c0%2c2.3%2c0.8%2c2.3%2c2.2v4.7h-1.2v-4.6c0-0.9-0.6-1.4-1.5-1.4 c-1%2c0-1.8%2c0.7-1.8%2c1.8v4.1h-1.2v-6.8h1.2V51.6L90.4%2c51.6z'/%3e %3cpath class='st0' d='M99.4%2c54.1c0-2.2%2c1.3-3.6%2c3-3.6c1%2c0%2c1.7%2c0.5%2c2.1%2c1.2l0%2c0c0-0.3%2c0-0.8%2c0-1.3V48h1.2v9.4h-1.2v-1l0%2c0 c-0.4%2c0.7-1.1%2c1.2-2.1%2c1.2C100.5%2c57.6%2c99.4%2c56.3%2c99.4%2c54.1z M104.5%2c54.1c0-1.5-0.7-2.6-2.1-2.6c-1.3%2c0-1.9%2c1.1-1.9%2c2.6 s0.6%2c2.6%2c1.9%2c2.6C103.9%2c56.7%2c104.5%2c55.6%2c104.5%2c54.1z'/%3e %3cpath class='st0' d='M106.9%2c54.1c0-2%2c1.3-3.6%2c3.2-3.6c1%2c0%2c1.8%2c0.4%2c2.3%2c1c0.6%2c0.7%2c0.8%2c1.6%2c0.8%2c2.8h-5.1c0.1%2c1.3%2c0.8%2c2.3%2c2.1%2c2.3 c0.9%2c0%2c1.6-0.4%2c1.8-1.2h1.1c-0.3%2c1.3-1.4%2c2.1-2.9%2c2.1C108.1%2c57.6%2c106.9%2c56%2c106.9%2c54.1z M108.1%2c53.5h3.9c-0.1-1.3-0.7-2.1-1.9-2.1 C108.9%2c51.4%2c108.3%2c52.3%2c108.1%2c53.5z'/%3e %3cpath class='st0' d='M114.6%2c48.1h1.2v9.4h-1.2V48.1z'/%3e %3cpath class='st0' d='M120.5%2c55.7c0-1.6%2c1.2-1.9%2c2.9-2.1c1-0.1%2c1.6-0.3%2c1.6-1s-0.5-1.2-1.5-1.2c-1.1%2c0-1.6%2c0.5-1.6%2c1.3h-1.1 c0.1-1.1%2c0.9-2.2%2c2.7-2.2c0.6%2c0%2c1.2%2c0.1%2c1.6%2c0.4c0.6%2c0.3%2c0.9%2c0.9%2c0.9%2c1.8v3.1c0%2c0.6%2c0.1%2c0.8%2c0.7%2c0.7h0.1v0.8 c-0.2%2c0.1-0.3%2c0.1-0.6%2c0.1c-0.7%2c0-1.1-0.3-1.2-1l0%2c0c-0.4%2c0.6-1.1%2c1.1-2.3%2c1.1C121.5%2c57.6%2c120.5%2c57%2c120.5%2c55.7z M125%2c55v-1.1 c-0.3%2c0.2-0.9%2c0.4-1.5%2c0.5c-1.1%2c0.2-1.8%2c0.4-1.8%2c1.3c0%2c0.9%2c0.7%2c1.1%2c1.3%2c1.1C124.4%2c56.7%2c125%2c55.7%2c125%2c55z'/%3e %3cpath class='st0' d='M127%2c50.7h1.3l1.2%2c3.6c0.3%2c0.9%2c0.6%2c2.2%2c0.6%2c2.2l0%2c0c0%2c0%2c0.3-1.3%2c0.6-2.2l1.2-3.6h1.2l-2.4%2c6.8h-1.3L127%2c50.7 z'/%3e %3cpath class='st0' d='M136.9%2c54.4h1.3c0.1%2c1.4%2c1.1%2c2.2%2c2.8%2c2.2c1.3%2c0%2c2.2-0.6%2c2.2-1.7c0-1.2-1.1-1.5-2.7-1.9 c-1.7-0.3-3.1-0.8-3.1-2.6c0-1.6%2c1.3-2.5%2c3.2-2.5c2.3%2c0%2c3.3%2c1.2%2c3.6%2c2.8h-1.3c-0.2-1.1-1-1.7-2.3-1.7c-1.2%2c0-2%2c0.5-2%2c1.4 c0%2c1%2c1%2c1.3%2c2.4%2c1.6c1.8%2c0.4%2c3.5%2c0.8%2c3.5%2c2.9c0%2c1.8-1.5%2c2.8-3.5%2c2.8C138.3%2c57.6%2c137%2c56.2%2c136.9%2c54.4z'/%3e %3cpath class='st0' d='M147.9%2c53.9l-1%2c0.9v2.7h-1.2v-9.4h1.2v4.4c0%2c0.2%2c0%2c0.7-0.1%2c1l2.9-2.9h1.5l-2.6%2c2.4l2.9%2c4.3h-1.4L147.9%2c53.9z '/%3e %3cpath class='st0' d='M152.2%2c55.7c0-1.6%2c1.2-1.9%2c2.9-2.1c1-0.1%2c1.6-0.3%2c1.6-1s-0.5-1.2-1.5-1.2c-1.1%2c0-1.6%2c0.5-1.6%2c1.3h-1.1 c0.1-1.1%2c0.9-2.2%2c2.7-2.2c0.6%2c0%2c1.2%2c0.1%2c1.6%2c0.4c0.6%2c0.3%2c0.9%2c0.9%2c0.9%2c1.8v3.1c0%2c0.6%2c0.1%2c0.8%2c0.7%2c0.7h0.1v0.8 c-0.2%2c0.1-0.3%2c0.1-0.6%2c0.1c-0.7%2c0-1.1-0.3-1.2-1l0%2c0c-0.4%2c0.6-1.1%2c1.1-2.3%2c1.1C153.2%2c57.6%2c152.2%2c57%2c152.2%2c55.7z M156.8%2c55v-1.1 c-0.3%2c0.2-0.9%2c0.4-1.5%2c0.5c-1.1%2c0.2-1.8%2c0.4-1.8%2c1.3c0%2c0.9%2c0.7%2c1.1%2c1.3%2c1.1C156.1%2c56.7%2c156.8%2c55.7%2c156.8%2c55z'/%3e %3cpath class='st0' d='M159%2c50.7h1v-2.1h1.2v2.1h1.4v0.9h-1.4v4.3c0%2c0.5%2c0.3%2c0.6%2c0.7%2c0.6c0.2%2c0%2c0.5-0.1%2c0.6-0.1l0%2c0v1 c-0.3%2c0.1-0.6%2c0.1-0.9%2c0.1c-0.9%2c0-1.5-0.4-1.5-1.4v-4.5h-1v-0.9H159z'/%3e %3cpath class='st0' d='M163.2%2c50.7h1v-2.1h1.2v2.1h1.4v0.9h-1.4v4.3c0%2c0.5%2c0.3%2c0.6%2c0.7%2c0.6c0.2%2c0%2c0.5-0.1%2c0.6-0.1l0%2c0v1 c-0.3%2c0.1-0.6%2c0.1-0.9%2c0.1c-0.9%2c0-1.5-0.4-1.5-1.4v-4.5h-1v-0.9H163.2z'/%3e %3cpath class='st0' d='M167.7%2c54.1c0-2%2c1.3-3.6%2c3.2-3.6c1%2c0%2c1.8%2c0.4%2c2.3%2c1c0.6%2c0.7%2c0.8%2c1.6%2c0.8%2c2.8h-5.2c0.1%2c1.3%2c0.8%2c2.3%2c2.1%2c2.3 c0.9%2c0%2c1.6-0.4%2c1.8-1.2h1.1c-0.3%2c1.3-1.4%2c2.1-2.9%2c2.1C168.9%2c57.6%2c167.7%2c56%2c167.7%2c54.1z M168.9%2c53.5h3.9c-0.1-1.3-0.7-2.1-1.9-2.1 S169%2c52.3%2c168.9%2c53.5z'/%3e %3cpath class='st0' d='M174.9%2c54.1c0-2%2c1.3-3.6%2c3.2-3.6c1%2c0%2c1.8%2c0.4%2c2.3%2c1c0.6%2c0.7%2c0.8%2c1.6%2c0.8%2c2.8h-5.1c0.1%2c1.3%2c0.8%2c2.3%2c2.1%2c2.3 c0.9%2c0%2c1.6-0.4%2c1.8-1.2h1.1c-0.3%2c1.3-1.4%2c2.1-2.9%2c2.1C176.1%2c57.6%2c174.9%2c56%2c174.9%2c54.1z M176.1%2c53.5h3.9c-0.1-1.3-0.7-2.1-1.9-2.1 C176.9%2c51.4%2c176.3%2c52.3%2c176.1%2c53.5z'/%3e %3cpath class='st0' d='M182%2c50.7h1v-2.1h1.2v2.1h1.4v0.9h-1.4v4.3c0%2c0.5%2c0.3%2c0.6%2c0.7%2c0.6c0.2%2c0%2c0.5-0.1%2c0.6-0.1l0%2c0v1 c-0.3%2c0.1-0.6%2c0.1-0.9%2c0.1c-0.9%2c0-1.5-0.4-1.5-1.4v-4.5h-1v-0.9H182z'/%3e %3cpath class='st0' d='M186.6%2c55.7c0-1.6%2c1.2-1.9%2c2.9-2.1c1-0.1%2c1.6-0.3%2c1.6-1s-0.5-1.2-1.5-1.2c-1.1%2c0-1.6%2c0.5-1.6%2c1.3h-1.1 c0.1-1.1%2c0.9-2.2%2c2.7-2.2c0.6%2c0%2c1.2%2c0.1%2c1.6%2c0.4c0.6%2c0.3%2c0.9%2c0.9%2c0.9%2c1.8v3.1c0%2c0.6%2c0.1%2c0.8%2c0.7%2c0.7h0.1v0.8 c-0.2%2c0.1-0.3%2c0.1-0.6%2c0.1c-0.7%2c0-1.1-0.3-1.2-1l0%2c0c-0.4%2c0.6-1.1%2c1.1-2.3%2c1.1C187.6%2c57.6%2c186.6%2c57%2c186.6%2c55.7z M191.1%2c55v-1.1 c-0.3%2c0.2-0.9%2c0.4-1.5%2c0.5c-1.1%2c0.2-1.8%2c0.4-1.8%2c1.3c0%2c0.9%2c0.7%2c1.1%2c1.3%2c1.1C190.5%2c56.7%2c191.1%2c55.7%2c191.1%2c55z'/%3e %3cpath class='st0' d='M193.4%2c50.7h1v-2.1h1.2v2.1h1.4v0.9h-1.4v4.3c0%2c0.5%2c0.3%2c0.6%2c0.7%2c0.6c0.2%2c0%2c0.5-0.1%2c0.6-0.1l0%2c0v1 c-0.3%2c0.1-0.6%2c0.1-0.9%2c0.1c-0.9%2c0-1.5-0.4-1.5-1.4v-4.5h-1L193.4%2c50.7L193.4%2c50.7z'/%3e %3cpath class='st0' d='M197.8%2c54.1c0-2%2c1.3-3.6%2c3.2-3.6c1%2c0%2c1.8%2c0.4%2c2.3%2c1c0.6%2c0.7%2c0.8%2c1.6%2c0.8%2c2.8h-5.2c0.1%2c1.3%2c0.8%2c2.3%2c2.1%2c2.3 c0.9%2c0%2c1.6-0.4%2c1.8-1.2h1.1c-0.3%2c1.3-1.4%2c2.1-2.9%2c2.1C199%2c57.6%2c197.8%2c56%2c197.8%2c54.1z M199%2c53.5h3.9c-0.1-1.3-0.7-2.1-1.9-2.1 S199.2%2c52.3%2c199%2c53.5z'/%3e %3cpath class='st0' d='M206.6%2c51.6L206.6%2c51.6c0.5-0.7%2c1.2-1.1%2c2.2-1.1c1.4%2c0%2c2.3%2c0.8%2c2.3%2c2.2v4.7h-1.2v-4.6c0-0.9-0.6-1.4-1.5-1.4 c-1%2c0-1.8%2c0.7-1.8%2c1.8v4.1h-1.2v-6.8h1.2V51.6L206.6%2c51.6z'/%3e %3c/g%3e %3c/g%3e%3c/g%3e%3c/svg%3e";

    var Logo = function Logo() {
      return jsxRuntime.jsx(Image, {
        src: img$f,
        className: getLogoClassNames(),
        height: "74px",
        alt: "Skatteetaten logo"
      }, void 0);
    };

    var LogoEn = function LogoEn() {
      return jsxRuntime.jsx(Image, {
        src: img$e,
        className: getLogoClassNames(),
        height: "74px",
        alt: "Norwegian Tax Authorities logo"
      }, void 0);
    };

    var LogoInk = function LogoInk() {
      return jsxRuntime.jsx(Image, {
        src: img$d,
        className: getLogoClassNames(),
        height: "63px",
        alt: "Statens innkreving - en del av Skatteetaten, logo"
      }, void 0);
    };
    /*
     * visibleName FooterContent (Bunn)
     */


    var FooterContent =
    /** @class */
    function (_super) {
      tslib.__extends(FooterContent, _super);

      function FooterContent() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      FooterContent.prototype.render = function () {
        var _a = this.props,
            _children = _a.children,
            className = _a.className,
            ariaLabel = _a.ariaLabel;
        var styles = getClassNames$p();
        return jsxRuntime.jsx(BrandContext.Consumer, {
          children: function children(_a) {
            var tag = _a.tag,
                primaryColor = _a.primaryColor,
                secondaryColor = _a.secondaryColor;
            return jsxRuntime.jsxs("div", tslib.__assign({
              className: className,
              "aria-label": ariaLabel
            }, {
              children: [jsxRuntime.jsx("div", tslib.__assign({
                className: styles.footerDecorContainer,
                "aria-hidden": "true"
              }, {
                children: footerDekor(primaryColor, secondaryColor)
              }), void 0), jsxRuntime.jsx("footer", tslib.__assign({
                className: styles['footerWrapper' + tag]
              }, {
                children: jsxRuntime.jsx("div", tslib.__assign({
                  className: styles['footerContent' + tag]
                }, {
                  children: _children
                }), void 0)
              }), void 0)]
            }), void 0);
          }
        }, void 0);
      };
      /** Engelsk logo */


      FooterContent.LogoEn = LogoEn;
      /** Norsk Logo */

      FooterContent.Logo = Logo;
      /** Statens innkreving logo */

      FooterContent.LogoInk = LogoInk;
      return FooterContent;
    }(React__namespace.PureComponent);

    var getClassNames$o = function getClassNames() {
      return mergeStyleSets({
        arrowLink: {
          display: 'block',
          position: 'relative',
          margin: '0 0 12px 0px'
        },
        icon: {
          /* Icon is imported and then hidden to import correct icon font */
          display: 'none'
        },
        arrowLinkList: {
          paddingInlineStart: '0px'
        }
      });
    };

    /*
     * visibleName LinkGroup (Lenkegruppe)
     */

    var LinkGroup = function LinkGroup(props) {
      var styles = getClassNames$o();
      return jsxRuntime.jsx("ul", tslib.__assign({
        className: classnames__default['default'](styles.arrowLinkList)
      }, {
        children: props.links && props.links.map(function (link, index) {
          var text = link.text,
              path = link.path;
              link.renderContent;
              var htmlAttributes = tslib.__rest(link, ["text", "path", "renderContent"]);

          return jsxRuntime.jsx("li", tslib.__assign({
            className: classnames__default['default'](styles.arrowLink, props.className)
          }, {
            children: link.renderContent ? link.renderContent(link.path, link.text, classnames__default['default'](), htmlAttributes) : jsxRuntime.jsx(Link, {
              linkGroup: true,
              icon: "ArrowForward",
              placement: "before",
              text: text,
              path: path
            }, void 0)
          }), index);
        })
      }), void 0);
    };

    function getBackgroundColor(props) {
      var palette = getTheme().palette;

      switch (props) {
        case MessageBarType.error:
        case MessageBarType.warning:
        case MessageBarType.severeWarning:
          return {
            backgroundColor: palette.skeColor.burgundy10
          };

        case MessageBarType.success:
          return {
            backgroundColor: palette.skeColor.lightGreen
          };

        case MessageBarType.info:
        default:
          return {
            backgroundColor: palette.skeColor.brown10
          };
      }
    }

    function getIconColor(props) {
      var palette = getTheme().palette;

      switch (props) {
        case MessageBarType.error:
        case MessageBarType.warning:
          return {
            color: palette.skeColor.statusError
          };

        case MessageBarType.severeWarning:
          return {
            color: palette.skeColor.white
          };

        case MessageBarType.success:
          return {
            color: palette.skeColor.statusOk
          };

        case MessageBarType.info:
        default:
          return {
            color: palette.skeColor.statusWarning
          };
      }
    }

    function getBorderColor(props) {
      var palette = getTheme().palette;

      switch (props) {
        case MessageBarType.error:
        case MessageBarType.warning:
          return {
            borderLeft: "3px solid " + palette.skeColor.statusError
          };

        case MessageBarType.severeWarning:
          return {
            border: "2px solid " + palette.skeColor.statusError
          };

        case MessageBarType.success:
          return {
            borderLeft: "3px solid " + palette.skeColor.statusOk
          };

        case MessageBarType.info:
        default:
          return {
            borderLeft: "3px solid " + palette.skeColor.statusWarning
          };
      }
    }

    var getClassNames$n = function getClassNames(props) {
      var palette = getTheme().palette;
      var severe = props.type === MessageBarType.severeWarning;
      var size = props.size;
      return mergeStyles([{
        selectors: {
          '&.ms-MessageBar': tslib.__assign(tslib.__assign(tslib.__assign({}, getBackgroundColor(props.type)), getBorderColor(props.type)), {
            color: palette.skeColor.blackAlt,
            selectors: {
              '&.fade-exit': {
                opacity: 1
              }
            }
          }),
          '.ms-MessageBar-content': {
            border: severe ? "2px solid " + palette.skeColor.statusError : 'none',
            padding: size === 'large' ? '25px 25px 25px 30px' : '',
            width: 'auto',
            selectors: {
              '@media (max-width: 640px)': {
                padding: size === 'large' ? '12px 12px 12px 0px' : ''
              }
            }
          },
          '& .ms-MessageBar-icon': {
            backgroundColor: severe ? palette.skeColor.statusError : 'none',
            margin: 0,
            padding: '9px 10px 8px 9px'
          },
          '.ms-MessageBar-icon i': tslib.__assign(tslib.__assign({}, getIconColor(props.type)), {
            fontSize: size === 'large' ? exports.IconFontSizes.mega : exports.IconFontSizes.large,
            selectors: {
              '@media (max-width: 640px)': {
                fontSize: size === 'large' ? exports.IconFontSizes.xlarge : undefined,
                margin: size === 'large' ? '10px 0 0 10px' : ''
              }
            }
          }),
          '.ms-MessageBar-text': {
            margin: '8px'
          },
          '.ms-MessageBar-innerText': {
            fontSize: size === 'large' ? exports.FontSizes.large : exports.FontSizes.medium,
            color: palette.skeColor.blackAlt,
            lineHeight: size === 'large' ? '1.75rem' : '1.5rem',
            padding: size === 'large' ? '7px 0px 0px 30px' : '-2px 0px 0px 0px',
            selectors: {
              '@media (max-width: 640px)': {
                padding: size === 'large' ? '7px 0px 0px 8px' : '-2px 0px 0px 0px'
              }
            }
          },
          '.ms-MessageBar-dismissal': {
            marginTop: size === 'large' ? '12px ' : '4px',
            marginRight: size === 'large' ? 'undefined ' : '4px',
            borderRadius: '50%',
            transition: 'transform 80ms',
            selectors: {
              ':hover': {
                backgroundColor: palette.skeColor.interactiveLight
              },
              ':focus': {
                backgroundColor: palette.skeColor.interactiveLight,
                border: "2px solid " + palette.skeColor.interactive,
                '::after': {
                  outline: "0 none !important",
                  borderRadius: '50%'
                }
              },
              ':active': {
                transform: 'translate(0,1px)'
              }
            }
          },
          '.ms-MessageBar-dismissal i': {
            fontSize: size === 'large' ? exports.IconFontSizes.xlarge : exports.IconFontSizes.large
          }
        }
      }]);
    };

    var MessageBar =
    /** @class */
    function (_super) {
      tslib.__extends(MessageBar, _super);

      function MessageBar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this.state = {
          hideMessageBar: false,
          showMessage: true
        };

        _this.setShowAlways = function () {
          _this.setState({
            showMessage: true,
            hideMessageBar: false
          });
        };

        _this.resetDurationMessage = function () {
          var duration = _this.props.duration;

          if (duration) {
            _this.setState({
              showMessage: true
            });
          }

          setTimeout(function () {
            _this.setState({
              hideMessageBar: true,
              showMessage: false
            });
          }, Number(duration) * 1000);

          _this.setState({
            hideMessageBar: false
          });
        };

        return _this;
      }

      MessageBar.prototype.componentDidMount = function () {
        var _this = this;

        var duration = this.props.duration;

        if (duration) {
          setTimeout(function () {
            _this.setState({
              hideMessageBar: true
            });
          }, Number(duration) * 1000);
        }
      };

      MessageBar.prototype.render = function () {
        var _this = this;

        var _a = this.state,
            showMessage = _a.showMessage,
            hideMessageBar = _a.hideMessageBar;

        var _b = this.props,
            _children = _b.children,
            actions = _b.actions;
            _b.onClick;
            _b.duration;
            var type = _b.type,
            onDismiss = _b.onDismiss,
            dismissButtonAriaLabel = _b.dismissButtonAriaLabel,
            isMultiline = _b.isMultiline,
            className = _b.className,
            id = _b.id,
            onRenderAfterDuration = _b.onRenderAfterDuration,
            props = tslib.__rest(_b, ["children", "actions", "onClick", "duration", "type", "onDismiss", "dismissButtonAriaLabel", "isMultiline", "className", "id", "onRenderAfterDuration"]);

        var afterDurationComponent = onRenderAfterDuration && onRenderAfterDuration(this.resetDurationMessage, this.setShowAlways);
        return jsxRuntime.jsxs("div", tslib.__assign({
          id: id
        }, {
          children: [hideMessageBar && jsxRuntime.jsx("div", {
            children: afterDurationComponent
          }, void 0), jsxRuntime.jsx(reactTransitionGroup.CSSTransition, tslib.__assign({
            "in": showMessage && !hideMessageBar,
            classNames: "fade",
            timeout: 300,
            unmountOnExit: true
          }, {
            children:
            /*
            // @ts-ignore TODO */
            function children(status) {
              return jsxRuntime.jsx(MessageBar$1, tslib.__assign({}, props, {
                className: classnames__default['default'](getClassNames$n(_this.props), status, className),
                actions: actions,
                messageBarType: type,
                onDismiss: onDismiss,
                isMultiline: isMultiline,
                "aria-describedby": id,
                role: "status",
                dismissButtonAriaLabel: dismissButtonAriaLabel
              }, {
                children: _children
              }), void 0);
            }
          }), void 0)]
        }), void 0);
      };

      MessageBar.Type = MessageBarType;
      MessageBar.Button = Button;
      MessageBar.defaultProps = {
        actions: undefined,
        isMultiline: true,
        onClick: undefined,
        size: 'default',
        type: MessageBar.Type.info,
        dismissButtonAriaLabel: 'Lukk'
      };
      return MessageBar;
    }(React__namespace.PureComponent);

    var Content = function Content(props) {
      var TitleElement = function TitleElement() {
        switch (props.headingLevel) {
          case 3:
            return jsxRuntime.jsx("h3", {
              children: props.heading
            }, void 0);

          case 4:
            return jsxRuntime.jsx("h4", {
              children: props.heading
            }, void 0);

          case 5:
            return jsxRuntime.jsx("h5", {
              children: props.heading
            }, void 0);

          case 6:
            return jsxRuntime.jsx("h6", {
              children: props.heading
            }, void 0);

          default:
            return jsxRuntime.jsx("h2", {
              children: props.heading
            }, void 0);
        }
      };

      return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [jsxRuntime.jsx(Icon, {
          iconName: props.icon
        }, void 0), /*#__PURE__*/React__namespace.isValidElement(props.heading) ? props.heading : jsxRuntime.jsx(TitleElement, {}, void 0), jsxRuntime.jsx("p", {
          children: props.description || props.children
        }, void 0)]
      }, void 0);
    };
    /*
     * visibleName NavigationContent (Innhold til forsideknapp)
     */


    var NavigationContent = function NavigationContent(props) {
      var renderContent = props.renderContent,
          id = props.id,
          className = props.className,
          icon = props.icon,
          heading = props.heading,
          description = props.description,
          children = props.children,
          useButtons = props.useButtons,
          headingLevel = props.headingLevel,
          htmlAttributes = tslib.__rest(props, ["renderContent", "id", "className", "icon", "heading", "description", "children", "useButtons", "headingLevel"]);

      var contentProps = {
        icon: icon,
        heading: heading,
        description: description,
        children: children,
        headingLevel: headingLevel
      };

      if (typeof props.to === 'function') {
        if (useButtons) {
          return jsxRuntime.jsx("button", tslib.__assign({
            onClick: props.to
          }, {
            children: jsxRuntime.jsx(Content, tslib.__assign({}, contentProps), void 0)
          }), void 0);
        } else {
          throw new Error('When property "to" is set as function you have to set "useButtons" to true');
        }
      }

      return jsxRuntime.jsx("li", tslib.__assign({
        id: id,
        className: className
      }, {
        children: renderContent ? renderContent(props.to, jsxRuntime.jsx(Content, tslib.__assign({}, contentProps), void 0)) : jsxRuntime.jsx("a", tslib.__assign({
          href: props.to
        }, htmlAttributes, {
          children: jsxRuntime.jsx(Content, tslib.__assign({}, contentProps), void 0)
        }), void 0)
      }), props.to);
    };

    function getType(props) {
      if (props.type === 'left') {
        return {
          display: 'block'
        };
      } else {
        return {};
      }
    }

    function getIcon(props) {
      if (props.alignIcon === 'right') {
        return {
          fontSize: '1.75rem',
          "float": 'right'
        };
      }

      return {
        fontSize: exports.FontSizes.superLarge,
        display: 'inherit',
        margin: "16px 0",
        textAlign: 'center',
        color: 'black'
      };
    }

    function getTitle(props) {
      var palette = getTheme().palette;

      if (props.alignTitle === 'left') {
        return {
          textAlign: 'left',
          margin: 0,
          marginBottom: '8px',
          color: palette.skeColor.blue
        };
      } else {
        return {};
      }
    }

    function getDescription(props) {
      var palette = getTheme().palette;

      if (props.alignDescription === 'left') {
        return {
          margin: 0,
          textAlign: 'left',
          lineHeight: '25px',
          color: palette.skeColor.blackAlt
        };
      } else {
        return {};
      }
    }

    var getClassNames$m = function getClassNames(props) {
      var palette = getTheme().palette;
      return mergeStyleSets({
        content: {
          selectors: {
            '& i': tslib.__assign({}, getIcon(props)),
            '& p': tslib.__assign({
              margin: 0,
              textAlign: 'center',
              lineHeight: '25px',
              color: palette.skeColor.blackAlt
            }, getDescription(props)),
            '& h2, h3, h4, h5, h6': tslib.__assign({
              textAlign: 'center',
              margin: 0,
              marginBottom: '8px',
              fontSize: '1.5rem',
              color: palette.skeColor.blue
            }, getTitle(props)),
            '&:active, &:focus, &:hover': {
              selectors: {
                h2: {
                  color: palette.skeColor.darkBlue
                }
              }
            }
          }
        },
        nav: {
          selectors: {
            '& a, & button': {
              border: '0',
              margin: 'auto'
            },
            '& button': tslib.__assign({
              backgroundColor: 'inherit'
            }, getTitle(props)),
            '& ul': tslib.__assign({
              display: 'flex',
              flexWrap: 'wrap',
              padding: 0,
              justifyContent: 'space-between'
            }, getType(props)),
            '& ul li': {
              borderBottom: "3px solid " + palette.skeColor.darkBlue,
              position: 'relative',
              textDecoration: 'none',
              listStyle: 'none',
              display: 'flex',
              marginBottom: '32px',
              flexBasis: '46%'
            },
            '& ul li > a, & ul li > button': {
              color: palette.skeColor.darkBlue,
              textDecoration: 'none',
              paddingBottom: '16px',
              paddingLeft: '16px',
              paddingRight: '16px',
              margin: '0 !important',
              width: '100%',
              transition: 'all 0.2s ease'
            },
            '& ul li > a:active, & ul li > a:focus, & ul li > a:hover, & ul li > button:active, & ul li > button:focus, & ul li > button:hover': {
              backgroundColor: palette.skeColor.lightBlue,
              outline: 'none',
              transition: 'background-color .2s'
            },
            '& ul li > a::after, & ul li > button::after': {
              content: '""',
              position: 'absolute',
              display: 'inline-block',
              left: 0,
              bottom: 0,
              backgroundColor: palette.skeColor.darkBlue,
              transition: 'height 0.1s',
              width: '100%',
              height: 0
            },
            '& ul li > a:focus:after, & ul li > a:hover:after, & ul li > button:focus:after, & ul li > button:hover:after': {
              height: 2
            },
            '@media (max-width: 1023px)': {
              selectors: {
                'ul li': {
                  flexBasis: '100%'
                }
              }
            }
          }
        }
      });
    };

    /*
     * visibleName NavigationTile (Forsideknapp)
     */

    var NavigationTile = function NavigationTile(props) {
      var children = props.children,
          contents = props.contents,
          className = props.className;
          props.type;
          props.alignIcon;
          props.alignTitle;
          props.alignDescription;
          var ariaLabel = props.ariaLabel,
          headingLevel = props.headingLevel,
          useButtons = props.useButtons,
          rest = tslib.__rest(props, ["children", "contents", "className", "type", "alignIcon", "alignTitle", "alignDescription", "ariaLabel", "headingLevel", "useButtons"]);

      var styles = getClassNames$m(props);
      return jsxRuntime.jsx("nav", tslib.__assign({
        "aria-label": ariaLabel
      }, rest, {
        className: classnames__default['default'](styles.nav, getClassNames$m(props), className)
      }, {
        children: jsxRuntime.jsxs("ul", {
          children: [contents && contents.map(function (_a, index) {
            var rest = tslib.__rest(_a, []);

            return jsxRuntime.jsx(NavigationContent, tslib.__assign({
              className: styles.content,
              headingLevel: headingLevel,
              useButtons: useButtons
            }, rest), index + '.' + rest.to);
          }), React__namespace.Children.map(children, function (child, index) {
            if ( /*#__PURE__*/React__namespace.isValidElement(child)) {
              return jsxRuntime.jsx(NavigationContent, tslib.__assign({
                className: styles.content,
                headingLevel: headingLevel,
                useButtons: useButtons
              }, child.props, {
                children: child.props.children
              }), index + '.' + child.props.to);
            }
          })]
        }, void 0)
      }), void 0);
    };
    NavigationTile.defaultProps = {
      alignDescription: 'center',
      alignIcon: 'center',
      alignTitle: 'center',
      type: 'center'
    };

    function getClassNames$l(props) {
      var compact = props.compact,
          iconRight = props.iconRight,
          underline = props.underline;
      return mergeStyleSets({
        toggleButton: {
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'flex-start',
          border: 'none',
          color: designtokenColors['ske-color-interactive'],
          fontSize: compact ? designtokenFontSizes['ske-font-size-s'] : designtokenFontSizes['ske-font-size-l'],
          fontWeight: designtokenFontSizes['ske-font-weight-bold'],
          padding: compact ? designtokenSpacing['ske-spacing-xs'] + " " + designtokenSpacing['ske-spacing-sm'] : designtokenSpacing['ske-spacing-sm'] + " " + designtokenSpacing['ske-spacing-md'],
          background: 'none',
          marginLeft: "-" + designtokenSpacing['ske-spacing-md'],
          paddingLeft: designtokenSpacing['ske-spacing-md'],
          marginRight: "-" + designtokenSpacing['ske-spacing-md'],
          paddingRight: designtokenSpacing['ske-spacing-md'],
          cursor: 'pointer',
          borderBottom: designtokenSpacing['ske-spacing-xs'] + " solid transparent",
          selectors: {
            '&:hover, &:focus': {
              background: designtokenColors['ske-color-interactive-light'],
              borderBottom: designtokenSpacing['ske-spacing-xs'] + " solid " + designtokenColors['ske-color-interactive'],
              span: {
                textDecoration: 'none'
              }
            },
            '&:focus': {
              outline: 'none'
            },
            '& h1.styledHeading, h2.styledHeading, h3.styledHeading, h4.styledHeading, h5.styledHeading, h6.styledHeading': {
              fontSize: compact ? designtokenFontSizes['ske-font-size-s'] : designtokenFontSizes['ske-font-size-l'],
              margin: '0'
            },
            '& i': {
              transition: '.2s',
              padding: compact ? designtokenSpacing['ske-spacing-xs'] + " 0 0" : '0',
              marginLeft: iconRight ? designtokenSpacing['ske-spacing-sm'] : '0',
              marginTop: compact ? '0' : designtokenSpacing['ske-spacing-xs'],
              fontSize: compact ? designtokenFontSizes['ske-font-size-icon-l'] : designtokenFontSizes['ske-font-size-icon-xl']
            }
          }
        },
        content: {
          padding: designtokenSpacing['ske-spacing-md'],
          marginLeft: compact ? designtokenSpacing['ske-spacing-lg'] : designtokenSpacing['ske-spacing-xl'],
          marginBottom: designtokenSpacing['ske-spacing-md']
        },
        contentWhenIconRight: {
          padding: designtokenSpacing['ske-spacing-md'] + " 0",
          marginLeft: compact ? designtokenSpacing['ske-spacing-lg'] : designtokenSpacing['ske-spacing-xl'],
          marginBottom: designtokenSpacing['ske-spacing-md']
        },
        heading: {
          fontSize: compact ? designtokenFontSizes['ske-font-size-s'] : designtokenFontSizes['ske-font-size-l'],
          margin: '0'
        },
        toggleTitleSpan: {
          textDecoration: underline ? 'underline' : 'none',
          textDecorationColor: 'rgba(19, 98, 174, 0.4)',
          textUnderlineOffset: '0.3rem',
          textDecorationThickness: '0.125rem',
          lineHeight: designtokenFontSizes['ske-line-height-l'],
          textAlign: 'left'
        },
        toggleTitleLeft: {
          paddingLeft: compact ? designtokenSpacing['ske-spacing-sm'] : designtokenSpacing['ske-spacing-md']
        },
        toggleButtonOpen: {
          selectors: {
            '& i': {
              transform: 'rotate(180deg)'
            }
          }
        }
      });
    }

    var OpenClose = function OpenClose(props) {
      var title = props.title,
          customClassNames = props.customClassNames,
          headingLevel = props.headingLevel,
          iconRight = props.iconRight,
          onClick = props.onClick,
          _a = props.isOnClickOnlyFiredOnOpen,
          isOnClickOnlyFiredOnOpen = _a === void 0 ? true : _a,
          children = props.children;

      var _b = React__namespace.useState(props.isOpen || false),
          isContentOpen = _b[0],
          setContentOpen = _b[1];

      var toggleVisibility = function toggleVisibility() {
        return setContentOpen(!isContentOpen);
      };

      var clickHandler = function clickHandler() {
        if (onClick) {
          if (isOnClickOnlyFiredOnOpen) {
            if (!isContentOpen) {
              onClick();
            }
          } else {
            onClick();
          }
        }

        toggleVisibility();
      };

      var styles = getClassNames$l(props);
      return jsxRuntime.jsxs("div", tslib.__assign({
        className: customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.wrapper
      }, {
        children: [jsxRuntime.jsxs("button", tslib.__assign({
          className: isContentOpen ? classnames__default['default'](styles.toggleButton, styles.toggleButtonOpen, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.button) : classnames__default['default'](styles.toggleButton, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.button),
          "aria-expanded": isContentOpen,
          onClick: clickHandler
        }, {
          children: [!iconRight && jsxRuntime.jsx(Icon, {
            iconName: 'ChevronDown'
          }, void 0), jsxRuntime.jsx("span", tslib.__assign({
            className: iconRight ? styles.toggleTitleSpan : classnames__default['default'](styles.toggleTitleSpan, styles.toggleTitleLeft)
          }, {
            children: headingLevel && title ? jsxRuntime.jsx(Heading, {
              text: title,
              level: headingLevel,
              className: "styledHeading"
            }, void 0) : title
          }), void 0), iconRight && jsxRuntime.jsx(Icon, {
            iconName: 'ChevronDown'
          }, void 0)]
        }), void 0), isContentOpen && jsxRuntime.jsx("div", tslib.__assign({
          className: !iconRight ? classnames__default['default'](styles.content, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.content) : classnames__default['default'](styles.contentWhenIconRight, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.content)
        }, {
          children: children
        }), void 0)]
      }), void 0);
    };
    OpenClose.defaultProps = {
      underline: false,
      iconRight: false
    };

    var getClassNames$k = function getClassNames() {
      var palette = getTheme().palette;
      return mergeStyleSets({
        activePage: {
          color: palette.skeColor.darkGrey + " !important",
          borderBottom: 'none !important',
          paddingTop: '3px !important',
          paddingBottom: '6px !important'
        },
        linkIcons: {
          fontSize: exports.FontSizes.xLarge,
          verticalAlign: 'middle'
        },
        pageNumber: {
          borderBottom: "2px solid " + palette.skeColor.lightBlue + " !important",
          paddingTop: '3px !important'
        },
        paginationContainer: {
          paddingTop: '24px',
          fontSize: exports.FontSizes.medium,
          selectors: {
            button: {
              border: 'none',
              background: 'transparent',
              fontSize: exports.FontSizes.medium
            },
            nav: {
              "float": 'right',
              selectors: {
                '@media only screen and (max-width: 479px)': {
                  margin: '0 auto',
                  "float": 'none'
                }
              }
            },
            p: {
              marginTop: '7px',
              "float": 'left',
              selectors: {
                '@media only screen and (max-width: 479px)': {
                  margin: '0 auto',
                  "float": 'none'
                }
              }
            },
            ul: {
              listStyle: 'none',
              display: 'inline-flex',
              paddingLeft: '0',
              margin: 0
            },
            li: {
              display: 'inline',
              selectors: {
                button: {
                  color: palette.skeColor.blue,
                  fontWeight: 'bold',
                  padding: '3px 1px 3px 1px',
                  margin: '4px 6px ',
                  cursor: 'pointer',
                  verticalAlign: 'middle'
                },
                'button:focus': {
                  color: palette.skeColor.darkBlue,
                  backgroundColor: palette.skeColor.lightBlue,
                  outline: 'none'
                },
                'button:hover': {
                  color: palette.skeColor.darkBlue,
                  backgroundColor: palette.skeColor.lightBlue
                }
              }
            },
            '@media only screen and (max-width: 479px)': {
              display: 'grid'
            }
          }
        }
      });
    };

    var getNumberOfPages = function getNumberOfPages(total, pageSize) {
      return Math.ceil(total / pageSize);
    };

    var range = function range(start, end, pagesDisplayed) {
      return tslib.__spreadArray([], new Array(pagesDisplayed < end ? pagesDisplayed : end)).filter(function (v, k) {
        return !(k + start > end);
      }).map(function (v, k) {
        return k + start;
      });
    };

    var getSlidingWindowEdges = function getSlidingWindowEdges(currentPage, total, pageSize, pagesDisplayed) {
      var numberOfPages = getNumberOfPages(total, pageSize);

      if (numberOfPages <= pagesDisplayed) {
        return {
          startPage: 1,
          endPage: numberOfPages
        };
      }

      var startPage = currentPage - (pagesDisplayed - 1);

      if (currentPage <= pagesDisplayed) {
        startPage = 1;
      }

      var endPage = startPage + (pagesDisplayed - 1); // Funksjon for å sette currentPage midt i sidevelger

      if (endPage === currentPage && !(endPage >= numberOfPages)) {
        var addValue = Math.floor(pagesDisplayed / 2);
        endPage = endPage + addValue;
        startPage = startPage + addValue;
      }

      if (endPage > numberOfPages) {
        endPage = numberOfPages;
      }

      return {
        startPage: startPage,
        endPage: endPage
      };
    };
    /*
     * visibleName Pagination (Sidevelger)
     */

    var Pagination = function Pagination(props) {
      var ariaLabel = props.ariaLabel,
          ariaLabelNavigationLink = props.ariaLabelNavigationLink,
          ariaLabelNavigationLinkActive = props.ariaLabelNavigationLinkActive,
          className = props.className,
          nextLabel = props.nextLabel,
          onPageChange = props.onPageChange,
          pagesDisplayed = props.pagesDisplayed,
          previousLabel = props.previousLabel,
          total = props.total;
      var styles = getClassNames$k();

      var _a = React__namespace.useState(props.pageSize),
          pageSize = _a[0],
          setPageSize = _a[1];

      var _b = React__namespace.useState(props.currentPage),
          currentPage = _b[0],
          setCurrentPage = _b[1];

      var firstListObject = (currentPage - 1) * pageSize;
      var lastListObject = Math.min(firstListObject + pageSize, total);
      React__namespace.useEffect(function () {
        setCurrentPage(props.currentPage);
      }, [props.currentPage]);
      React__namespace.useEffect(function () {
        if (pageSize !== props.pageSize) {
          setCurrentPage(1);
        }

        setPageSize(props.pageSize);
      }, [props.pageSize, pageSize]);
      var view = lastListObject > total ? total : firstListObject + 1 + '-' + lastListObject;
      return jsxRuntime.jsxs("div", tslib.__assign({
        className: classnames__default['default'](styles.paginationContainer, className)
      }, {
        children: [jsxRuntime.jsx("p", tslib.__assign({
          "data-testid": "pagination-oppsummering"
        }, {
          children: "Viser " + view + " av " + total
        }), void 0), jsxRuntime.jsx("nav", tslib.__assign({
          "aria-label": ariaLabel ? ariaLabel : 'Sidenavigering'
        }, {
          children: jsxRuntime.jsxs("ul", {
            children: [currentPage > 1 && jsxRuntime.jsx(PreviousLink, {
              currentPage: currentPage,
              onClick: function onClick(page) {
                return onPageChange(page);
              },
              label: previousLabel ? previousLabel : 'Forrige'
            }, void 0), jsxRuntime.jsx("li", {
              children: jsxRuntime.jsx("ul", {
                children: jsxRuntime.jsx(Pages, {
                  onPageChange: onPageChange,
                  currentPage: currentPage,
                  total: total,
                  pagesDisplayed: pagesDisplayed,
                  pageSize: pageSize,
                  ariaLabelNavigationLink: ariaLabelNavigationLink,
                  ariaLabelNavigationLinkActive: ariaLabelNavigationLinkActive
                }, void 0)
              }, void 0)
            }, void 0), currentPage < getNumberOfPages(total, pageSize) && jsxRuntime.jsx(NextPage, {
              currentPage: currentPage,
              total: total,
              pageSize: pageSize,
              onClick: onPageChange,
              label: nextLabel ? nextLabel : 'Neste'
            }, void 0)]
          }, void 0)
        }), void 0)]
      }), void 0);
    };
    var NextPage = function NextPage(props) {
      var styles = getClassNames$k();
      return jsxRuntime.jsx("li", {
        children: jsxRuntime.jsxs("button", tslib.__assign({
          onClick: function onClick(evt) {
            evt.preventDefault();
            props.onClick(props.currentPage + 1);
          },
          role: "link"
        }, {
          children: [jsxRuntime.jsx("span", {
            children: props.label
          }, void 0), jsxRuntime.jsx(Icon, {
            iconName: "ChevronRight",
            className: styles.linkIcons
          }, void 0)]
        }), void 0)
      }, void 0);
    };
    var PreviousLink = function PreviousLink(props) {
      var styles = getClassNames$k();
      return jsxRuntime.jsx("li", {
        children: jsxRuntime.jsxs("button", tslib.__assign({
          onClick: function onClick(evt) {
            evt.preventDefault();
            props.onClick(props.currentPage - 1);
          },
          role: "link"
        }, {
          children: [jsxRuntime.jsx(Icon, {
            iconName: "ChevronLeft",
            className: styles.linkIcons
          }, void 0), props.label]
        }), void 0)
      }, void 0);
    };
    var Page = function Page(props) {
      var page = props.page,
          _onClick = props.onClick,
          isCurrent = props.isCurrent,
          ariaLabelNavigationLink = props.ariaLabelNavigationLink,
          ariaLabelNavigationLinkActive = props.ariaLabelNavigationLinkActive;
      var styles = getClassNames$k();

      var ariaLabel = function ariaLabel() {
        if (isCurrent) {
          return (ariaLabelNavigationLinkActive ? ariaLabelNavigationLinkActive : 'Side ') + page;
        }

        return (ariaLabelNavigationLink ? ariaLabelNavigationLink : 'Side ') + page;
      };

      return jsxRuntime.jsx("li", {
        children: jsxRuntime.jsx("button", tslib.__assign({
          onClick: function onClick(evt) {
            evt.preventDefault();

            _onClick(page);
          },
          className: isCurrent ? styles.activePage : styles.pageNumber,
          "aria-label": ariaLabel(),
          "aria-current": isCurrent,
          "aria-disabled": isCurrent,
          role: "link"
        }, {
          children: page
        }), void 0)
      }, void 0);
    };
    var Pages = function Pages(props) {
      var pagesDisplayed = props.pagesDisplayed || 3;
      var windowEdges = getSlidingWindowEdges(props.currentPage, props.total, props.pageSize, pagesDisplayed);
      return jsxRuntime.jsx("div", {
        children: range(windowEdges.startPage, windowEdges.endPage, pagesDisplayed).map(function (i) {
          return jsxRuntime.jsx(Page, {
            onClick: props.onPageChange,
            page: i,
            isCurrent: props.currentPage === i,
            ariaLabelNavigationLink: props.ariaLabelNavigationLink,
            ariaLabelNavigationLinkActive: props.ariaLabelNavigationLinkActive
          }, i);
        })
      }, void 0);
    };

    var getClassNames$j = function getClassNames(tag) {
      var palette = getTheme().palette;
      var primaryColor;

      switch (tag) {
        case 'INK':
          {
            primaryColor = palette.skeColor.green100;
            break;
          }

        case 'LSO':
          {
            primaryColor = palette.skeColor.black100;
            break;
          }

        default:
          {
            primaryColor = palette.skeColor.burgundy100;
            break;
          }
      }

      return mergeStyles([{
        displayName: 'SkeProgressBar',
        selectors: {
          '& .ms-ProgressIndicator-progressBar': {
            background: primaryColor,
            height: '16px'
          },
          '& .ms-ProgressIndicator-itemProgress': {
            height: '16px',
            padding: '0',
            border: "1px solid " + palette.skeColor.blackAlt,
            marginTop: '8px',
            marginBottom: '8px'
          },
          '& .ms-ProgressIndicator-progressTrack': {
            background: palette.skeColor.whiteGrey,
            height: '16px'
          },
          '& .ms-ProgressIndicator-itemDescription': {
            fontSize: exports.FontSizes.small
          }
        }
      }]);
    };

    /*
     * visibleName ProgressBar (Fremdriftsvisning)
     */

    var ProgressBar = function ProgressBar(props) {
      var className = props.className,
          rest = tslib.__rest(props, ["className"]);

      return jsxRuntime.jsx(BrandContext.Consumer, {
        children: function children(_a) {
          var tag = _a.tag;
          return jsxRuntime.jsx(ProgressIndicator, tslib.__assign({}, rest, {
            className: classnames__default['default'](getClassNames$j(tag), className)
          }), void 0);
        }
      }, void 0);
    };
    ProgressBar.defaultProps = {
      /** Overstyring av stiler */
      className: undefined,

      /** Beskrivelse som vises under fremdriftsindikatoren */
      description: undefined,

      /** Emne som vises over fremdriftsindikatoren */
      label: undefined,

      /** Prosent fullført (fra 0.00 til 1.00) */
      percentComplete: undefined
    };

    var getClassNames$i = function getClassNames(props) {
      var palette = getTheme().palette;
      var inset = -6;
      var errorMessage = props.errorMessage,
          horizontal = props.horizontal; // @ts-ignore //TODO

      return mergeStyleSets({
        fieldset: {
          border: 'none',
          padding: 0,
          margin: 0,
          width: '100%'
        },
        radioButtons: {
          selectors: {
            '::-moz-focus-inner': {
              border: '0'
            },
            '& .ms-ChoiceField-wrapper': {
              position: 'relative'
            },
            '& .ms-ChoiceField-field': {
              display: 'inline-block',
              marginTop: '4px',
              marginBottom: '4px',
              marginRight: horizontal ? '10px' : '0',
              position: 'relative',
              outline: 0,
              verticalAlign: 'middle'
            },
            '& .ms-ChoiceFieldGroup-flexContainer': {
              display: horizontal ? 'flex' : 'inline-block'
            },
            'span.ms-ChoiceFieldLabel': {
              fontSize: exports.FontSizes.medium,
              display: 'inline-block',
              paddingLeft: '26px',
              lineHeight: '1.5',
              marginTop: '-0.125rem'
            },
            'span.descriptionLabel': {
              fontSize: exports.FontSizes.smallPlus,
              color: palette.skeColor.darkGrey,
              lineHeight: exports.LineHeightSizes.xSmall,
              marginTop: '0'
            },
            '& .ms-ChoiceField-field::before': {
              content: '',
              display: 'inline-block',
              border: '2px solid' + palette.skeColor.black,
              position: 'absolute',
              boxShadow: "inset 0 0 0 8px " + palette.skeColor.white + " , inset 0 0 0 12px transparent",
              transition: 'box-shadow 80ms ease-out'
            },
            '& .ms-ChoiceField-field:hover::before': {
              boxShadow: "inset 0 0 0 3px " + palette.skeColor.white + " , inset 0 0 0 12px " + palette.skeColor.black
            },
            '& .ms-ChoiceField-field:hover::after': {
              border: 'none'
            },
            '.ms-ChoiceField-input': {
              backgroundColor: palette.skeColor.white,
              border: '2px solid' + palette.skeColor.blue
            },
            '.ms-ChoiceField-input:disabled + .ms-ChoiceField-field:hover::before': {
              boxShadow: "inset 0 0 0 3px " + palette.skeColor.white + " , inset 0 0 0 12px " + palette.skeColor.grey30
            },
            '.ms-ChoiceField-input:disabled + .ms-ChoiceField-field::before': {
              color: palette.skeColor.lightGrey,
              backgroundColor: palette.skeColor.white,
              border: '2px solid' + palette.skeColor.lightGrey
            },
            '.ms-ChoiceField-input:checked + .ms-ChoiceField-field::before': {
              backgroundColor: palette.skeColor.white,
              border: '2px solid' + palette.skeColor.blue,
              boxShadow: "inset 0 0 0 3px " + palette.skeColor.white + " , inset 0 0 0 12px " + palette.skeColor.blue
            },
            '.ms-ChoiceField-input:checked + .ms-ChoiceField-field::after': {
              border: 'none'
            },
            '& .ms-ChoiceField-wrapper.is-inFocus:after': {
              content: '""',
              position: 'absolute',
              left: inset,
              top: inset,
              bottom: inset,
              right: inset,
              outline: 'none',
              zIndex: 1,
              border: '2px solid' + palette.skeColor.blue
            },
            '& .ms-Label': {
              fontSize: exports.FontSizes.small,
              fontWeight: exports.FontWeights.regular
            },
            'span.ms-Label': {
              fontSize: exports.FontSizes.medium,
              fontWeight: exports.FontWeights.regular
            },
            '.ms-ChoiceFieldGroup-flexContainer': errorMessage && {
              border: '2px solid ' + palette.skeColor.error,
              padding: '0em 1em 0.75em 0.5em',
              marginTop: '8px'
            },
            '.ms-ChoiceField-field::before': errorMessage && {
              content: '',
              display: 'inline-block',
              border: '2px solid' + palette.skeColor.error,
              position: 'absolute'
            },
            '& .ms-Callout-main': props.calloutFloating !== undefined && !props.calloutFloating && {
              display: 'inline-block'
            }
          }
        }
      });
    };

    /*
     * visibleName RadioButtonGroup (Radioknapper)
     */

    var RadioButtonGroup = function RadioButtonGroup(props) {
      var calloutFloating = props.calloutFloating,
          children = props.children,
          className = props.className,
          errorMessage = props.errorMessage,
          help = props.help,
          warning = props.warning,
          id = props.id,
          _a = props.required,
          required = _a === void 0 ? false : _a,
          label = props.label,
          labelSize = props.labelSize,
          labelButtonAriaLabel = props.labelButtonAriaLabel,
          labelWithCalloutProps = props.labelWithCalloutProps,
          onCalloutToggle = props.onCalloutToggle,
          options = props.options,
          _b = props.requiredWithMark,
          requiredWithMark = _b === void 0 ? false : _b,
          rest = tslib.__rest(props, ["calloutFloating", "children", "className", "errorMessage", "help", "warning", "id", "required", "label", "labelSize", "labelButtonAriaLabel", "labelWithCalloutProps", "onCalloutToggle", "options", "requiredWithMark"]);

      var tempOptions = options;

      if (options) {
        options.forEach(function (option) {
          if (option.description) {
            option.onRenderLabel = DescriptionRender(option.description);
          }
        });
        tempOptions = options;
      }

      var styles = getClassNames$i(tslib.__assign({}, props));
      var generatedId = generateId();
      var mainId = id ? id : 'radiogroup-' + generatedId;
      var groupId = mainId + '-group';
      var labelId = mainId + '-label';
      return jsxRuntime.jsxs("fieldset", tslib.__assign({
        id: mainId,
        className: styles.fieldset
      }, {
        children: [jsxRuntime.jsx(LabelWithCallout, tslib.__assign({
          id: labelId,
          label: label,
          buttonAriaLabel: labelButtonAriaLabel,
          requiredMark: requiredWithMark,
          help: help,
          inputSize: labelSize,
          warning: warning,
          inFieldset: true,
          calloutFloating: calloutFloating,
          onCalloutToggle: onCalloutToggle
        }, labelWithCalloutProps), void 0), jsxRuntime.jsx(ChoiceGroup, tslib.__assign({
          id: groupId,
          options: tempOptions
        }, rest, {
          className: classnames__default['default'](styles.radioButtons, className),
          ariaLabelledBy: labelId,
          "aria-invalid": errorMessage ? true : false,
          required: required || requiredWithMark
        }, {
          children: children
        }), void 0), errorMessage && jsxRuntime.jsx(ErrorMessage, {
          children: errorMessage
        }, void 0)]
      }), void 0);
    };

    var DescriptionRender = function DescriptionRender(description) {
      return function (p) {
        return jsxRuntime.jsxs("div", tslib.__assign({
          style: {
            display: 'flex',
            flexDirection: 'column'
          }
        }, {
          children: [jsxRuntime.jsxs("span", tslib.__assign({
            id: p.labelId,
            className: "ms-ChoiceFieldLabel"
          }, {
            children: [' ', p.text, ' ']
          }), void 0), jsxRuntime.jsxs("span", tslib.__assign({
            className: 'descriptionLabel ms-ChoiceFieldLabel'
          }, {
            children: [' ', description, ' ']
          }), void 0)]
        }), void 0);
      };
    };

    var getClassNames$h = function getClassNames(props) {
      var _a, _b, _c;

      var whiteBackground = designtokenColors['ske-color-white-100'];
      var hoverBackground = designtokenColors['ske-color-interactive-light'];
      var color = designtokenColors['ske-color-interactive'];
      var overrideMaxWidth = props.containerMaxWidth; // @ts-ignore TODO

      return mergeStyleSets({
        topcontainer: {
          width: '100%',
          marginTop: '40px',
          zIndex: 2,
          visibility: 'hidden',
          selectors: (_a = {}, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-lg'] + ")"] = {
            position: 'fixed',
            top: 0,
            right: 0
          }, _a)
        },
        container: {
          position: 'relative !important',
          margin: '0 auto',
          opacity: 0,
          transition: '0.2s',
          selectors: (_b = {}, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-lg'] + ")"] = {
            maxWidth: overrideMaxWidth ? overrideMaxWidth : "" + designtokenBreakpoints['ske-breakpoint-lg']
          }, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-xl'] + ")"] = {
            maxWidth: overrideMaxWidth ? overrideMaxWidth : "" + designtokenBreakpoints['ske-breakpoint-xl']
          }, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-xxl'] + ")"] = {
            maxWidth: overrideMaxWidth ? overrideMaxWidth : "" + designtokenBreakpoints['ske-breakpoint-xxl']
          }, _b)
        },
        box: {
          marginTop: 0,
          selectors: (_c = {}, _c["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-lg'] + ")"] = {
            top: '80vh',
            position: 'absolute',
            right: 0
          }, _c)
        },
        actionButton: {
          display: 'block',
          textDecoration: 'none !important',
          textAlign: 'center',
          margin: designtokenSpacing['ske-spacing-xl'] + " auto",
          selectors: {
            '.ms-Button-flexContainer': {
              flexDirection: 'initial',
              justifyContent: 'center'
            },
            ':hover .ms-Button-flexContainer > div': {
              backgroundColor: hoverBackground
            }
          }
        },
        icon: {
          fontSize: '1.375rem',
          color: color,
          display: 'inline',
          lineHeight: '0.8'
        },
        iconFixateContainer: {
          background: whiteBackground,
          borderColor: color,
          borderWidth: '2px',
          borderStyle: 'solid',
          borderRadius: '50%',
          height: '30px',
          width: '30px',
          position: 'absolute'
        },
        iconFixate: {
          position: 'absolute',
          top: '0.4em',
          left: '0.25em'
        },
        label: {
          fontSize: designtokenFontSizes['ske-font-size-icon-s'],
          fontWeight: 700,
          textAlign: 'center',
          marginTop: '40px',
          backgroundColor: 'white !important',
          borderRadius: '10px',
          color: color,
          padding: '2px 15px',
          zIndex: 1
        },
        vis: {
          visibility: 'visible',
          opacity: '1 !important',
          transform: 'translateY(-15px)'
        }
      });
    };

    /*
     * visibleName ScrollToTopButton (Gå til toppen)
     */

    var ScrollToTopButton =
    /** @class */
    function (_super) {
      tslib.__extends(ScrollToTopButton, _super);

      function ScrollToTopButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this.state = {
          skjult: true
        };

        _this.sjekkSkjulKnapp = function () {
          var skjult = _this.state.skjult;
          window.scrollY === 0 ? !skjult && _this.setState({
            skjult: true
          }) : skjult && _this.setState({
            skjult: false
          });
        };

        return _this;
      }

      ScrollToTopButton.prototype.componentDidMount = function () {
        window.addEventListener('scroll', this.sjekkSkjulKnapp);
        this.sjekkSkjulKnapp();
      };

      ScrollToTopButton.prototype.componentWillUnmount = function () {
        window.removeEventListener('scroll', this.sjekkSkjulKnapp);
      };

      ScrollToTopButton.prototype.render = function () {
        var _a = this.props,
            id = _a.id,
            customClassNames = _a.customClassNames,
            label = _a.label; // @ts-ignore TODO

        var styles = getClassNames$h(this.props);
        var visKlasse = this.state.skjult ? '' : styles.vis;
        return jsxRuntime.jsx("div", tslib.__assign({
          id: id,
          className: classnames__default['default'](styles.topcontainer, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.topContainer),
          "aria-hidden": "true"
        }, {
          children: jsxRuntime.jsx("div", tslib.__assign({
            className: classnames__default['default'](styles.container, visKlasse, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.container)
          }, {
            children: jsxRuntime.jsx("div", tslib.__assign({
              className: classnames__default['default'](styles.box, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.box)
            }, {
              children: jsxRuntime.jsxs(ActionButton, tslib.__assign({
                className: classnames__default['default'](styles.actionButton, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.button),
                ariaLabel: label,
                onClick: function onClick() {
                  return window.scrollTo(0, 0);
                }
              }, {
                children: [jsxRuntime.jsx("div", tslib.__assign({
                  className: classnames__default['default'](styles.iconFixateContainer, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.iconContainer)
                }, {
                  children: jsxRuntime.jsx("div", tslib.__assign({
                    className: styles.iconFixate
                  }, {
                    children: jsxRuntime.jsx(Icon, {
                      className: classnames__default['default'](styles.icon, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.icon),
                      iconName: 'MoveUp'
                    }, void 0)
                  }), void 0)
                }), void 0), jsxRuntime.jsx("div", tslib.__assign({
                  className: classnames__default['default'](styles.label, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.label)
                }, {
                  children: label
                }), void 0)]
              }), void 0)
            }), void 0)
          }), void 0)
        }), void 0);
      };

      ScrollToTopButton.defaultProps = {
        label: 'Til toppen',
        containerMaxWidth: undefined
      };
      return ScrollToTopButton;
    }(React__namespace.PureComponent);

    var getClassNames$g = function getClassNames(props) {
      var palette = getTheme().palette;
      var border = props.border,
          searchFieldSize = props.searchFieldSize,
          onSearchIcon = props.onSearchIcon;
      var largeSize = searchFieldSize === 'large';
      var standardSize = searchFieldSize === 'standard';
      return mergeStyleSets({
        //@ts-ignore
        blackAlt: {
          color: palette.skeColor.blackAlt + " !important"
        },
        hiddenUl: {
          position: 'absolute',
          width: '1px',
          height: '1px',
          padding: 0,
          margin: '-1px',
          overflow: 'hidden',
          clip: 'rect(0,0,0,0)',
          whiteSpace: 'nowrap',
          border: 0
        },
        searchList: {
          listStyleType: 'none !important',
          padding: '0px',
          marginTop: '0px',
          marginBottom: '11px',
          border: "1px solid " + palette.skeColor.black
        },
        searchListDropdown: {
          top: '-1px',
          borderTop: 0,
          position: 'relative',
          selectors: {
            ul: {
              margin: 0,
              position: 'absolute',
              left: 0,
              top: '100%',
              width: '99.5%',
              zIndex: 10
            },
            li: {
              background: palette.skeColor.white,
              cursor: 'pointer',
              color: palette.skeColor.blackAlt,
              padding: '3px 9px 3px 9px',
              selectors: {
                ':hover': {
                  background: palette.skeColor.lightBlue,
                  textDecoration: 'underline'
                },
                ':active': {
                  background: palette.skeColor.lightBlue,
                  textDecoration: 'none'
                },
                ':focus': {
                  background: palette.skeColor.lightBlue,
                  textDecoration: 'underline'
                }
              }
            }
          }
        },
        srOnly: {
          position: 'absolute',
          width: '1px',
          height: '1px',
          padding: 0,
          margin: '-1px',
          overflow: 'hidden',
          clip: 'rect(0,0,0,0)',
          whiteSpace: 'nowrap',
          border: 0
        },
        main: {
          displayName: 'SkeSearchField',
          selectors: {
            '&.ms-SearchBox': {
              borderRadius: '0px',
              height: largeSize ? 48 : 32,
              border: border === 'slim' ? "1px solid " + palette.skeColor.black : "2px solid " + palette.skeColor.black,
              position: 'relative',
              fontSize: largeSize ? exports.FontSizes.large : exports.FontSizes.medium
            },
            '&.is-disabled.ms-SearchBox': {
              borderColor: palette.skeColor.lightGrey,
              borderStyle: 'solid',
              borderWidth: '1px',
              backgroundColor: palette.skeColor.neutralGrey
            },
            '&.is-active.ms-SearchBox': {
              border: "1px solid " + palette.skeColor.blue,
              outline: 'none',
              boxSizing: 'border-box',
              selectors: {
                '.ms-SearchBox-field': {
                  padding: border === 'slim' ? '5px 25px 5px 5px' : '5px 25px 5px 6px'
                },
                '.ms-SearchBox-iconContainer': {
                  right: standardSize ? 0 : 1,
                  top: standardSize ? 7 : 6
                }
              }
            },
            '& .ms-SearchBox-field': {
              outline: 'none',
              fontWeight: 'inherit',
              fontFamily: 'inherit',
              fontSize: 'inherit',
              padding: '5px 30px 5px 5px'
            },
            '& .ms-SearchBox-iconContainer': {
              position: 'absolute',
              right: 0,
              top: largeSize ? 5 : 7
            },
            '& .ms-SearchBox-iconContainer:hover': {
              border: 'none'
            },
            '&.is-disabled.ms-SearchBox i': {
              color: palette.skeColor.darkGrey
            },
            '&.is-disabled.ms-SearchBox input': {
              cursor: 'not-allowed',
              color: palette.skeColor.blackAlt
            },
            '& .ms-SearchBox-icon': {
              position: 'absolute',
              color: onSearchIcon ? palette.skeColor.blue : palette.skeColor.blackAlt,
              right: 10,
              top: largeSize ? 5 : 0,
              border: 'none',
              boxSizing: 'border-box',
              fontSize: largeSize ? exports.FontSizes.xLarge : exports.FontSizes.medium,
              opacity: 1,
              outline: 'none',
              cursor: onSearchIcon ? 'pointer' : 'default',
              pointerEvents: 'all !important',
              selectors: {
                ':hover': {
                  background: onSearchIcon && palette.skeColor.lightBlue
                }
              }
            },
            '& .ms-SearchBox-clearButton': {
              display: 'none'
            },
            '& .ms-Button': {
              display: 'none'
            },
            'input[type=search]': {
              WebkitAppearance: 'textfield'
            },
            'input[type=search]::-webkit-search-cancel-button': {
              WebkitAppearance: 'none'
            },
            'input[type="search"]::-webkit-search-decoration': {
              WebkitAppearance: 'none'
            },
            'input[type=search]::-ms-clear': {
              display: 'none',
              width: 0,
              height: 0
            }
          }
        }
      });
    };

    var searchInList = function searchInList(options, filterText) {
      var regex = /[\s.,:-]+/g;
      return options.filter(function (option) {
        return option.text.replace(regex, '').toLowerCase().indexOf(filterText.replace(regex, '').toLowerCase()) > -1;
      }).map(function (option) {
        return option;
      });
    };

    var limitNumberOfResults = function limitNumberOfResults(list, limit) {
      if (limit && !isNaN(limit)) {
        return list.slice(0, limit);
      }

      return list;
    };
    /*
     * visibleName SearchField (Søkefelt)
     */


    var SearchField = function SearchField(props) {
      var className = props.className,
          help = props.help,
          id = props.id,
          label = props.label,
          labelButtonAriaLabel = props.labelButtonAriaLabel,
          labelWithCalloutProps = props.labelWithCalloutProps,
          language = props.language,
          onCalloutToggle = props.onCalloutToggle,
          _onChange = props.onChange,
          onSelected = props.onSelected,
          options = props.options,
          limit = props.limit,
          _a = props.keyboardShortcut,
          keyboardShortcut = _a === void 0 ? false : _a,
          _b = props.searchShortcutKeys,
          searchShortcutKeys = _b === void 0 ? 'ctrl+f' : _b,
          onSearchIcon = props.onSearchIcon,
          _c = props.searchIconTitle,
          searchIconTitle = _c === void 0 ? 'Søk' : _c,
          rest = tslib.__rest(props, ["className", "help", "id", "label", "labelButtonAriaLabel", "labelWithCalloutProps", "language", "onCalloutToggle", "onChange", "onSelected", "options", "limit", "keyboardShortcut", "searchShortcutKeys", "onSearchIcon", "searchIconTitle"]);

      var _searchBoxElement = /*#__PURE__*/React.createRef();

      var _componentRef = React.useRef(null);

      var _d = React.useState(false),
          dropdownVisible = _d[0],
          setDropdownVisible = _d[1];

      var _e = React.useState(options),
          searchResultList = _e[0],
          setSearchResultList = _e[1];

      var _f = React.useState(props.value),
          value = _f[0],
          setValue = _f[1];

      var _g = React.useState(-1),
          focus = _g[0],
          setFocus = _g[1];

      var _h = React.useState(false),
          hasSelected = _h[0],
          setHasSelected = _h[1];

      var styles = getClassNames$g(props);
      var listRefs = React.useRef([]);
      var genratedId = generateId();
      var mainId = id ? id : 'searchfield-' + genratedId;
      var inputId = mainId + '-input';
      var labelId = mainId + '-label';
      var srFocus = mainId + '-srFocus';
      var resultsId = mainId + '-results';

      if (language) {
        i18n__default['default'].changeLanguage(language);
      }

      var setSearchResult = React.useCallback(function (newValue) {
        if (options && newValue && !hasSelected) {
          var newList = searchInList(options, newValue);
          newList = limitNumberOfResults(newList, limit);
          setSearchResultList(newList);
          setDropdownVisible(newList.length > 0);
          listRefs.current = [];
          setFocus(-1);
        }
      }, [limit, options, hasSelected]);
      React.useEffect(function () {
        setSearchResultList(options);
        setSearchResult(value ? value : '');
      }, [options, setSearchResult, value]);
      React.useEffect(function () {
        setValue(props.value);
      }, [props.value]);
      React.useEffect(function () {
        document.addEventListener('mousedown', handleClickOutside);
        return function () {
          // Unbind the event listener on clean up
          document.removeEventListener('mousedown', handleClickOutside);
        };
      });
      useHotkeys(searchShortcutKeys, function (ev) {
        var _a;

        if (keyboardShortcut) {
          ev.preventDefault();
          return (_a = _componentRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
      });

      var selectEvent = function selectEvent(item) {
        setValue(!onSelected ? item.text : '');
        onSelected && onSelected(item);
        setHasSelected(true);
        setDropdownVisible(false);
        setFocus(-1);
        listRefs.current = [];
      };

      var handleOnKeyDown = function handleOnKeyDown(ev) {
        if (dropdownVisible && listRefs.current) {
          var newFocus = focus;

          if (ev.key === 'ArrowUp') {
            ev.preventDefault();
            newFocus > 0 && newFocus--;
          } else if (ev.key === 'ArrowDown') {
            ev.preventDefault();
            newFocus < listRefs.current.length && newFocus++;
          } else if (ev.key === 'Escape') {
            setDropdownVisible(false);
            _componentRef.current && _componentRef.current.focus();
          }

          if (newFocus !== focus && newFocus <= listRefs.current.length - 1) {
            var focusItem = listRefs.current[newFocus];
            focusItem && focusItem.focus();
            setFocus(newFocus);
          }
        }
      };

      var handleClickOutside = function handleClickOutside(event) {
        var contains = listRefs.current.filter(function (ref) {
          return ref && ref.contains(event.target);
        });

        if (!contains.length && _searchBoxElement.current && !_searchBoxElement.current.contains(event.target)) {
          setDropdownVisible(false);
        }
      };

      var handleBlur = function handleBlur(event) {
        if (event.relatedTarget && !event.currentTarget.contains(event.relatedTarget)) {
          if (!event.currentTarget.parentNode || !event.currentTarget.parentNode.contains(event.relatedTarget)) {
            setDropdownVisible(false);
          }

          setFocus(-1);
        }
      };

      var renderSuggestions = function renderSuggestions(list) {
        if (list.length === 0) {
          listRefs.current = [];
        }

        return jsxRuntime.jsx("div", tslib.__assign({
          className: styles.searchListDropdown,
          onBlur: handleBlur
        }, {
          children: jsxRuntime.jsx("ul", tslib.__assign({
            id: resultsId,
            role: "listbox",
            className: dropdownVisible && list.length ? styles.searchList : styles.hiddenUl
          }, {
            children: list.map(function (listItem, key) {
              return dropdownVisible ? jsxRuntime.jsx("li", tslib.__assign({
                "aria-label": listItem.text,
                onClick: function onClick() {
                  return selectEvent(listItem);
                },
                onFocus: function onFocus() {
                  setFocus(key);
                },
                onKeyDown: function onKeyDown(ev) {
                  if (ev.key === 'Enter' || ev.key === ' ') {
                    selectEvent(listItem);
                  } else {
                    handleOnKeyDown(ev);
                  }
                },
                ref: function ref(_ref) {
                  if (_ref && listRefs.current.indexOf(_ref) === -1) {
                    listRefs.current.splice(key, 0, _ref);
                  }
                },
                tabIndex: 0,
                role: "option",
                "aria-selected": key === focus
              }, {
                children: jsxRuntime.jsx("div", tslib.__assign({
                  title: listItem.text,
                  className: styles.blackAlt,
                  tabIndex: -1
                }, {
                  children: listItem.text
                }), void 0)
              }), listItem.key) : null;
            })
          }), void 0)
        }), void 0);
      };

      return jsxRuntime.jsxs("div", tslib.__assign({
        id: mainId
      }, {
        children: [jsxRuntime.jsx(LabelWithCallout, tslib.__assign({
          id: labelId,
          label: label,
          buttonAriaLabel: labelButtonAriaLabel,
          inputId: inputId,
          help: help,
          onCalloutToggle: onCalloutToggle
        }, labelWithCalloutProps), void 0), options ? jsxRuntime.jsxs("div", tslib.__assign({
          ref: _searchBoxElement
        }, {
          children: [jsxRuntime.jsx("span", tslib.__assign({
            id: srFocus,
            className: styles.srOnly
          }, {
            children: t('searchfield.sr.focus')
          }), void 0), jsxRuntime.jsx(SearchBox, tslib.__assign({}, rest, {
            onFocus: function onFocus(event) {
              event.target && event.target.select();
            },
            id: inputId,
            "aria-expanded": dropdownVisible,
            "aria-describedby": srFocus,
            "aria-owns": resultsId,
            type: 'search',
            className: classnames__default['default'](styles.main, className),
            onChange: function onChange(ev, newValue) {
              _onChange && _onChange(ev, newValue);
              setHasSelected(false);

              if (!newValue) {
                setDropdownVisible(false);
              } else {
                setSearchResult(newValue);
              }

              setValue(newValue);
            },
            onKeyDown: function onKeyDown(ev) {
              return handleOnKeyDown(ev);
            },
            value: value !== undefined ? value : '',
            componentRef: _componentRef,
            iconProps: {
              iconName: 'Filter',
              onClick: function onClick(ev) {
                return onSearchIcon ? onSearchIcon(ev) : null;
              }
            }
          }), void 0), jsxRuntime.jsx("span", tslib.__assign({
            "aria-live": "assertive",
            className: styles.srOnly
          }, {
            children: dropdownVisible ? i18n__default['default'].t('searchfield.sr.results', {
              ant: searchResultList ? searchResultList.length : 0
            }) : ''
          }), void 0), renderSuggestions(searchResultList)]
        }), void 0) : jsxRuntime.jsx(SearchBox, tslib.__assign({
          type: 'search'
        }, props, {
          id: inputId,
          className: classnames__default['default'](styles.main, className),
          componentRef: _componentRef,
          showIcon: true,
          iconProps: {
            onClick: function onClick(ev) {
              return onSearchIcon ? onSearchIcon(ev) : null;
            },
            title: onSearchIcon ? searchIconTitle : ''
          }
        }), void 0)]
      }), void 0);
    };
    SearchField.defaultProps = {
      border: 'default',
      searchFieldSize: 'standard'
    };

    var getStepContentPadding = function getStepContentPadding(stepType) {
      if (stepType === 'next') {
        return '10px 0';
      } else if (stepType === 'result') {
        return '20px 0';
      } else {
        return '0';
      }
    };

    var getStepContentInner = function getStepContentInner(stepType, activeStep, palette) {
      if (stepType !== 'result') {
        return {
          display: activeStep || stepType === 'next' ? 'block' : 'flex',
          width: '100%',
          margin: '0 0 8px 0',
          selectors: stepType !== 'next' ? {
            button: {
              right: 0,
              bottom: 0
            }
          } : {}
        };
      } else {
        return {
          selectors: {
            '@media  only screen and (max-width: 479px)': stepType === 'result' && {
              paddingBottom: '21px',
              borderBottom: 'none',
              borderTop: 'none'
            }
          }
        };
      }
    };

    var getClassNames$f = function getClassNames(props) {
      var palette = getTheme().palette;
      return mergeStyleSets({
        arrowLine: {
          "float": 'right',
          width: '21px',
          height: '2px',
          backgroundColor: palette.skeColor.lightGrey,
          position: 'absolute',
          bottom: 34,
          selectors: {
            '@media only screen and (max-width: 479px)': {
              top: 35,
              height: '1px'
            }
          }
        },
        containerStep: {
          margin: '0 auto'
        },
        content: {
          backgroundColor: palette.skeColor.white,
          padding: '0 0 15px 10px'
        },
        divider: {
          margin: '0 0 0 26px',
          border: 'solid',
          borderWidth: '1px',
          color: palette.skeColor.lightGrey,
          selectors: {
            '@media  only screen and (max-width: 479px)': {
              margin: '0 0 0 20px'
            }
          }
        },
        nextStep: {
          display: 'block'
        },
        numberWrapper: {
          paddingTop: props.stepType === 'result' ? '26px' : '10px',
          position: 'absolute',
          top: 0,
          bottom: 0,
          left: -8,
          selectors: {
            '@media only screen and (max-width: 479px)': {
              left: -4,
              paddingTop: '10px'
            }
          }
        },
        stepAction: {
          marginLeft: 'auto',
          height: 'calc(100% - 21px)',
          selectors: {
            '@media only screen and (max-width: 479px)': {
              position: 'absolute',
              height: 'auto',
              marginBottom: '12px'
            }
          }
        },
        stepContent: {
          display: 'flex',
          flexWrap: 'wrap',
          padding: getStepContentPadding(props.stepType),
          margin: props.stepType === 'next' ? '10px 0 0 32px' : '0 0 0 32px',
          position: 'relative',
          selectors: {
            p: {
              margin: '0 0 20px 0',
              selectors: {
                '@media only screen and (max-width: 479px)': {
                  margin: '0'
                }
              }
            },
            button: props.stepType !== 'next' && props.stepType !== 'result' && {
              selectors: {
                '@media only screen and (max-width: 479px)': {
                  fontSize: exports.FontSizes.smallPlus
                },
                i: {
                  selectors: {
                    '@media only screen and (max-width: 479px)': {
                      fontSize: 'inherit !important'
                    }
                  }
                }
              }
            },
            '@media only screen and (max-width: 479px)': {
              margin: props.stepType === 'next' ? '10px 0 0 26px' : '0 0 0 20px',
              padding: props.stepType === 'result' ? 0 : '0 0 20px 0',
              position: 'initial'
            }
          }
        },
        stepContentInner: getStepContentInner(props.stepType, props.activeStep),
        stepLine: {
          "float": 'right',
          width: 2,
          backgroundColor: palette.skeColor.lightGrey,
          position: 'absolute',
          top: 0,
          bottom: props.stepType === 'next' ? 34 : 0,
          left: props.stepType === 'result' ? '7px' : undefined,
          marginTop: '10px',
          height: props.stepType === 'result' ? '30px' : undefined,
          selectors: {
            '&::after': props.stepType === 'next' && {
              border: 'solid ' + palette.skeColor.lightGrey,
              borderWidth: '0 2px 2px 0',
              display: 'inline-block',
              padding: '3px',
              transform: 'rotate(-45deg)',
              width: '4px',
              height: '4px',
              content: '""',
              position: 'absolute',
              bottom: '-5px',
              left: '7px',
              selectors: {
                '@media only screen and (max-width: 479px)': {
                  borderWidth: '0 1px 1px 0',
                  margin: '20px 0 0 10px'
                }
              }
            },
            '@media only screen and (max-width: 479px)': {
              width: '1px',
              height: props.stepType === 'next' || props.stepType === 'result' ? '25px' : undefined
            }
          }
        },
        stepLineTop: {
          "float": 'right',
          width: 2,
          left: props.stepType === 'result' ? '7px' : undefined,
          height: '10px',
          backgroundColor: palette.skeColor.lightGrey,
          position: 'absolute',
          selectors: {
            '@media only screen and (max-width: 479px)': {
              width: 1,
              left: props.stepType === 'result' ? '8px' : undefined
            }
          }
        },
        stepList: {
          counterReset: 'step-counter',
          position: 'relative',
          backgroundColor: 'transparent',
          marginBottom: 20
        },
        stepNumber: {
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: palette.skeColor.white,
          border: 'solid',
          width: '30px',
          height: '30px',
          borderRadius: '50%',
          borderWidth: '2px',
          borderColor: palette.skeColor.black,
          fontSize: exports.FontSizes.large,
          fontWeight: exports.FontWeights.bold,
          selectors: {
            '&::after': {
              content: props.stepType !== 'result' ? 'counter(step-counter)' : '',
              color: '#000',
              selectors: {
                '@media only screen and (max-width: 479px)': {
                  fontSize: '0.875rem !important'
                }
              }
            },
            i: {
              marginTop: 1,
              selectors: {
                '@media only screen and (max-width: 479px)': {
                  fontSize: '1.25rem !important'
                }
              }
            },
            '@media only screen and (max-width: 479px)': {
              width: '20px',
              height: '20px',
              fontSize: exports.FontSizes.medium,
              marginTop: 1
            }
          }
        },
        title: {
          fontSize: exports.FontSizes.large,
          color: props.stepType === 'result' ? palette.skeColor.blackAlt : palette.skeColor.blue,
          margin: '0 0',
          marginTop: '8px !important',
          flex: '0 0 100%',
          selectors: {
            '@media only screen and (max-width: 479px)': {
              display: 'flex',
              fontSize: exports.FontSizes.medium,
              margin: props.stepType === 'result' ? 0 : undefined,
              paddingTop: props.stepType === 'result' ? '8px' : '0'
            }
          }
        },
        titleText: {
          selectors: {
            '@media only screen and (max-width: 479px)': {
              fontSize: exports.FontSizes.medium,
              paddingTop: props.stepType === 'result' ? '8px' : '0'
            }
          }
        },
        wrapperStep: {
          display: props.showStep ? 'block' : 'none',
          counterIncrement: 'step-counter',
          position: 'relative',
          padding: props.stepType === 'result' ? '0 17px' : '0 20px',
          border: props.stepType === 'result' ? "4px solid " + palette.skeColor.green : 'none',
          selectors: {
            '@media  only screen and (max-width: 479px)': {
              border: '0 none',
              outline: props.stepType === 'result' ? "4px solid " + palette.skeColor.green : 'none',
              outlineOffset: props.stepType === 'result' ? '0.75rem' : 'none',
              padding: '0 2px'
            }
          }
        }
      });
    };

    /*
     * visibleName StepList (Stegliste)
     */

    var StepList = function StepList(props) {
      var children = props.children,
          ariaLabel = props.ariaLabel,
          className = props.className;
      var styles = getClassNames$f(props);
      return jsxRuntime.jsx("div", tslib.__assign({
        role: "region",
        "aria-label": ariaLabel,
        className: classnames__default['default'](styles.stepList, className)
      }, {
        children: jsxRuntime.jsx(Grid, tslib.__assign({
          padding: "0"
        }, {
          children: React__default['default'].Children.map(children, function (child, index) {
            if ( /*#__PURE__*/React__default['default'].isValidElement(child)) return /*#__PURE__*/React__default['default'].cloneElement(child, {
              stepNumber: index + 1
            });
          })
        }), void 0)
      }), void 0);
    };

    var NumberIcon = function NumberIcon(props) {
      return jsxRuntime.jsx("div", tslib.__assign({
        className: props.styles.numberWrapper
      }, {
        children: jsxRuntime.jsx("div", tslib.__assign({
          className: props.styles.stepNumber
        }, {
          children: jsxRuntime.jsx("span", {
            children: props.stepType === 'result' ? jsxRuntime.jsx(Icon, {
              iconName: props.resultIcon,
              style: {
                fontSize: '24px'
              }
            }, void 0) : ''
          }, void 0)
        }), void 0)
      }), void 0);
    };

    var Step = function Step(props) {
      var _a;

      var stepTitle = props.stepTitle,
          stepNumber = props.stepNumber,
          children = props.children,
          stepId = props.stepId,
          resultIcon = props.resultIcon,
          className = props.className,
          stepType = props.stepType,
          actionBtn = props.actionBtn,
          gridSpacing = props.gridSpacing,
          _b = props.headingLevel,
          headingLevel = _b === void 0 ? 2 : _b;

      var _c = React__default['default'].useState(getClassNames$f(props)),
          styles = _c[0],
          setStyles = _c[1];

      var size = UseScreen();
      var headingId = stepId ? stepId + '-heading' : undefined;
      React__default['default'].useEffect(function () {
        setStyles(getClassNames$f(tslib.__assign(tslib.__assign({}, props), {
          showStep: typeof props.showStep === 'boolean' ? props.showStep : true,
          stepType: props.stepType || 'passive'
        })));
      }, [props]);
      return jsxRuntime.jsx("div", tslib.__assign({
        className: classnames__default['default'](styles.wrapperStep, className)
      }, {
        children: jsxRuntime.jsx(Grid.Row, tslib.__assign({
          rowSpacing: Grid.SPACE_NONE
        }, {
          children: jsxRuntime.jsx(Grid.Col, tslib.__assign({
            noSpacing: true
          }, {
            children: jsxRuntime.jsxs(Grid.Row, tslib.__assign({
              rowSpacing: Grid.SPACE_NONE
            }, {
              children: [gridSpacing && jsxRuntime.jsx(Grid.Col, {
                noSpacing: true,
                sm: 0,
                lg: 1,
                xxxl: 2
              }, void 0), jsxRuntime.jsxs(Grid.Col, tslib.__assign({
                sm: 12,
                lg: gridSpacing ? 10 : undefined,
                xxxl: gridSpacing ? 8 : undefined
              }, {
                children: [stepNumber && stepNumber > 1 && jsxRuntime.jsx("span", {
                  className: classnames__default['default'](styles.stepLineTop)
                }, void 0), jsxRuntime.jsx("span", {
                  className: classnames__default['default'](styles.stepLine)
                }, void 0), jsxRuntime.jsx("span", {
                  className: classnames__default['default']((_a = {}, _a[styles.arrowLine] = stepType === 'next', _a))
                }, void 0), stepType !== 'next' && jsxRuntime.jsx(NumberIcon, {
                  styles: styles,
                  resultIcon: resultIcon,
                  stepType: stepType
                }, void 0), stepType !== 'result' && jsxRuntime.jsx("hr", {
                  className: classnames__default['default'](styles.divider)
                }, void 0), jsxRuntime.jsx("div", tslib.__assign({
                  id: stepId
                }, {
                  children: jsxRuntime.jsxs("div", tslib.__assign({
                    className: styles.stepContent
                  }, {
                    children: [stepTitle && jsxRuntime.jsxs(Heading, tslib.__assign({
                      id: headingId,
                      text: stepTitle,
                      level: headingLevel,
                      tabIndex: stepId ? -1 : undefined,
                      className: styles.title
                    }, {
                      children: [!size.gt.sm && stepType !== 'next' && jsxRuntime.jsx(NumberIcon, {
                        styles: styles,
                        resultIcon: resultIcon,
                        stepType: stepType
                      }, void 0), jsxRuntime.jsx("span", tslib.__assign({
                        className: classnames__default['default'](styles.titleText)
                      }, {
                        children: stepTitle
                      }), void 0)]
                    }), void 0), jsxRuntime.jsxs("div", tslib.__assign({
                      className: styles.stepContentInner
                    }, {
                      children: [children, actionBtn && jsxRuntime.jsx(ActionButton, tslib.__assign({
                        icon: actionBtn.icon,
                        className: styles.stepAction,
                        onClick: actionBtn.event,
                        ariaLabel: actionBtn.ariaLabel
                      }, {
                        children: actionBtn.text
                      }), void 0)]
                    }), void 0)]
                  }), void 0)
                }), void 0)]
              }), void 0), gridSpacing && jsxRuntime.jsx(Grid.Col, {
                noSpacing: true,
                sm: 0,
                lg: 1,
                xxxl: 2
              }, void 0)]
            }), void 0)
          }), void 0)
        }), void 0)
      }), stepNumber);
    };

    var getClassNames$e = function getClassNames(props) {
      var fullWidth = props.fullWidth;
      var palette = getTheme().palette;
      return mergeStyleSets({
        SkeTable: {
          overflowX: 'auto'
        },
        tabell: {
          display: 'table',
          width: fullWidth ? '100%' : undefined,
          borderCollapse: 'collapse',
          textAlign: 'left',
          height: '1px'
        },
        tabellCaption: {
          textAlign: 'left'
        },
        tabellThead: {
          display: 'table-header-group'
        },
        tabellTheadRow: {
          verticalAlign: 'middle'
        },
        emptyTd: {
          borderBottom: "2px solid " + palette.skeColor.blackAlt
        }
      });
    };

    var getClassNames$d = function getClassNames(props, expandabledRowOpenWidth) {
      var _a, _b;

      var compactTable = props.compactTable;
      var palette = getTheme().palette;
      return mergeStyleSets({
        tableRow: {
          borderBox: 'box-sizing',
          verticalAlign: 'middle',
          selectors: {
            '&.tableRowIsClickable': {
              selectors: {
                ':hover': {
                  backgroundColor: palette.skeColor.lightBlue
                }
              }
            },
            '&.tableRowEditableAndOpen': {
              display: 'table-row'
            },
            '&.tableRowEditableAndClosed': {
              display: 'none'
            },
            '&.tableRowHasSeparator': {
              borderBottom: "1px solid " + palette.skeColor.lightGrey
            } //'&.tableRowIsExpandableAndOpen': {},

          }
        },
        expandableContent: {
          // Dette henter width'en fra parent-row slik at ekspandert innhold kan ta hele bredden
          width: expandabledRowOpenWidth ? expandabledRowOpenWidth - 5 + 'px' : '',
          padding: compactTable ? "" + designtokenSpacing['ske-spacing-sm'] : designtokenSpacing['ske-spacing-md'] + " 0",
          boxSizing: 'border-box',
          position: 'relative',
          zIndex: 99
        },
        tableCell: {
          fontWeight: designtokenFontSizes['ske-font-weight-regular'],
          padding: 0,
          // verticalAlign: 'inherit',
          verticalAlign: 'middle',
          selectors: {
            '&.tableCellAlignedRight': {
              justifyContent: 'flex-end',
              textAlign: 'right'
            },
            '&.tableCellAlignedCenter': {
              justifyContent: 'center',
              textAlign: 'center'
            },
            '&.tableCellIsSum': {
              textAlign: 'end',
              padding: designtokenSpacing['ske-spacing-lg']
            },
            '&.tableCellForExpandCollapseButton': {
              maxWidth: designtokenSpacing['ske-spacing-xl'],
              selectors: (_a = {}, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
                maxWidth: '3.125rem'
              }, _a)
            },
            '&.tableCellIsEditableRowClosed': {
              borderBottom: 'none'
            },
            '&.tableCellAboveExpandedArea': {
              borderBottom: 'none',
              verticalAlign: 'top'
            },
            '&.tableCellHiddenOnMobile': {
              display: 'none',
              selectors: (_b = {}, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
                display: 'table-cell'
              }, _b)
            },
            '&.tableCellHasSeparator': {
              borderBottom: "1px solid " + palette.skeColor.lightGrey
            }
          }
        },
        cellContent: {
          display: 'block',
          width: '100%',
          verticalAlign: 'middle',
          boxSizing: 'border-box',
          fontSize: compactTable ? designtokenFontSizes['ske-font-size-s'] : 'inherit',
          padding: designtokenSpacing['ske-spacing-md'] + " " + designtokenSpacing['ske-spacing-lg'],
          textAlign: 'inherit',
          selectors: {
            '&.cellContentSmall': {
              padding: designtokenSpacing['ske-spacing-xs'] + " " + designtokenSpacing['ske-spacing-lg']
            },
            '&.cellContentClickable': {
              paddingTop: designtokenSpacing['ske-spacing-md'],
              paddingBottom: designtokenSpacing['ske-spacing-md'],
              cursor: 'pointer'
            },
            '&.cellContentLarge': {
              padding: compactTable ? designtokenSpacing['ske-spacing-sm'] + " " + designtokenSpacing['ske-spacing-sm'] : designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-lg']
            },
            '&.cellContentChildRow': {
              padding: "0 " + designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-lg']
            },
            '&.cellContentAlignedRight': {
              /* justifyContent: 'flex-end',*/
              textAlign: 'right'
            },
            '&.cellContentAlignedCenter': {
              /* justifyContent: 'center',*/
              textAlign: 'center'
            },
            '&.cellContentAboveExpandedArea': {
              alignItems: 'start'
            },
            '&.cellContentHideEdit': {
              minHeight: designtokenSpacing['ske-spacing-mega']
            }
          }
        },
        // TO-DO hover og focus settes i riktig - avventer at bug om hover/focus på iconButton først fikses
        expandButton: {},
        expandButtonIsActive: {},
        editButton: {
          width: '100%',
          height: '100%',
          margin: 0,
          padding: 0,
          border: 'none',
          background: 'transparent',
          boxSizing: 'border-box',
          fontSize: 'inherit',
          textAlign: 'inherit'
        },
        emptyTd: {
          borderBottom: "2px solid " + palette.skeColor.blackAlt
        }
      });
    };

    /*
     * visibleName TableRow (Tabellrad)
     */

    var TableRow = function TableRow(props) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;

      var rowIndex = props.rowIndex,
          customClassNames = props.customClassNames,
          data = props.data,
          editableRows = props.editableRows,
          editableContent = props.editableContent,
          columns = props.columns,
          editModeActive = props.editModeActive,
          expandableContent = props.expandableContent,
          expandableModeActive = props.expandableModeActive,
          expandableRows = props.expandableRows,
          expandIconPlacement = props.expandIconPlacement,
          tableHasScroll = props.tableHasScroll,
          _k = props.isEditableRowOpen,
          isEditableRowOpen = _k === void 0 ? false : _k,
          _l = props.isExpandableRowOpen,
          isExpandableRowOpen = _l === void 0 ? false : _l,
          onCloseRow = props.onCloseRow,
          onEditRow = props.onEditRow,
          onExpandRow = props.onExpandRow,
          openExpandableRowIndex = props.openExpandableRowIndex,
          tableId = props.tableId,
          openEditableOnRowClick = props.openEditableOnRowClick,
          showRowSeparators = props.showRowSeparators,
          compactTable = props.compactTable;
      var editableRow = !data.hideEdit && editableRows;
      var showExtraCol = data.hideEdit && editableRows;
      var showRowSeparator = !data.hideSeparator && showRowSeparators;
      var numberOfColumns = columns.length + (editableRow || expandableRows || showExtraCol ? 1 : 0);
      var expandabledRowRef = React__default['default'].useRef(null);
      var expandCollapseCellRef = /*#__PURE__*/React__default['default'].createRef();

      var _m = React__default['default'].useState(openExpandableRowIndex),
          focusRow = _m[0],
          setFocusRow = _m[1];

      React.useEffect(function () {
        if (openExpandableRowIndex !== undefined) {
          setFocusRow(openExpandableRowIndex);
        }
      }, [openExpandableRowIndex]);
      React.useEffect(function () {
        if (focusRow === rowIndex && expandCollapseCellRef.current) {
          var knapp = expandCollapseCellRef.current.children[0];
          knapp.focus();
        }
      }, [expandCollapseCellRef, focusRow, rowIndex]);
      var styles = getClassNames$d(props, (_a = expandabledRowRef === null || expandabledRowRef === void 0 ? void 0 : expandabledRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth);
      var childrenLength = !!data['children'] ? data['children'].length : 0;

      var editButton = jsxRuntime.jsx("span", tslib.__assign({
        className: classnames__default['default'](styles.cellContent, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.cellContent, (_b = data.customClassNames) === null || _b === void 0 ? void 0 : _b.cellContent, {
          cellContentSmall: !showRowSeparators || compactTable
        })
      }, {
        children: jsxRuntime.jsx(IconButton, {
          title: t('tablerow.editable.title'),
          type: "button",
          icon: "Edit",
          className: styles.editButton,
          buttonSize: compactTable ? 'xSmall' : 'default',
          onClick: function onClick() {
            return onEditRow(rowIndex);
          },
          disabled: editModeActive || expandableModeActive,
          "aria-describedby": tableId.concat(rowIndex.toString(), '_0')
        }, void 0)
      }), void 0);

      var expandableContentId = tableId + "-" + rowIndex + "-expanded";

      var expandableCellContent = function expandableCellContent() {
        var _a;

        if (expandableContent) {
          return jsxRuntime.jsx("div", tslib.__assign({
            id: expandableContentId,
            className: classnames__default['default'](styles.expandableContent, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.expandableContent, (_a = data === null || data === void 0 ? void 0 : data.customClassNames) === null || _a === void 0 ? void 0 : _a.expandableContent)
          }, {
            children: expandableContent(data, onCloseRow, rowIndex)
          }), void 0);
        }

        return undefined;
      };

      var ExpandCollapseButton = function ExpandCollapseButton(btnProps) {
        var _a;

        var _b;

        return jsxRuntime.jsxs("td", tslib.__assign({
          "data-testid": 'table-cell-expandable',
          ref: expandCollapseCellRef,
          className: classnames__default['default'](styles.tableCell, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableCell, (_b = data.customClassNames) === null || _b === void 0 ? void 0 : _b.tableCell, 'tableCellForExpandCollapseButton')
        }, {
          children: [jsxRuntime.jsx(IconButton, {
            id: tableId + "-" + rowIndex + "-expand-button",
            title: t('tablerow.expandable.title'),
            className: classnames__default['default'](styles.expandButton, (_a = {}, _a[styles.expandButtonIsActive] = isExpandableRowOpen, _a)),
            icon: btnProps.isOpen ? 'ChevronUp' : 'ChevronDown',
            onClick: function onClick() {
              if (btnProps.isOpen) {
                onCloseRow();
              } else {
                onExpandRow(rowIndex);
              }
            },
            buttonSize: compactTable ? 'xSmall' : 'large',
            type: "button",
            "aria-expanded": btnProps.isOpen,
            "aria-describedby": tableId.concat(rowIndex.toString(), '_0'),
            "aria-controls": btnProps.isOpen ? expandableContentId : undefined,
            disabled: editModeActive
          }, void 0), btnProps.isOpen && btnProps.shouldRenderCellContent && expandableCellContent()]
        }), void 0);
      };

      var actionButtons = editableRow || expandableRows ? jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [editableRow && jsxRuntime.jsx("td", tslib.__assign({
          className: classnames__default['default'](styles.tableCell, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableCell, (_c = data.customClassNames) === null || _c === void 0 ? void 0 : _c.tableCell, {
            tableCellHasSeparator: showRowSeparator && !isExpandableRowOpen
          }),
          rowSpan: childrenLength + 1
        }, {
          children: editButton
        }), void 0), expandableRows && jsxRuntime.jsx(ExpandCollapseButton, {
          isOpen: isExpandableRowOpen,
          shouldRenderCellContent: expandIconPlacement === 'before'
        }, void 0)]
      }, void 0) : null;

      var renderCellContent = function renderCellContent(content, index, alignment, isChild, isExpandabledRowOpen) {
        var _a, _b;

        return openEditableOnRowClick && editableContent && editableRow ? jsxRuntime.jsx("button", tslib.__assign({
          "data-testid": 'openEditableOnRowClick-button',
          className: styles.editButton,
          onClick: function onClick() {
            return onEditRow(index);
          },
          tabIndex: -1
        }, {
          children: jsxRuntime.jsx("span", tslib.__assign({
            className: classnames__default['default'](styles.cellContent, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.cellContent, (_a = data.customClassNames) === null || _a === void 0 ? void 0 : _a.cellContent, 'cellContentClickable', {
              cellContentAboveExpandedArea: isExpandabledRowOpen,
              cellContentAlignedRight: alignment === 'right',
              cellContentAlignedCenter: alignment === 'center',
              cellContentLarge: showRowSeparator && !isChild,
              cellContentChildRow: isChild,
              cellContentHideEdit: !editableRow && editableRows
            })
          }, {
            children: formatContent(content, index)
          }), void 0)
        }), void 0) : jsxRuntime.jsx("div", tslib.__assign({
          className: classnames__default['default'](styles.cellContent, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.cellContent, (_b = data.customClassNames) === null || _b === void 0 ? void 0 : _b.cellContent, {
            cellContentAboveExpandedArea: isExpandabledRowOpen,
            cellContentAlignedRight: alignment === 'right',
            cellContentAlignedCenter: alignment === 'center',
            cellContentLarge: showRowSeparator && !isChild,
            cellContentChildRow: isChild,
            cellContentHideEdit: !editableRow && editableRows
          })
        }, {
          children: formatContent(content, index)
        }), void 0);
      };

      var formatContent = function formatContent(content, index) {
        if (columns[index].formatFunction) {
          return columns[index].formatFunction(content);
        }

        return content;
      };

      var renderRow = function renderRow(rowData, rowColumns, rowKey, isRowExpanded, isChild) {
        if (isChild === void 0) {
          isChild = false;
        }

        return rowColumns.map(function (column, cellIndex) {
          var _a, _b;

          if (cellIndex > 0) {
            return jsxRuntime.jsx("td", tslib.__assign({
              className: classnames__default['default'](styles.tableCell, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableCell, (_a = data.customClassNames) === null || _a === void 0 ? void 0 : _a.tableCell, {
                tableCellAboveExpandedArea: isRowExpanded,
                tableCellAlignedRight: column.alignment === 'right',
                tableCellAlignedCenter: column.alignment === 'center',
                tableCellIsEditableRowClosed: editableRow && !props.isEditableRowOpen,
                tableCellHiddenOnMobile: column.hideOnMobile,
                tableCellHasSeparator: showRowSeparator && !isExpandableRowOpen && !data['children']
              })
            }, {
              children: renderCellContent(rowData[column.fieldName], cellIndex, column.alignment, isChild, isRowExpanded)
            }), tableId.concat(rowKey.toString(), '_', cellIndex.toString()));
          } else if (!isChild) {
            return jsxRuntime.jsx("th", tslib.__assign({
              id: tableId.concat(rowKey.toString(), '_', cellIndex.toString()),
              className: classnames__default['default'](styles.tableCell, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableCell, (_b = data.customClassNames) === null || _b === void 0 ? void 0 : _b.tableCell, {
                tableCellAboveExpandedArea: isRowExpanded,
                tableCellAlignedRight: column.alignment === 'right',
                tableCellAlignedCenter: column.alignment === 'center',
                tableCellIsEditableRowClosed: editableRow && !props.isEditableRowOpen,
                tableCellHiddenOnMobile: column.hideOnMobile,
                tableCellHasSeparator: showRowSeparator && !isExpandableRowOpen
              }),
              scope: 'row',
              rowSpan: childrenLength + 1
            }, {
              children: renderCellContent(rowData[column.fieldName], cellIndex, column.alignment, isChild, isRowExpanded)
            }), tableId.concat(rowKey.toString(), '_', cellIndex.toString()));
          }

          return null;
        });
      };

      if (isEditableRowOpen) {
        return jsxRuntime.jsx("tr", tslib.__assign({
          className: classnames__default['default'](styles.tableRow, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableRow, (_d = data.customClassNames) === null || _d === void 0 ? void 0 : _d.tableRow, isEditableRowOpen ? 'tableRowEditableAndOpen' : 'tableRowEditableAndClosed', 'tableRowHasSeparator')
        }, {
          children: jsxRuntime.jsx("td", tslib.__assign({
            "data-testid": 'editable-content',
            className: classnames__default['default'](styles.tableCell, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableCell, (_e = data.customClassNames) === null || _e === void 0 ? void 0 : _e.tableCell),
            colSpan: numberOfColumns
          }, {
            children: editableContent && editableContent(data, onCloseRow, rowIndex)
          }), rowIndex)
        }), rowIndex);
      }

      var actionButtonsBefore = tableHasScroll || expandIconPlacement === 'before';
      return jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: expandableRows ? isExpandableRowOpen ? jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [jsxRuntime.jsxs("tr", tslib.__assign({
            ref: expandabledRowRef,
            className: classnames__default['default'](styles.tableRow, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableRow, (_f = data.customClassNames) === null || _f === void 0 ? void 0 : _f.tableRow, {
              tableRowHasSeparator: showRowSeparator && (expandIconPlacement === 'before' || expandIconPlacement === 'after' && !isExpandableRowOpen)
            })
          }, {
            children: [expandIconPlacement === 'before' && jsxRuntime.jsx(ExpandCollapseButton, {
              isOpen: true,
              shouldRenderCellContent: true
            }, void 0), renderRow(data, columns, rowIndex, true), expandIconPlacement !== 'before' && jsxRuntime.jsx(ExpandCollapseButton, {
              isOpen: true,
              shouldRenderCellContent: false
            }, void 0)]
          }), rowIndex), expandIconPlacement !== 'before' && jsxRuntime.jsx("tr", tslib.__assign({
            className: classnames__default['default'](styles.tableRow, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableRow, (_g = data.customClassNames) === null || _g === void 0 ? void 0 : _g.tableRow, {
              tableRowHasSeparator: showRowSeparator
            })
          }, {
            children: jsxRuntime.jsx("td", tslib.__assign({
              colSpan: numberOfColumns
            }, {
              children: expandableCellContent()
            }), void 0)
          }), rowIndex + 'expanded')]
        }, void 0) : jsxRuntime.jsxs("tr", tslib.__assign({
          ref: expandabledRowRef,
          className: classnames__default['default'](styles.tableRow, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableRow, (_h = data.customClassNames) === null || _h === void 0 ? void 0 : _h.tableRow, {
            tableRowIsClickable: openEditableOnRowClick,
            tableRowHasSeparator: showRowSeparator && !isExpandableRowOpen && !data['children']
          })
        }, {
          children: [(tableHasScroll || expandIconPlacement === 'before') && actionButtons, renderRow(data, columns, rowIndex, false), !tableHasScroll && expandIconPlacement !== 'before' && actionButtons]
        }), rowIndex) : jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [jsxRuntime.jsxs("tr", tslib.__assign({
            className: classnames__default['default'](styles.tableRow, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableRow, (_j = data.customClassNames) === null || _j === void 0 ? void 0 : _j.tableRow, {
              tableRowIsClickable: openEditableOnRowClick,
              tableRowHasSeparator: showRowSeparator && !isExpandableRowOpen && !data['children']
            })
          }, {
            children: [actionButtonsBefore && actionButtons, renderRow(data, columns, rowIndex, false, false), !actionButtonsBefore && actionButtons, showExtraCol && jsxRuntime.jsx("td", {}, void 0)]
          }), rowIndex), !isEditableRowOpen && !!data['children'] && childrenLength > 0 && data['children'].map(function (child, childIndex) {
            var _a;

            return jsxRuntime.jsxs("tr", tslib.__assign({
              className: classnames__default['default'](styles.tableRow, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tableRow, (_a = data.customClassNames) === null || _a === void 0 ? void 0 : _a.tableRow, {
                tableRowHasSeparator: showRowSeparator && childIndex === data['children'].length - 1
              })
            }, {
              children: [actionButtonsBefore && jsxRuntime.jsx("td", {}, void 0), renderRow(child, columns, childIndex, false, true), !actionButtonsBefore && jsxRuntime.jsx("td", {}, void 0), showExtraCol && jsxRuntime.jsx("td", {}, void 0)]
            }), rowIndex + 'child' + childIndex);
          })]
        }, void 0)
      }, void 0);
    };

    var getClassNames$c = function getClassNames(compactTable) {
      return mergeStyleSets({
        sumRow: {
          verticalAlign: 'middle'
        },
        sumCell: {
          fontSize: compactTable ? designtokenFontSizes['ske-font-size-s'] : 'inherit',
          textAlign: 'end',
          verticalAlign: 'inherit',
          padding: compactTable ? designtokenSpacing['ske-spacing-sm'] + " " + designtokenSpacing['ske-spacing-sm'] : designtokenSpacing['ske-spacing-lg'] + " " + designtokenSpacing['ske-spacing-lg'],
          selectors: {
            '&.sumCellIsText': {
              fontWeight: designtokenFontSizes['ske-font-weight-bold']
            },
            '&.sumCellIsSum': {
              fontWeight: designtokenFontSizes['ske-font-weight-regular']
            }
          }
        }
      });
    };

    var SumRow = function SumRow(props) {
      var compactTable = props.compactTable,
          numberOfColumns = props.numberOfColumns,
          sum = props.sum,
          editableRows = props.editableRows,
          expandableRows = props.expandableRows,
          expandIconPlacement = props.expandIconPlacement;
      var styles = getClassNames$c(compactTable);
      var columns = numberOfColumns !== 0 ? numberOfColumns - sum.colspan - 1 : 0;
      var emptyCells = Array.from(Array(columns > 0 ? columns : 0).keys());
      var counter = 0;
      return jsxRuntime.jsxs("tr", tslib.__assign({
        className: styles.sumRow
      }, {
        children: [jsxRuntime.jsx("th", tslib.__assign({
          colSpan: sum.colspan,
          scope: "row",
          className: classnames__default['default'](styles.sumCell, 'sumCellIsText')
        }, {
          children: sum.text
        }), void 0), jsxRuntime.jsx("td", tslib.__assign({
          className: classnames__default['default'](styles.sumCell, 'sumCellIsSum')
        }, {
          children: sum.total
        }), void 0), editableRows && jsxRuntime.jsx("td", {}, void 0), expandableRows && expandIconPlacement === 'after' && jsxRuntime.jsx("td", {}, void 0), !!emptyCells.length && emptyCells.map(function () {
          return jsxRuntime.jsx("td", {
            className: styles.sumCell
          }, counter++);
        })]
      }), void 0);
    };

    var getClassNames$b = function getClassNames(props) {
      var _a, _b;

      var compactTable = props.compactTable;
      var palette = getTheme().palette;
      return mergeStyleSets({
        tabellThead: {
          display: 'table-header-group'
        },
        tabellTheadCell: {
          borderBottom: "2px solid " + palette.skeColor.blackAlt,
          padding: compactTable ? designtokenSpacing['ske-spacing-sm'] : designtokenSpacing['ske-spacing-lg'],
          fontSize: compactTable ? designtokenFontSizes['ske-font-size-s'] : 'inherit',
          verticalAlign: 'bottom',
          fontWeight: designtokenFontSizes['ske-font-weight-bold'],
          position: 'relative',
          selectors: {
            i: {
              color: "" + palette.skeColor.blue,
              position: 'absolute',
              paddingLeft: designtokenSpacing['ske-spacing-xs'],
              cursor: 'pointer',
              selectors: {
                ':hover': {
                  color: "" + palette.skeColor.darkBlue
                },
                '& [data-icon-name="ArrowUpDown"]': {
                  selectors: (_a = {}, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-lg'] + ")"] = {
                    opacity: 0
                  }, _a['& .noAutoHide'] = {
                    opacity: 1
                  }, _a[':hover'] = {
                    opacity: 1
                  }, _a)
                }
              }
            },
            ':focus': {
              color: "" + palette.skeColor.blue,
              outline: '0'
            }
          }
        },
        tabellTheadCellIsSortable: {
          cursor: 'pointer',
          paddingRight: designtokenSpacing['ske-spacing-xl'] + " !important",
          selectors: {
            ':hover [data-icon-name="ArrowUpDown"]': {
              opacity: 1
            },
            ':focus [data-icon-name="ArrowUpDown"]': {
              opacity: 1
            }
          }
        },
        tabellTheadCellAlignedRight: {
          justifyContent: 'flex-end',
          textAlign: 'right'
        },
        tabellTheadCellAlignedCenter: {
          justifyContent: 'center',
          textAlign: 'center'
        },
        tabellTheadCellIsEmpty: {
          borderBottom: "2px solid " + palette.skeColor.blackAlt
        },
        tabellTheadCellHiddenOnMobile: {
          display: 'none',
          selectors: (_b = {}, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-md'] + ")"] = {
            display: 'table-cell'
          }, _b)
        }
      });
    };

    var getIconNameForTheadCell = function getIconNameForTheadCell(isSorted, isSortedAscending) {
      if (isSorted) {
        return isSortedAscending ? 'ArrowDown' : 'ArrowUp';
      }

      return 'ArrowUpDown';
    };
    var getAriaLabelForTheadCell = function getAriaLabelForTheadCell(name, fieldName, isSorted, isSortedAscending, t) {
      var ariaLabel = fieldName;

      if (typeof name === 'string') {
        ariaLabel = isSorted ? isSortedAscending ? name.concat(' ', t('table.sorted_ascending')) : name.concat(' ', t('table.sorted_descending')) : name.concat(' ', t('table.sortable'));
      }

      return ariaLabel;
    };

    var TableHeader = function TableHeader(props) {
      var columns = props.columns,
          sort = props.sort,
          setSort = props.setSort;
      var styles = getClassNames$b(props);

      var setSortingState = function setSortingState(columnFieldName) {
        return setSort({
          ascending: sort.columnFieldName === columnFieldName ? !sort.ascending : true,
          columnFieldName: columnFieldName
        });
      };

      var _onKeyDown = function onKeyDown(e, fieldName) {
        return e.key === 'Enter' ? setSortingState(fieldName) : null;
      };

      var thElements = columns && columns.map(function (key) {
        var _a, _b;

        if (!key.name) {
          // Når kolonnetittel er tom skal ikke kolonnen ha <th />
          return jsxRuntime.jsx("td", {
            className: styles.tabellTheadCellIsEmpty
          }, key.fieldName);
        }

        if (key.srOnly) {
          return jsxRuntime.jsx("th", tslib.__assign({
            className: styles.tabellTheadCellIsEmpty
          }, {
            children: jsxRuntime.jsx("span", tslib.__assign({
              className: "sr-only"
            }, {
              children: key.name
            }), void 0)
          }), key.fieldName);
        }

        if (key.sortable) {
          var isSorted = sort.columnFieldName === key.fieldName;
          var iconName = getIconNameForTheadCell(isSorted, sort.ascending);
          var ariaLabel = getAriaLabelForTheadCell(key.name, key.fieldName, isSorted, sort.ascending, t);
          return jsxRuntime.jsxs("th", tslib.__assign({
            className: classnames__default['default'](styles.tabellTheadCell, styles.tabellTheadCellIsSortable, (_a = {}, _a[styles.tabellTheadCellAlignedRight] = key.alignment === 'right', _a[styles.tabellTheadCellAlignedCenter] = key.alignment === 'center', _a[styles.tabellTheadCellHiddenOnMobile] = key.hideOnMobile, _a)),
            tabIndex: 0,
            scope: "col",
            "aria-label": ariaLabel,
            onClick: function onClick() {
              return setSortingState(key.fieldName);
            },
            onKeyDown: function onKeyDown(e) {
              return _onKeyDown(e, key.fieldName);
            }
          }, {
            children: [key.name, jsxRuntime.jsx(Icon, {
              iconName: iconName,
              className: !key.autohideSorting ? 'noAutoHide' : undefined
            }, void 0)]
          }), key.fieldName);
        }

        return jsxRuntime.jsx("th", tslib.__assign({
          className: classnames__default['default'](styles.tabellTheadCell, (_b = {}, _b[styles.tabellTheadCellAlignedRight] = key.alignment === 'right', _b[styles.tabellTheadCellAlignedCenter] = key.alignment === 'center', _b[styles.tabellTheadCellHiddenOnMobile] = key.hideOnMobile, _b)),
          scope: "col"
        }, {
          children: key.name
        }), key.fieldName);
      });
      return jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: thElements
      }, void 0);
    };

    var setScrollBarState = function setScrollBarState(wrapperWidth, tableWidth, setTableIsScrollable) {
      if (tableWidth && wrapperWidth && tableWidth > wrapperWidth) {
        setTableIsScrollable(true);
      } else {
        setTableIsScrollable(false);
      }
    };
    /*
     * visibleName Table (Tabell)
     */

    var Table = function Table(props) {
      var _a, _b;

      var id = props.id,
          customClassNames = props.customClassNames,
          editableRows = props.editableRows,
          expandableRows = props.expandableRows,
          expandIconPlacement = props.expandIconPlacement,
          children = props.children,
          columns = props.columns,
          openEditableOnRowClick = props.openEditableOnRowClick,
          _c = props.showRowSeparators,
          showRowSeparators = _c === void 0 ? true : _c,
          _d = props.compactTable,
          compactTable = _d === void 0 ? false : _d,
          _e = props.caption,
          caption = _e === void 0 ? null : _e,
          hideCaption = props.hideCaption,
          OpenEditableRowIndexExternal = props.openEditableRowIndex,
          setOpenEditableRowIndex = props.setOpenEditableRowIndex,
          openExpandableRowIndexExternal = props.openExpandableRowIndex,
          setOpenExpandableRowIndex = props.setOpenExpandableRowIndex,
          sum = props.sum;
      var genratedId = generateId();
      var mainId = id ? id : 'table-' + genratedId;
      var wrapperRef = React__default['default'].useRef(null);
      var tableRef = React__default['default'].useRef(null);

      var _f = React.useState(false),
          tableIsScrollable = _f[0],
          setTableIsScrollable = _f[1];

      var _g = React.useState(OpenEditableRowIndexExternal),
          openEditableRowIndexInternal = _g[0],
          setOpenEditableRowIndexInternal = _g[1];

      var _h = React.useState(),
          openExpandableRowIndexInternal = _h[0],
          setOpenExpandableIndexInternal = _h[1];

      var _j = React.useState({
        ascending: false,
        columnFieldName: ''
      }),
          sort = _j[0],
          _setSort = _j[1];

      var styles = getClassNames$e(props);
      React.useEffect(function () {
        if (setOpenEditableRowIndex) {
          setOpenEditableRowIndex(openEditableRowIndexInternal);
        }
      }, [openEditableRowIndexInternal, setOpenEditableRowIndex]);
      React.useEffect(function () {
        setOpenEditableRowIndexInternal(OpenEditableRowIndexExternal);
      }, [OpenEditableRowIndexExternal]);
      React.useEffect(function () {
        if (setOpenExpandableRowIndex) {
          setOpenExpandableRowIndex(openExpandableRowIndexInternal);
        }
      }, [openExpandableRowIndexInternal, setOpenExpandableRowIndex]);
      React.useEffect(function () {
        setOpenExpandableIndexInternal(openExpandableRowIndexExternal);
      }, [openExpandableRowIndexExternal]);

      var updateDimensions = function updateDimensions() {
        var tableWidth = tableRef.current && tableRef.current.clientWidth;
        var wrapperWidth = wrapperRef.current && wrapperRef.current.clientWidth;
        setScrollBarState(wrapperWidth, tableWidth, function (value) {
          return setTableIsScrollable(value);
        });
      };

      var sortRowData = function sortRowData(rows) {
        var sortingKey = sort.columnFieldName;

        if (sortingKey) {
          var copiedArray = tslib.__spreadArray([], rows);

          var sortDescending = !sort.ascending;
          var sortingFunction_1 = columns && columns.filter(function (column) {
            return column.fieldName === sortingKey;
          })[0].sortingFunction;

          if (sortingFunction_1) {
            copiedArray.sort(function (a, b) {
              return sortingFunction_1(a[sortingKey], b[sortingKey]);
            });
          } else {
            copiedArray.sort(function (a, b) {
              return a[sortingKey] < b[sortingKey] ? -1 : 1;
            });
          }

          if (sortDescending) {
            copiedArray.reverse();
          }

          return copiedArray;
        }

        return rows;
      };

      var handleEditRow = function handleEditRow(index) {
        setOpenEditableRowIndexInternal(index);
      };

      var handleExpandRow = function handleExpandRow(index) {
        setOpenExpandableIndexInternal(index);
      };

      var handleCloseRow = function handleCloseRow() {
        setOpenEditableRowIndexInternal(undefined);
        setOpenExpandableIndexInternal(undefined);
      };

      var getRowData = function getRowData() {
        var items = sortRowData(props.data);
        return items.map(function (row, index) {
          return jsxRuntime.jsx(TableRow, {
            data: row,
            rowIndex: index,
            columns: columns,
            editableContent: props.editableContent,
            editableRows: props.editableRows,
            editModeActive: openEditableRowIndexInternal !== undefined,
            expandableContent: props.expandableContent,
            expandableModeActive: openExpandableRowIndexInternal !== undefined,
            expandableRows: props.expandableRows,
            expandIconPlacement: props.expandIconPlacement,
            tableHasScroll: tableIsScrollable,
            isEditableRowOpen: openEditableRowIndexInternal === index,
            isExpandableRowOpen: openExpandableRowIndexInternal === index,
            openEditableOnRowClick: openEditableOnRowClick,
            onEditRow: function onEditRow() {
              return handleEditRow(index);
            },
            onExpandRow: function onExpandRow() {
              return handleExpandRow(index);
            },
            onCloseRow: handleCloseRow,
            openExpandableRowIndex: openExpandableRowIndexInternal,
            tableId: mainId,
            showRowSeparators: showRowSeparators,
            compactTable: compactTable,
            sum: sum
          }, index);
        });
      };

      React__default['default'].useEffect(function () {
        var tableWidth = tableRef.current && tableRef.current.clientWidth;
        var wrapperWidth = wrapperRef.current && wrapperRef.current.clientWidth;
        setScrollBarState(wrapperWidth, tableWidth, setTableIsScrollable);
        window.addEventListener('resize', updateDimensions);
      }, []);

      var emptyTd = jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [editableRows && jsxRuntime.jsx("td", {
          className: styles.emptyTd
        }, void 0), expandableRows && jsxRuntime.jsx("td", {
          className: styles.emptyTd
        }, void 0)]
      }, void 0);

      return jsxRuntime.jsxs("div", tslib.__assign({
        ref: wrapperRef,
        id: id,
        className: classnames__default['default'](styles.SkeTable, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.wrapper)
      }, {
        children: [jsxRuntime.jsxs("table", tslib.__assign({
          className: classnames__default['default'](styles.tabell, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.table)
        }, {
          children: [caption && jsxRuntime.jsx("caption", tslib.__assign({
            className: classnames__default['default'](styles.tabellCaption, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.caption),
            style: hideCaption ? getSrOnlyStyle() : undefined
          }, {
            children: caption
          }), void 0), jsxRuntime.jsx("thead", tslib.__assign({
            className: classnames__default['default'](styles.tabellThead, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tabellThead)
          }, {
            children: jsxRuntime.jsxs("tr", tslib.__assign({
              className: classnames__default['default'](styles.tabellTheadRow, customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.tabellTheadRow)
            }, {
              children: [(tableIsScrollable || expandIconPlacement === 'before') && emptyTd, jsxRuntime.jsx(TableHeader, {
                compactTable: compactTable,
                columns: columns,
                sort: sort,
                setSort: function setSort(value) {
                  return _setSort(value);
                }
              }, void 0), !tableIsScrollable && expandIconPlacement !== 'before' && emptyTd]
            }), void 0)
          }), void 0), jsxRuntime.jsxs("tbody", {
            children: [getRowData(), sum && jsxRuntime.jsx(SumRow, {
              compactTable: compactTable,
              numberOfColumns: (_b = (_a = props.columns) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0,
              editableRows: editableRows,
              expandableRows: expandableRows,
              expandIconPlacement: expandIconPlacement,
              sum: sum
            }, void 0)]
          }, void 0)]
        }), void 0), children]
      }), void 0);
    };

    var getClassNames$a = function getClassNames(props, tag) {
      var palette = getTheme().palette;
      var primaryColor;

      switch (tag) {
        case 'INK':
          {
            primaryColor = palette.skeColor.green100;
            break;
          }

        case 'LSO':
          {
            primaryColor = palette.skeColor.black100;
            break;
          }

        default:
          {
            primaryColor = palette.skeColor.burgundy100;
            break;
          }
      }

      return mergeStyles([{
        displayName: 'SkeTabs',
        selectors: {
          '& .ms-Pivot-link': {
            border: props.border ? '2px solid rgba(29, 29, 29, 0.62)' : 'none',
            borderBottom: 'none',
            background: palette.skeColor.neutralGrey,
            marginRight: 10,
            display: 'inline-block',
            minWidth: '10%',
            maxWidth: '100%',
            selectors: {
              ':focus': {
                outline: "2px solid " + palette.skeColor.blue + " !important"
              },
              ':hover': {
                background: palette.skeColor.lightBlue,
                color: palette.skeColor.blackAlt
              },
              ':active': {
                background: palette.skeColor.darkBlue,
                color: palette.skeColor.white,
                border: props.border ? "2px solid " + palette.skeColor.darkBlue : 'none'
              }
            }
          },
          '& .ms-Pivot-linkContent span': {
            textDecoration: props.underline ? 'underline' : 'none'
          },
          '& .ms-Pivot-link .link:focus': {
            outline: 'none'
          },
          '&.ms-Pivot-text .ms-Pivot-count': {
            color: palette.skeColor.black
          },
          '& .ms-Pivot': {
            borderBottom: "3px solid " + primaryColor,
            width: '100%',
            display: 'inline-block'
          },
          // TODO gjør at komponenter blir offset i tableitem
          // '& .ms-Button-flexContainer': {
          //   display: 'block',
          //   justifyContent: 'center',
          //   margin: '0 auto'
          // },
          '& .ms-Pivot-link.is-selected': {
            background: primaryColor,
            fontWeight: exports.FontWeights.regular,
            borderBottom: 'none',
            border: props.border ? "2px solid " + primaryColor : 'none',
            selectors: {
              ':before': {
                borderBottom: 'none'
              },
              ':hover': {
                color: palette.skeColor.white
              }
            }
          },
          '& .ms-Pivot-link.is-selected .ms-Pivot-linkContent span': {
            textDecoration: 'none'
          }
        }
      }]);
    };

    /*
     * visibleName Tabs (Arkfaner)
     */

    var Tabs = function Tabs(props) {
      props.children;
          var className = props.className,
          rest = tslib.__rest(props, ["children", "className"]);

      return jsxRuntime.jsx(BrandContext.Consumer, {
        children: function children(_a) {
          var tag = _a.tag;
          return jsxRuntime.jsx(Pivot, tslib.__assign({}, rest, {
            linkFormat: 'tabs',
            linkSize: 'large',
            className: classnames__default['default'](getClassNames$a(props, tag), className)
          }, {
            children: React__namespace.Children.map(props.children, function (child) {
              if ( /*#__PURE__*/React__namespace.isValidElement(child)) return jsxRuntime.jsx(PivotItem, tslib.__assign({}, child.props), void 0);
            })
          }), void 0);
        }
      }, void 0);
    };

    /*
     * visibleName TabItem (Enkeltfane)
     */

    var TabItem = function TabItem(props) {
      var children = props.children,
          rest = tslib.__rest(props, ["children"]);

      return jsxRuntime.jsx("div", tslib.__assign({}, rest, {
        children: children
      }), void 0);
    };

    function getFieldTypeStyles(props) {
      if (props.inputSize === 'large') {
        return {
          '.ms-TextField-fieldGroup': {
            borderWidth: 2,
            minHeight: 42
          }
        };
      } else if (props.errorMessage) {
        return {
          '.ms-TextField-fieldGroup': {
            borderWidth: 2
          }
        };
      } else {
        return {
          '& .ms-TextField-field': {
            fontSize: exports.FontSizes.medium
          }
        };
      }
    }

    var getClassNames$9 = function getClassNames(props) {
      var boldText = props.boldText,
          borderless = props.borderless,
          calloutFloating = props.calloutFloating,
          editableWhenEmpty = props.editableWhenEmpty,
          errorMessage = props.errorMessage,
          readOnly = props.readOnly,
          underlined = props.underlined;
      var semanticColors = getTheme().semanticColors;
      var palette = getTheme().palette;
      var errorIcon = "'" + SkeIcons.icons.Error + "'";
      var color = errorMessage ? palette.skeColor.error : palette.skeColor.blackAlt;
      return mergeStyles({
        displayName: 'SkeTextField',
        selectors: tslib.__assign(tslib.__assign({}, getFieldTypeStyles(props)), {
          '&& .ms-TextField-fieldGroup': {
            borderRadius: '0px'
          },
          '& .ms-TextField-fieldGroup': readOnly && {
            border: 'none',
            outline: 'none',
            background: 'transparent'
          },
          '&& .ms-TextField-fieldGroup:focus': {
            border: props.errorMessage ? palette.skeColor.blue : palette.skeColor.error
          },
          '&.is-active .ms-TextField-fieldGroup': !borderless && !underlined && !readOnly && {
            border: "1px solid " + palette.skeColor.blue
          },
          // style customization for underlined model
          '&.ms-TextField--underlined .ms-TextField-wrapper': {
            border: "1px solid " + color
          },
          '&.ms-TextField--underlined .ms-TextField-wrapper:hover': {
            border: "1px solid " + semanticColors.inputBorderHovered
          },
          '&.is-active.ms-TextField--underlined .ms-TextField-wrapper': {
            border: "1px solid " + color,
            outline: "1px solid " + color
          },
          // Ikke lengre i bruk
          '& .ms-TextField-field[readOnly]': {
            paddingLeft: '1px',
            cursor: 'default',
            fontWeight: boldText ? exports.FontWeights.bold : exports.FontWeights.regular,
            border: 'none',
            outline: 'none',
            background: 'transparent'
          },
          '& .ms-TextField-field[readOnly]:focus': {
            fontWeight: boldText ? exports.FontWeights.bold : exports.FontWeights.regular
          },
          '&.is-active .ms-TextField-field': readOnly && {
            border: "1px solid " + palette.skeColor.blue,
            backgroundColor: palette.skeColor.white
          },
          '&.is-active .ms-TextField-field[readOnly]:focus': readOnly && {
            border: "none",
            background: 'transparent'
          },
          '& .ms-TextField-field[disabled]': {
            color: palette.skeColor.darkGrey
          },
          '.ms-Button-icon': {
            fontSize: 18
          },
          '& .ms-TextField-errorMessage': {
            position: 'relative',
            color: palette.skeColor.error,
            fontWeight: exports.FontWeights.medium,
            fontSize: exports.FontSizes.small,
            paddingLeft: 20
          },
          '& .ms-TextField-errorMessage::before': {
            fontFamily: SkeIcons.fontFace.fontFamily,
            fontSize: 16,
            display: 'block',
            content: errorIcon,
            marginRight: 3,
            position: 'absolute',
            top: 6,
            left: 0
          },
          '& .ms-TextField-fieldGroup::before': {
            display: 'none'
          },
          'textarea.ms-TextField-field': {
            resize: 'none'
          },
          'input.ms-TextField-field': editableWhenEmpty && {
            border: '1px solid' + palette.skeColor.blackAlt,
            backgroundColor: palette.skeColor.white
          },
          '& .ms-Callout-main': typeof calloutFloating !== 'undefined' && !calloutFloating && {
            display: 'inline-block'
          },
          '.ms-TextField-suffix': !props.editMode && props.readOnly && {
            display: 'none'
          },
          '&.is-disabled .ms-TextField-fieldGroup': {
            borderColor: palette.skeColor.lightGrey,
            borderStyle: 'solid',
            borderWidth: '1px',
            backgroundColor: palette.skeColor.whiteGrey
          },
          '&.is-disabled .ms-TextField-field': {
            color: palette.skeColor.blackAlt
          },
          '&.is-disabled .ms-TextField-field:hover': {
            cursor: 'not-allowed'
          }
        })
      });
    };

    /*
     * visibleName TextField (Tekstfelt)
     */

    var TextField = function TextField(_a) {
      var calloutFloating = _a.calloutFloating,
          children = _a.children,
          className = _a.className,
          labelWithCalloutProps = _a.labelWithCalloutProps,
          editable = _a.editable,
          errorMessage = _a.errorMessage,
          id = _a.id,
          label = _a.label,
          _b = _a.required,
          required = _b === void 0 ? false : _b,
          labelButtonAriaLabel = _a.labelButtonAriaLabel,
          mask = _a.mask,
          inputMode = _a.inputMode,
          onCalloutToggle = _a.onCalloutToggle,
          onRenderLabel = _a.onRenderLabel,
          readOnly = _a.readOnly,
          value = _a.value,
          _c = _a.requiredWithMark,
          requiredWithMark = _c === void 0 ? false : _c,
          rest = tslib.__rest(_a, ["calloutFloating", "children", "className", "labelWithCalloutProps", "editable", "errorMessage", "id", "label", "required", "labelButtonAriaLabel", "mask", "inputMode", "onCalloutToggle", "onRenderLabel", "readOnly", "value", "requiredWithMark"]);

      rest.inputSize = rest.inputSize || 'normal';
      var shouldEditWhenEmpty = rest.editableWhenEmpty ? value === '' : false;
      var generatedId = generateId();
      var mainId = id ? id : 'textfield-' + generatedId;
      var inputId = mainId + '-input';
      var labelId = mainId + '-label';
      var textField = React__namespace.useRef();

      var _d = React__namespace.useState(shouldEditWhenEmpty),
          editMode = _d[0],
          setEditMode = _d[1];

      var onEdit = function onEdit() {
        textField.current && textField.current.focus();
        setEditMode(true);
      };

      var onBlur = function onBlur(e) {
        rest.onBlur && rest.onBlur(e);

        if (editMode) {
          setEditMode(shouldEditWhenEmpty);
        }
      };

      var setValue = function setValue() {
        if (rest.suffix && readOnly && !editMode) {
          return value + ' ' + rest.suffix;
        } else if (value === null) {
          return undefined;
        }

        return value;
      };

      var setCustomButtonAriaLabel = function setCustomButtonAriaLabel() {
        if (rest.suffix && readOnly) {
          return 'Rediger ' + label + ' (' + rest.suffix + ')';
        } else {
          return undefined;
        }
      };

      var TextFieldType;

      if (mask) {
        TextFieldType = MaskedTextField;
      } else {
        TextFieldType = TextField$1;
      }

      return jsxRuntime.jsxs("div", tslib.__assign({
        id: mainId,
        className: classnames__default['default'](getClassNames$9(tslib.__assign({
          errorMessage: errorMessage
        }, rest)), className)
      }, {
        children: [jsxRuntime.jsx(LabelWithCallout, tslib.__assign({}, labelWithCalloutProps, {
          id: labelId,
          inputId: inputId,
          label: label,
          buttonAriaLabel: labelButtonAriaLabel ? labelButtonAriaLabel : setCustomButtonAriaLabel(),
          requiredMark: requiredWithMark,
          editFunction: onEdit,
          warning: rest.warning,
          help: rest.help,
          readOnly: readOnly,
          editable: editable,
          inputSize: rest.inputSize,
          calloutFloating: calloutFloating,
          onRenderLabel: onRenderLabel,
          onCalloutToggle: onCalloutToggle
        }), void 0), jsxRuntime.jsx(TextFieldType, tslib.__assign({}, rest, {
          id: inputId,
          inputMode: inputMode,
          value: setValue(),
          readOnly: editMode ? false : readOnly,
          className: classnames__default['default'](getClassNames$9(tslib.__assign(tslib.__assign({}, rest), {
            editMode: editMode,
            readOnly: readOnly
          })), className),
          required: required || requiredWithMark,
          errorMessage: errorMessage,
          onBlur: onBlur,
          componentRef: function componentRef(ref) {
            if (rest.componentRef && typeof rest.componentRef === 'function') {
              rest.componentRef(ref);
            }

            textField.current = ref;
          },
          mask: mask
        }, {
          children: children
        }), void 0)]
      }), void 0);
    };

    var img$c = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 19.1.0%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3c!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 85.0393677 102.8462906' enable-background='new 0 0 85.0393677 102.8462906' xml:space='preserve'%3e%3cg%3e %3crect fill='%23030405' width='85.0393677' height='85.0393677'/%3e %3cpath fill='white' d='M15.0138578%2c44.5122185c0%2c7.9661369%2c11.8392591%2c14.4237633%2c26.441433%2c14.4237633 c14.6039848%2c0%2c26.4486389-6.4576263%2c26.4486389-14.4237633c0-5.4987946-5.6375542-10.2802658-13.9407234-12.7115517 L41.4769249%2c44.5122185v-7.2397919l12.4862823-12.5836201c-3.7199326-1.0903797-8.0346336-1.708559-12.5547752-1.708559 l0.0036201%2c7.1118279C26.8297043%2c30.1047192%2c15.0138578%2c36.5550995%2c15.0138578%2c44.5122185z'/%3e %3cg%3e %3cpath d='M5.0266876%2c102.8462906c-0.7751446%2c0-1.4618471-0.0935287-2.0606146-0.2795639s-1.1045181-0.4472961-1.5167426-0.7847977 c-0.412733-0.336998-0.7324485-0.7421112-0.9586383-1.215332c-0.2261898-0.4727097-0.3497047-0.9957428-0.3700364-1.569603 H2.218884c0.1509628%2c1.4491425%2c1.0918107%2c2.1734543%2c2.8225441%2c2.1734543c0.3019252%2c0%2c0.5891104-0.0325317%2c0.860538-0.0980988 c0.2719359-0.0650635%2c0.5108333-0.1657028%2c0.7171998-0.3019257c0.2058582-0.1357117%2c0.3669868-0.3064957%2c0.4828773-0.5128632 c0.1153822-0.2063675%2c0.1733274-0.4503479%2c0.1733274-0.7324524c0-0.3014145-0.0676031-0.5504761-0.203825-0.7466812 c-0.1357141-0.1967087-0.3293734-0.3624115-0.5809774-0.4981232c-0.2516046-0.1362228-0.5560713-0.2516022-0.9128923-0.3471603 c-0.3573289-0.0955658-0.7573547-0.1936646-1.2000766-0.2948151c-0.5235405-0.1204605-1.019125-0.251091-1.4867535-0.392395 c-0.4681368-0.1408005-0.8757868-0.3319168-1.22295-0.5733566s-0.6236739-0.5459061-0.8300404-0.9133987 c-0.2063664-0.3669891-0.3095497-0.8325806-0.3095497-1.3962784c0-0.5331955%2c0.1031833-0.9982834%2c0.3095497-1.3957672 s0.4955844-0.7299118%2c0.8681623-0.996254c0.3720696-0.2668533%2c0.8097088-0.4681396%2c1.3129175-0.6038513 s1.0567389-0.2038269%2c1.6605892-0.2038269c1.3180003%2c0%2c2.3417001%2c0.2943039%2c3.0716071%2c0.8829041 c0.7293983%2c0.5886002%2c1.1492476%2c1.4013596%2c1.2600551%2c2.437767H6.9734449 c-0.0803099-0.5535278-0.3217483-0.9784622-0.7243156-1.2753067c-0.4025669-0.2968369-0.9357648-0.4452591-1.6001024-0.4452591 c-0.6338396%2c0-1.13959%2c0.1230087-1.5167425%2c0.3695297c-0.3776608%2c0.2470245-0.566237%2c0.5962219-0.566237%2c1.0491104 c0%2c0.2617722%2c0.0655696%2c0.478302%2c0.1962006%2c0.6490936c0.130631%2c0.1712875%2c0.3197155%2c0.3171692%2c0.566237%2c0.4376373 c0.2465215%2c0.1209717%2c0.5433638%2c0.2266998%2c0.8905272%2c0.3171692c0.3471632%2c0.090477%2c0.7370229%2c0.180954%2c1.169579%2c0.271431 c0.5235405%2c0.1108093%2c1.0242081%2c0.2414398%2c1.5020022%2c0.3924026s0.9032345%2c0.3547897%2c1.2753038%2c0.6114731 c0.3725777%2c0.256691%2c0.6694202%2c0.5865707%2c0.891036%2c0.9886246c0.2211065%2c0.4025726%2c0.3319139%2c0.905777%2c0.3319139%2c1.5096283 c0%2c0.5636978-0.1108074%2c1.061821-0.3319139%2c1.4943771c-0.2216158%2c0.4325562-0.526082%2c0.7949677-0.9134007%2c1.086731 c-0.3873181%2c0.2917557-0.8478308%2c0.5159149-1.3810287%2c0.6714554 C6.2287979%2c102.768013%2c5.6503615%2c102.8462906%2c5.0266876%2c102.8462906z'/%3e %3cpath d='M12.8152418%2c98.7255707l-0.9510136%2c0.9505005v2.9135284H9.9622002V91.3594055h1.9020281v4.3469086 c0%2c0.3827438-0.0076246%2c0.749733-0.0223646%2c1.1019745c-0.0152493%2c0.3522491-0.027956%2c0.6440048-0.0381222%2c0.8757858 l3.0339937-3.1549606h2.2791796l-2.9582577%2c2.943512l3.3054218%2c5.1169739h-2.233943L12.8152418%2c98.7255707z'/%3e %3cpath d='M22.8524799%2c102.5895996c-0.0706539-0.090477-0.1280899-0.2190704-0.1733284-0.3847733 c-0.0452385-0.166214-0.0782757-0.3852844-0.0981007-0.6567154h-0.0304966 c-0.2617702%2c0.3522491-0.5886021%2c0.6465454-0.9810028%2c0.8829041c-0.3924007%2c0.236351-0.9108601%2c0.3547897-1.5548649%2c0.3547897 c-0.3924007%2c0-0.7573547-0.0503235-1.0943527-0.1509628c-0.3369961-0.100647-0.626215-0.2516098-0.8676529-0.4528885 c-0.2414398-0.2012863-0.4330654-0.4503479-0.5738621-0.7471924s-0.2109413-0.6414642-0.2109413-1.0338669 c0-0.4528885%2c0.0828514-0.8274994%2c0.2490635-1.1248474c0.1657028-0.2963333%2c0.394434-0.5357361%2c0.6867027-0.7166901 c0.2917595-0.180954%2c0.6389217-0.3192062%2c1.0414886-0.4152756c0.4020596-0.0955582%2c0.8452892-0.1733246%2c1.328167-0.2338104 c0.6643372-0.0803146%2c1.1624622-0.1936646%2c1.4943771-0.3395386c0.3319149-0.1458817%2c0.498127-0.400032%2c0.498127-0.7624435 c0-0.3522415-0.1209736-0.6338348-0.3624134-0.8452835c-0.2414379-0.2114563-0.6038494-0.3166656-1.0867271-0.3166656 c-0.5433636%2c0-0.948473%2c0.1153793-1.214817%2c0.3471603c-0.2668533%2c0.2312698-0.4101925%2c0.5484467-0.4305229%2c0.9505081h-1.8110447 c0.0096588-0.3415756%2c0.0879345-0.6714554%2c0.2338142-0.9886322c0.1458797-0.3166656%2c0.3624134-0.5962219%2c0.6490898-0.8376617 s0.6414642-0.4350967%2c1.0643616-0.5809784c0.4223919-0.1458817%2c0.920517-0.2190781%2c1.4938698-0.2190781 c0.4630547%2c0%2c0.8732452%2c0.0355835%2c1.2305756%2c0.1057281c0.3568211%2c0.0706558%2c0.6663704%2c0.1916275%2c0.9281406%2c0.3624115 c0.7644711%2c0.4630508%2c1.1472149%2c1.228035%2c1.1472149%2c2.294426v4.241188c0%2c0.332428%2c0.0274467%2c0.5886002%2c0.0828514%2c0.7700653 c0.0554028%2c0.180954%2c0.1285973%2c0.3019257%2c0.2190723%2c0.3619003v0.1362228H22.8524799z M20.5732994%2c101.472374 c0.3319149%2c0%2c0.6236744-0.0528641%2c0.8752785-0.1585846c0.2516041-0.105217%2c0.4630527-0.2414398%2c0.6343479-0.4071426 c0.1707859-0.166214%2c0.3019257-0.3573303%2c0.3924007-0.5738602c0.090477-0.2160263%2c0.1357136-0.4401779%2c0.1357136-0.6714554 v-1.1924515c-0.1911163%2c0.1204681-0.4279804%2c0.2241592-0.7095737%2c0.3095474 c-0.2815952%2c0.0853958-0.5682716%2c0.1580811-0.8600311%2c0.2185669c-0.5941925%2c0.1108093-1.0516548%2c0.2541504-1.3739128%2c0.4300156 c-0.3217487%2c0.1763763-0.4828758%2c0.4859238-0.4828758%2c0.9286499c0%2c0.2109375%2c0.0376129%2c0.3898621%2c0.113348%2c0.5357361 c0.0752277%2c0.1458817%2c0.175869%2c0.2617722%2c0.3019257%2c0.347168c0.1255474%2c0.0853882%2c0.2739697%2c0.145874%2c0.4452629%2c0.1809464 C20.215971%2c101.4550934%2c20.3923473%2c101.472374%2c20.5732994%2c101.472374z'/%3e %3cpath d='M24.9354591%2c94.5291138h1.23769v-2.5658569h1.8867798v2.5658569h1.6153507v1.3134232h-1.6153507v4.5131226 c0%2c0.2917557%2c0.0757351%2c0.4905014%2c0.2266979%2c0.5962219c0.1509628%2c0.1057281%2c0.3619041%2c0.1585922%2c0.6338387%2c0.1585922 c0.1006432%2c0%2c0.2084007-0.0050812%2c0.3242912-0.0152512c0.1158905-0.0101624%2c0.2139912-0.0249023%2c0.2943001-0.0452347h0.0909843 v1.4943771c-0.1611271%2c0.0299911-0.3471622%2c0.0574341-0.5586128%2c0.0828476 c-0.2114487%2c0.02491-0.4478035%2c0.0376129-0.7095737%2c0.0376129c-0.322258%2c0-0.6185913-0.0325241-0.8905277-0.0980988 c-0.2719364-0.0650635-0.5032082-0.170784-0.6943264-0.3166656s-0.3395386-0.3400497-0.4452648-0.5814819 c-0.1057243-0.2414398-0.1585865-0.5382843-0.1585865-0.8905334v-4.9355087h-1.23769V94.5291138z'/%3e %3cpath d='M29.9314594%2c94.5291138h1.23769v-2.5658569h1.8867779v2.5658569h1.6153526v1.3134232h-1.6153526v4.5131226 c0%2c0.2917557%2c0.075737%2c0.4905014%2c0.2266998%2c0.5962219c0.1509628%2c0.1057281%2c0.3619041%2c0.1585922%2c0.6338387%2c0.1585922 c0.1006432%2c0%2c0.2084007-0.0050812%2c0.3242912-0.0152512c0.1158905-0.0101624%2c0.2139893-0.0249023%2c0.2943001-0.0452347h0.0909843 v1.4943771c-0.161129%2c0.0299911-0.3471642%2c0.0574341-0.5586128%2c0.0828476 c-0.2114487%2c0.02491-0.4478035%2c0.0376129-0.7095757%2c0.0376129c-0.322258%2c0-0.6185913-0.0325241-0.8905258-0.0980988 c-0.2719383-0.0650635-0.5032101-0.170784-0.6943283-0.3166656c-0.1911163-0.1458817-0.3395386-0.3400497-0.4452629-0.5814819 c-0.1057243-0.2414398-0.1585865-0.5382843-0.1585865-0.8905334v-4.9355087h-1.23769V94.5291138z'/%3e %3cpath d='M39.1086655%2c102.8310394c-0.6440048%2c0-1.2204094-0.1108093-1.7281914-0.3319168 c-0.5082932-0.221611-0.9388161-0.5235367-1.290554-0.905777c-0.3527527-0.3822327-0.6216393-0.8325806-0.8076744-1.3510361 c-0.1865425-0.517952-0.2790527-1.0740204-0.2790527-1.6677017c0-0.6038513%2c0.0950508-1.1650085%2c0.2866783-1.6829605 c0.1911163-0.5184555%2c0.4625435-0.9688034%2c0.8147888-1.3510361c0.3522491-0.3822327%2c0.7751465-0.6816177%2c1.2681885-0.8981552 c0.4930458-0.2165298%2c1.0364075-0.3247986%2c1.6300926-0.3247986s1.1192589%2c0.0981064%2c1.5772285%2c0.2943039 c0.4579735%2c0.1962051%2c0.8579979%2c0.4757614%2c1.2000771%2c0.8381729c0.3924026%2c0.4223938%2c0.6841621%2c0.9383087%2c0.8752785%2c1.54673 c0.1911201%2c0.6089325%2c0.2815933%2c1.2905579%2c0.2719383%2c2.045372h-6.0227509 c0.070652%2c0.6943207%2c0.2892189%2c1.2554779%2c0.6567116%2c1.6829529c0.3669891%2c0.4279785%2c0.887989%2c0.6414642%2c1.5624924%2c0.6414642 c0.4625435%2c0%2c0.8422394-0.092514%2c1.1395874-0.2790527c0.2963333-0.1860352%2c0.5103264-0.4452667%2c0.6414642-0.7771835h1.8715324 c-0.1006432%2c0.361908-0.2541466%2c0.6968689-0.4605141%2c1.0033722c-0.2063675%2c0.307518-0.4655952%2c0.5738602-0.7771759%2c0.8000488 c-0.3120918%2c0.2266998-0.6719627%2c0.4025726-1.0791054%2c0.5286255 C40.0520554%2c102.768013%2c39.6017075%2c102.8310394%2c39.1086655%2c102.8310394z M39.0029411%2c95.7063141 c-0.6338387%2c0-1.1167183%2c0.1961975-1.4491386%2c0.5891113c-0.3319168%2c0.3924026-0.5382805%2c0.9052658-0.6185913%2c1.5396118h4.0149956 c-0.0406647-0.6643372-0.2292404-1.1853333-0.5662384-1.5624847 C40.0469742%2c95.895401%2c39.5864601%2c95.7063141%2c39.0029411%2c95.7063141z'/%3e %3cpath d='M47.6670303%2c102.8310394c-0.6440086%2c0-1.2204094-0.1108093-1.7281952-0.3319168 c-0.5082893-0.221611-0.9388123-0.5235367-1.2905502-0.905777c-0.3527565-0.3822327-0.6216431-0.8325806-0.8076782-1.3510361 c-0.1865425-0.517952-0.2790489-1.0740204-0.2790489-1.6677017c0-0.6038513%2c0.095047-1.1650085%2c0.2866745-1.6829605 c0.1911163-0.5184555%2c0.4625473-0.9688034%2c0.8147926-1.3510361s0.7751427-0.6816177%2c1.2681885-0.8981552 c0.493042-0.2165298%2c1.0364075-0.3247986%2c1.6300888-0.3247986c0.5936852%2c0%2c1.1192589%2c0.0981064%2c1.5772324%2c0.2943039 c0.4579697%2c0.1962051%2c0.8579941%2c0.4757614%2c1.2000771%2c0.8381729c0.3923988%2c0.4223938%2c0.6841583%2c0.9383087%2c0.8752785%2c1.54673 c0.1911163%2c0.6089325%2c0.2815933%2c1.2905579%2c0.2719345%2c2.045372h-6.0227509 c0.0706558%2c0.6943207%2c0.2892189%2c1.2554779%2c0.6567154%2c1.6829529c0.3669853%2c0.4279785%2c0.8879852%2c0.6414642%2c1.5624886%2c0.6414642 c0.4625435%2c0%2c0.8422394-0.092514%2c1.1395912-0.2790527c0.2963333-0.1860352%2c0.5103226-0.4452667%2c0.6414642-0.7771835h1.8715286 c-0.1006432%2c0.361908-0.2541466%2c0.6968689-0.4605141%2c1.0033722c-0.2063637%2c0.307518-0.4655952%2c0.5738602-0.7771759%2c0.8000488 c-0.3120918%2c0.2266998-0.6719627%2c0.4025726-1.0791054%2c0.5286255 C48.6104164%2c102.768013%2c48.1600723%2c102.8310394%2c47.6670303%2c102.8310394z M47.5613022%2c95.7063141 c-0.6338387%2c0-1.1167145%2c0.1961975-1.4491386%2c0.5891113c-0.331913%2c0.3924026-0.5382805%2c0.9052658-0.6185913%2c1.5396118h4.0149956 c-0.0406609-0.6643372-0.2292366-1.1853333-0.5662346-1.5624847S48.1448212%2c95.7063141%2c47.5613022%2c95.7063141z'/%3e %3cpath d='M51.5915489%2c94.5291138h1.23769v-2.5658569h1.8867798v2.5658569h1.6153526v1.3134232h-1.6153526v4.5131226 c0%2c0.2917557%2c0.075737%2c0.4905014%2c0.2266998%2c0.5962219c0.150959%2c0.1057281%2c0.3619003%2c0.1585922%2c0.6338387%2c0.1585922 c0.1006393%2c0%2c0.2084007-0.0050812%2c0.3242912-0.0152512c0.1158905-0.0101624%2c0.2139893-0.0249023%2c0.2943001-0.0452347h0.0909843 v1.4943771c-0.161129%2c0.0299911-0.3471642%2c0.0574341-0.5586128%2c0.0828476 c-0.2114487%2c0.02491-0.4478073%2c0.0376129-0.7095757%2c0.0376129c-0.322258%2c0-0.6185913-0.0325241-0.8905258-0.0980988 c-0.2719383-0.0650635-0.503212-0.170784-0.6943283-0.3166656s-0.3395386-0.3400497-0.4452629-0.5814819 c-0.1057243-0.2414398-0.1585884-0.5382843-0.1585884-0.8905334v-4.9355087h-1.23769V94.5291138z'/%3e %3cpath d='M62.2931252%2c102.5895996c-0.0706558-0.090477-0.1280899-0.2190704-0.1733284-0.3847733 c-0.0452385-0.166214-0.0782776-0.3852844-0.0981026-0.6567154h-0.0304947 c-0.2617722%2c0.3522491-0.588604%2c0.6465454-0.9810028%2c0.8829041c-0.3924026%2c0.236351-0.910862%2c0.3547897-1.5548668%2c0.3547897 c-0.3923988%2c0-0.7573547-0.0503235-1.0943527-0.1509628c-0.3369942-0.100647-0.6262131-0.2516098-0.8676529-0.4528885 c-0.2414398-0.2012863-0.4330635-0.4503479-0.5738602-0.7471924s-0.2109413-0.6414642-0.2109413-1.0338669 c0-0.4528885%2c0.0828514-0.8274994%2c0.2490616-1.1248474c0.1657028-0.2963333%2c0.3944359-0.5357361%2c0.6867027-0.7166901 c0.2917595-0.180954%2c0.6389236-0.3192062%2c1.0414886-0.4152756c0.4020615-0.0955582%2c0.8452911-0.1733246%2c1.328167-0.2338104 c0.6643372-0.0803146%2c1.1624641-0.1936646%2c1.4943771-0.3395386c0.3319168-0.1458817%2c0.498127-0.400032%2c0.498127-0.7624435 c0-0.3522415-0.1209717-0.6338348-0.3624115-0.8452835c-0.2414398-0.2114563-0.6038513-0.3166656-1.0867271-0.3166656 c-0.5433655%2c0-0.9484749%2c0.1153793-1.214817%2c0.3471603c-0.2668533%2c0.2312698-0.4101944%2c0.5484467-0.4305229%2c0.9505081h-1.8110466 c0.0096588-0.3415756%2c0.0879364-0.6714554%2c0.2338142-0.9886322c0.1458817-0.3166656%2c0.3624153-0.5962219%2c0.6490898-0.8376617 c0.2866783-0.2414398%2c0.6414642-0.4350967%2c1.0643616-0.5809784c0.4223938-0.1458817%2c0.920517-0.2190781%2c1.4938698-0.2190781 c0.4630547%2c0%2c0.8732452%2c0.0355835%2c1.2305756%2c0.1057281c0.356823%2c0.0706558%2c0.6663704%2c0.1916275%2c0.9281425%2c0.3624115 c0.7644691%2c0.4630508%2c1.147213%2c1.228035%2c1.147213%2c2.294426v4.241188c0%2c0.332428%2c0.0274467%2c0.5886002%2c0.0828514%2c0.7700653 c0.0554047%2c0.180954%2c0.1286011%2c0.3019257%2c0.2190704%2c0.3619003v0.1362228H62.2931252z M60.0139427%2c101.472374 c0.3319168%2c0%2c0.6236763-0.0528641%2c0.8752785-0.1585846c0.251606-0.105217%2c0.4630547-0.2414398%2c0.6343498-0.4071426 c0.170784-0.166214%2c0.3019257-0.3573303%2c0.3923988-0.5738602c0.090477-0.2160263%2c0.1357155-0.4401779%2c0.1357155-0.6714554 v-1.1924515c-0.1911163%2c0.1204681-0.4279823%2c0.2241592-0.7095757%2c0.3095474 c-0.2815933%2c0.0853958-0.5682716%2c0.1580811-0.8600311%2c0.2185669c-0.5941925%2c0.1108093-1.0516548%2c0.2541504-1.3739128%2c0.4300156 c-0.3217468%2c0.1763763-0.4828758%2c0.4859238-0.4828758%2c0.9286499c0%2c0.2109375%2c0.0376129%2c0.3898621%2c0.1133499%2c0.5357361 c0.0752258%2c0.1458817%2c0.175869%2c0.2617722%2c0.3019257%2c0.347168c0.1255455%2c0.0853882%2c0.2739677%2c0.145874%2c0.4452629%2c0.1809464 C59.6566162%2c101.4550934%2c59.8329926%2c101.472374%2c60.0139427%2c101.472374z'/%3e %3cpath d='M64.0289383%2c94.5291138h1.2376938v-2.5658569h1.8867798v2.5658569h1.6153488v1.3134232h-1.6153488v4.5131226 c0%2c0.2917557%2c0.0757294%2c0.4905014%2c0.2266922%2c0.5962219c0.1509628%2c0.1057281%2c0.361908%2c0.1585922%2c0.6338425%2c0.1585922 c0.1006393%2c0%2c0.2083969-0.0050812%2c0.3242874-0.0152512c0.1158905-0.0101624%2c0.2139969-0.0249023%2c0.2943039-0.0452347h0.0909882 v1.4943771c-0.1611328%2c0.0299911-0.347168%2c0.0574341-0.5586166%2c0.0828476 c-0.2114487%2c0.02491-0.4478073%2c0.0376129-0.7095718%2c0.0376129c-0.322258%2c0-0.6185913-0.0325241-0.8905334-0.0980988 c-0.2719345-0.0650635-0.5032043-0.170784-0.6943207-0.3166656s-0.3395386-0.3400497-0.4452667-0.5814819 c-0.1057205-0.2414398-0.1585846-0.5382843-0.1585846-0.8905334v-4.9355087h-1.2376938V94.5291138z'/%3e %3cpath d='M73.1609116%2c102.8310394c-0.6440048%2c0-1.2204132-0.1108093-1.7281952-0.3319168 c-0.5082932-0.221611-0.9388123-0.5235367-1.2905502-0.905777c-0.3527527-0.3822327-0.6216431-0.8325806-0.8076782-1.3510361 c-0.1865387-0.517952-0.2790527-1.0740204-0.2790527-1.6677017c0-0.6038513%2c0.0950546-1.1650085%2c0.2866821-1.6829605 c0.1911163-0.5184555%2c0.4625397-0.9688034%2c0.8147888-1.3510361s0.7751465-0.6816177%2c1.2681885-0.8981552 c0.493042-0.2165298%2c1.0364075-0.3247986%2c1.6300888-0.3247986c0.593689%2c0%2c1.1192627%2c0.0981064%2c1.5772324%2c0.2943039 c0.4579697%2c0.1962051%2c0.8579941%2c0.4757614%2c1.2000732%2c0.8381729c0.3924026%2c0.4223938%2c0.684166%2c0.9383087%2c0.8752823%2c1.54673 c0.1911163%2c0.6089325%2c0.2815933%2c1.2905579%2c0.2719345%2c2.045372H70.956955 c0.0706558%2c0.6943207%2c0.2892227%2c1.2554779%2c0.6567154%2c1.6829529c0.3669891%2c0.4279785%2c0.8879852%2c0.6414642%2c1.5624847%2c0.6414642 c0.4625473%2c0%2c0.8422394-0.092514%2c1.139595-0.2790527c0.2963333-0.1860352%2c0.5103226-0.4452667%2c0.6414642-0.7771835h1.8715286 c-0.1006393%2c0.361908-0.2541428%2c0.6968689-0.4605103%2c1.0033722c-0.2063675%2c0.307518-0.4655991%2c0.5738602-0.7771835%2c0.8000488 c-0.312088%2c0.2266998-0.6719589%2c0.4025726-1.0791016%2c0.5286255 C74.1043015%2c102.768013%2c73.6539536%2c102.8310394%2c73.1609116%2c102.8310394z M73.0551834%2c95.7063141 c-0.6338348%2c0-1.1167145%2c0.1961975-1.4491348%2c0.5891113c-0.3319168%2c0.3924026-0.5382843%2c0.9052658-0.6185913%2c1.5396118h4.0149918 c-0.0406647-0.6643372-0.2292404-1.1853333-0.5662384-1.5624847S73.6387024%2c95.7063141%2c73.0551834%2c95.7063141z'/%3e %3cpath d='M79.5907974%2c95.7063141h0.0452423c0.261261-0.4528885%2c0.6007996-0.7970047%2c1.0186157-1.0338669 c0.4178162-0.236351%2c0.9133987-0.3547897%2c1.4867554-0.3547897c0.8757858%2c0%2c1.5574036%2c0.2490692%2c2.0453644%2c0.7471924 s0.7319412%2c1.1848297%2c0.7319412%2c2.0606155v5.4641342h-1.9167709V97.442131c0-0.4828796-0.1336823-0.8600311-0.4000244-1.1319656 c-0.2668533-0.271431-0.6465454-0.4076538-1.1395874-0.4076538c-0.2719421%2c0-0.5184631%2c0.0482941-0.7395706%2c0.1438522 c-0.221611%2c0.0955582-0.4127274%2c0.2312698-0.5738602%2c0.4071426c-0.1606216%2c0.1763763-0.2866745%2c0.3852844-0.3771515%2c0.6267166 c-0.090477%2c0.2414398-0.1357117%2c0.503212-0.1357117%2c0.7848053v4.7245712h-1.9172745v-8.0604858h1.8720322V95.7063141z'/%3e %3c/g%3e%3c/g%3e%3c/svg%3e";

    var img$b = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 24.3.0%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 500 542.5' style='enable-background:new 0 0 500 542.5%3b' xml:space='preserve'%3e%3cg%3e %3cpath d='M0%2c428.5h34.5v6.8H21.2v35.7h-8v-35.7H0V428.5z'/%3e %3cpath d='M46.7%2c442.1c0%2c1-0.1%2c2-0.1%2c2.8h0.2c1-1.6%2c2.3-2.9%2c3.9-3.8c1.5-0.9%2c3.4-1.4%2c5.6-1.4c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8s2.8%2c4.5%2c2.8%2c7.8 v20.7h-7.3v-19.5c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5 c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3v-42.5h7.3V440C46.7%2c440.4%2c46.7%2c441.1%2c46.7%2c442.1z'/%3e %3cpath d='M87.1%2c472c-2.4%2c0-4.6-0.4-6.5-1.3s-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1s-1.1-4.1-1.1-6.3c0-2.3%2c0.4-4.4%2c1.1-6.4 c0.7-2%2c1.8-3.7%2c3.1-5.1c1.3-1.5%2c2.9-2.6%2c4.8-3.4c1.9-0.8%2c3.9-1.2%2c6.2-1.2c2.2%2c0%2c4.2%2c0.4%2c6%2c1.1c1.7%2c0.7%2c3.2%2c1.8%2c4.5%2c3.2 c1.5%2c1.6%2c2.6%2c3.6%2c3.3%2c5.9c0.7%2c2.3%2c1.1%2c4.9%2c1%2c7.7H78.8c0.3%2c2.6%2c1.1%2c4.8%2c2.5%2c6.4c1.4%2c1.6%2c3.4%2c2.4%2c5.9%2c2.4c1.7%2c0%2c3.2-0.4%2c4.3-1.1 c1.1-0.7%2c1.9-1.7%2c2.4-2.9h7.1c-0.4%2c1.4-1%2c2.6-1.7%2c3.8c-0.8%2c1.2-1.8%2c2.2-2.9%2c3c-1.2%2c0.9-2.5%2c1.5-4.1%2c2C90.7%2c471.7%2c89%2c472%2c87.1%2c472z M86.7%2c445c-2.4%2c0-4.2%2c0.7-5.5%2c2.2c-1.3%2c1.5-2%2c3.4-2.3%2c5.8h15.2c-0.1-2.5-0.9-4.5-2.1-5.9C90.7%2c445.7%2c88.9%2c445%2c86.7%2c445z'/%3e %3cpath d='M121.8%2c428.5h8.1l14.1%2c22.3c0.6%2c0.9%2c1.2%2c2%2c1.8%2c3.1c0.6%2c1.1%2c1.2%2c2.2%2c1.7%2c3.2c0.6%2c1.2%2c1.2%2c2.4%2c1.8%2c3.5h0.2 c-0.1-1.3-0.1-2.6-0.2-3.8c-0.1-1.1-0.1-2.3-0.2-3.5c0-1.3-0.1-2.4-0.1-3.5v-21.3h7.5v42.5h-8.1l-14.1-22.2c-0.6-0.9-1.2-2-1.8-3.2 c-0.6-1.2-1.2-2.2-1.7-3.2c-0.6-1.2-1.2-2.4-1.8-3.5h-0.1c0%2c1.3%2c0.1%2c2.6%2c0.2%2c3.8c0.1%2c1.1%2c0.1%2c2.3%2c0.2%2c3.5c0%2c1.3%2c0.1%2c2.4%2c0.1%2c3.5 v21.3h-7.5V428.5z'/%3e %3cpath d='M177.9%2c472c-2.4%2c0-4.5-0.4-6.4-1.3c-1.9-0.8-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1s-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4s1.8-3.7%2c3.1-5.1c1.4-1.5%2c3-2.6%2c4.9-3.4c1.9-0.8%2c4.1-1.2%2c6.4-1.2s4.5%2c0.4%2c6.4%2c1.2c1.9%2c0.8%2c3.5%2c2%2c4.9%2c3.4 c1.4%2c1.4%2c2.4%2c3.1%2c3.1%2c5.1s1.1%2c4.1%2c1.1%2c6.4c0%2c2.3-0.4%2c4.4-1.1%2c6.3s-1.8%2c3.7-3.1%2c5.1c-1.3%2c1.5-3%2c2.6-4.9%2c3.4S180.2%2c472%2c177.9%2c472z M177.8%2c466.5c1.3%2c0%2c2.5-0.3%2c3.5-0.8c1-0.5%2c1.9-1.3%2c2.5-2.2c0.7-1%2c1.2-2.1%2c1.6-3.4c0.4-1.3%2c0.5-2.7%2c0.5-4.2c0-1.5-0.2-2.9-0.5-4.3 c-0.4-1.3-0.9-2.5-1.6-3.4c-0.7-1-1.5-1.7-2.5-2.3c-1-0.5-2.2-0.8-3.5-0.8c-1.3%2c0-2.5%2c0.3-3.5%2c0.8c-1%2c0.5-1.9%2c1.3-2.6%2c2.3 c-0.7%2c1-1.2%2c2.1-1.5%2c3.4c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.3c0%2c1.5%2c0.2%2c2.9%2c0.5%2c4.2c0.3%2c1.3%2c0.9%2c2.4%2c1.5%2c3.4c0.7%2c0.9%2c1.5%2c1.7%2c2.6%2c2.2 C175.3%2c466.2%2c176.5%2c466.5%2c177.8%2c466.5z'/%3e %3cpath d='M205.4%2c446h0.2c1.9-4%2c4.9-5.9%2c8.8-5.9c0.9%2c0%2c1.5%2c0.1%2c1.9%2c0.3v6.5h-0.2c-0.6-0.1-1.3-0.2-2-0.2c-2.4%2c0-4.4%2c0.7-6%2c2.3 c-1.6%2c1.6-2.4%2c3.8-2.4%2c6.8v15.3h-7.3v-30.5h7V446z'/%3e %3cpath d='M218.8%2c440.5h7.5l3.9%2c14.2c0.2%2c0.9%2c0.5%2c1.9%2c0.7%2c2.9c0.2%2c1.1%2c0.4%2c2.1%2c0.6%2c3c0.2%2c1.1%2c0.4%2c2.2%2c0.6%2c3.3h0.1 c0.2-1.1%2c0.4-2.1%2c0.6-3.2c0.2-0.9%2c0.4-1.9%2c0.6-3c0.2-1.1%2c0.5-2.1%2c0.7-3l3.8-14.2h6.4l3.9%2c14.2c0.2%2c0.9%2c0.5%2c1.8%2c0.7%2c2.9 c0.2%2c1.1%2c0.4%2c2.1%2c0.6%2c3c0.2%2c1.1%2c0.4%2c2.2%2c0.6%2c3.3h0.1c0.2-1.1%2c0.4-2.2%2c0.6-3.3c0.2-0.9%2c0.4-1.9%2c0.6-3c0.2-1.1%2c0.5-2.1%2c0.8-3 l4.1-14.2h7.3l-9.7%2c30.5h-7l-3.8-14.5c-0.2-0.8-0.4-1.7-0.6-2.7c-0.2-1-0.4-2-0.6-2.9c-0.2-1.1-0.4-2.2-0.6-3.3h-0.1 c-0.2%2c1.1-0.5%2c2.2-0.7%2c3.3c-0.2%2c0.9-0.4%2c1.9-0.6%2c2.9c-0.2%2c1-0.4%2c1.9-0.6%2c2.7l-3.9%2c14.5h-7L218.8%2c440.5z'/%3e %3cpath d='M280.7%2c472c-2.4%2c0-4.6-0.4-6.5-1.3s-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1c-0.7-2-1.1-4.1-1.1-6.3c0-2.3%2c0.4-4.4%2c1.1-6.4 c0.7-2%2c1.8-3.7%2c3.1-5.1c1.3-1.5%2c2.9-2.6%2c4.8-3.4c1.9-0.8%2c3.9-1.2%2c6.2-1.2c2.2%2c0%2c4.2%2c0.4%2c6%2c1.1c1.7%2c0.7%2c3.2%2c1.8%2c4.5%2c3.2 c1.5%2c1.6%2c2.6%2c3.6%2c3.3%2c5.9c0.7%2c2.3%2c1.1%2c4.9%2c1%2c7.7h-22.8c0.3%2c2.6%2c1.1%2c4.8%2c2.5%2c6.4c1.4%2c1.6%2c3.4%2c2.4%2c5.9%2c2.4c1.7%2c0%2c3.2-0.4%2c4.3-1.1 c1.1-0.7%2c1.9-1.7%2c2.4-2.9h7.1c-0.4%2c1.4-1%2c2.6-1.7%2c3.8c-0.8%2c1.2-1.8%2c2.2-2.9%2c3s-2.5%2c1.5-4.1%2c2C284.2%2c471.7%2c282.5%2c472%2c280.7%2c472z M280.3%2c445c-2.4%2c0-4.2%2c0.7-5.5%2c2.2c-1.3%2c1.5-2%2c3.4-2.3%2c5.8h15.2c-0.1-2.5-0.9-4.5-2.1-5.9C284.2%2c445.7%2c282.5%2c445%2c280.3%2c445z'/%3e %3cpath d='M313.7%2c481.7c-4.1%2c0-7.4-0.8-9.8-2.4c-2.4-1.6-3.8-3.8-4.2-6.7h7c0.5%2c2.5%2c2.8%2c3.8%2c6.9%2c3.8c4.9%2c0%2c7.4-2.2%2c7.4-6.7v-0.7 c0-0.8%2c0-1.6%2c0-2.3c0-0.7%2c0-1.4%2c0.1-1.9H321c-1%2c1.5-2.1%2c2.7-3.5%2c3.5c-1.4%2c0.8-3.1%2c1.2-5.1%2c1.2c-1.9%2c0-3.6-0.3-5.2-1 c-1.6-0.7-3-1.7-4.2-2.9c-1.2-1.3-2.1-2.8-2.8-4.6c-0.7-1.8-1-3.9-1-6.1c0-2.3%2c0.3-4.4%2c1-6.2c0.7-1.9%2c1.6-3.4%2c2.7-4.7 c1.1-1.3%2c2.5-2.3%2c4.1-3c1.6-0.7%2c3.3-1.1%2c5.1-1.1c4.2%2c0%2c7.2%2c1.6%2c9%2c4.7h0.1v-3.9h7v28.5c0%2c2.2-0.3%2c4-1%2c5.6c-0.7%2c1.6-1.6%2c2.9-2.8%2c3.9 c-1.3%2c1.1-2.8%2c1.8-4.6%2c2.3C317.9%2c481.4%2c315.9%2c481.7%2c313.7%2c481.7z M313.6%2c463.8c1.4%2c0%2c2.5-0.2%2c3.5-0.7c1-0.5%2c1.8-1.1%2c2.4-1.9 c0.6-0.8%2c1.1-1.8%2c1.3-2.9c0.3-1.1%2c0.4-2.4%2c0.4-3.7c0-2.7-0.6-4.9-1.9-6.6c-1.3-1.7-3.2-2.5-5.8-2.5c-2.4%2c0-4.2%2c0.8-5.5%2c2.5 c-1.3%2c1.7-1.9%2c3.9-1.9%2c6.7s0.6%2c5.1%2c1.9%2c6.7C309.4%2c463%2c311.2%2c463.8%2c313.6%2c463.8z'/%3e %3cpath d='M333.5%2c428.5h7.4v7h-7.4V428.5z M333.6%2c440.5h7.3v30.5h-7.3V440.5z'/%3e %3cpath d='M367.2%2c471.1c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.4-3.7%2c3.3s-3.5%2c1.3-5.9%2c1.3 c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-0.9-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9c0-1.7%2c0.3-3.1%2c0.9-4.3 c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3s1.9-1.5%2c1.9-2.9 c0-1.3-0.5-2.4-1.4-3.2s-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6h-6.9c0-1.3%2c0.3-2.5%2c0.9-3.7 c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2s3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4 c2.9%2c1.8%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H367.2z M358.6%2c466.8c1.3%2c0%2c2.4-0.2%2c3.3-0.6 c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.4%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.9-2.7%2c1.2 c-1.1%2c0.3-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6c-1.2%2c0.7-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3 s1%2c0.5%2c1.7%2c0.7C357.3%2c466.8%2c357.9%2c466.8%2c358.6%2c466.8z'/%3e %3cpath d='M384.6%2c445h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3 v-19.5c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5s-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4 c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3v-30.5h7.1V445z'/%3e %3cpath d='M0%2c499h34.5v6.8H21.2v35.7h-8v-35.7H0V499z'/%3e %3cpath d='M52.6%2c541.5c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.5-3.7%2c3.3c-1.5%2c0.9-3.5%2c1.3-5.9%2c1.3 c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-1-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9c0-1.7%2c0.3-3.1%2c0.9-4.3 c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3c1.3-0.5%2c1.9-1.5%2c1.9-2.9 c0-1.3-0.5-2.4-1.4-3.2c-0.9-0.8-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6H33c0-1.3%2c0.3-2.5%2c0.9-3.7 c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2c1.6-0.5%2c3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4 c2.9%2c1.7%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H52.6z M44%2c537.3c1.3%2c0%2c2.4-0.2%2c3.3-0.6 c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.3%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.8-2.7%2c1.2 c-1.1%2c0.3-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6s-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3 c0.5%2c0.3%2c1%2c0.6%2c1.7%2c0.7C42.7%2c537.2%2c43.3%2c537.3%2c44%2c537.3z'/%3e %3cpath d='M73.7%2c525.5L63.8%2c511h8.3l3%2c4.8c0.3%2c0.5%2c0.6%2c1.1%2c0.9%2c1.7c0.3%2c0.6%2c0.6%2c1.2%2c0.9%2c1.7c0.3%2c0.7%2c0.7%2c1.3%2c1%2c1.9h0.1 c0.3-0.6%2c0.6-1.3%2c1-1.9c0.3-0.5%2c0.6-1.1%2c0.9-1.7c0.3-0.6%2c0.6-1.2%2c0.9-1.7l3.1-4.8h7.8l-9.7%2c14.2l11.2%2c16.3H85l-4-6.1 c-0.3-0.5-0.7-1.1-1.1-1.8c-0.4-0.7-0.7-1.3-1-1.9c-0.4-0.7-0.7-1.4-1-2.1h-0.1c-0.3%2c0.7-0.7%2c1.4-1.1%2c2.1c-0.3%2c0.6-0.7%2c1.3-1%2c1.9 c-0.4%2c0.7-0.7%2c1.3-1%2c1.8l-4.1%2c6.1h-8L73.7%2c525.5z'/%3e %3cpath d='M125.2%2c499h8.5l15.5%2c42.5h-8.5l-3.4-10.1h-16.1l-3.4%2c10.1h-8L125.2%2c499z M123.2%2c525.6h12.2l-3.3-9.8 c-0.4-1.3-0.8-2.5-1.1-3.7c-0.3-1.2-0.6-2.3-0.8-3.3c-0.3-1.1-0.5-2.2-0.7-3.3h-0.1c-0.3%2c1.2-0.6%2c2.4-0.9%2c3.6 c-0.3%2c1-0.6%2c2.1-0.9%2c3.3c-0.3%2c1.2-0.7%2c2.3-1%2c3.3L123.2%2c525.6z'/%3e %3cpath d='M163.9%2c542.5c-2%2c0-3.9-0.4-5.5-1.1c-1.6-0.7-3-1.8-4.2-3.2c-1.1-1.4-2-3.1-2.7-5.1c-0.6-2-0.9-4.2-0.9-6.7 c0-2.4%2c0.3-4.7%2c1-6.6c0.7-2%2c1.6-3.7%2c2.7-5.1c1.2-1.4%2c2.6-2.5%2c4.2-3.3s3.4-1.1%2c5.3-1.1c2.1%2c0%2c4%2c0.5%2c5.5%2c1.4c1.6%2c0.9%2c2.8%2c2.2%2c3.8%2c3.8 h0.1c-0.1-0.8-0.1-1.8-0.2-2.9c0-1.1-0.1-2.3-0.1-3.4V499h7.3v42.5h-7v-4.5h-0.1c-0.9%2c1.8-2.2%2c3.1-3.8%2c4.1 C167.9%2c542.1%2c166%2c542.5%2c163.9%2c542.5z M165.4%2c536.6c1.3%2c0%2c2.5-0.3%2c3.5-0.7c1-0.5%2c1.9-1.2%2c2.5-2.1c0.7-0.9%2c1.2-2%2c1.5-3.3 c0.3-1.3%2c0.5-2.6%2c0.5-4.1c0-1.5-0.2-2.9-0.5-4.2c-0.3-1.3-0.9-2.4-1.5-3.3c-0.7-0.9-1.5-1.7-2.5-2.2c-1-0.5-2.2-0.8-3.5-0.8 c-1.2%2c0-2.3%2c0.3-3.2%2c0.8c-0.9%2c0.5-1.7%2c1.2-2.3%2c2.2c-0.6%2c0.9-1.1%2c2-1.4%2c3.3c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.1c0%2c3.1%2c0.6%2c5.5%2c1.8%2c7.4 C161.1%2c535.6%2c162.9%2c536.6%2c165.4%2c536.6z'/%3e %3cpath d='M187.1%2c511h7v4.6h0.2c1-1.7%2c2.2-3.1%2c3.7-4c1.5-0.9%2c3.3-1.4%2c5.4-1.4c1.9%2c0%2c3.6%2c0.5%2c5%2c1.4c1.4%2c0.9%2c2.4%2c2.4%2c3.1%2c4.3h0.1 c1.2-2%2c2.7-3.4%2c4.3-4.3c1.6-0.9%2c3.4-1.4%2c5.3-1.4c3.1%2c0%2c5.6%2c0.9%2c7.3%2c2.8c1.7%2c1.9%2c2.6%2c4.5%2c2.6%2c7.8v20.7h-7.3v-19.7 c0-1.8-0.5-3.1-1.4-4.1c-0.9-1-2.1-1.5-3.6-1.5c-1.8%2c0-3.3%2c0.7-4.4%2c2c-1.2%2c1.3-1.7%2c3.1-1.7%2c5.3v18.1h-7.3v-19.7 c0-1.8-0.4-3.1-1.3-4.1c-0.8-1-2-1.5-3.5-1.5c-0.8%2c0-1.6%2c0.2-2.4%2c0.5c-0.8%2c0.4-1.4%2c0.9-2%2c1.5c-0.6%2c0.6-1.1%2c1.4-1.4%2c2.3 c-0.3%2c0.9-0.5%2c1.9-0.5%2c2.9v18.1h-7.3V511z'/%3e %3cpath d='M237.4%2c499h7.4v7h-7.4V499z M237.5%2c511h7.3v30.5h-7.3V511z'/%3e %3cpath d='M258.4%2c515.5h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3 V522c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4 c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3V511h7.1V515.5z'/%3e %3cpath d='M284.9%2c499h7.4v7h-7.4V499z M285%2c511h7.3v30.5H285V511z'/%3e %3cpath d='M311.1%2c542.5c-4.4%2c0-7.8-1-10.2-2.9c-2.4-1.9-3.7-4.4-4-7.5h7c0.3%2c1.8%2c1.1%2c3.2%2c2.4%2c4c1.3%2c0.8%2c2.9%2c1.2%2c4.9%2c1.2 c2%2c0%2c3.5-0.4%2c4.5-1.2c0.9-0.8%2c1.4-1.8%2c1.4-3c0-0.8-0.2-1.4-0.6-1.9c-0.4-0.5-0.9-0.9-1.6-1.2c-0.7-0.3-1.5-0.6-2.5-0.8 c-1-0.2-2-0.4-3.2-0.7c-1.4-0.3-2.8-0.6-4.2-1c-1.3-0.4-2.5-0.9-3.5-1.6c-1-0.7-1.9-1.5-2.5-2.6c-0.6-1.1-0.9-2.5-0.9-4.2 c0-1.4%2c0.3-2.7%2c0.9-3.9c0.6-1.1%2c1.4-2.1%2c2.5-2.9c1-0.8%2c2.3-1.4%2c3.8-1.8c1.5-0.4%2c3.1-0.6%2c4.9-0.6c4.1%2c0%2c7.2%2c0.8%2c9.2%2c2.5 c2.1%2c1.7%2c3.3%2c3.8%2c3.7%2c6.5H316c-0.5-2.7-2.6-4.1-6.1-4.1c-1.7%2c0-3%2c0.3-3.9%2c1c-0.9%2c0.7-1.3%2c1.6-1.3%2c2.6c0%2c0.7%2c0.2%2c1.2%2c0.6%2c1.7 s0.9%2c0.8%2c1.6%2c1.1c0.7%2c0.3%2c1.5%2c0.5%2c2.5%2c0.7c0.9%2c0.2%2c2%2c0.4%2c3.1%2c0.6c1.5%2c0.3%2c2.9%2c0.6%2c4.2%2c0.9c1.4%2c0.4%2c2.6%2c0.9%2c3.7%2c1.6 c1.1%2c0.7%2c2%2c1.6%2c2.6%2c2.8c0.6%2c1.2%2c1%2c2.7%2c1%2c4.5c0%2c1.6-0.3%2c3-1%2c4.2c-0.7%2c1.2-1.6%2c2.2-2.7%2c3.1c-1.2%2c0.8-2.5%2c1.4-4.1%2c1.9 S312.9%2c542.5%2c311.1%2c542.5z'/%3e %3cpath d='M326.5%2c511h4.7v-9.7h7.1v9.7h6.1v5h-6.1v17.1c0%2c1.1%2c0.3%2c1.9%2c0.9%2c2.3c0.6%2c0.4%2c1.4%2c0.6%2c2.4%2c0.6c0.4%2c0%2c0.8%2c0%2c1.2-0.1 c0.4%2c0%2c0.8-0.1%2c1.1-0.2h0.3v5.7c-0.6%2c0.1-1.3%2c0.2-2.1%2c0.3c-0.8%2c0.1-1.7%2c0.1-2.7%2c0.1c-1.2%2c0-2.3-0.1-3.4-0.4c-1-0.3-1.9-0.7-2.6-1.2 c-0.7-0.5-1.3-1.3-1.7-2.2c-0.4-0.9-0.6-2-0.6-3.4V516h-4.7V511z'/%3e %3cpath d='M356.6%2c516.5h0.2c1.9-4%2c4.9-5.9%2c8.8-5.9c0.9%2c0%2c1.5%2c0.1%2c1.9%2c0.3v6.5h-0.2c-0.6-0.1-1.3-0.2-2-0.2c-2.4%2c0-4.4%2c0.7-6%2c2.3 c-1.6%2c1.6-2.4%2c3.8-2.4%2c6.8v15.3h-7.3V511h7V516.5z'/%3e %3cpath d='M391.1%2c541.5c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.5-3.7%2c3.3c-1.5%2c0.9-3.5%2c1.3-5.9%2c1.3 c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-1-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9c0-1.7%2c0.3-3.1%2c0.9-4.3 c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3c1.3-0.5%2c1.9-1.5%2c1.9-2.9 c0-1.3-0.5-2.4-1.4-3.2c-0.9-0.8-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6h-6.9c0-1.3%2c0.3-2.5%2c0.9-3.7 c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2c1.6-0.5%2c3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4 c2.9%2c1.7%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H391.1z M382.4%2c537.3c1.3%2c0%2c2.4-0.2%2c3.3-0.6 c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.3%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.8-2.7%2c1.2s-2.1%2c0.6-3.3%2c0.8 c-2.3%2c0.4-4%2c1-5.2%2c1.6s-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3c0.5%2c0.3%2c1%2c0.6%2c1.7%2c0.7 C381.1%2c537.2%2c381.8%2c537.3%2c382.4%2c537.3z'/%3e %3cpath d='M401.3%2c511h4.7v-9.7h7.1v9.7h6.1v5h-6.1v17.1c0%2c1.1%2c0.3%2c1.9%2c0.9%2c2.3c0.6%2c0.4%2c1.4%2c0.6%2c2.4%2c0.6c0.4%2c0%2c0.8%2c0%2c1.2-0.1 c0.4%2c0%2c0.8-0.1%2c1.1-0.2h0.3v5.7c-0.6%2c0.1-1.3%2c0.2-2.1%2c0.3c-0.8%2c0.1-1.7%2c0.1-2.7%2c0.1c-1.2%2c0-2.3-0.1-3.4-0.4c-1-0.3-1.9-0.7-2.6-1.2 c-0.7-0.5-1.3-1.3-1.7-2.2c-0.4-0.9-0.6-2-0.6-3.4V516h-4.7V511z'/%3e %3cpath d='M424.2%2c499h7.4v7h-7.4V499z M424.3%2c511h7.3v30.5h-7.3V511z'/%3e %3cpath d='M452.2%2c542.5c-2.4%2c0-4.5-0.4-6.4-1.3c-1.9-0.8-3.6-2-4.9-3.4c-1.3-1.5-2.4-3.2-3.1-5.1c-0.7-2-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4c0.7-2%2c1.8-3.7%2c3.1-5.1c1.4-1.5%2c3-2.6%2c4.9-3.4c1.9-0.8%2c4.1-1.2%2c6.4-1.2c2.4%2c0%2c4.5%2c0.4%2c6.4%2c1.2 c1.9%2c0.8%2c3.5%2c2%2c4.9%2c3.4c1.4%2c1.5%2c2.4%2c3.2%2c3.1%2c5.1c0.7%2c2%2c1.1%2c4.1%2c1.1%2c6.4c0%2c2.3-0.4%2c4.4-1.1%2c6.3c-0.7%2c2-1.8%2c3.7-3.1%2c5.1 c-1.3%2c1.4-3%2c2.6-4.9%2c3.4C456.7%2c542%2c454.5%2c542.5%2c452.2%2c542.5z M452.1%2c537c1.3%2c0%2c2.5-0.3%2c3.5-0.8c1-0.5%2c1.9-1.3%2c2.5-2.2 c0.7-0.9%2c1.2-2.1%2c1.6-3.4c0.4-1.3%2c0.5-2.7%2c0.5-4.2s-0.2-2.9-0.5-4.3c-0.4-1.3-0.9-2.5-1.6-3.4c-0.7-1-1.5-1.7-2.5-2.3 c-1-0.5-2.2-0.8-3.5-0.8c-1.3%2c0-2.5%2c0.3-3.5%2c0.8c-1%2c0.5-1.9%2c1.3-2.6%2c2.3c-0.7%2c1-1.2%2c2.1-1.5%2c3.4c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.3 s0.2%2c2.9%2c0.5%2c4.2c0.3%2c1.3%2c0.9%2c2.4%2c1.5%2c3.4c0.7%2c1%2c1.5%2c1.7%2c2.6%2c2.2C449.6%2c536.7%2c450.8%2c537%2c452.1%2c537z'/%3e %3cpath d='M479.8%2c515.5h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3 V522c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4 c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3V511h7.1V515.5z'/%3e%3c/g%3e%3cg%3e %3cpath d='M0.2%2c0v405h405V0H0.2z M197.6%2c280.7c-69.5%2c0-125.9-30.7-125.9-68.7c0-37.9%2c56.3-68.6%2c125.7-68.7l0-33.9 c21.5%2c0%2c42.1%2c2.9%2c59.8%2c8.1l-59.5%2c59.9V212l59.5-60.5c39.5%2c11.6%2c66.4%2c34.3%2c66.4%2c60.5C323.6%2c249.9%2c267.2%2c280.7%2c197.6%2c280.7z'/%3e%3c/g%3e%3c/svg%3e";

    var img$a = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3csvg width='113px' height='212px' viewBox='0 0 113 212' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3e%3cg id='Group-69' transform='translate(0.000000%2c 0.040000)'%3e%3cpath d='M59.4619%2c0.0059 L59.4619%2c5.4009 L64.5749%2c5.4009 L64.5479%2c10.6879 L59.5019%2c10.6879 L59.5019%2c17.6669 C59.7719%2c17.8809 60.0929%2c17.9889 60.4149%2c18.0959 C63.8769%2c19.4919 66.1589%2c23.0879 66.1059%2c26.8189 C66.0779%2c29.6639 64.9779%2c32.2949 62.6959%2c34.0389 L62.6959%2c34.1199 C64.8979%2c33.8249 67.1519%2c33.6099 69.4069%2c33.3949 L69.4599%2c33.3679 C73.1909%2c33.2069 77.1369%2c32.7779 80.8149%2c33.5289 C81.5109%2c33.7169 82.2089%2c33.9049 82.8269%2c34.2539 C84.1949%2c34.1469 85.5109%2c34.1469 86.8799%2c34.0929 C88.3019%2c34.0929 89.6979%2c34.0929 91.1199%2c34.1729 C92.1939%2c34.1729 93.0799%2c34.2539 94.1259%2c34.3339 L94.3409%2c34.2809 C97.1859%2c34.4689 99.9509%2c34.7909 102.7149%2c35.4349 C104.4329%2c35.8109 106.3389%2c37.0179 106.7949%2c38.8439 C107.2239%2c40.6149 106.4729%2c42.2519 106.2319%2c43.9429 C105.9629%2c45.4199 105.5069%2c46.8419 105.2919%2c48.3449 C105.6139%2c48.6139 106.1779%2c48.5869 106.5529%2c48.8009 C106.9019%2c48.9359 107.3049%2c48.9889 107.5199%2c49.2849 C107.0099%2c51.1099 106.5799%2c52.8809 106.0699%2c54.6789 C104.7549%2c59.7789 103.5739%2c64.8519 102.6079%2c70.0859 C102.3129%2c71.2939 102.0709%2c72.5009 101.8569%2c73.6819 C101.8829%2c73.8169 101.9909%2c73.7759 102.0709%2c73.8029 C101.8569%2c73.6419 112.4579%2c73.8029 112.4579%2c73.8029 L112.5389%2c73.7899 C112.5919%2c75.0779 112.4849%2c76.4469 112.4849%2c77.6549 C112.2969%2c82.5659 112.1629%2c87.3979 111.9209%2c92.2019 C111.9479%2c92.6049 111.8149%2c93.0339 111.8679%2c93.4369 C111.7869%2c94.8859 111.8149%2c96.3619 111.6529%2c97.8919 C111.4649%2c100.7639 111.3039%2c103.6899 111.0359%2c106.5619 C111.0359%2c107.6079 110.8209%2c108.6819 110.8479%2c109.7289 C110.6869%2c110.8289 110.7139%2c111.7949 110.5789%2c112.8959 C110.3919%2c115.5259 110.0429%2c118.0489 109.8279%2c120.6799 C109.4519%2c123.4439 109.0499%2c126.3159 108.6199%2c129.1069 C107.5199%2c137.2669 105.5869%2c145.2379 103.2519%2c152.9949 C102.6079%2c154.7939 101.9909%2c156.5919 101.2929%2c158.3629 C100.0309%2c161.9059 98.3129%2c165.2609 96.5689%2c168.6159 C94.4749%2c172.3199 92.3009%2c175.9439 89.6709%2c179.4059 C84.4639%2c186.6529 77.9689%2c193.4699 71.3659%2c199.6169 C68.1179%2c202.5419 64.8439%2c205.3339 61.4619%2c208.0709 C60.0929%2c209.1719 58.6169%2c210.2719 57.2209%2c211.2119 L57.0599%2c211.1849 C50.2959%2c206.6489 43.7469%2c201.0929 37.8419%2c195.2419 C32.8499%2c190.3029 28.0729%2c184.8009 24.0199%2c179.1639 C19.1879%2c172.8299 15.4309%2c166.0129 12.5049%2c158.8459 C12.0489%2c157.7189 11.6459%2c156.5379 11.1899%2c155.4109 C9.5259%2c150.9019 8.1029%2c146.2849 6.9759%2c141.5339 C5.6609%2c136.4619 4.8289%2c131.1469 4.1039%2c125.9129 C3.7819%2c123.2829 3.4329%2c120.7599 3.2179%2c118.0759 C2.8699%2c114.4259 2.4399%2c110.8559 2.1989%2c107.1789 C2.1449%2c105.8099 2.1179%2c104.4949 2.0109%2c103.0989 C2.0109%2c102.6159 1.9029%2c102.1059 1.8759%2c101.5689 C1.5809%2c98.0529 1.5279%2c94.5369 1.2319%2c91.0209 C1.1519%2c89.8129 1.2049%2c88.3909 1.0439%2c87.1829 C1.0439%2c85.6529 0.8569%2c84.0959 0.8299%2c82.5929 C0.8569%2c79.6409 0.4809%2c76.8489 0.5609%2c73.8969 C0.5609%2c73.8969 11.7139%2c74.0869 11.4849%2c73.8429 C11.4849%2c72.6619 11.0289%2c71.5889 10.8679%2c70.4349 C10.2509%2c67.2409 9.4989%2c64.0469 8.7479%2c60.8529 C7.8079%2c56.9879 6.6539%2c53.1499 5.5799%2c49.2849 C5.5799%2c49.0699 5.7949%2c48.9359 6.0099%2c48.9359 L7.8079%2c48.3719 L7.9149%2c48.2909 C7.4859%2c45.6069 6.7609%2c43.0039 6.3589%2c40.3199 C6.2509%2c38.7359 7.0569%2c37.2329 8.4249%2c36.3739 C9.5529%2c35.5959 10.9479%2c35.3809 12.2899%2c35.0589 C13.2569%2c34.8439 14.1689%2c34.8179 15.1089%2c34.6299 C15.1619%2c34.4949 15.2429%2c34.6569 15.3229%2c34.6299 C19.9129%2c34.1729 24.3689%2c33.9589 28.9579%2c34.1469 L30.4609%2c34.1469 C31.5349%2c33.2879 32.9039%2c33.2339 34.2189%2c33.0459 C34.7829%2c33.0999 35.5069%2c32.9659 36.0979%2c33.0189 C41.0099%2c32.8849 46.0549%2c33.3949 50.7789%2c34.0119 C50.4839%2c33.6629 50.0549%2c33.3149 49.7589%2c32.9119 C47.5319%2c30.3619 46.9139%2c26.2819 48.2559%2c23.1419 C49.2229%2c20.7799 51.4239%2c18.7399 53.7589%2c17.8549 L53.8389%2c17.6929 L53.8549%2c10.4959 L48.5649%2c10.4959 L48.5649%2c5.4539 L48.7129%2c5.3339 L53.8389%2c5.3339 L53.8389%2c0.0059 L59.4619%2c0.0059 Z M41.9489%2c37.0449 C40.2039%2c37.1799 38.2179%2c36.8569 36.5809%2c37.5019 C36.2319%2c37.7969 35.8559%2c38.0119 35.8029%2c38.4679 C35.6949%2c39.9439 35.7489%2c41.5279 36.0709%2c42.9769 C36.7419%2c43.0309 37.3589%2c42.7889 38.0569%2c42.7889 C40.9289%2c42.3869 43.8009%2c42.2519 46.7269%2c42.1719 C48.8739%2c42.0639 51.0209%2c42.1719 53.1139%2c42.0909 C53.1139%2c40.7759 52.9529%2c39.5679 52.8729%2c38.1729 L52.7389%2c38.0379 C49.6249%2c37.5549 46.3779%2c37.2869 43.2099%2c37.1259 L41.9489%2c37.0449 Z M72.3589%2c37.1259 C68.3599%2c37.2329 64.5749%2c37.7429 60.6569%2c38.0919 L60.3879%2c38.1989 L60.0659%2c41.9839 L60.1479%2c42.0639 C62.6159%2c42.1719 64.9509%2c42.1989 67.4469%2c42.3059 C70.7219%2c42.4669 74.1039%2c42.7889 77.2719%2c43.2449 L77.4849%2c43.1919 C77.6199%2c42.2259 77.7809%2c41.2059 77.8339%2c40.1859 C77.9149%2c39.3269 78.0489%2c38.2799 77.1909%2c37.7429 C75.6869%2c37.0179 74.0239%2c37.2329 72.3589%2c37.1259 L72.3589%2c37.1259 Z M86.7729%2c38.2529 C86.1009%2c38.3609 85.2149%2c38.2259 84.5709%2c38.3609 C84.3829%2c39.5949 84.1419%2c40.9639 83.9539%2c42.2259 C83.8729%2c42.8429 83.6319%2c43.5139 83.6319%2c44.1579 C83.7659%2c44.2389 83.9539%2c44.2919 84.0609%2c44.2119 C84.9739%2c44.5609 86.0219%2c44.5879 86.9059%2c44.9899 C91.0129%2c46.0899 94.6909%2c48.2909 98.1519%2c50.9219 L98.3399%2c50.9219 C98.4749%2c50.0899 99.1989%2c49.3379 99.9239%2c48.8549 L100.3269%2c47.1909 C100.7019%2c45.3119 101.3199%2c43.5679 101.2659%2c41.5279 C101.1059%2c40.8839 100.5679%2c40.2129 99.9509%2c39.9439 C98.3669%2c39.1929 96.5689%2c38.9509 94.7969%2c38.6829 C92.1669%2c38.4139 89.4289%2c38.3069 86.7729%2c38.2529 L86.7729%2c38.2529 Z M28.7699%2c38.3869 C25.8449%2c38.4409 23.0529%2c38.3609 20.0739%2c38.6019 C17.7659%2c38.8699 15.4309%2c38.8969 13.3369%2c39.8369 C12.6129%2c40.2129 12.3169%2c41.0179 12.2899%2c41.7419 C12.4249%2c43.9159 13.0689%2c46.1169 13.4449%2c48.2909 C13.4709%2c49.1769 14.5449%2c49.4189 14.8669%2c50.2239 C15.0009%2c50.4649 15.0549%2c50.7609 15.2429%2c50.9489 C15.8599%2c50.5459 16.4509%2c49.9019 17.0409%2c49.4989 C20.7989%2c46.7079 25.0399%2c45.2049 29.5489%2c44.2919 L29.7629%2c44.1309 L29.5759%2c42.6819 C29.4149%2c41.2589 29.1999%2c39.8639 29.0659%2c38.4409 L28.7699%2c38.3869 L28.7699%2c38.3869 Z' id='Fill-31' fill='black'%3e%3c/path%3e%3cpath d='M58.6025%2c0.8911 L58.6325%2c6.2241 L63.6655%2c6.2241 L63.6635%2c9.7761 L58.6695%2c9.7761 L58.5235%2c9.9641 C58.5235%2c9.9641 58.4665%2c17.3061 58.5235%2c17.4251 C58.1465%2c17.5061 57.7315%2c17.3981 57.3285%2c17.3711 C56.4695%2c17.3451 55.5815%2c17.3981 54.7485%2c17.5321 L54.7485%2c9.7661 L49.5985%2c9.7661 L49.6245%2c6.2461 L54.8045%2c6.2461 L54.8045%2c0.8911 L58.6025%2c0.8911' id='Fill-33' fill='white'%3e%3c/path%3e%3cpath d='M58.3223%2c18.499 C58.3473%2c18.982 57.8653%2c19.277 57.7853%2c19.733 L57.8113%2c26.591 L65.1663%2c26.591 C65.2183%2c27.074 65.2463%2c27.785 65.0853%2c28.242 L48.7933%2c28.242 C48.6593%2c28.242 48.5783%2c28.108 48.5783%2c28 C48.5783%2c27.544 48.4713%2c27.047 48.5253%2c26.591 C48.5183%2c26.697 55.4903%2c26.591 55.4903%2c26.591 L55.5563%2c26.524 C55.4753%2c26.578 55.4903%2c19.68 55.4903%2c19.68 C55.3563%2c19.331 55.1283%2c19.009 55.0743%2c18.606 C55.4753%2c18.311 55.9863%2c18.526 56.4433%2c18.338 C57.0063%2c18.472 57.7583%2c18.284 58.3223%2c18.499' id='Fill-35' fill='white'%3e%3c/path%3e%3cpath d='M65.1123%2c25.3701 L65.1383%2c25.7861 L58.6703%2c25.7861 L58.6703%2c19.8411 C58.9123%2c19.4651 58.9663%2c18.9821 59.3413%2c18.7141 C62.2943%2c19.5191 64.7093%2c22.3641 65.1123%2c25.3701' id='Fill-37' fill='white'%3e%3c/path%3e%3cpath d='M54.7246%2c19.9751 C54.7246%2c21.8811 54.7796%2c23.9471 54.7516%2c25.7721 C54.4566%2c25.9071 50.0276%2c25.7991 48.6316%2c25.7991 C48.5516%2c25.2091 48.7406%2c24.7261 48.9006%2c24.1621 C49.5716%2c21.8541 51.6106%2c19.5721 53.9736%2c18.8481 L54.1336%2c18.8481 L54.7246%2c19.9751' id='Fill-39' fill='white'%3e%3c/path%3e%3cpath d='M64.8174%2c29.1011 L64.8714%2c29.1541 C64.2254%2c31.9461 61.5954%2c34.4151 58.8044%2c34.9521 C55.4504%2c35.7031 51.8794%2c34.5491 49.9214%2c31.5431 C49.4374%2c30.7921 49.0354%2c29.9861 48.8474%2c29.1011 C48.8744%2c29.0201 64.8174%2c29.1011 64.8174%2c29.1011' id='Fill-41' fill='white'%3e%3c/path%3e%3cpath d='M48.042%2c34.7642 C48.417%2c34.7912 48.82%2c34.9522 49.169%2c34.8982 C50.35%2c35.0862 51.45%2c35.2742 52.631%2c35.4622 C52.792%2c35.9992 52.739%2c36.5352 52.792%2c37.0722 L52.712%2c37.1532 C47.961%2c36.6162 43.023%2c36.0252 38.218%2c36.2402 C37.064%2c36.3212 35.776%2c36.5622 35.132%2c37.6632 C34.648%2c38.8172 35.024%2c40.1592 35.024%2c41.3132 C35.132%2c42.8962 35.319%2c44.5612 35.534%2c46.0642 C35.507%2c46.2252 35.319%2c46.2522 35.212%2c46.1982 C33.951%2c45.9562 32.635%2c46.1982 31.454%2c46.5742 L31.374%2c46.5472 C31.025%2c44.2922 30.596%2c41.9302 30.354%2c39.5952 C30.193%2c37.9312 29.924%2c35.8112 31.535%2c34.8442 C32.26%2c34.5492 33.038%2c34.3342 33.87%2c34.2812 C37.628%2c33.8782 41.681%2c34.2272 45.411%2c34.4952 L48.042%2c34.7642' id='Fill-43' fill='white'%3e%3c/path%3e%3cpath d='M82.3174%2c35.2739 C83.7394%2c36.3209 83.4704%2c38.1989 83.2284%2c39.7289 C82.7994%2c42.0639 82.4514%2c44.5069 81.9674%2c46.8419 C80.7064%2c46.4929 79.4184%2c46.3859 78.0484%2c46.3589 L78.0214%2c45.8759 C78.2634%2c43.6749 78.6394%2c41.5279 78.7474%2c39.3269 C78.7744%2c38.4679 78.5584%2c37.5819 77.7544%2c37.0989 C75.7954%2c35.9989 73.3254%2c36.4009 71.0714%2c36.2939 C70.2924%2c36.3479 69.3794%2c36.3739 68.6004%2c36.4819 C65.8644%2c36.6429 63.1534%2c37.1259 60.4964%2c37.2059 C60.5214%2c36.6429 60.5214%2c36.1329 60.6574%2c35.5689 C60.8984%2c35.3539 61.3004%2c35.5159 61.6234%2c35.3809 C63.5544%2c35.1669 65.2734%2c34.7909 67.2324%2c34.6299 C69.8894%2c34.3079 72.4934%2c34.3879 75.0704%2c34.1729 C77.5114%2c34.3079 80.1964%2c33.9859 82.3174%2c35.2739' id='Fill-45' fill='white'%3e%3c/path%3e%3cpath d='M98.6094%2c35.8379 C100.5944%2c36.1059 102.6624%2c36.3739 104.3794%2c37.3939 C105.3994%2c38.0649 105.9354%2c39.1389 105.8014%2c40.3469 C105.4534%2c42.8699 104.8084%2c45.3389 104.2724%2c47.8079 C104.1654%2c47.9429 104.2174%2c48.3719 103.8964%2c48.2109 C102.9034%2c48.1039 101.9634%2c48.2109 100.9974%2c48.4259 C101.0784%2c47.2709 101.4814%2c46.0899 101.6954%2c44.9899 C102.0164%2c43.2989 102.7684%2c40.9909 101.1054%2c39.6759 C99.4144%2c38.4679 97.4014%2c38.2799 95.3614%2c37.9039 C93.4024%2c37.7159 91.3074%2c37.6089 89.3764%2c37.4749 C89.0804%2c37.5279 88.8114%2c37.5549 88.4904%2c37.4749 C87.3084%2c37.3669 86.3964%2c37.5549 85.2144%2c37.4479 C85.0014%2c37.4479 84.8124%2c37.4209 84.6254%2c37.4749 L84.5444%2c37.4209 C84.5174%2c36.6699 84.3024%2c35.9989 83.9814%2c35.3539 C85.0014%2c35.2739 86.0214%2c35.2199 87.0134%2c35.1929 C90.9314%2c35.2199 94.6634%2c35.3809 98.6094%2c35.8379' id='Fill-47' fill='white'%3e%3c/path%3e%3cpath d='M29.4678%2c35.354 L29.4948%2c35.408 C29.1998%2c36.079 29.1458%2c36.857 28.9578%2c37.555 C24.6098%2c37.475 20.3428%2c37.716 16.1548%2c38.173 C15.0548%2c38.414 13.9278%2c38.548 12.9348%2c39.031 C11.7538%2c39.649 11.2708%2c40.964 11.4048%2c42.252 C11.7268%2c44.292 12.1828%2c46.252 12.5048%2c48.265 L12.4778%2c48.345 C11.4578%2c47.916 10.1968%2c47.943 9.1768%2c48.077 L9.0428%2c47.943 C8.5868%2c45.366 7.8078%2c42.682 7.5928%2c40.078 C7.4588%2c38.924 8.1568%2c37.824 9.1768%2c37.26 C10.8678%2c36.401 12.9348%2c36.079 14.8398%2c35.811 C19.4028%2c35.22 24.4488%2c35.14 29.2268%2c35.301 L29.4678%2c35.354' id='Fill-49' fill='white'%3e%3c/path%3e%3cpath d='M59.3682%2c35.811 L59.4222%2c35.945 L58.7232%2c45.527 C58.2142%2c45.554 57.6772%2c45.446 57.1402%2c45.42 C56.3072%2c45.366 55.3962%2c45.5 54.5912%2c45.661 L54.4572%2c45.527 L53.8932%2c36.643 C53.8932%2c36.374 53.7852%2c35.999 53.9732%2c35.73 C55.6372%2c36.186 57.6772%2c36.213 59.3682%2c35.811' id='Fill-51' fill='white'%3e%3c/path%3e%3cpath d='M61.0859%2c48.1841 C61.5959%2c48.9361 61.6499%2c49.8211 61.4349%2c50.7071 C60.8439%2c52.2641 59.5559%2c53.3911 58.5089%2c54.7061 C58.5629%2c55.0281 58.8849%2c55.2971 59.0729%2c55.5381 C60.2269%2c54.4381 61.3809%2c53.1761 62.8569%2c52.5861 C63.9309%2c52.2101 65.0849%2c52.6131 65.8099%2c53.4981 C67.0179%2c55.3241 67.0709%2c58.1151 65.9709%2c60.0211 C65.4879%2c60.9061 64.6019%2c61.4431 63.6359%2c61.6041 C62.2399%2c61.6851 61.2469%2c60.7191 60.3609%2c59.7791 C59.8509%2c59.1351 59.3949%2c58.5981 58.9919%2c57.9001 L58.8579%2c57.9001 C58.6699%2c58.2761 58.0799%2c58.4101 58.3479%2c58.8661 C59.2339%2c61.1481 60.2809%2c63.3761 61.7029%2c65.4421 C62.2939%2c66.7581 63.6629%2c66.6771 64.7629%2c67.0261 C66.0779%2c67.2671 67.4469%2c67.4551 68.8699%2c67.4021 C69.1379%2c67.3481 69.4869%2c67.3481 69.7549%2c67.3211 C71.0709%2c67.1871 72.3319%2c66.9191 73.4589%2c66.3011 C74.2909%2c65.4691 74.9359%2c64.4221 75.5529%2c63.4291 C76.3849%2c62.1141 76.9489%2c60.6651 77.5659%2c59.2691 C77.5389%2c59.0011 77.3509%2c58.8131 77.1629%2c58.5981 L77.0019%2c58.6521 C75.7679%2c59.8601 74.5599%2c61.5511 72.7349%2c61.7651 C71.6609%2c61.7651 70.7489%2c61.3091 70.0509%2c60.5841 C68.7889%2c58.6521 68.7889%2c55.8071 70.2119%2c53.9551 C70.8569%2c53.0691 71.8759%2c52.6661 72.8969%2c52.8541 C74.4789%2c53.2301 75.6599%2c54.5991 76.9489%2c55.5381 C77.1629%2c55.3241 77.5119%2c55.1091 77.5119%2c54.7871 C76.2239%2c53.1501 74.1299%2c51.3781 75.1499%2c49.0971 C76.1429%2c47.3251 78.4249%2c47.1101 80.2499%2c47.4061 C81.6469%2c47.6471 83.2019%2c48.3991 83.5779%2c49.9021 C83.8729%2c52.0491 82.0749%2c53.5791 80.7599%2c55.0551 C80.7599%2c55.4041 81.0819%2c55.5921 81.2969%2c55.8071 C82.9069%2c54.5721 84.5709%2c52.5321 86.8259%2c53.2571 C87.8989%2c53.7131 88.5439%2c54.7871 88.7849%2c55.8601 C89.0269%2c57.9541 88.8119%2c60.3161 86.9059%2c61.5241 C86.0469%2c62.0341 84.8399%2c61.9801 83.9819%2c61.4431 C82.7729%2c60.7191 81.9139%2c59.5911 81.0549%2c58.5181 L80.9479%2c58.5441 C80.7869%2c58.8401 80.1959%2c59.0281 80.5179%2c59.4841 C81.4849%2c61.7381 82.8529%2c63.9121 84.3829%2c65.8991 C85.2959%2c66.8111 86.6379%2c66.9451 87.8189%2c67.1601 C90.6099%2c67.6161 93.7509%2c67.5361 96.1929%2c66.2481 C97.9649%2c64.5031 99.2529%2c62.3561 100.4609%2c60.2621 C100.6489%2c59.9401 100.3269%2c59.6451 100.1389%2c59.4031 L99.9779%2c59.4301 C98.3129%2c60.8261 96.5419%2c62.9461 94.1529%2c62.1681 C92.8109%2c61.7651 92.2209%2c60.2891 92.0599%2c59.0281 C91.8989%2c57.0951 92.1669%2c54.9751 93.7769%2c53.6861 C94.8779%2c52.9881 96.2469%2c53.2031 97.2399%2c53.9551 C98.3669%2c54.6791 99.1989%2c55.7261 100.1389%2c56.6661 C100.4339%2c56.6921 100.5679%2c56.3171 100.7559%2c56.1021 C100.7289%2c55.7261 100.3529%2c55.4581 100.2189%2c55.0821 C99.4409%2c53.8201 98.7429%2c52.2911 99.4409%2c50.8141 C100.6489%2c48.9891 103.1719%2c48.9621 105.1039%2c49.4461 C105.4529%2c49.4991 105.7479%2c49.6601 106.0429%2c49.8211 L106.0699%2c49.9291 C105.4529%2c52.0221 104.9699%2c54.1961 104.4599%2c56.3171 C103.8969%2c58.2761 103.4669%2c60.3961 103.0369%2c62.3561 C102.1519%2c66.1401 101.4269%2c70.0051 100.5409%2c73.7901 L100.4609%2c73.7901 C100.5409%2c73.7091 13.0959%2c73.7901 13.0959%2c73.7901 C12.9349%2c73.8431 12.7999%2c73.8171 12.7999%2c73.6291 C11.1089%2c65.6031 9.2309%2c57.7121 7.0299%2c49.8211 C7.0829%2c49.6331 7.3519%2c49.6071 7.5129%2c49.4721 C9.5529%2c48.8011 12.4249%2c48.6141 13.8739%2c50.5191 C15.1889%2c52.5051 13.4709%2c54.4651 12.6659%2c56.1821 C12.8809%2c56.4241 13.0419%2c56.8271 13.3909%2c56.7731 C14.7869%2c55.1091 16.4509%2c52.7741 18.8929%2c53.4721 C20.2619%2c53.7671 21.1479%2c55.1631 21.3089%2c56.4781 C21.6039%2c58.1691 21.5769%2c60.2621 20.2079%2c61.4971 C19.4839%2c62.2481 18.3559%2c62.4901 17.3899%2c62.1411 C15.9409%2c61.6041 14.7059%2c60.6111 13.6059%2c59.4301 C13.2839%2c59.2151 13.0959%2c59.6981 12.8269%2c59.8061 L12.7739%2c59.9131 C13.9809%2c62.1411 15.4039%2c64.2611 17.0409%2c66.2741 C17.8199%2c66.6771 18.6519%2c66.9191 19.5369%2c67.0801 C22.5169%2c67.4821 25.8719%2c67.5091 28.5819%2c66.3281 C29.9779%2c65.0401 30.8099%2c63.3221 31.6419%2c61.6581 C31.9909%2c60.7991 32.5819%2c60.0211 32.7699%2c59.1081 C32.6889%2c58.9201 32.4209%2c58.6791 32.2329%2c58.5441 C31.6419%2c59.0011 31.2669%2c59.6721 30.7029%2c60.1551 C30.1659%2c60.5841 29.6559%2c61.2021 28.9579%2c61.4701 C28.2869%2c61.8991 27.3209%2c61.9801 26.6229%2c61.5511 C24.5829%2c60.3161 24.3419%2c57.6321 24.7709%2c55.4851 C25.0399%2c54.2771 26.0059%2c53.2031 27.2939%2c53.0691 C29.0119%2c53.0961 30.2999%2c54.3301 31.6149%2c55.2971 C31.7499%2c55.3771 31.7499%2c55.5921 31.9379%2c55.5651 C32.1249%2c55.3241 32.6619%2c55.0281 32.5009%2c54.6531 C31.0249%2c53.0691 29.0919%2c51.3511 29.9509%2c49.0431 C31.0249%2c47.1641 33.3329%2c47.0031 35.2659%2c47.1911 C36.3929%2c47.3791 37.6279%2c47.8081 38.2449%2c48.9621 C39.2379%2c51.2711 37.1179%2c53.1501 35.8029%2c54.7601 C35.8559%2c55.0551 36.1249%2c55.2701 36.2859%2c55.4851 L36.4739%2c55.4041 C37.8689%2c54.2771 39.1579%2c52.8011 41.0099%2c52.6401 C42.0829%2c52.7201 43.1569%2c53.2841 43.7199%2c54.3041 C44.5519%2c55.8871 44.5789%2c58.2491 43.6399%2c59.8061 C43.2369%2c60.6651 42.4319%2c61.2821 41.5459%2c61.4701 C39.2919%2c61.9801 37.9229%2c59.6721 36.4999%2c58.3831 C36.2589%2c58.6251 35.7489%2c58.7591 35.8829%2c59.1891 C36.3659%2c60.4771 37.0639%2c61.6851 37.6809%2c62.9191 C38.3789%2c63.9661 38.9159%2c65.1741 39.8289%2c66.0601 C41.4119%2c67.0801 43.4249%2c67.2941 45.3309%2c67.3751 C46.0019%2c67.3481 46.6729%2c67.2941 47.3169%2c67.2411 C48.8469%2c66.8921 50.6719%2c66.8651 51.6109%2c65.3351 C53.0609%2c63.2681 54.1879%2c61.0141 55.1009%2c58.6791 C55.0469%2c58.3831 54.8589%2c58.1151 54.6179%2c57.9001 C53.1409%2c59.4301 51.6919%2c62.1141 49.1419%2c61.2021 C47.3439%2c60.4231 46.7269%2c58.4371 46.7799%2c56.6121 C46.8609%2c54.9751 47.3709%2c53.0151 49.1419%2c52.4521 C51.3429%2c52.1031 52.8459%2c54.0081 54.3759%2c55.4041 L54.4569%2c55.4041 C54.6179%2c55.0821 55.2349%2c54.7871 54.8049%2c54.4111 C53.6779%2c53.1761 52.4429%2c51.8611 51.8799%2c50.2781 C51.5849%2c49.2311 52.1209%2c48.3721 52.6849%2c47.6471 C54.0539%2c46.3861 56.0129%2c46.1981 57.8649%2c46.4131 C58.5359%2c46.4931 59.2339%2c46.7351 59.8249%2c47.0571 C60.3079%2c47.2711 60.7639%2c47.7551 61.0859%2c48.1841' id='Fill-53' fill='white'%3e%3c/path%3e%3cpath d='M60.7637%2c78.6479 C61.0327%2c78.7279 61.2467%2c78.4329 61.5157%2c78.3789 C61.9177%2c78.3259 62.2937%2c78.4329 62.6167%2c78.5939 C63.1257%2c78.9969 63.3677%2c79.5869 63.1797%2c80.2309 C63.0727%2c80.6069 62.7227%2c81.0099 62.3477%2c81.1439 C62.0257%2c81.2239 61.6767%2c81.2239 61.4087%2c81.0629 C61.1667%2c80.9829 60.9517%2c80.7409 60.8187%2c80.5269 C60.6577%2c80.4189 60.5487%2c80.6069 60.4687%2c80.7139 C60.7637%2c81.9759 62.0517%2c82.8879 63.2597%2c83.1299 C64.4417%2c83.3719 65.7557%2c83.0229 66.6687%2c82.2439 C66.7487%2c82.1639 66.7227%2c82.0299 66.6687%2c81.9759 C66.3207%2c81.7609 65.9707%2c82.1909 65.5687%2c82.0029 C65.0847%2c81.9219 64.7627%2c81.4389 64.6827%2c80.9829 C64.6017%2c80.4189 64.8977%2c79.8559 65.4077%2c79.5869 C65.8097%2c79.4259 66.3467%2c79.4259 66.6687%2c79.7479 C66.9097%2c79.6939 66.8577%2c79.3719 67.0717%2c79.2109 C67.3127%2c78.8089 67.7957%2c78.7009 68.1997%2c78.6209 C68.7367%2c78.7009 69.2727%2c78.8619 69.5407%2c79.3989 C69.7017%2c79.6939 69.6747%2c80.0969 69.7017%2c80.4189 C69.7827%2c80.5269 69.9697%2c80.4189 70.0507%2c80.4459 C70.5347%2c80.4999 70.9907%2c80.7679 71.1777%2c81.2239 C71.3927%2c81.6809 71.3117%2c82.2979 70.9357%2c82.6739 C70.6147%2c82.9689 70.1847%2c83.1569 69.7287%2c83.0229 C69.3797%2c82.9419 69.1927%2c82.6469 68.8977%2c82.4589 C68.8167%2c82.4859 68.7367%2c82.5399 68.6817%2c82.6199 C68.8427%2c83.5329 69.5687%2c84.4719 70.4527%2c84.8749 C71.7947%2c85.5459 73.5397%2c85.4109 74.6667%2c84.3919 C74.6947%2c84.2569 74.6397%2c84.0689 74.4787%2c84.0159 C74.0497%2c84.1229 73.5937%2c84.1499 73.2177%2c83.9079 C72.8687%2c83.6669 72.6547%2c83.3179 72.6807%2c82.8879 C72.6547%2c82.3789 72.8967%2c81.8419 73.3787%2c81.5469 C73.8347%2c81.3319 74.4257%2c81.3589 74.8007%2c81.6539 C75.0427%2c81.8419 75.1767%2c82.1369 75.3657%2c82.3789 C76.1177%2c81.7879 77.3247%2c81.6269 78.1827%2c82.0299 C77.7007%2c82.8619 76.9747%2c83.5329 76.4657%2c84.3109 L74.2107%2c87.3439 C74.2907%2c87.6119 74.6397%2c87.5859 74.8557%2c87.6929 C75.2037%2c87.8269 75.5797%2c87.9079 75.8747%2c88.2029 C76.1177%2c88.9809 76.1697%2c89.8399 75.9027%2c90.5649 C75.4717%2c91.3699 74.8557%2c92.1219 74.2647%2c92.8189 C74.2647%2c95.1809 74.2387%2c97.5699 73.5397%2c99.7169 C72.1177%2c105.0049 69.3797%2c109.7559 67.0717%2c114.6409 C66.6687%2c115.8749 66.0777%2c117.1099 66.2397%2c118.5319 C66.2657%2c118.7199 66.0257%2c118.6669 65.9447%2c118.6129 C65.4337%2c118.3709 64.9237%2c118.1029 64.3867%2c117.9689 C64.1727%2c118.2099 64.2807%2c118.6399 64.2257%2c118.9349 C64.2527%2c119.7399 64.2807%2c120.5989 64.2007%2c121.3509 L64.1467%2c130.3149 C64.0657%2c131.2549 64.1187%2c132.2209 64.1187%2c133.1869 C64.0377%2c133.6969 64.0657%2c134.2609 64.0657%2c134.7709 C64.0657%2c137.0789 64.0377%2c138.9849 64.0657%2c141.2389 C66.3207%2c143.7349 67.2857%2c146.8219 68.6817%2c149.7209 C71.4467%2c155.0619 73.2177%2c160.8589 77.0017%2c165.7709 C79.3367%2c168.4549 82.7997%2c170.2539 86.1817%2c169.0459 C88.8927%2c168.2409 90.9867%2c165.6099 91.2817%2c162.8459 C91.5237%2c158.8999 89.3757%2c155.7059 87.7117%2c152.4319 C85.0007%2c148.1099 82.4777%2c143.7079 80.0617%2c139.2529 C78.4517%2c136.2469 77.7267%2c132.3549 78.8007%2c128.9459 C79.5257%2c126.8799 80.6537%2c124.9469 82.1817%2c123.2829 C84.7857%2c120.4379 87.8727%2c118.3439 90.7977%2c116.0629 C93.9117%2c113.7819 96.9457%2c111.3929 99.8977%2c108.8699 C103.0107%2c105.9979 105.0497%2c102.3209 105.1587%2c98.1339 C105.1587%2c94.4029 103.1177%2c90.5379 99.5217%2c89.1419 C97.7777%2c88.6049 95.5767%2c88.6049 93.8587%2c89.2759 C91.7637%2c90.2429 90.2607%2c92.4169 90.3417%2c94.8059 C90.5027%2c95.1809 90.3157%2c95.7449 90.7977%2c95.8789 C92.1397%2c96.0939 93.5627%2c96.1209 94.6907%2c96.8989 C95.5227%2c98.3489 96.1137%2c99.9319 96.5147%2c101.5159 C96.4087%2c103.9579 95.8707%2c106.3739 95.3877%2c108.6819 C95.3067%2c108.8969 95.0117%2c108.8159 94.8247%2c108.8699 C94.6907%2c108.5479 94.7167%2c108.1719 94.6627%2c107.8499 C94.5297%2c106.9109 94.3147%2c106.0779 94.0187%2c105.2199 C93.5897%2c104.3879 93.1327%2c103.5289 92.7317%2c102.6699 C92.4897%2c102.7239 92.2477%2c102.4009 92.0597%2c102.6699 C92.2477%2c103.6629 92.7317%2c104.6559 92.5157%2c105.7299 C92.5427%2c106.4809 92.2477%2c107.1249 92.1397%2c107.8229 C89.3487%2c110.3189 86.2617%2c112.1709 83.4447%2c114.4789 C81.5107%2c116.0089 79.4977%2c117.7539 78.1827%2c119.7669 C77.9427%2c119.7399 77.6197%2c119.6869 77.4857%2c119.4989 C79.0957%2c114.9889 82.1287%2c111.0709 84.9477%2c107.0719 C85.6717%2c105.9709 86.6647%2c104.9509 86.6927%2c103.5819 C86.7447%2c103.1529 86.7727%2c102.6699 86.6117%2c102.2399 C86.1277%2c102.4279 85.6717%2c102.7499 85.2147%2c103.0719 C84.3027%2c103.7429 83.2837%2c104.5219 82.6127%2c105.4609 C82.4777%2c105.3269 82.1817%2c105.3539 82.1567%2c105.1119 C83.2287%2c102.4819 84.6787%2c99.9589 86.4767%2c97.6509 C86.3697%2c94.1879 87.1207%2c90.8059 89.8597%2c88.5519 C91.5497%2c87.1289 93.6697%2c86.2169 95.8707%2c86.1359 C97.7497%2c85.8949 99.6567%2c86.4579 101.3207%2c87.0759 C105.8287%2c89.2229 108.0307%2c94.0809 107.8687%2c98.8319 C107.6547%2c102.2399 106.2577%2c105.4069 104.4877%2c108.2789 C103.3327%2c110.3729 101.5877%2c112.1179 100.0847%2c114.0229 L94.8777%2c119.7399 L93.3747%2c121.6729 L93.3747%2c121.7799 C94.1257%2c121.8339 94.7967%2c121.5379 95.5487%2c121.5119 C96.5957%2c121.4039 97.6167%2c121.7529 98.6357%2c121.8609 C99.6817%2c121.9409 100.6497%2c122.4509 101.7217%2c122.2359 C102.3927%2c122.1559 103.1447%2c121.9679 103.7887%2c121.8609 C103.9507%2c122.1289 104.0567%2c122.4239 104.0837%2c122.7459 C101.1317%2c124.2229 98.0727%2c125.4299 95.1467%2c126.9329 C93.3747%2c127.7389 91.5497%2c128.5709 89.7787%2c129.3759 C89.5897%2c129.6169 89.5897%2c129.9129 89.5897%2c130.1809 L89.7247%2c130.2079 C90.8787%2c129.8859 92.1137%2c129.6439 93.3217%2c129.4029 C95.0927%2c129.6169 96.9177%2c129.9929 98.6897%2c130.2879 C99.5477%2c130.2619 100.4887%2c130.0739 101.3457%2c130.0469 C101.4817%2c130.2619 101.5347%2c130.5299 101.5877%2c130.7979 L101.4537%2c130.9329 C98.0177%2c132.4359 94.5827%2c133.9389 91.2007%2c135.5219 L89.2147%2c136.4619 C89.0797%2c136.6499 89.1337%2c136.9179 89.1607%2c137.1329 L89.2417%2c137.2399 C90.2357%2c137.0519 91.3887%2c136.8369 92.3277%2c137.2399 C93.6427%2c137.5349 94.9057%2c137.9109 96.2197%2c138.1529 C96.9707%2c138.1789 97.5617%2c137.9919 98.2867%2c138.0179 C98.4207%2c138.2329 98.5007%2c138.5279 98.5547%2c138.7699 L91.4157%2c142.1519 C90.8787%2c142.4739 90.1807%2c142.5009 89.8047%2c143.0379 C89.8857%2c144.0309 90.1267%2c144.9699 90.3967%2c145.8829 C91.4687%2c149.8279 93.5087%2c153.4519 94.0187%2c157.6119 C94.3147%2c159.7049 94.4487%2c161.7989 93.8587%2c163.7849 C93.0267%2c167.5689 89.5367%2c171.0049 85.8057%2c171.9709 C81.0817%2c173.0719 76.4657%2c171.2469 73.3517%2c167.6229 C70.7217%2c164.7509 68.6007%2c161.5569 66.5877%2c158.3629 C66.3207%2c155.2229 66.1317%2c152.0559 65.7557%2c148.9689 C65.5417%2c148.1909 65.3267%2c147.4389 64.8977%2c146.7409 C64.6827%2c146.9029 64.2527%2c146.8489 64.2527%2c147.1979 L64.9777%2c149.2909 C65.2457%2c152.0019 65.4337%2c154.7129 65.6217%2c157.3429 C65.8367%2c160.2689 65.8097%2c162.8459 65.9447%2c165.8789 C66.2127%2c168.1329 66.7227%2c170.3879 66.9367%2c172.6689 C66.9917%2c173.6619 68.0907%2c173.9569 68.6007%2c174.7089 C68.5477%2c176.5069 68.3867%2c178.3319 67.7957%2c179.9699 C67.4477%2c180.3189 67.0447%2c180.5599 66.8837%2c181.0159 C66.7767%2c183.1909 66.7487%2c185.2839 66.5347%2c187.4849 C66.5347%2c188.2369 66.2657%2c189.0149 66.3737%2c189.7399 C66.2127%2c191.8599 66.0777%2c193.9529 65.9707%2c196.0739 C65.9707%2c196.1539 65.9977%2c196.2349 65.9447%2c196.3149 C65.9707%2c197.0129 66.0507%2c197.7379 66.0777%2c198.4359 C65.8647%2c198.6769 65.5687%2c198.7579 65.2997%2c198.8919 C64.2807%2c198.0059 63.3677%2c196.6379 61.8907%2c196.9859 C61.1137%2c197.4159 60.3877%2c198.0329 59.6637%2c198.5969 L59.6637%2c198.7309 C60.2007%2c199.7509 60.5767%2c200.8249 60.8987%2c201.8979 C61.0057%2c202.5159 60.3347%2c202.8109 60.0117%2c203.2399 C59.5827%2c203.5349 59.0737%2c203.6699 58.7237%2c204.0449 C58.5357%2c205.1999 58.8587%2c206.3269 59.0457%2c207.3469 C58.6437%2c207.3999 58.4287%2c207.1589 58.0267%2c207.1589 C57.4627%2c206.3539 56.9787%2c205.4949 56.6307%2c204.5819 C56.5767%2c203.8579 56.0937%2c203.3209 55.9067%2c202.6769 C56.0937%2c201.4419 56.4437%2c200.2069 56.8717%2c199.0529 C56.9257%2c198.7039 56.5497%2c198.7039 56.3887%2c198.4899 L56.2547%2c198.5429 C55.3687%2c199.5629 54.3757%2c200.6369 53.2757%2c201.3609 C52.6307%2c201.1739 52.0137%2c200.8249 51.4237%2c200.4759 C51.1547%2c200.2609 50.9137%2c199.7239 50.5107%2c199.8579 C49.5447%2c200.2609 48.7127%2c200.9589 47.9607%2c201.7099 L47.8807%2c201.6829 C47.9337%2c201.1999 47.6387%2c200.7169 47.8267%2c200.2069 L49.2487%2c198.3549 L51.0757%2c196.8789 C52.3357%2c196.5569 53.5437%2c196.2889 54.8857%2c196.2079 C55.1007%2c196.0739 55.1277%2c195.8049 55.1547%2c195.5639 L55.0197%2c195.3759 C53.7587%2c194.7319 52.3627%2c194.1949 51.2887%2c193.1479 C51.3157%2c192.2629 51.4237%2c191.2159 51.9597%2c190.4639 C51.3157%2c189.3369 50.1347%2c188.5589 49.1417%2c187.8609 C49.4637%2c187.6729 49.8397%2c187.5389 50.2157%2c187.4039 C51.0757%2c187.6459 51.8797%2c187.9409 52.7117%2c188.2099 L54.4567%2c189.2829 L55.2887%2c189.5779 C55.9597%2c191.0279 56.7647%2c192.4239 57.3557%2c193.8999 C57.4097%2c194.0609 57.5427%2c194.2219 57.7577%2c194.1949 C58.5357%2c194.1149 59.2877%2c193.8459 59.9867%2c193.5239 C60.2817%2c193.1479 60.3347%2c192.6379 60.4427%2c192.1819 C60.8187%2c188.8539 60.4147%2c185.4449 60.0387%2c182.3049 C59.6907%2c180.0499 59.2347%2c177.9029 58.9927%2c175.6219 C58.4287%2c174.1989 57.3017%2c173.0179 56.2017%2c171.8369 C53.3827%2c168.7239 50.1347%2c166.0929 48.0957%2c162.4429 C47.2357%2c161.3429 46.9137%2c159.9739 46.8067%2c158.5779 C46.7267%2c156.9139 46.1357%2c155.1419 46.7267%2c153.5319 C48.1757%2c151.1159 50.8327%2c149.2379 52.7917%2c147.1979 C54.9657%2c145.3189 56.2547%2c142.9299 57.7037%2c140.6219 C57.5427%2c140.4069 57.2757%2c140.2999 57.0597%2c140.1389 L56.6577%2c140.5949 C55.3157%2c143.1449 53.5167%2c145.5339 51.2087%2c147.4929 C49.4367%2c149.3449 47.3707%2c150.9549 45.9487%2c153.0489 C45.4107%2c154.4179 45.5987%2c156.3769 45.8137%2c157.8259 C45.9207%2c159.1419 46.0557%2c160.4569 46.5917%2c161.6109 C47.3707%2c163.1679 48.4717%2c164.5629 49.4917%2c165.9859 L49.4917%2c166.2009 L47.1567%2c169.8779 C46.6727%2c170.6829 46.7797%2c171.6759 46.9137%2c172.6149 L46.8607%2c172.7759 C45.2767%2c173.5549 43.6667%2c174.2529 41.9497%2c174.7359 C40.8477%2c174.3329 39.8287%2c173.6619 38.8887%2c172.8569 C35.4267%2c172.1859 31.9107%2c171.3809 28.6897%2c170.2799 C27.4287%2c169.8509 26.0597%2c170.0389 24.7437%2c170.0389 C24.3687%2c170.0659 24.2337%2c169.6359 24.0737%2c169.3679 L24.0737%2c169.2869 C24.7707%2c168.5629 25.8977%2c167.9719 25.8177%2c166.8719 C25.6027%2c165.8519 25.0137%2c165.0199 24.4497%2c164.1609 C23.6707%2c164.6439 22.8917%2c165.1809 22.0337%2c165.5299 C20.0197%2c165.6639 18.1677%2c165.0469 16.5577%2c164.1069 C16.4237%2c163.7309 16.1817%2c163.4089 16.1017%2c163.0069 C17.0137%2c163.1679 17.9537%2c163.5169 18.9737%2c163.3559 C19.1877%2c162.9529 19.1347%2c162.3889 19.2427%2c161.9599 C19.3487%2c161.7179 19.3487%2c161.3689 19.6717%2c161.3429 C20.8517%2c161.1279 22.0067%2c161.0739 23.1877%2c161.1279 C23.3487%2c161.1549 23.3217%2c160.9669 23.3487%2c160.8589 C23.3217%2c160.6719 23.3747%2c160.3229 23.0537%2c160.2959 C21.8717%2c160.0539 20.6647%2c159.7589 19.5637%2c159.2759 C19.4307%2c158.7659 19.3237%2c158.1749 19.4567%2c157.6119 C19.6447%2c157.2359 19.9937%2c156.9139 20.0747%2c156.4839 L19.0547%2c155.6789 C18.3827%2c155.4649 17.7657%2c155.1689 17.0677%2c155.0349 C17.0407%2c154.9809 17.0137%2c154.9279 17.0407%2c154.8739 C17.3627%2c154.6329 17.6847%2c154.4179 18.0347%2c154.2299 L20.5037%2c154.5789 C21.4967%2c155.0619 22.7847%2c154.9279 23.5097%2c155.9479 C24.5027%2c156.9139 25.2267%2c158.0679 25.8977%2c159.2219 C26.0857%2c159.2219 26.3817%2c159.2489 26.4347%2c158.9809 C26.4887%2c157.9069 26.5687%2c156.7259 26.9447%2c155.6789 C27.2137%2c155.1419 27.9107%2c155.3029 28.4747%2c155.2499 C28.8507%2c155.1159 29.3887%2c155.5449 29.4677%2c154.9549 C29.9237%2c154.0419 29.7637%2c152.9149 29.7367%2c151.8949 L29.7897%2c151.8679 C30.1657%2c152.2709 30.9177%2c152.3779 30.8907%2c153.0759 C31.0787%2c153.9879 31.3197%2c154.8739 31.1857%2c155.8399 C31.1047%2c156.7799 31.1047%2c157.7459 30.8367%2c158.6589 C30.1927%2c159.6779 29.1727%2c160.5099 28.3947%2c161.4769 C28.4747%2c162.0939 28.6897%2c162.7109 28.8507%2c163.3289 C29.1727%2c164.0269 28.7167%2c165.3149 29.8167%2c165.3689 C30.6487%2c165.3689 31.5347%2c165.5829 32.3127%2c165.5829 C34.1117%2c165.7979 36.0977%2c165.7979 37.8417%2c165.9589 L39.9097%2c166.0659 L39.9627%2c165.9859 C39.6677%2c165.2079 39.3457%2c164.3489 39.5597%2c163.4629 C40.1237%2c159.0069 40.4457%2c154.3369 42.1097%2c150.2839 C42.3777%2c149.6669 43.0227%2c149.4259 43.5337%2c149.1029 C45.5717%2c147.9489 47.6387%2c146.8489 49.8677%2c146.1239 C50.5107%2c145.8289 51.1817%2c145.5869 51.8257%2c145.2379 L51.9867%2c145.0239 C51.4237%2c142.5809 50.9137%2c140.1919 50.1077%2c137.8839 C49.4107%2c136.3809 48.2027%2c135.2269 47.0757%2c133.9119 C46.6457%2c132.9189 46.1087%2c131.9789 45.8137%2c130.9589 C48.4717%2c127.5239 51.2637%2c124.0079 53.9467%2c120.6259 C53.9727%2c120.3839 53.7317%2c120.5449 53.6237%2c120.4109 C53.5167%2c120.3309 53.3827%2c120.0349 53.2217%2c120.1959 C50.4567%2c123.6589 47.7997%2c127.0679 45.0617%2c130.4229 C42.3257%2c133.8579 39.3717%2c137.2669 36.6347%2c140.7019 C35.9367%2c141.6419 35.2657%2c142.6349 34.5137%2c143.5209 C34.2727%2c143.4399 34.0577%2c143.2519 33.8697%2c143.0639 C33.7637%2c142.2059 33.9237%2c141.1589 33.1447%2c140.6219 C32.3937%2c140.3799 31.4537%2c140.2729 30.6487%2c140.2729 C30.1387%2c140.9169 29.7637%2c141.6689 29.3337%2c142.3669 C28.7437%2c143.1719 28.2337%2c144.1379 27.3477%2c144.6479 C26.8657%2c144.5939 26.3277%2c144.4329 25.8177%2c144.3529 L25.7107%2c144.4599 L25.6577%2c151.7869 C25.5757%2c152.0559 25.2537%2c151.9219 25.0397%2c151.8949 L23.1337%2c151.8679 L23.0537%2c151.7339 C22.9997%2c149.3449 23.1877%2c147.1709 23.0537%2c144.8359 C22.9997%2c144.6749 22.8387%2c144.7279 22.7577%2c144.8089 C22.0337%2c145.2919 21.7107%2c146.2319 21.0667%2c146.7149 L20.6907%2c145.6139 C21.2547%2c144.6209 21.3887%2c143.4399 22.1407%2c142.5279 L23.1067%2c141.3199 L23.0797%2c139.0379 C22.8917%2c138.9309 23.1877%2c138.8239 23.1067%2c138.6359 C22.9997%2c138.3139 23.4297%2c137.4819 22.7037%2c137.5889 C22.3557%2c137.5079 21.8987%2c137.5619 21.7917%2c137.1589 C21.5237%2c136.4349 21.0937%2c135.7369 21.1747%2c134.9589 C21.1747%2c134.7979 20.9867%2c134.7439 20.8517%2c134.7169 C19.8327%2c134.2339 18.5707%2c134.6099 17.4967%2c134.5559 C17.6047%2c134.0999 17.9807%2c133.7779 18.1947%2c133.3749 C19.0547%2c133.0799 19.9397%2c132.8379 20.8257%2c132.6239 C21.5237%2c132.6239 22.2747%2c132.4619 22.9187%2c132.4359 C23.1877%2c132.3549 23.0797%2c132.0869 23.1067%2c131.9259 C23.1607%2c128.1409 23.1067%2c124.2489 23.1607%2c120.3569 L23.1877%2c110.2119 L23.2417%2c109.2459 C23.1607%2c109.0849 23.0267%2c109.1919 22.9457%2c109.2719 L22.2217%2c110.0509 C21.2827%2c110.0509 20.4767%2c109.6479 19.6717%2c109.2989 C18.4917%2c109.9699 17.7657%2c111.0979 17.1487%2c112.1979 C16.9077%2c111.8759 16.8257%2c111.3929 16.6647%2c110.9899 C16.9607%2c109.9429 17.4967%2c108.9769 17.8997%2c107.9839 L19.3487%2c105.9169 C20.5297%2c105.3269 21.8467%2c105.0049 23.1067%2c104.5749 C23.2137%2c104.3339 23.2417%2c103.9039 23.0537%2c103.6899 L19.8587%2c103.2069 L19.7517%2c103.0459 C19.4307%2c102.1599 19.1347%2c101.3009 19.1077%2c100.3079 C18.6787%2c100.0129 18.1417%2c99.9319 17.6047%2c99.8519 C16.8797%2c99.8249 16.2357%2c99.8519 15.5377%2c99.9049 L15.5377%2c99.8249 L16.2087%2c98.6969 C17.1487%2c98.3749 18.1157%2c98.3489 19.0807%2c98.1339 C19.9937%2c98.2409 20.8787%2c98.1869 21.7377%2c98.3219 C22.2477%2c98.5359 22.6787%2c98.9119 23.1877%2c99.0729 C23.2417%2c97.9999 23.2417%2c96.9799 23.2137%2c95.8519 C23.3217%2c95.6379 23.2417%2c95.3419 23.2677%2c95.0469 L23.2677%2c92.7389 C22.9727%2c92.6309 22.5697%2c92.6579 22.2747%2c92.6579 C20.6907%2c92.6849 19.0007%2c92.6049 17.6597%2c93.5709 C14.9487%2c95.2349 12.7997%2c97.7849 10.7867%2c100.3079 C8.8817%2c97.4359 7.9147%2c94.1349 6.9757%2c90.8329 C6.0637%2c86.9949 5.6337%2c83.0759 5.7147%2c78.9969 L5.7677%2c78.9429 C9.2847%2c81.5729 12.9607%2c83.9889 16.9077%2c85.6799 C18.8927%2c86.4579 21.0137%2c86.4049 23.1877%2c86.5919 C23.3487%2c86.4579 23.3217%2c86.2169 23.3487%2c85.9749 C23.3487%2c85.3849 23.3487%2c84.8209 23.4297%2c84.1769 L23.5367%2c84.1229 C24.4497%2c84.1229 25.2817%2c84.2039 26.1127%2c84.2309 C26.1127%2c85.0089 26.0057%2c85.8139 26.0597%2c86.5919 L26.1937%2c86.6999 C26.7567%2c86.7539 27.2937%2c86.7799 27.8577%2c86.8069 C27.9927%2c87.2369 27.9377%2c87.6929 27.8847%2c88.1219 C27.9647%2c89.6519 27.8577%2c91.1819 27.8307%2c92.6579 C27.7767%2c92.7929 27.6967%2c92.7119 27.6167%2c92.7119 L26.0597%2c92.7389 C25.9517%2c93.1409 25.9247%2c93.4369 25.9517%2c93.8659 L25.9517%2c100.5759 C26.1397%2c100.7639 26.3817%2c100.7909 26.5967%2c100.8979 L26.7037%2c100.7639 C26.9987%2c99.6369 27.1867%2c98.4289 27.5357%2c97.3289 C28.1807%2c96.9799 28.8777%2c96.8189 29.6017%2c96.6839 C30.3807%2c95.7179 30.1657%2c94.2959 30.4337%2c93.1949 C30.7837%2c93.3829 31.1047%2c93.7049 31.4277%2c93.9739 C31.4807%2c94.9399 31.8027%2c95.7989 31.8027%2c96.7379 L31.7227%2c99.0729 C30.8907%2c100.2539 30.1117%2c101.4889 29.0917%2c102.5889 L29.0917%2c102.8039 C29.4407%2c103.0719 29.6017%2c103.5019 30.0327%2c103.5819 C30.5417%2c103.6899 31.1317%2c103.6629 31.6157%2c103.7969 C32.0447%2c104.2799 32.3127%2c104.9239 32.9567%2c105.1929 C35.0507%2c106.3739 37.1707%2c107.4739 39.2917%2c108.5479 L40.1507%2c109.0579 C39.3457%2c111.6879 39.2377%2c114.5599 38.5937%2c117.2169 L38.2987%2c117.0289 L30.2997%2c110.2119 L29.3607%2c109.4599 C28.6627%2c109.4069 28.1527%2c109.2719 27.4547%2c109.2719 C27.2407%2c109.1649 27.0537%2c108.9499 26.9717%2c108.7619 L27.0537%2c108.4669 C27.4017%2c108.0649 27.8577%2c107.6619 28.0737%2c107.1519 L27.7767%2c106.8839 L26.0337%2c105.8369 C25.9517%2c105.8369 25.8717%2c105.9169 25.8717%2c105.9979 C25.7907%2c108.9769 25.8457%2c111.7689 25.8177%2c114.6939 L25.8177%2c131.5229 C25.8717%2c132.0869 25.6027%2c132.9459 26.1397%2c133.4019 C26.7847%2c134.0189 27.4547%2c134.5019 28.1527%2c134.9849 C28.3407%2c134.8509 28.6357%2c134.7709 28.7167%2c134.5019 C28.0987%2c133.5089 27.5357%2c132.5429 26.9987%2c131.5229 C27.0787%2c130.5569 27.5887%2c129.6979 28.3407%2c128.9729 C28.1807%2c128.1679 28.0187%2c127.2289 27.4017%2c126.5579 C27.2137%2c126.3159 27.0787%2c126.0209 26.9177%2c125.7519 L26.9177%2c125.6989 C27.2937%2c125.5909 27.6967%2c125.6449 28.0737%2c125.6719 L29.9237%2c127.5779 L31.3467%2c130.0739 C31.6417%2c131.7909 31.5347%2c133.6699 31.5887%2c135.4419 L31.6417%2c135.7369 C32.0447%2c135.9789 32.4737%2c136.2199 32.9037%2c136.3539 C33.2797%2c136.3539 33.3877%2c135.8979 33.5757%2c135.6559 C34.8357%2c133.3479 35.9907%2c131.0129 37.1987%2c128.7049 L40.7137%2c122.3169 L41.7337%2c120.4109 C41.5997%2c120.1159 41.2777%2c120.3839 41.0357%2c120.2499 C40.2037%2c120.2499 39.4797%2c120.4109 38.6207%2c120.3569 L38.5667%2c120.1699 C39.8287%2c117.2439 39.8017%2c113.8079 40.6067%2c110.6949 C40.9017%2c109.6209 41.0097%2c108.4399 41.8947%2c107.5819 C44.9817%2c104.2799 48.7657%2c101.9989 52.4707%2c99.7979 C54.9927%2c98.5899 57.9187%2c98.5099 60.6027%2c97.7849 C60.9247%2c97.7579 61.1137%2c97.3819 61.1937%2c97.1139 L61.7027%2c95.8259 L61.5697%2c95.7179 C59.7167%2c95.6909 57.8917%2c95.6379 55.9867%2c95.6379 L56.0127%2c95.4499 C56.5497%2c94.6449 57.2757%2c93.8929 57.7317%2c93.0069 L57.6767%2c92.8189 L56.0127%2c91.1279 C55.9067%2c90.5919 55.6917%2c90.0279 55.6637%2c89.4369 C55.8517%2c89.3569 56.1207%2c89.3569 56.3347%2c89.3029 C56.6577%2c89.1419 57.0597%2c89.0619 57.3277%2c88.7659 C57.3017%2c88.4709 57.2477%2c88.2029 57.0597%2c87.9879 C56.5497%2c88.2029 56.0397%2c88.4979 55.4227%2c88.4709 C55.2357%2c88.3099 55.2617%2c88.0149 55.1807%2c87.7999 L55.2617%2c87.5859 L57.2757%2c86.0019 L59.0737%2c84.5789 L59.3677%2c84.3649 L59.4497%2c84.2039 L59.0457%2c80.9289 L58.6177%2c77.6279 L58.5897%2c77.0369 L58.6977%2c76.9299 L59.4757%2c77.2249 L60.1197%2c77.7079 L60.5487%2c78.3259 L60.7637%2c78.6479' id='Fill-55' fill='white'%3e%3c/path%3e%3cpath d='M68.333%2c85.9751 C69.943%2c86.4581 71.661%2c86.7801 73.218%2c87.3171 L73.191%2c87.3981 C72.252%2c87.6391 71.259%2c87.8001 70.4%2c88.2301 C68.521%2c87.0221 66.159%2c86.8341 63.985%2c86.6731 C63.877%2c86.8341 64.065%2c86.9681 64.038%2c87.1561 C64.038%2c87.5321 63.797%2c87.8541 63.636%2c88.1761 C63.045%2c88.4441 62.348%2c88.6321 61.623%2c88.4711 C61.274%2c88.2031 61.247%2c87.7201 61.086%2c87.3171 C61.086%2c87.0221 61.247%2c86.7801 61.408%2c86.5391 C61.059%2c86.4051 60.657%2c86.5921 60.281%2c86.5921 C59.851%2c86.7271 59.502%2c86.9681 59.127%2c87.1561 C58.992%2c86.8341 58.724%2c86.4581 58.885%2c86.1091 C59.637%2c85.4651 60.469%2c84.9551 61.22%2c84.2571 C63.582%2c84.7401 65.971%2c85.4381 68.333%2c85.9751' id='Fill-57' fill='black'%3e%3c/path%3e%3cpath d='M74.5869%2c89.0352 C74.6669%2c89.3572 74.6939%2c89.8132 74.5869%2c90.1352 C74.1039%2c90.7262 73.5939%2c91.3972 73.0569%2c91.9072 C72.9489%2c91.9872 72.8689%2c91.8802 72.8419%2c91.7732 C72.9759%2c91.2632 73.0839%2c90.6722 72.9759%2c90.0822 C72.7619%2c89.7062 72.3049%2c89.6252 71.9829%2c89.4112 L71.9829%2c89.2502 C72.7619%2c88.9542 73.7809%2c88.4982 74.5869%2c89.0352' id='Fill-59' fill='black'%3e%3c/path%3e%3cpath d='M51.2632%2c91.3701 C52.4702%2c91.5581 53.7852%2c91.5041 54.9662%2c91.6921 C55.3692%2c92.0951 55.8792%2c92.4971 56.1742%2c92.9801 C54.3762%2c92.9271 52.5512%2c92.8191 50.8062%2c92.6311 C49.8402%2c92.5511 49.0622%2c91.7731 48.2562%2c91.2631 C48.0152%2c91.1021 48.0952%2c90.8061 48.1762%2c90.5921 C48.2302%2c90.3771 48.4712%2c90.2961 48.6592%2c90.2161 C49.6252%2c90.4311 50.2432%2c91.3701 51.2632%2c91.3701' id='Fill-61' fill='white'%3e%3c/path%3e%3cpath d='M63.6357%2c91.585 C63.7697%2c92.256 64.1727%2c92.873 64.2527%2c93.544 C62.4827%2c93.651 60.7097%2c93.41 58.9917%2c93.222 C58.7507%2c92.658 58.5357%2c92.041 58.3747%2c91.424 L58.4557%2c91.289 C60.1467%2c91.397 61.9717%2c91.451 63.6357%2c91.585' id='Fill-63' fill='black'%3e%3c/path%3e%3cpath d='M55.0195%2c105.8911 C55.0745%2c106.1591 55.1275%2c106.4811 54.8855%2c106.6691 C52.8465%2c106.8571 50.8065%2c106.7501 48.9265%2c107.3131 C47.0485%2c108.1721 46.4315%2c110.1851 45.3315%2c111.7151 C44.8205%2c112.6811 44.1765%2c113.5671 43.6665%2c114.5061 C43.3715%2c114.6671 43.1845%2c114.3181 42.9415%2c114.2111 C43.0225%2c113.8621 43.2905%2c113.5941 43.4525%2c113.2991 C44.4725%2c111.5541 45.5195%2c109.8631 46.6195%2c108.1451 C47.7195%2c106.4271 49.7325%2c106.1321 51.5585%2c106.0521 C52.6855%2c105.9711 53.8665%2c105.9171 55.0195%2c105.8911' id='Fill-65' fill='black'%3e%3c/path%3e%3cpath d='M27.6699%2c138.0723 C27.7769%2c138.2333 27.7769%2c138.5013 27.7499%2c138.6893 L25.8719%2c139.6293 L25.8179%2c139.5213 L25.8179%2c137.9923 C25.8719%2c137.8843 26.0059%2c137.9653 26.0859%2c137.9113 C26.6229%2c137.9653 27.1059%2c137.9653 27.6699%2c138.0723' id='Fill-67' fill='black'%3e%3c/path%3e%3c/g%3e%3c/g%3e%3c/svg%3e";

    var img$9 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 150 214.97' height='80px' %3e %3ctitle%3eStatensinnkreving.no%3c/title%3e %3cg%3e %3crect width='150' height='150' /%3e %3cpolygon fill='white' points='97.08%2c55.98 97.08%2c81.34 75%2c94.02 52.92%2c81.34 52.92%2c55.98 30.83%2c68.66 30.83%2c94.02 75%2c119.61 119.17%2c94.02 119.17%2c68.66' /%3e %3cpolygon fill='white' points='75%2c55.98 97.08%2c43.08 75%2c30.39 52.92%2c43.08' /%3e %3c/g%3e %3cg%3e %3cpath d='M0.61%2c172.68h3.76c0.27%2c2.28%2c1.56%2c3.18%2c4.27%2c3.18c1.96%2c0%2c3.68-0.69%2c3.68-2.44c0-1.86-1.8-2.23-4.69-2.89 c-3.39-0.77-6.49-1.67-6.49-5.62c0-3.74%2c3.05-5.67%2c7.26-5.67c4.27%2c0%2c7.02%2c2.09%2c7.32%2c5.91h-3.68c-0.21-1.91-1.7-2.86-3.66-2.86 c-2.07%2c0-3.42%2c0.87-3.42%2c2.23c0%2c1.54%2c1.33%2c1.99%2c4.13%2c2.6c3.9%2c0.85%2c7.08%2c1.78%2c7.08%2c5.86c0%2c3.84-3.1%2c5.99-7.37%2c5.99 C3.66%2c178.96%2c0.74%2c176.68%2c0.61%2c172.68z' /%3e %3cpath d='M17.52%2c164.94h1.88v-4.24h3.52v4.24h2.33v2.39h-2.33v7.21c0%2c1.01%2c0.56%2c1.35%2c1.35%2c1.35c0.45%2c0%2c1.06-0.03%2c1.06-0.03v2.65 c0%2c0-0.82%2c0.05-2.25%2c0.05c-1.75%2c0-3.68-0.69-3.68-3.26v-7.98h-1.88V164.94z' /%3e %3cpath d='M35.64%2c177.03h-0.05c-0.69%2c1.03-1.67%2c1.83-4%2c1.83c-2.78%2c0-4.74-1.46-4.74-4.16c0-3%2c2.44-3.95%2c5.46-4.37 c2.25-0.32%2c3.29-0.5%2c3.29-1.54c0-0.98-0.77-1.62-2.28-1.62c-1.7%2c0-2.52%2c0.61-2.62%2c1.91h-3.21c0.11-2.39%2c1.88-4.48%2c5.86-4.48 c4.08%2c0%2c5.73%2c1.83%2c5.73%2c5.01v6.92c0%2c1.03%2c0.16%2c1.64%2c0.48%2c1.88v0.13h-3.47C35.86%2c178.27%2c35.72%2c177.63%2c35.64%2c177.03z M35.67%2c173.74 v-2.04c-0.64%2c0.37-1.62%2c0.58-2.52%2c0.79c-1.88%2c0.42-2.81%2c0.85-2.81%2c2.12s0.85%2c1.72%2c2.12%2c1.72 C34.53%2c176.34%2c35.67%2c175.06%2c35.67%2c173.74z' /%3e %3cpath d='M40.54%2c164.94h1.88v-4.24h3.52v4.24h2.33v2.39h-2.33v7.21c0%2c1.01%2c0.56%2c1.35%2c1.35%2c1.35c0.45%2c0%2c1.06-0.03%2c1.06-0.03v2.65 c0%2c0-0.82%2c0.05-2.25%2c0.05c-1.75%2c0-3.68-0.69-3.68-3.26v-7.98h-1.88V164.94z' /%3e %3cpath d='M49.61%2c171.72c0-4.03%2c2.73-7.16%2c6.71-7.16c4.37%2c0%2c6.71%2c3.34%2c6.71%2c8.19h-9.86c0.27%2c2.09%2c1.43%2c3.39%2c3.47%2c3.39 c1.4%2c0%2c2.23-0.64%2c2.62-1.67h3.55c-0.5%2c2.41-2.65%2c4.45-6.15%2c4.45C52.15%2c178.93%2c49.61%2c175.78%2c49.61%2c171.72z M53.21%2c170.27h6.04 c-0.11-1.72-1.25-2.92-2.89-2.92C54.46%2c167.35%2c53.53%2c168.49%2c53.21%2c170.27z' /%3e %3cpath d='M68.48%2c166.79h0.08c0.93-1.46%2c2.17-2.23%2c4.03-2.23c2.81%2c0%2c4.69%2c2.12%2c4.69%2c5.09v8.88h-3.6v-8.35c0-1.46-0.85-2.49-2.36-2.49 c-1.59%2c0-2.76%2c1.27-2.76%2c3.13v7.71h-3.6v-13.6h3.53V166.79z' /%3e %3cpath d='M78.92%2c174.14h3.34c0.24%2c1.56%2c1.35%2c2.25%2c2.97%2c2.25c1.59%2c0%2c2.49-0.61%2c2.49-1.56c0-1.3-1.72-1.43-3.58-1.8 c-2.44-0.48-4.82-1.14-4.82-4.11c0-2.94%2c2.44-4.35%2c5.54-4.35c3.58%2c0%2c5.57%2c1.78%2c5.83%2c4.51h-3.26c-0.16-1.46-1.09-1.99-2.62-1.99 c-1.41%2c0-2.33%2c0.53-2.33%2c1.51c0%2c1.17%2c1.8%2c1.27%2c3.74%2c1.67c2.28%2c0.48%2c4.8%2c1.11%2c4.8%2c4.29c0%2c2.73-2.33%2c4.37-5.73%2c4.37 C81.33%2c178.93%2c79.13%2c177.03%2c78.92%2c174.14z' /%3e %3cpath d='M1.48%2c191.38h3.84v18.95H1.48V191.38z' /%3e %3cpath d='M11.77%2c198.59h0.08c0.93-1.46%2c2.17-2.23%2c4.03-2.23c2.81%2c0%2c4.69%2c2.12%2c4.69%2c5.09v8.88h-3.6v-8.35c0-1.46-0.85-2.49-2.36-2.49 c-1.59%2c0-2.76%2c1.27-2.76%2c3.13v7.71h-3.6v-13.6h3.53V198.59z' /%3e %3cpath d='M26.58%2c198.59h0.08c0.93-1.46%2c2.17-2.23%2c4.03-2.23c2.81%2c0%2c4.69%2c2.12%2c4.69%2c5.09v8.88h-3.6v-8.35c0-1.46-0.85-2.49-2.36-2.49 c-1.59%2c0-2.76%2c1.27-2.76%2c3.13v7.71h-3.6v-13.6h3.53V198.59z' /%3e %3cpath d='M43.01%2c204.13l-1.56%2c1.62v4.58h-3.58v-18.95h3.58v10.5l4.82-5.14h4.32l-5.01%2c5.17l5.62%2c8.43h-4.37L43.01%2c204.13z' /%3e %3cpath d='M56.07%2c198.91h0.08c0.82-1.54%2c1.75-2.33%2c3.34-2.33c0.4%2c0%2c0.64%2c0.03%2c0.85%2c0.11v3.15h-0.08c-2.36-0.24-4.05%2c1.01-4.05%2c3.87 v6.63h-3.6v-13.6h3.47V198.91z' /%3e %3cpath d='M61.11%2c203.52c0-4.03%2c2.73-7.16%2c6.71-7.16c4.37%2c0%2c6.71%2c3.34%2c6.71%2c8.19h-9.86c0.26%2c2.09%2c1.43%2c3.39%2c3.47%2c3.39 c1.4%2c0%2c2.23-0.64%2c2.62-1.67h3.55c-0.5%2c2.41-2.65%2c4.45-6.15%2c4.45C63.65%2c210.73%2c61.11%2c207.58%2c61.11%2c203.52z M64.71%2c202.07h6.04 c-0.11-1.72-1.25-2.92-2.89-2.92C65.96%2c199.15%2c65.03%2c200.29%2c64.71%2c202.07z' /%3e %3cpath d='M75.07%2c196.74h3.66l2.17%2c7.05c0.4%2c1.3%2c0.61%2c2.17%2c0.61%2c2.17h0.05c0%2c0%2c0.19-0.88%2c0.58-2.17l2.23-7.05h3.6l-4.74%2c13.6h-3.45 L75.07%2c196.74z' /%3e %3cpath d='M89.46%2c191.38h3.6v3.23h-3.6V191.38z M89.46%2c196.74h3.6v13.6h-3.6V196.74z' /%3e %3cpath d='M99.19%2c198.59h0.08c0.93-1.46%2c2.17-2.23%2c4.03-2.23c2.81%2c0%2c4.69%2c2.12%2c4.69%2c5.09v8.88h-3.61v-8.35 c0-1.46-0.85-2.49-2.36-2.49c-1.59%2c0-2.76%2c1.27-2.76%2c3.13v7.71h-3.6v-13.6h3.53V198.59z' /%3e %3cpath d='M110.11%2c210.73h3.58c0.29%2c0.85%2c1.06%2c1.51%2c2.73%2c1.51c2.04%2c0%2c3.02-0.98%2c3.02-2.84v-1.48h-0.08c-0.79%2c0.9-1.83%2c1.59-3.55%2c1.59 c-3.02%2c0-5.99-2.39-5.99-6.49c0-4.05%2c2.44-6.65%2c5.88-6.65c1.7%2c0%2c2.94%2c0.66%2c3.76%2c1.8h0.05v-1.43h3.47v12.56 c0%2c1.91-0.61%2c3.21-1.62%2c4.13c-1.14%2c1.06-2.89%2c1.54-4.9%2c1.54C112.76%2c214.97%2c110.48%2c213.38%2c110.11%2c210.73z M119.62%2c202.94 c0-1.99-1.06-3.68-3.23-3.68c-1.83%2c0-3.05%2c1.43-3.05%2c3.71c0%2c2.31%2c1.22%2c3.66%2c3.08%2c3.66C118.69%2c206.62%2c119.62%2c204.95%2c119.62%2c202.94z' /%3e %3c/g%3e %3c/svg%3e";

    var img$8 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 25.4.1%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 214.9 246.8' style='enable-background:new 0 0 214.9 246.8%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:white%3b%7d%3c/style%3e%3cg%3e %3crect width='150' height='150'/%3e %3cpolygon class='st0' points='97.1%2c56 97.1%2c81.3 75%2c94 52.9%2c81.3 52.9%2c56 30.8%2c68.7 30.8%2c94 75%2c119.6 119.2%2c94 119.2%2c68.7 '/%3e %3cpolygon class='st0' points='75%2c56 97.1%2c43.1 75%2c30.4 52.9%2c43.1 '/%3e%3c/g%3e%3cg%3e %3cpath d='M0.5%2c159.6h15.2v3.2H10v15.7H6.2v-15.7H0.5C0.5%2c162.8%2c0.5%2c159.6%2c0.5%2c159.6z'/%3e %3cpath d='M21.2%2c166.7L21.2%2c166.7c1.1-1.4%2c2.2-2.1%2c4-2.1c2.8%2c0%2c4.7%2c2.1%2c4.7%2c5.1v8.9h-3.6v-8.4c0-1.5-0.9-2.5-2.4-2.5 c-1.6%2c0-2.8%2c1.3-2.8%2c3.1v7.7h-3.6v-18.9h3.6V166.7z'/%3e %3cpath d='M31.8%2c171.7c0-4%2c2.7-7.2%2c6.7-7.2c4.4%2c0%2c6.7%2c3.3%2c6.7%2c8.2h-9.9c0.3%2c2.1%2c1.4%2c3.4%2c3.5%2c3.4c1.4%2c0%2c2.2-0.6%2c2.6-1.7H45 c-0.5%2c2.4-2.7%2c4.4-6.2%2c4.4C34.3%2c178.9%2c31.8%2c175.8%2c31.8%2c171.7z M35.4%2c170.3h6c-0.1-1.7-1.2-2.9-2.9-2.9 C36.6%2c167.4%2c35.7%2c168.5%2c35.4%2c170.3z'/%3e %3cpath d='M52.1%2c159.6H56l6.3%2c10.6c0.6%2c1%2c1.3%2c2.6%2c1.3%2c2.6h0c0%2c0-0.1-2-0.1-3.3v-9.9h3.8v18.9h-3.7l-6.5-10.5c-0.6-1-1.3-2.6-1.3-2.6 h0c0%2c0%2c0.1%2c2%2c0.1%2c3.3v9.8h-3.8L52.1%2c159.6L52.1%2c159.6z'/%3e %3cpath d='M69.6%2c171.8c0-4.1%2c2.9-7.2%2c7.1-7.2s7.1%2c3.1%2c7.1%2c7.2s-2.9%2c7.2-7.1%2c7.2S69.6%2c175.8%2c69.6%2c171.8z M80.2%2c171.8 c0-2.6-1.2-4.4-3.4-4.4c-2.2%2c0-3.4%2c1.8-3.4%2c4.4s1.2%2c4.4%2c3.4%2c4.4C78.9%2c176.2%2c80.2%2c174.4%2c80.2%2c171.8z'/%3e %3cpath d='M89.2%2c167.1L89.2%2c167.1c0.9-1.5%2c1.8-2.3%2c3.4-2.3c0.4%2c0%2c0.6%2c0%2c0.8%2c0.1v3.1h-0.1c-2.4-0.2-4.1%2c1-4.1%2c3.9v6.6h-3.6v-13.6h3.5 V167.1z'/%3e %3cpath d='M94.5%2c164.9h3.6l1.6%2c6.3c0.3%2c1.1%2c0.6%2c2.5%2c0.6%2c2.5h0.1c0%2c0%2c0.3-1.5%2c0.6-2.6l1.7-6.3h3.1l1.8%2c6.3c0.3%2c1.1%2c0.6%2c2.6%2c0.6%2c2.6 h0.1c0%2c0%2c0.3-1.4%2c0.6-2.5l1.7-6.3h3.5l-4.1%2c13.6h-3.3l-1.8-6.7c-0.3-1.1-0.6-2.4-0.6-2.4h-0.1c0%2c0-0.3%2c1.3-0.6%2c2.4l-1.9%2c6.7h-3.2 L94.5%2c164.9z'/%3e %3cpath d='M114.5%2c171.7c0-4%2c2.7-7.2%2c6.7-7.2c4.4%2c0%2c6.7%2c3.3%2c6.7%2c8.2h-9.9c0.3%2c2.1%2c1.4%2c3.4%2c3.5%2c3.4c1.4%2c0%2c2.2-0.6%2c2.6-1.7h3.6 c-0.5%2c2.4-2.7%2c4.4-6.2%2c4.4C117.1%2c178.9%2c114.5%2c175.8%2c114.5%2c171.7z M118.1%2c170.3h6c-0.1-1.7-1.2-2.9-2.9-2.9 C119.4%2c167.4%2c118.4%2c168.5%2c118.1%2c170.3z'/%3e %3cpath d='M129.5%2c178.9h3.6c0.3%2c0.9%2c1.1%2c1.5%2c2.7%2c1.5c2%2c0%2c3-1%2c3-2.8v-1.5h-0.1c-0.8%2c0.9-1.8%2c1.6-3.6%2c1.6c-3%2c0-6-2.4-6-6.5 c0-4.1%2c2.4-6.6%2c5.9-6.6c1.7%2c0%2c2.9%2c0.7%2c3.8%2c1.8h0.1v-1.4h3.5v12.6c0%2c1.9-0.6%2c3.2-1.6%2c4.1c-1.1%2c1.1-2.9%2c1.5-4.9%2c1.5 C132.1%2c183.2%2c129.9%2c181.6%2c129.5%2c178.9z M139%2c171.1c0-2-1.1-3.7-3.2-3.7c-1.8%2c0-3.1%2c1.4-3.1%2c3.7c0%2c2.3%2c1.2%2c3.7%2c3.1%2c3.7 C138.1%2c174.8%2c139%2c173.1%2c139%2c171.1z'/%3e %3cpath d='M145%2c159.6h3.6v3.2H145V159.6z M145%2c164.9h3.6v13.6H145V164.9z'/%3e %3cpath d='M159.3%2c177L159.3%2c177c-0.7%2c1-1.7%2c1.8-4.1%2c1.8c-2.8%2c0-4.7-1.5-4.7-4.2c0-3%2c2.4-3.9%2c5.5-4.4c2.2-0.3%2c3.3-0.5%2c3.3-1.5 c0-1-0.8-1.6-2.3-1.6c-1.7%2c0-2.5%2c0.6-2.6%2c1.9h-3.2c0.1-2.4%2c1.9-4.5%2c5.9-4.5c4.1%2c0%2c5.7%2c1.8%2c5.7%2c5v6.9c0%2c1%2c0.2%2c1.6%2c0.5%2c1.9v0.1h-3.5 C159.5%2c178.3%2c159.4%2c177.6%2c159.3%2c177z M159.3%2c173.7v-2c-0.6%2c0.4-1.6%2c0.6-2.5%2c0.8c-1.9%2c0.4-2.8%2c0.9-2.8%2c2.1s0.9%2c1.7%2c2.1%2c1.7 C158.2%2c176.3%2c159.3%2c175.1%2c159.3%2c173.7z'/%3e %3cpath d='M168.8%2c166.8L168.8%2c166.8c1-1.5%2c2.2-2.2%2c4.1-2.2c2.8%2c0%2c4.7%2c2.1%2c4.7%2c5.1v8.9H174v-8.4c0-1.5-0.9-2.5-2.4-2.5 c-1.6%2c0-2.8%2c1.3-2.8%2c3.1v7.7h-3.6v-13.6h3.5L168.8%2c166.8L168.8%2c166.8z'/%3e %3cpath d='M1.5%2c191.4h3.9l6.3%2c10.6c0.6%2c1%2c1.3%2c2.6%2c1.3%2c2.6h0.1c0%2c0-0.1-2-0.1-3.3v-9.9h3.8v18.9H13l-6.5-10.5c-0.6-1-1.3-2.6-1.3-2.6 H5.1c0%2c0%2c0.1%2c2%2c0.1%2c3.3v9.8H1.5V191.4z'/%3e %3cpath d='M27.8%2c208.8L27.8%2c208.8c-0.7%2c1-1.7%2c1.8-4%2c1.8c-2.8%2c0-4.7-1.5-4.7-4.2c0-3%2c2.4-3.9%2c5.5-4.4c2.2-0.3%2c3.3-0.5%2c3.3-1.5 c0-1-0.8-1.6-2.3-1.6c-1.7%2c0-2.5%2c0.6-2.6%2c1.9h-3.2c0.1-2.4%2c1.9-4.5%2c5.9-4.5c4.1%2c0%2c5.7%2c1.8%2c5.7%2c5v6.9c0%2c1%2c0.2%2c1.6%2c0.5%2c1.9v0.1h-3.5 C28%2c210.1%2c27.8%2c209.4%2c27.8%2c208.8z M27.8%2c205.5v-2c-0.6%2c0.4-1.6%2c0.6-2.5%2c0.8c-1.9%2c0.4-2.8%2c0.9-2.8%2c2.1s0.9%2c1.7%2c2.1%2c1.7 C26.6%2c208.1%2c27.8%2c206.9%2c27.8%2c205.5z'/%3e %3cpath d='M32.7%2c196.7h1.9v-4.2h3.5v4.2h2.3v2.4h-2.3v7.2c0%2c1%2c0.6%2c1.4%2c1.3%2c1.4c0.5%2c0%2c1.1%2c0%2c1.1%2c0v2.6c0%2c0-0.8%2c0.1-2.2%2c0.1 c-1.8%2c0-3.7-0.7-3.7-3.3v-8h-1.9V196.7z'/%3e %3cpath d='M42.5%2c191.4h3.6v3.2h-3.6V191.4z M42.5%2c196.7h3.6v13.6h-3.6V196.7z'/%3e %3cpath d='M48%2c203.6c0-4.1%2c2.9-7.2%2c7.1-7.2s7.1%2c3.1%2c7.1%2c7.2s-2.9%2c7.2-7.1%2c7.2S48%2c207.6%2c48%2c203.6z M58.6%2c203.6c0-2.6-1.2-4.4-3.5-4.4 c-2.2%2c0-3.5%2c1.8-3.5%2c4.4s1.2%2c4.4%2c3.5%2c4.4C57.3%2c208%2c58.6%2c206.2%2c58.6%2c203.6z'/%3e %3cpath d='M67.7%2c198.6L67.7%2c198.6c1-1.5%2c2.2-2.2%2c4.1-2.2c2.8%2c0%2c4.7%2c2.1%2c4.7%2c5.1v8.9h-3.6V202c0-1.5-0.8-2.5-2.4-2.5 c-1.6%2c0-2.8%2c1.3-2.8%2c3.1v7.7h-3.6v-13.6h3.5V198.6z'/%3e %3cpath d='M87.1%2c208.8L87.1%2c208.8c-0.7%2c1-1.7%2c1.8-4.1%2c1.8c-2.8%2c0-4.7-1.5-4.7-4.2c0-3%2c2.4-3.9%2c5.5-4.4c2.2-0.3%2c3.3-0.5%2c3.3-1.5 c0-1-0.8-1.6-2.3-1.6c-1.7%2c0-2.5%2c0.6-2.6%2c1.9H79c0.1-2.4%2c1.9-4.5%2c5.9-4.5c4.1%2c0%2c5.7%2c1.8%2c5.7%2c5v6.9c0%2c1%2c0.2%2c1.6%2c0.5%2c1.9v0.1h-3.5 C87.3%2c210.1%2c87.2%2c209.4%2c87.1%2c208.8z M87.2%2c205.5v-2c-0.6%2c0.4-1.6%2c0.6-2.5%2c0.8c-1.9%2c0.4-2.8%2c0.9-2.8%2c2.1s0.8%2c1.7%2c2.1%2c1.7 C86%2c208.1%2c87.2%2c206.9%2c87.2%2c205.5z'/%3e %3cpath d='M93.2%2c191.4h3.6v18.9h-3.6V191.4z'/%3e %3cpath d='M0.6%2c232.7c0-5.6%2c3.5-9.9%2c9.1-9.9c4.7%2c0%2c7.4%2c2.8%2c7.8%2c6.4h-3.8c-0.3-1.9-1.8-3.1-4-3.1c-3.5%2c0-5.2%2c2.9-5.2%2c6.7 c0%2c3.9%2c2%2c6.6%2c5.2%2c6.6c2.2%2c0%2c3.8-1.4%2c4.1-3.3h3.8c-0.1%2c1.7-0.8%2c3.3-2.1%2c4.5c-1.3%2c1.2-3.1%2c2-5.8%2c2C4.4%2c242.5%2c0.6%2c238.4%2c0.6%2c232.7z'/%3e %3cpath d='M19%2c235.4c0-4.1%2c2.9-7.2%2c7.1-7.2s7.1%2c3.1%2c7.1%2c7.2s-2.9%2c7.2-7.1%2c7.2S19%2c239.4%2c19%2c235.4z M29.6%2c235.4c0-2.6-1.2-4.4-3.5-4.4 c-2.2%2c0-3.5%2c1.8-3.5%2c4.4s1.2%2c4.4%2c3.5%2c4.4C28.3%2c239.8%2c29.6%2c238%2c29.6%2c235.4z'/%3e %3cpath d='M35.2%2c223.2h3.6v18.9h-3.6V223.2z'/%3e %3cpath d='M41.5%2c223.2h3.6v18.9h-3.6V223.2z'/%3e %3cpath d='M47.1%2c235.3c0-4%2c2.7-7.2%2c6.7-7.2c4.4%2c0%2c6.7%2c3.3%2c6.7%2c8.2h-9.9c0.3%2c2.1%2c1.4%2c3.4%2c3.5%2c3.4c1.4%2c0%2c2.2-0.6%2c2.6-1.7h3.5 c-0.5%2c2.4-2.7%2c4.4-6.2%2c4.4C49.7%2c242.5%2c47.1%2c239.4%2c47.1%2c235.3z M50.7%2c233.9h6c-0.1-1.7-1.2-2.9-2.9-2.9 C52%2c230.9%2c51%2c232.1%2c50.7%2c233.9z'/%3e %3cpath d='M61.8%2c235.4c0-4.1%2c2.6-7.2%2c6.8-7.2c3.5%2c0%2c5.7%2c2%2c6.2%2c5h-3.5c-0.2-1.2-1.2-2.1-2.5-2.1c-2.2%2c0-3.3%2c1.7-3.3%2c4.3 c0%2c2.6%2c1%2c4.3%2c3.2%2c4.3c1.5%2c0%2c2.5-0.8%2c2.7-2.3h3.5c-0.2%2c2.9-2.5%2c5.2-6.1%2c5.2C64.5%2c242.5%2c61.8%2c239.4%2c61.8%2c235.4z'/%3e %3cpath d='M75.9%2c228.5h1.9v-4.2h3.5v4.2h2.3v2.4h-2.3v7.2c0%2c1%2c0.6%2c1.4%2c1.3%2c1.4c0.4%2c0%2c1.1%2c0%2c1.1%2c0v2.6c0%2c0-0.8%2c0.1-2.2%2c0.1 c-1.8%2c0-3.7-0.7-3.7-3.3v-8h-1.9L75.9%2c228.5L75.9%2c228.5z'/%3e %3cpath d='M85.8%2c223.2h3.6v3.2h-3.6V223.2z M85.8%2c228.5h3.6v13.6h-3.6V228.5z'/%3e %3cpath d='M91.3%2c235.4c0-4.1%2c2.9-7.2%2c7.1-7.2s7.1%2c3.1%2c7.1%2c7.2s-2.9%2c7.2-7.1%2c7.2S91.3%2c239.4%2c91.3%2c235.4z M101.9%2c235.4 c0-2.6-1.2-4.4-3.4-4.4c-2.2%2c0-3.4%2c1.8-3.4%2c4.4s1.2%2c4.4%2c3.4%2c4.4C100.6%2c239.8%2c101.9%2c238%2c101.9%2c235.4z'/%3e %3cpath d='M111%2c230.4L111%2c230.4c1-1.5%2c2.2-2.2%2c4.1-2.2c2.8%2c0%2c4.7%2c2.1%2c4.7%2c5.1v8.9h-3.6v-8.4c0-1.5-0.8-2.5-2.4-2.5 c-1.6%2c0-2.8%2c1.3-2.8%2c3.1v7.7h-3.6v-13.6h3.5V230.4z'/%3e %3cpath d='M132.5%2c223.2h4l6.7%2c18.9h-4l-1.3-4H131l-1.2%2c4h-3.9L132.5%2c223.2z M131.9%2c235.2h5l-1.7-5.5c-0.3-1-0.8-2.9-0.8-2.9h-0.1 c0%2c0-0.5%2c1.9-0.8%2c2.9L131.9%2c235.2z'/%3e %3cpath d='M143.8%2c242.5h3.6c0.3%2c0.9%2c1.1%2c1.5%2c2.7%2c1.5c2%2c0%2c3-1%2c3-2.8v-1.5h-0.1c-0.8%2c0.9-1.8%2c1.6-3.6%2c1.6c-3%2c0-6-2.4-6-6.5 c0-4.1%2c2.4-6.6%2c5.9-6.6c1.7%2c0%2c2.9%2c0.7%2c3.8%2c1.8h0.1v-1.4h3.5v12.6c0%2c1.9-0.6%2c3.2-1.6%2c4.1c-1.1%2c1.1-2.9%2c1.5-4.9%2c1.5 C146.5%2c246.8%2c144.2%2c245.2%2c143.8%2c242.5z M153.3%2c234.7c0-2-1.1-3.7-3.2-3.7c-1.8%2c0-3.1%2c1.4-3.1%2c3.7c0%2c2.3%2c1.2%2c3.7%2c3.1%2c3.7 C152.4%2c238.4%2c153.3%2c236.8%2c153.3%2c234.7z'/%3e %3cpath d='M158.6%2c235.3c0-4%2c2.7-7.2%2c6.7-7.2c4.4%2c0%2c6.7%2c3.3%2c6.7%2c8.2h-9.9c0.3%2c2.1%2c1.4%2c3.4%2c3.5%2c3.4c1.4%2c0%2c2.2-0.6%2c2.6-1.7h3.6 c-0.5%2c2.4-2.6%2c4.4-6.1%2c4.4C161.2%2c242.5%2c158.6%2c239.4%2c158.6%2c235.3z M162.2%2c233.9h6c-0.1-1.7-1.2-2.9-2.9-2.9 C163.5%2c230.9%2c162.6%2c232.1%2c162.2%2c233.9z'/%3e %3cpath d='M177.5%2c230.4L177.5%2c230.4c1-1.5%2c2.2-2.2%2c4.1-2.2c2.8%2c0%2c4.7%2c2.1%2c4.7%2c5.1v8.9h-3.6v-8.4c0-1.5-0.9-2.5-2.4-2.5 c-1.6%2c0-2.8%2c1.3-2.8%2c3.1v7.7H174v-13.6h3.5V230.4z'/%3e %3cpath d='M188.1%2c235.4c0-4.1%2c2.6-7.2%2c6.8-7.2c3.5%2c0%2c5.7%2c2%2c6.2%2c5h-3.5c-0.2-1.2-1.2-2.1-2.5-2.1c-2.2%2c0-3.3%2c1.7-3.3%2c4.3 c0%2c2.6%2c1%2c4.3%2c3.2%2c4.3c1.5%2c0%2c2.5-0.8%2c2.7-2.3h3.5c-0.2%2c2.9-2.5%2c5.2-6.1%2c5.2C190.8%2c242.5%2c188.1%2c239.4%2c188.1%2c235.4z'/%3e %3cpath d='M203.2%2c243.8h1.3c1.4%2c0%2c2-0.7%2c2-1.9c0-0.7-0.3-1.6-1-3.7l-3.7-9.7h3.8l2%2c6.1c0.4%2c1.2%2c0.9%2c3%2c0.9%2c3h0.1c0%2c0%2c0.4-1.7%2c0.8-3 l1.9-6.1h3.6l-4.8%2c13.9c-1%2c3-2%2c4.1-4.8%2c4.1h-2.1L203.2%2c243.8L203.2%2c243.8z'/%3e%3c/g%3e%3c/svg%3e";

    var img$7 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 22.0.1%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 170.1 170.1' style='enable-background:new 0 0 170.1 170.1%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:white%3b%7d%3c/style%3e%3cpath class='st0' d='M85.2%2c117.9C56%2c117.9%2c32.3%2c105%2c32.3%2c89c0-15.9%2c23.6-28.8%2c52.8-28.8V46c9%2c0%2c17.7%2c1.2%2c25.1%2c3.4l-25%2c25.2V89 l25-25.4c16.6%2c4.9%2c27.9%2c14.4%2c27.9%2c25.4C138.1%2c105%2c114.4%2c117.9%2c85.2%2c117.9'/%3e%3cg%3e %3cpath class='st0' d='M165.8%2c4.3v161.5H4.3V4.3H165.8 M170.1%2c0H0v170.1h170.1V0L170.1%2c0z'/%3e%3c/g%3e%3c/svg%3e";

    var img$6 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 24.3.0%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 500 542.5' style='enable-background:new 0 0 500 542.5%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:white%3b%7d%3c/style%3e%3cg%3e %3cg%3e %3cg%3e %3cpath class='st0' d='M0%2c428.5h34.5v6.8H21.2v35.7h-8v-35.7H0V428.5z'/%3e %3cpath class='st0' d='M46.7%2c442.1c0%2c1-0.1%2c2-0.1%2c2.8h0.2c1-1.6%2c2.3-2.9%2c3.9-3.8c1.5-0.9%2c3.4-1.4%2c5.6-1.4c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8 s2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3v-19.5c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5 c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3v-42.5h7.3V440C46.7%2c440.4%2c46.7%2c441.1%2c46.7%2c442.1z'/%3e %3cpath class='st0' d='M87.1%2c472c-2.4%2c0-4.6-0.4-6.5-1.3s-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1s-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4c0.7-2%2c1.8-3.7%2c3.1-5.1c1.3-1.5%2c2.9-2.6%2c4.8-3.4c1.9-0.8%2c3.9-1.2%2c6.2-1.2c2.2%2c0%2c4.2%2c0.4%2c6%2c1.1 c1.7%2c0.7%2c3.2%2c1.8%2c4.5%2c3.2c1.5%2c1.6%2c2.6%2c3.6%2c3.3%2c5.9c0.7%2c2.3%2c1.1%2c4.9%2c1%2c7.7H78.8c0.3%2c2.6%2c1.1%2c4.8%2c2.5%2c6.4c1.4%2c1.6%2c3.4%2c2.4%2c5.9%2c2.4 c1.7%2c0%2c3.2-0.4%2c4.3-1.1c1.1-0.7%2c1.9-1.7%2c2.4-2.9h7.1c-0.4%2c1.4-1%2c2.6-1.7%2c3.8c-0.8%2c1.2-1.8%2c2.2-2.9%2c3c-1.2%2c0.9-2.5%2c1.5-4.1%2c2 C90.7%2c471.7%2c89%2c472%2c87.1%2c472z M86.7%2c445c-2.4%2c0-4.2%2c0.7-5.5%2c2.2c-1.3%2c1.5-2%2c3.4-2.3%2c5.8h15.2c-0.1-2.5-0.9-4.5-2.1-5.9 C90.7%2c445.7%2c88.9%2c445%2c86.7%2c445z'/%3e %3cpath class='st0' d='M121.8%2c428.5h8.1l14.1%2c22.3c0.6%2c0.9%2c1.2%2c2%2c1.8%2c3.1c0.6%2c1.1%2c1.2%2c2.2%2c1.7%2c3.2c0.6%2c1.2%2c1.2%2c2.4%2c1.8%2c3.5h0.2 c-0.1-1.3-0.1-2.6-0.2-3.8c-0.1-1.1-0.1-2.3-0.2-3.5c0-1.3-0.1-2.4-0.1-3.5v-21.3h7.5v42.5h-8.1l-14.1-22.2 c-0.6-0.9-1.2-2-1.8-3.2c-0.6-1.2-1.2-2.2-1.7-3.2c-0.6-1.2-1.2-2.4-1.8-3.5h-0.1c0%2c1.3%2c0.1%2c2.6%2c0.2%2c3.8c0.1%2c1.1%2c0.1%2c2.3%2c0.2%2c3.5 c0%2c1.3%2c0.1%2c2.4%2c0.1%2c3.5v21.3h-7.5V428.5z'/%3e %3cpath class='st0' d='M177.9%2c472c-2.4%2c0-4.5-0.4-6.4-1.3c-1.9-0.8-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1s-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4s1.8-3.7%2c3.1-5.1c1.4-1.5%2c3-2.6%2c4.9-3.4c1.9-0.8%2c4.1-1.2%2c6.4-1.2s4.5%2c0.4%2c6.4%2c1.2c1.9%2c0.8%2c3.5%2c2%2c4.9%2c3.4 c1.4%2c1.4%2c2.4%2c3.1%2c3.1%2c5.1s1.1%2c4.1%2c1.1%2c6.4c0%2c2.3-0.4%2c4.4-1.1%2c6.3s-1.8%2c3.7-3.1%2c5.1c-1.3%2c1.5-3%2c2.6-4.9%2c3.4S180.2%2c472%2c177.9%2c472z M177.8%2c466.5c1.3%2c0%2c2.5-0.3%2c3.5-0.8c1-0.5%2c1.9-1.3%2c2.5-2.2c0.7-1%2c1.2-2.1%2c1.6-3.4c0.4-1.3%2c0.5-2.7%2c0.5-4.2 c0-1.5-0.2-2.9-0.5-4.3c-0.4-1.3-0.9-2.5-1.6-3.4c-0.7-1-1.5-1.7-2.5-2.3c-1-0.5-2.2-0.8-3.5-0.8c-1.3%2c0-2.5%2c0.3-3.5%2c0.8 c-1%2c0.5-1.9%2c1.3-2.6%2c2.3c-0.7%2c1-1.2%2c2.1-1.5%2c3.4c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.3c0%2c1.5%2c0.2%2c2.9%2c0.5%2c4.2c0.3%2c1.3%2c0.9%2c2.4%2c1.5%2c3.4 c0.7%2c0.9%2c1.5%2c1.7%2c2.6%2c2.2C175.3%2c466.2%2c176.5%2c466.5%2c177.8%2c466.5z'/%3e %3cpath class='st0' d='M205.4%2c446h0.2c1.9-4%2c4.9-5.9%2c8.8-5.9c0.9%2c0%2c1.5%2c0.1%2c1.9%2c0.3v6.5h-0.2c-0.6-0.1-1.3-0.2-2-0.2 c-2.4%2c0-4.4%2c0.7-6%2c2.3c-1.6%2c1.6-2.4%2c3.8-2.4%2c6.8v15.3h-7.3v-30.5h7V446z'/%3e %3cpath class='st0' d='M218.8%2c440.5h7.5l3.9%2c14.2c0.2%2c0.9%2c0.5%2c1.9%2c0.7%2c2.9c0.2%2c1.1%2c0.4%2c2.1%2c0.6%2c3c0.2%2c1.1%2c0.4%2c2.2%2c0.6%2c3.3h0.1 c0.2-1.1%2c0.4-2.1%2c0.6-3.2c0.2-0.9%2c0.4-1.9%2c0.6-3c0.2-1.1%2c0.5-2.1%2c0.7-3l3.8-14.2h6.4l3.9%2c14.2c0.2%2c0.9%2c0.5%2c1.8%2c0.7%2c2.9 c0.2%2c1.1%2c0.4%2c2.1%2c0.6%2c3c0.2%2c1.1%2c0.4%2c2.2%2c0.6%2c3.3h0.1c0.2-1.1%2c0.4-2.2%2c0.6-3.3c0.2-0.9%2c0.4-1.9%2c0.6-3c0.2-1.1%2c0.5-2.1%2c0.8-3 l4.1-14.2h7.3l-9.7%2c30.5h-7l-3.8-14.5c-0.2-0.8-0.4-1.7-0.6-2.7c-0.2-1-0.4-2-0.6-2.9c-0.2-1.1-0.4-2.2-0.6-3.3h-0.1 c-0.2%2c1.1-0.5%2c2.2-0.7%2c3.3c-0.2%2c0.9-0.4%2c1.9-0.6%2c2.9c-0.2%2c1-0.4%2c1.9-0.6%2c2.7l-3.9%2c14.5h-7L218.8%2c440.5z'/%3e %3cpath class='st0' d='M280.7%2c472c-2.4%2c0-4.6-0.4-6.5-1.3s-3.6-2-4.9-3.4c-1.3-1.4-2.4-3.2-3.1-5.1c-0.7-2-1.1-4.1-1.1-6.3 c0-2.3%2c0.4-4.4%2c1.1-6.4c0.7-2%2c1.8-3.7%2c3.1-5.1c1.3-1.5%2c2.9-2.6%2c4.8-3.4c1.9-0.8%2c3.9-1.2%2c6.2-1.2c2.2%2c0%2c4.2%2c0.4%2c6%2c1.1 c1.7%2c0.7%2c3.2%2c1.8%2c4.5%2c3.2c1.5%2c1.6%2c2.6%2c3.6%2c3.3%2c5.9c0.7%2c2.3%2c1.1%2c4.9%2c1%2c7.7h-22.8c0.3%2c2.6%2c1.1%2c4.8%2c2.5%2c6.4c1.4%2c1.6%2c3.4%2c2.4%2c5.9%2c2.4 c1.7%2c0%2c3.2-0.4%2c4.3-1.1c1.1-0.7%2c1.9-1.7%2c2.4-2.9h7.1c-0.4%2c1.4-1%2c2.6-1.7%2c3.8c-0.8%2c1.2-1.8%2c2.2-2.9%2c3s-2.5%2c1.5-4.1%2c2 C284.2%2c471.7%2c282.5%2c472%2c280.7%2c472z M280.3%2c445c-2.4%2c0-4.2%2c0.7-5.5%2c2.2c-1.3%2c1.5-2%2c3.4-2.3%2c5.8h15.2c-0.1-2.5-0.9-4.5-2.1-5.9 C284.2%2c445.7%2c282.5%2c445%2c280.3%2c445z'/%3e %3cpath class='st0' d='M313.7%2c481.7c-4.1%2c0-7.4-0.8-9.8-2.4c-2.4-1.6-3.8-3.8-4.2-6.7h7c0.5%2c2.5%2c2.8%2c3.8%2c6.9%2c3.8 c4.9%2c0%2c7.4-2.2%2c7.4-6.7v-0.7c0-0.8%2c0-1.6%2c0-2.3c0-0.7%2c0-1.4%2c0.1-1.9H321c-1%2c1.5-2.1%2c2.7-3.5%2c3.5c-1.4%2c0.8-3.1%2c1.2-5.1%2c1.2 c-1.9%2c0-3.6-0.3-5.2-1c-1.6-0.7-3-1.7-4.2-2.9c-1.2-1.3-2.1-2.8-2.8-4.6c-0.7-1.8-1-3.9-1-6.1c0-2.3%2c0.3-4.4%2c1-6.2 c0.7-1.9%2c1.6-3.4%2c2.7-4.7c1.1-1.3%2c2.5-2.3%2c4.1-3c1.6-0.7%2c3.3-1.1%2c5.1-1.1c4.2%2c0%2c7.2%2c1.6%2c9%2c4.7h0.1v-3.9h7v28.5c0%2c2.2-0.3%2c4-1%2c5.6 c-0.7%2c1.6-1.6%2c2.9-2.8%2c3.9c-1.3%2c1.1-2.8%2c1.8-4.6%2c2.3C317.9%2c481.4%2c315.9%2c481.7%2c313.7%2c481.7z M313.6%2c463.8c1.4%2c0%2c2.5-0.2%2c3.5-0.7 c1-0.5%2c1.8-1.1%2c2.4-1.9c0.6-0.8%2c1.1-1.8%2c1.3-2.9c0.3-1.1%2c0.4-2.4%2c0.4-3.7c0-2.7-0.6-4.9-1.9-6.6c-1.3-1.7-3.2-2.5-5.8-2.5 c-2.4%2c0-4.2%2c0.8-5.5%2c2.5c-1.3%2c1.7-1.9%2c3.9-1.9%2c6.7s0.6%2c5.1%2c1.9%2c6.7C309.4%2c463%2c311.2%2c463.8%2c313.6%2c463.8z'/%3e %3cpath class='st0' d='M333.5%2c428.5h7.4v7h-7.4V428.5z M333.6%2c440.5h7.3v30.5h-7.3V440.5z'/%3e %3cpath class='st0' d='M367.2%2c471.1c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.4-3.7%2c3.3 s-3.5%2c1.3-5.9%2c1.3c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-0.9-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9 c0-1.7%2c0.3-3.1%2c0.9-4.3c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3 s1.9-1.5%2c1.9-2.9c0-1.3-0.5-2.4-1.4-3.2s-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6h-6.9 c0-1.3%2c0.3-2.5%2c0.9-3.7c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2s3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4 c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4c2.9%2c1.8%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H367.2z M358.6%2c466.8 c1.3%2c0%2c2.4-0.2%2c3.3-0.6c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.4%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.9-2.7%2c1.2 c-1.1%2c0.3-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6c-1.2%2c0.7-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3 s1%2c0.5%2c1.7%2c0.7C357.3%2c466.8%2c357.9%2c466.8%2c358.6%2c466.8z'/%3e %3cpath class='st0' d='M384.6%2c445h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8 v20.7h-7.3v-19.5c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5s-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4 c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3v-30.5h7.1V445z'/%3e %3cpath class='st0' d='M0%2c499h34.5v6.8H21.2v35.7h-8v-35.7H0V499z'/%3e %3cpath class='st0' d='M52.6%2c541.5c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.5-3.7%2c3.3 c-1.5%2c0.9-3.5%2c1.3-5.9%2c1.3c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-1-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9 c0-1.7%2c0.3-3.1%2c0.9-4.3c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3 c1.3-0.5%2c1.9-1.5%2c1.9-2.9c0-1.3-0.5-2.4-1.4-3.2c-0.9-0.8-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6H33 c0-1.3%2c0.3-2.5%2c0.9-3.7c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2c1.6-0.5%2c3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4 c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4c2.9%2c1.7%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H52.6z M44%2c537.3 c1.3%2c0%2c2.4-0.2%2c3.3-0.6c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.3%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.8-2.7%2c1.2 c-1.1%2c0.3-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6s-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3 c0.5%2c0.3%2c1%2c0.6%2c1.7%2c0.7C42.7%2c537.2%2c43.3%2c537.3%2c44%2c537.3z'/%3e %3cpath class='st0' d='M73.7%2c525.5L63.8%2c511h8.3l3%2c4.8c0.3%2c0.5%2c0.6%2c1.1%2c0.9%2c1.7c0.3%2c0.6%2c0.6%2c1.2%2c0.9%2c1.7c0.3%2c0.7%2c0.7%2c1.3%2c1%2c1.9h0.1 c0.3-0.6%2c0.6-1.3%2c1-1.9c0.3-0.5%2c0.6-1.1%2c0.9-1.7c0.3-0.6%2c0.6-1.2%2c0.9-1.7l3.1-4.8h7.8l-9.7%2c14.2l11.2%2c16.3H85l-4-6.1 c-0.3-0.5-0.7-1.1-1.1-1.8c-0.4-0.7-0.7-1.3-1-1.9c-0.4-0.7-0.7-1.4-1-2.1h-0.1c-0.3%2c0.7-0.7%2c1.4-1.1%2c2.1c-0.3%2c0.6-0.7%2c1.3-1%2c1.9 c-0.4%2c0.7-0.7%2c1.3-1%2c1.8l-4.1%2c6.1h-8L73.7%2c525.5z'/%3e %3cpath class='st0' d='M125.2%2c499h8.5l15.5%2c42.5h-8.5l-3.4-10.1h-16.1l-3.4%2c10.1h-8L125.2%2c499z M123.2%2c525.6h12.2l-3.3-9.8 c-0.4-1.3-0.8-2.5-1.1-3.7c-0.3-1.2-0.6-2.3-0.8-3.3c-0.3-1.1-0.5-2.2-0.7-3.3h-0.1c-0.3%2c1.2-0.6%2c2.4-0.9%2c3.6 c-0.3%2c1-0.6%2c2.1-0.9%2c3.3c-0.3%2c1.2-0.7%2c2.3-1%2c3.3L123.2%2c525.6z'/%3e %3cpath class='st0' d='M163.9%2c542.5c-2%2c0-3.9-0.4-5.5-1.1c-1.6-0.7-3-1.8-4.2-3.2c-1.1-1.4-2-3.1-2.7-5.1c-0.6-2-0.9-4.2-0.9-6.7 c0-2.4%2c0.3-4.7%2c1-6.6c0.7-2%2c1.6-3.7%2c2.7-5.1c1.2-1.4%2c2.6-2.5%2c4.2-3.3s3.4-1.1%2c5.3-1.1c2.1%2c0%2c4%2c0.5%2c5.5%2c1.4 c1.6%2c0.9%2c2.8%2c2.2%2c3.8%2c3.8h0.1c-0.1-0.8-0.1-1.8-0.2-2.9c0-1.1-0.1-2.3-0.1-3.4V499h7.3v42.5h-7v-4.5h-0.1 c-0.9%2c1.8-2.2%2c3.1-3.8%2c4.1C167.9%2c542.1%2c166%2c542.5%2c163.9%2c542.5z M165.4%2c536.6c1.3%2c0%2c2.5-0.3%2c3.5-0.7c1-0.5%2c1.9-1.2%2c2.5-2.1 c0.7-0.9%2c1.2-2%2c1.5-3.3c0.3-1.3%2c0.5-2.6%2c0.5-4.1c0-1.5-0.2-2.9-0.5-4.2c-0.3-1.3-0.9-2.4-1.5-3.3c-0.7-0.9-1.5-1.7-2.5-2.2 c-1-0.5-2.2-0.8-3.5-0.8c-1.2%2c0-2.3%2c0.3-3.2%2c0.8c-0.9%2c0.5-1.7%2c1.2-2.3%2c2.2c-0.6%2c0.9-1.1%2c2-1.4%2c3.3c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.1 c0%2c3.1%2c0.6%2c5.5%2c1.8%2c7.4C161.1%2c535.6%2c162.9%2c536.6%2c165.4%2c536.6z'/%3e %3cpath class='st0' d='M187.1%2c511h7v4.6h0.2c1-1.7%2c2.2-3.1%2c3.7-4c1.5-0.9%2c3.3-1.4%2c5.4-1.4c1.9%2c0%2c3.6%2c0.5%2c5%2c1.4 c1.4%2c0.9%2c2.4%2c2.4%2c3.1%2c4.3h0.1c1.2-2%2c2.7-3.4%2c4.3-4.3c1.6-0.9%2c3.4-1.4%2c5.3-1.4c3.1%2c0%2c5.6%2c0.9%2c7.3%2c2.8c1.7%2c1.9%2c2.6%2c4.5%2c2.6%2c7.8 v20.7h-7.3v-19.7c0-1.8-0.5-3.1-1.4-4.1c-0.9-1-2.1-1.5-3.6-1.5c-1.8%2c0-3.3%2c0.7-4.4%2c2c-1.2%2c1.3-1.7%2c3.1-1.7%2c5.3v18.1h-7.3v-19.7 c0-1.8-0.4-3.1-1.3-4.1c-0.8-1-2-1.5-3.5-1.5c-0.8%2c0-1.6%2c0.2-2.4%2c0.5c-0.8%2c0.4-1.4%2c0.9-2%2c1.5c-0.6%2c0.6-1.1%2c1.4-1.4%2c2.3 c-0.3%2c0.9-0.5%2c1.9-0.5%2c2.9v18.1h-7.3V511z'/%3e %3cpath class='st0' d='M237.4%2c499h7.4v7h-7.4V499z M237.5%2c511h7.3v30.5h-7.3V511z'/%3e %3cpath class='st0' d='M258.4%2c515.5h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8 c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3V522c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5 c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3V511h7.1V515.5z'/%3e %3cpath class='st0' d='M284.9%2c499h7.4v7h-7.4V499z M285%2c511h7.3v30.5H285V511z'/%3e %3cpath class='st0' d='M311.1%2c542.5c-4.4%2c0-7.8-1-10.2-2.9c-2.4-1.9-3.7-4.4-4-7.5h7c0.3%2c1.8%2c1.1%2c3.2%2c2.4%2c4 c1.3%2c0.8%2c2.9%2c1.2%2c4.9%2c1.2c2%2c0%2c3.5-0.4%2c4.5-1.2c0.9-0.8%2c1.4-1.8%2c1.4-3c0-0.8-0.2-1.4-0.6-1.9c-0.4-0.5-0.9-0.9-1.6-1.2 c-0.7-0.3-1.5-0.6-2.5-0.8c-1-0.2-2-0.4-3.2-0.7c-1.4-0.3-2.8-0.6-4.2-1c-1.3-0.4-2.5-0.9-3.5-1.6c-1-0.7-1.9-1.5-2.5-2.6 c-0.6-1.1-0.9-2.5-0.9-4.2c0-1.4%2c0.3-2.7%2c0.9-3.9c0.6-1.1%2c1.4-2.1%2c2.5-2.9c1-0.8%2c2.3-1.4%2c3.8-1.8c1.5-0.4%2c3.1-0.6%2c4.9-0.6 c4.1%2c0%2c7.2%2c0.8%2c9.2%2c2.5c2.1%2c1.7%2c3.3%2c3.8%2c3.7%2c6.5H316c-0.5-2.7-2.6-4.1-6.1-4.1c-1.7%2c0-3%2c0.3-3.9%2c1c-0.9%2c0.7-1.3%2c1.6-1.3%2c2.6 c0%2c0.7%2c0.2%2c1.2%2c0.6%2c1.7s0.9%2c0.8%2c1.6%2c1.1c0.7%2c0.3%2c1.5%2c0.5%2c2.5%2c0.7c0.9%2c0.2%2c2%2c0.4%2c3.1%2c0.6c1.5%2c0.3%2c2.9%2c0.6%2c4.2%2c0.9 c1.4%2c0.4%2c2.6%2c0.9%2c3.7%2c1.6c1.1%2c0.7%2c2%2c1.6%2c2.6%2c2.8c0.6%2c1.2%2c1%2c2.7%2c1%2c4.5c0%2c1.6-0.3%2c3-1%2c4.2c-0.7%2c1.2-1.6%2c2.2-2.7%2c3.1 c-1.2%2c0.8-2.5%2c1.4-4.1%2c1.9S312.9%2c542.5%2c311.1%2c542.5z'/%3e %3cpath class='st0' d='M326.5%2c511h4.7v-9.7h7.1v9.7h6.1v5h-6.1v17.1c0%2c1.1%2c0.3%2c1.9%2c0.9%2c2.3c0.6%2c0.4%2c1.4%2c0.6%2c2.4%2c0.6 c0.4%2c0%2c0.8%2c0%2c1.2-0.1c0.4%2c0%2c0.8-0.1%2c1.1-0.2h0.3v5.7c-0.6%2c0.1-1.3%2c0.2-2.1%2c0.3c-0.8%2c0.1-1.7%2c0.1-2.7%2c0.1c-1.2%2c0-2.3-0.1-3.4-0.4 c-1-0.3-1.9-0.7-2.6-1.2c-0.7-0.5-1.3-1.3-1.7-2.2c-0.4-0.9-0.6-2-0.6-3.4V516h-4.7V511z'/%3e %3cpath class='st0' d='M356.6%2c516.5h0.2c1.9-4%2c4.9-5.9%2c8.8-5.9c0.9%2c0%2c1.5%2c0.1%2c1.9%2c0.3v6.5h-0.2c-0.6-0.1-1.3-0.2-2-0.2 c-2.4%2c0-4.4%2c0.7-6%2c2.3c-1.6%2c1.6-2.4%2c3.8-2.4%2c6.8v15.3h-7.3V511h7V516.5z'/%3e %3cpath class='st0' d='M391.1%2c541.5c-0.3-0.3-0.5-0.8-0.7-1.5c-0.2-0.6-0.3-1.5-0.4-2.5h-0.1c-1%2c1.3-2.2%2c2.5-3.7%2c3.3 c-1.5%2c0.9-3.5%2c1.3-5.9%2c1.3c-1.5%2c0-2.9-0.2-4.1-0.6c-1.3-0.4-2.4-1-3.3-1.7c-0.9-0.8-1.6-1.7-2.2-2.8c-0.5-1.1-0.8-2.4-0.8-3.9 c0-1.7%2c0.3-3.1%2c0.9-4.3c0.6-1.1%2c1.5-2%2c2.6-2.7c1.1-0.7%2c2.4-1.2%2c3.9-1.6c1.5-0.4%2c3.2-0.7%2c5-0.9c2.5-0.3%2c4.4-0.7%2c5.7-1.3 c1.3-0.5%2c1.9-1.5%2c1.9-2.9c0-1.3-0.5-2.4-1.4-3.2c-0.9-0.8-2.3-1.2-4.1-1.2c-2.1%2c0-3.6%2c0.4-4.6%2c1.3c-1%2c0.9-1.6%2c2.1-1.6%2c3.6h-6.9 c0-1.3%2c0.3-2.5%2c0.9-3.7c0.5-1.2%2c1.4-2.3%2c2.5-3.2c1.1-0.9%2c2.4-1.6%2c4-2.2c1.6-0.5%2c3.5-0.8%2c5.7-0.8c1.8%2c0%2c3.3%2c0.1%2c4.7%2c0.4 c1.4%2c0.3%2c2.5%2c0.7%2c3.5%2c1.4c2.9%2c1.7%2c4.3%2c4.7%2c4.3%2c8.7v16.1c0%2c1.3%2c0.1%2c2.2%2c0.3%2c2.9c0.2%2c0.7%2c0.5%2c1.1%2c0.8%2c1.4v0.5H391.1z M382.4%2c537.3 c1.3%2c0%2c2.4-0.2%2c3.3-0.6c0.9-0.4%2c1.7-0.9%2c2.4-1.5c0.6-0.6%2c1.1-1.3%2c1.5-2.2c0.3-0.8%2c0.5-1.7%2c0.5-2.5v-4.5c-0.7%2c0.5-1.6%2c0.8-2.7%2c1.2 s-2.1%2c0.6-3.3%2c0.8c-2.3%2c0.4-4%2c1-5.2%2c1.6s-1.8%2c1.8-1.8%2c3.5c0%2c0.8%2c0.1%2c1.5%2c0.4%2c2c0.3%2c0.5%2c0.7%2c1%2c1.1%2c1.3c0.5%2c0.3%2c1%2c0.6%2c1.7%2c0.7 C381.1%2c537.2%2c381.8%2c537.3%2c382.4%2c537.3z'/%3e %3cpath class='st0' d='M401.3%2c511h4.7v-9.7h7.1v9.7h6.1v5h-6.1v17.1c0%2c1.1%2c0.3%2c1.9%2c0.9%2c2.3c0.6%2c0.4%2c1.4%2c0.6%2c2.4%2c0.6 c0.4%2c0%2c0.8%2c0%2c1.2-0.1c0.4%2c0%2c0.8-0.1%2c1.1-0.2h0.3v5.7c-0.6%2c0.1-1.3%2c0.2-2.1%2c0.3c-0.8%2c0.1-1.7%2c0.1-2.7%2c0.1c-1.2%2c0-2.3-0.1-3.4-0.4 c-1-0.3-1.9-0.7-2.6-1.2c-0.7-0.5-1.3-1.3-1.7-2.2c-0.4-0.9-0.6-2-0.6-3.4V516h-4.7V511z'/%3e %3cpath class='st0' d='M424.2%2c499h7.4v7h-7.4V499z M424.3%2c511h7.3v30.5h-7.3V511z'/%3e %3cpath class='st0' d='M452.2%2c542.5c-2.4%2c0-4.5-0.4-6.4-1.3c-1.9-0.8-3.6-2-4.9-3.4c-1.3-1.5-2.4-3.2-3.1-5.1 c-0.7-2-1.1-4.1-1.1-6.3c0-2.3%2c0.4-4.4%2c1.1-6.4c0.7-2%2c1.8-3.7%2c3.1-5.1c1.4-1.5%2c3-2.6%2c4.9-3.4c1.9-0.8%2c4.1-1.2%2c6.4-1.2 c2.4%2c0%2c4.5%2c0.4%2c6.4%2c1.2c1.9%2c0.8%2c3.5%2c2%2c4.9%2c3.4c1.4%2c1.5%2c2.4%2c3.2%2c3.1%2c5.1c0.7%2c2%2c1.1%2c4.1%2c1.1%2c6.4c0%2c2.3-0.4%2c4.4-1.1%2c6.3 c-0.7%2c2-1.8%2c3.7-3.1%2c5.1c-1.3%2c1.4-3%2c2.6-4.9%2c3.4C456.7%2c542%2c454.5%2c542.5%2c452.2%2c542.5z M452.1%2c537c1.3%2c0%2c2.5-0.3%2c3.5-0.8 c1-0.5%2c1.9-1.3%2c2.5-2.2c0.7-0.9%2c1.2-2.1%2c1.6-3.4c0.4-1.3%2c0.5-2.7%2c0.5-4.2s-0.2-2.9-0.5-4.3c-0.4-1.3-0.9-2.5-1.6-3.4 c-0.7-1-1.5-1.7-2.5-2.3c-1-0.5-2.2-0.8-3.5-0.8c-1.3%2c0-2.5%2c0.3-3.5%2c0.8c-1%2c0.5-1.9%2c1.3-2.6%2c2.3c-0.7%2c1-1.2%2c2.1-1.5%2c3.4 c-0.3%2c1.3-0.5%2c2.7-0.5%2c4.3s0.2%2c2.9%2c0.5%2c4.2c0.3%2c1.3%2c0.9%2c2.4%2c1.5%2c3.4c0.7%2c1%2c1.5%2c1.7%2c2.6%2c2.2C449.6%2c536.7%2c450.8%2c537%2c452.1%2c537z'/%3e %3cpath class='st0' d='M479.8%2c515.5h0.2c1-1.7%2c2.3-3%2c3.9-3.9c1.6-0.9%2c3.5-1.3%2c5.6-1.3c3.3%2c0%2c5.9%2c0.9%2c7.7%2c2.8 c1.9%2c1.9%2c2.8%2c4.5%2c2.8%2c7.8v20.7h-7.3V522c0-1.8-0.5-3.3-1.5-4.3c-1-1-2.4-1.5-4.3-1.5c-1%2c0-2%2c0.2-2.8%2c0.5 c-0.8%2c0.4-1.6%2c0.9-2.2%2c1.5c-0.6%2c0.7-1.1%2c1.5-1.4%2c2.4c-0.3%2c0.9-0.5%2c1.9-0.5%2c3v17.9h-7.3V511h7.1V515.5z'/%3e %3c/g%3e %3cg%3e %3cpath class='st0' d='M71.7%2c212c0%2c37.9%2c56.4%2c68.7%2c125.9%2c68.7c69.6%2c0%2c126-30.8%2c126-68.7c0-26.2-26.8-49-66.4-60.5L197.7%2c212v-34.5 l59.5-59.9c-17.7-5.2-38.3-8.1-59.8-8.1l0%2c33.9C128%2c143.4%2c71.7%2c174.1%2c71.7%2c212z'/%3e %3c/g%3e %3c/g%3e %3cpath class='st0' d='M399.2%2c6v393H6.2V6H399.2 M405.2%2c0H0.2v405h405V0L405.2%2c0z'/%3e%3c/g%3e%3c/svg%3e";

    var img$5 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 25.2.3%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 2000 20' style='enable-background:new 0 0 2000 20%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:%23F3A7B0%3b%7d .st1%7bfill:%236F2C3F%3b%7d%3c/style%3e%3cpolygon class='st0' points='2000%2c0 2000%2c20 0%2c0 '/%3e%3cpolygon class='st1' points='0%2c0 0%2c20 2000%2c0 '/%3e%3cpath class='st1' d='M913.84-479.69'/%3e%3c/svg%3e";

    var img$4 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 25.2.3%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 2000 20' style='enable-background:new 0 0 2000 20%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:%23b2b2b2%3b%7d .st1%7bfill:%231a1a1a%3b%7d%3c/style%3e%3cpolygon class='st0' points='2000%2c0 2000%2c20 0%2c0 '/%3e%3cpolygon class='st1' points='0%2c0 0%2c20 2000%2c0 '/%3e%3cpath class='st1' d='M913.84-479.69'/%3e%3c/svg%3e";

    var img$3 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 25.2.3%2c SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e%3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 2000 20' style='enable-background:new 0 0 2000 20%3b' xml:space='preserve'%3e%3cstyle type='text/css'%3e .st0%7bfill:%23b9e1c8%3b%7d .st1%7bfill:%232b6940%3b%7d%3c/style%3e%3cpolygon class='st0' points='2000%2c0 2000%2c20 0%2c0 '/%3e%3cpolygon class='st1' points='0%2c0 0%2c20 2000%2c0 '/%3e%3cpath class='st1' d='M913.84-479.69'/%3e%3c/svg%3e";

    function getClassNames$8(props, tag) {
      var compact = props.compact;
      var palette = getTheme().palette;
      var dekor;

      switch (tag) {
        case 'SKE':
          dekor = img$5;
          break;

        case 'INK':
          dekor = img$3;
          break;

        case 'LSO':
          dekor = img$4;
          break;

        default:
          dekor = img$5;
          break;
      } // @ts-ignore TODO


      return mergeStyleSets({
        header: {
          selectors: {
            '&::after': {
              display: 'block',
              content: '""',
              width: '100%',
              height: compact ? '12px' : '20px',
              backgroundColor: '#fff',
              backgroundRepeat: 'no-repeat',
              backgroundPosition: 'center',
              backgroundSize: 'cover',
              backgroundImage: "url(" + dekor + ")"
            }
          }
        },
        headerMain: {
          width: 'auto',
          marginRight: 'auto',
          marginLeft: 'auto',
          marginTop: 'auto',
          height: 'auto',
          padding: compact ? '8px' : '16px 16px 4px 16px',
          display: 'flex',
          background: palette.skeColor.white,
          maxWidth: '1100px',
          selectors: {
            '@media (min-width: 640px)': {
              width: 'auto',
              minWidth: compact ? 'auto' : '500px',
              flexDirection: 'row'
            }
          }
        },
        logo: {
          selectors: {
            'a:focus div': {
              boxShadow: "0 0 0 3px " + palette.skeColor.interactive
            }
          }
        },
        contentWrapper: {
          flexGrow: 3,
          flexDirection: 'colum',
          textAlign: 'left',
          width: '100%',
          paddingLeft: '16px',
          selectors: {
            '@media (min-width: 480px)': {
              paddingLeft: '32px'
            }
          }
        },
        title: {
          marginTop: compact ? '12px' : '4px',
          fontSize: exports.FontSizes.large + " !important",
          selectors: {
            '@media (min-width: 640px)': {
              fontSize: exports.FontSizes.xLarge + " !important"
            }
          }
        },
        separator: {
          width: '100%',
          height: '20px',
          backgroundColor: '#fff',
          backgroundRepeat: 'no-repeat',
          backgroundPosition: 'center',
          backgroundSize: 'cover',
          backgroundImage: "url(" + dekor + ")"
        },
        linkButton: {
          displayName: 'SkeActionButton',
          marginTop: '-12px',
          marginLeft: '-8px',
          selectors: {
            '& .ms-Button-textContainer': {
              color: palette.skeColor.blue,
              fontSize: exports.FontSizes.xSmall,
              fontWeight: 'bold'
            },
            '& .ms-Button-icon': {
              fontSize: exports.FontSizes.medium + " !important"
            }
          }
        }
      });
    }

    var getClassNames$7 = function getClassNames(props) {
      var compact = props.compact;
      var sidebarWidth = props.slantedAreaWidth ? props.slantedAreaWidth : 252;
      var palette = getTheme().palette;
      return mergeStyleSets({
        header: {
          margin: '0',
          borderRadius: '0 0 0 0',
          display: 'flex',
          overflow: 'hidden',
          background: palette.skeColor.grey5,
          color: palette.skeColor.white,
          alignItems: 'stretch',
          height: compact ? '72px' : '120px',
          selectors: {
            '@media (max-width: 640px)': {
              height: '72px'
            }
          }
        },
        headerLink: {
          flexGrow: 1,
          textAlign: 'center',
          color: palette.skeColor.white,
          marginLeft: '4px',
          selectors: {
            ':hover': {
              textDecoration: 'underline'
            },
            ':active': {
              textDecoration: 'none'
            }
          }
        },
        headerIcon: {
          color: palette.skeColor.white,
          fontSize: exports.FontSizes.icon,
          marginLeft: '10px',
          fontWeight: '700'
        },
        headerLinkContainer: {
          alignItems: 'center',
          display: 'flex',
          fontSize: exports.FontSizes.large,
          fontWeight: '700',
          textDecorationColor: palette.skeColor.white,
          textDecoration: 'none'
        },
        headerLeftContainer: {
          // @ts-ignore TODO
          width: props.slantedAreaWidth ? sidebarWidth : 'auto',
          background: palette.skeColor.internal,
          display: 'flex',
          alignItems: 'center',
          paddingLeft: 16,
          paddingRight: 8
        },
        headerLogo: {
          height: compact ? '50px' : '90px',
          selectors: {
            img: {
              margin: '16px auto 0 auto',
              height: compact ? '50px' : '90px',
              selectors: {
                '@media (min-width: 640px)': {
                  margin: 0
                }
              }
            }
          }
        },
        headerDiagonal: {
          borderRight: "40px solid " + palette.skeColor.grey5,
          borderBottom: "120px solid " + palette.skeColor.internal
        },
        headerRightContainer: {
          background: palette.skeColor.grey5,
          color: palette.skeColor.black,
          padding: '0 8px',
          flexGrow: '1',
          display: 'flex',
          alignItems: 'center',
          wordBreak: 'break-word',
          selectors: {
            '& h1': {
              flexGrow: 1,
              fontSize: exports.FontSizes.large,
              selectors: {
                '@media (min-width: 640px)': {
                  fontSize: exports.FontSizes.xLarge
                }
              }
            }
          }
        },
        elementTitle: {
          flexGrow: 1,
          fontSize: exports.FontSizes.large
        },
        headerRightButtons: {
          display: 'flex',
          alignSelf: 'flex-end'
        }
      });
    };

    var InternalHeader = function InternalHeader(props) {
      var styles = getClassNames$7(props);
      var size = UseScreen();
      return jsxRuntime.jsxs("header", tslib.__assign({
        className: classnames__default['default'](styles.header, props.className),
        id: props.id
      }, {
        children: [jsxRuntime.jsx("div", tslib.__assign({
          className: classnames__default['default'](styles.headerLeftContainer, props.slantedAreaClassName)
        }, {
          children: jsxRuntime.jsxs("a", tslib.__assign({
            className: styles.headerLinkContainer,
            href: props.homeUrl,
            onClick: props.onClick
          }, {
            children: [size.gt.md && jsxRuntime.jsx(Image, {
              className: styles.headerLogo,
              src: props.language === 'en' ? img$6 : img$7,
              alt: "Skatteetaten logo"
            }, void 0), jsxRuntime.jsx(Icon, {
              className: styles.headerIcon,
              iconName: props.icon
            }, void 0), jsxRuntime.jsx("div", tslib.__assign({
              className: styles.headerLink
            }, {
              children: props.homeText
            }), void 0)]
          }), void 0)
        }), void 0), jsxRuntime.jsx("div", {
          className: styles.headerDiagonal
        }, void 0), jsxRuntime.jsxs("div", tslib.__assign({
          className: styles.headerRightContainer
        }, {
          children: [typeof props.title === 'string' ? jsxRuntime.jsx("h1", {
            children: props.title
          }, void 0) : jsxRuntime.jsx("div", tslib.__assign({
            className: styles.elementTitle
          }, {
            children: props.title
          }), void 0), jsxRuntime.jsx("div", {
            children: props.children
          }, void 0)]
        }), void 0)]
      }), void 0);
    }; // @ts-ignore


    var ExternalHeaderContent = function ExternalHeaderContent(_a) {
      var styles = _a.styles,
          props = tslib.__rest(_a, ["styles"]);

      if (props.children) {
        return props.children;
      }

      if (props.compact) {
        return jsxRuntime.jsx("h1", tslib.__assign({
          className: styles.title
        }, {
          children: props.title
        }), void 0);
      }

      return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [jsxRuntime.jsx(ActionButton, tslib.__assign({
          href: props.homeUrl,
          onClick: props.onClick,
          className: styles.linkButton,
          icon: "ArrowBack",
          role: "link"
        }, {
          children: props.homeText
        }), void 0), jsxRuntime.jsx("h1", tslib.__assign({
          className: styles.title
        }, {
          children: props.title
        }), void 0)]
      }, void 0);
    };
    /*
     * visibleName TopBanner (Topp)
     */


    var TopBanner = function TopBanner(props) {
      var external = props.external,
          rest = tslib.__rest(props, ["external"]);

      return external ? jsxRuntime.jsx(ExternalHeader, tslib.__assign({}, rest), void 0) : jsxRuntime.jsx(InternalHeader, tslib.__assign({}, rest), void 0);
    };
    var ExternalHeader = function ExternalHeader(props) {
      var styles = getClassNames$8(props, 'SKE'); // @ts-ignore

      var logo = styles.logo,
          headerMain = styles.headerMain,
          contentWrapper = styles.contentWrapper;
      var compactHeight = props.compact ? 55 : 68;
      var isLink = props.logoLink;

      if (props.language) {
        i18n__default['default'].changeLanguage(props.language);
      }

      var logoImageElement = function logoImageElement(brand, showAltText) {

        switch (brand) {
          case 'SKE':
            return jsxRuntime.jsx(Image, {
              src: props.language === 'en' ? img$b : img$c,
              height: compactHeight,
              alt: isLink ? t('topbanner.ske.logoLink') : t('topbanner.ske.logo')
            }, void 0);

          case 'INK':
            return jsxRuntime.jsx(Image, {
              src: props.language === 'en' ? img$8 : img$9,
              height: compactHeight,
              alt: isLink ? t('topbanner.ink.logoLink') : t('topbanner.ink.logo')
            }, void 0);

          case 'LSO':
            return jsxRuntime.jsx(Image, {
              src: img$a,
              height: compactHeight,
              alt: isLink ? t('topbanner.lso.logoLink') : t('topbanner.lso.logo')
            }, void 0);

          default:
            return {};
        }
      };

      return jsxRuntime.jsx(BrandContext.Consumer, {
        children: function children(_a) {
          var tag = _a.tag;
          return jsxRuntime.jsxs("header", tslib.__assign({
            className: classnames__default['default'](getClassNames$8(props, tag).header, props.className),
            id: props.id
          }, {
            children: [props.topStripe, jsxRuntime.jsxs("div", tslib.__assign({
              className: headerMain
            }, {
              children: [jsxRuntime.jsx("div", {
                children: jsxRuntime.jsx("div", tslib.__assign({
                  className: logo
                }, {
                  children: props.logoLink ? jsxRuntime.jsx("a", tslib.__assign({
                    href: props.logoLinkUrl
                  }, {
                    children: logoImageElement(tag)
                  }), void 0) : logoImageElement(tag)
                }), void 0)
              }, void 0), jsxRuntime.jsx("div", tslib.__assign({
                className: contentWrapper
              }, {
                children: jsxRuntime.jsx(ExternalHeaderContent, tslib.__assign({
                  styles: styles
                }, props), void 0)
              }), void 0)]
            }), void 0)]
          }), void 0);
        }
      }, void 0);
    };
    TopBanner.defaultProps = {
      title: undefined,
      homeUrl: undefined,
      homeText: undefined,
      slantedAreaWidth: undefined,
      icon: 'Home',
      external: false,
      compact: false,
      logoLink: true,
      logoLinkUrl: 'https://www.skatteetaten.no',
      language: undefined
    };

    var getClassNames$6 = function getClassNames(contentWidth) {
      var _a, _b, _c, _d;

      if (contentWidth === void 0) {
        contentWidth = '100%';
      }

      return mergeStyleSets({
        topStripe: {
          position: 'relative'
        },
        background: {
          position: 'relative',
          backgroundColor: designtokenColors['ske-color-black-100'],
          zIndex: 125
        },
        overlay: {
          zIndex: 100,
          position: 'fixed',
          top: 0,
          right: 0,
          left: 0,
          bottom: 0,
          minHeight: '12.5rem',
          backgroundColor: 'rgba(255, 255, 255, 0.8)',
          transition: '0.3s ease-out',
          display: 'none'
        },
        overlayShow: {
          display: 'block'
        },
        topStripeContainer: {
          zIndex: 150,
          position: 'relative',
          display: 'flex',
          justifyContent: 'space-between',
          flexWrap: 'wrap',
          alignItems: 'center',
          backgroundColor: designtokenColors['ske-color-black-100'],
          color: designtokenColors['ske-color-white-100'],
          fontSize: designtokenFontSizes['ske-font-size-s'],
          padding: 0,
          margin: 0,
          selectors: (_a = {
            li: {
              listStyleType: 'none',
              position: 'relative'
            },
            a: {
              fontWeight: designtokenFontSizes['ske-font-weight-regular'],
              color: designtokenColors['ske-color-white-100'],
              border: 'none',
              textDecoration: 'underline'
            },
            'a:active, a:active i': {
              color: designtokenColors['ske-color-black-100']
            }
          }, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            justifyContent: 'flex-end',
            margin: "0 " + designtokenSpacing['ske-spacing-md']
          }, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-lg'] + ")"] = {
            maxWidth: contentWidth
          }, _a)
        },
        loggedInUser: {
          order: '-1',
          width: '100%',
          selectors: (_b = {}, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            order: 0,
            width: 'auto'
          }, _b)
        },
        hideOnMobile: {
          display: 'none',
          selectors: (_c = {}, _c["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            display: 'block'
          }, _c)
        },
        topStripeElement: {
          maxHeight: '40px',
          selectors: (_d = {
            a: {
              padding: '0.75rem 0.5rem',
              borderBottom: 'none !important'
            },
            'a:focus, a:hover, > span:hover > a': {
              color: designtokenColors['ske-color-black-100'],
              backgroundColor: designtokenColors['ske-color-white-100']
            }
          }, _d["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            marginLeft: designtokenSpacing['ske-spacing-md']
          }, _d)
        },
        topStripeUser: {
          alignItems: 'center',
          display: 'flex',
          flexDirection: 'row',
          padding: designtokenSpacing['ske-spacing-md'],
          selectors: {
            '> i': {
              fontSize: designtokenFontSizes['ske-font-size-icon-l'],
              alignSelf: 'start'
            }
          }
        }
      });
    };

    var getClassNames$5 = function getClassNames() {
      var _a;

      return mergeStyleSets({
        topStripeMenuIcon: {
          fontSize: designtokenFontSizes['ske-font-size-m'],
          verticalAlign: 'middle',
          position: 'absolute',
          bottom: '0.625rem',
          left: '0.25rem'
        },
        topStripeMenuShowChevron: {
          paddingRight: '1.375rem !important'
        },
        topStripeMenuHasIcon: {
          paddingLeft: '1.375rem !important'
        },
        topStripeMenuTitle: {
          textDecoration: 'underline',
          display: 'inline'
        },
        topStripeMenuChevronIcon: {
          position: 'absolute',
          fontSize: designtokenFontSizes['ske-font-size-xl'],
          bottom: '0.5rem'
        },
        topStripeMenuDropdownContainer: {
          zIndex: '200',
          position: 'absolute',
          top: '2.625rem',
          marginLeft: designtokenSpacing['ske-spacing-md'],
          backgroundColor: designtokenColors['ske-color-black-100'],
          minWidth: '100vw',
          padding: 0,
          paddingInlineStart: 0,
          paddingInlineEnd: 0,
          margin: 0,
          selectors: (_a = {
            'a, i': {
              borderWidth: 0
            }
          }, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ") and (max-width: 1023px)"] = {
            left: 'auto',
            right: 0
          }, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            top: '2.375rem',
            padding: designtokenSpacing['ske-spacing-md'] + " " + designtokenSpacing['ske-spacing-lg'],
            minWidth: 'auto'
          }, _a)
        },
        topStripeMenuDropdownElementContainer: {
          position: 'relative'
        },
        topStripeMenuDropdownElement: {
          fontSize: designtokenFontSizes['ske-font-size-s'],
          background: 'none',
          border: 'none',
          color: 'inherit',
          textDecoration: 'none !important',
          transition: 'none'
        },
        topStripeMenuDropdownElementIcon: {
          position: 'absolute',
          top: 14,
          left: 4
        },
        topStripeMenuDropdownCloseButton: {
          width: '100%',
          display: 'block',
          margin: '0 auto',
          selectors: {
            '.ms-Button-flexContainer': {
              justifyContent: 'center'
            },
            ':hover, :focus, :hover i, :focus i': {
              backgroundColor: designtokenColors['ske-color-white-100'] + " !important",
              color: designtokenColors['ske-color-black-100'] + " !important",
              outline: 'none'
            },
            i: {
              color: designtokenColors['ske-color-white-100'] + " !important"
            }
          }
        }
      });
    };

    var getClassNames$4 = function getClassNames() {
      return mergeStyleSets({
        topStripeButton: {
          fontFamily: 'inherit',
          fontSize: designtokenFontSizes['ske-font-size-s'],
          background: 'inherit',
          border: 'none',
          color: designtokenColors['ske-color-white-100'],
          transition: 'none',
          textDecoration: 'underline',
          textAlign: 'left',
          padding: '0.75rem 0.5rem',
          margin: 0,
          whiteSpace: 'nowrap',
          selectors: {
            ':hover, :focus': {
              backgroundColor: designtokenColors['ske-color-white-100'],
              color: designtokenColors['ske-color-black-100'],
              transition: 'none',
              outline: 'none'
            }
          }
        }
      });
    };

    /*
     * visibleName TopStripeButton (Toppstripe-knapp)
     */

    var TopStripeButton = function TopStripeButton(props) {
      var topStripeStyle = props.topStripeStyle,
          _a = props.showOnMobile,
          showOnMobile = _a === void 0 ? false : _a,
          className = props.className,
          ariaLabel = props.ariaLabel,
          text = props.text,
          rest = tslib.__rest(props, ["topStripeStyle", "showOnMobile", "className", "ariaLabel", "text"]);

      var styles = getClassNames$4();
      var screenSize = UseScreen();

      if (screenSize.sm && !showOnMobile) {
        return null;
      }

      return jsxRuntime.jsx("button", tslib.__assign({
        "aria-label": ariaLabel,
        className: classnames__default['default'](className, styles.topStripeButton, topStripeStyle),
        style: {
          cursor: 'pointer'
        }
      }, rest, {
        children: text || props.children
      }), void 0);
    };

    /*
     * visibleName TopStripeMenu (ToppstripeMeny)
     */

    var TopStripeMenu = function TopStripeMenu(props) {
      var _a;

      var styles = getClassNames$5();
      var children = props.children,
          className = props.className,
          onRender = props.onRender,
          icon = props.icon,
          title = props.title,
          index = props.index,
          _b = props.showOnMobile,
          showOnMobile = _b === void 0 ? false : _b,
          _c = props.closeMenuAriaLabel,
          closeMenuAriaLabel = _c === void 0 ? 'Lukk' : _c,
          _d = props.closeOnClick,
          closeOnClick = _d === void 0 ? true : _d,
          _e = props.showChevron,
          showChevron = _e === void 0 ? true : _e,
          _f = props.contentIsMenu,
          contentIsMenu = _f === void 0 ? true : _f;

      var _g = React__namespace.useContext(TopStripeContext),
          open = _g.open,
          setOpen = _g.setOpen,
          closeMenu = _g.closeMenu;

      var isMenuOpen = open === index;
      var screenSize = UseScreen();

      if (screenSize.sm && !showOnMobile) {
        return null;
      }

      return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [jsxRuntime.jsxs(TopStripeButton, tslib.__assign({
          "aria-haspopup": contentIsMenu,
          "aria-expanded": isMenuOpen,
          className: classnames__default['default'](className, (_a = {}, _a[styles.topStripeMenuShowChevron] = showChevron, _a[styles.topStripeMenuHasIcon] = icon, _a)),
          onClick: function onClick() {
            return setOpen(index);
          },
          showOnMobile: showOnMobile
        }, {
          children: [icon ? jsxRuntime.jsx(Icon, {
            className: styles.topStripeMenuIcon,
            iconName: icon
          }, void 0) : '', jsxRuntime.jsx("div", tslib.__assign({
            className: styles.topStripeMenuTitle
          }, {
            children: title
          }), void 0), showChevron ? jsxRuntime.jsx(Icon, {
            className: styles.topStripeMenuChevronIcon,
            "aria-hidden": true,
            iconName: isMenuOpen ? 'MenuUp' : 'MenuDown'
          }, void 0) : '']
        }), void 0), isMenuOpen && jsxRuntime.jsxs("ul", tslib.__assign({
          className: styles.topStripeMenuDropdownContainer,
          role: contentIsMenu ? 'menu' : undefined
        }, {
          children: [onRender ? onRender : React__namespace.Children.map(children, function (child) {
            if ( /*#__PURE__*/React__namespace.isValidElement(child)) {
              return jsxRuntime.jsxs("li", tslib.__assign({
                onClick: function onClick(e) {
                  child.props && child.props.onClick && child.props.onClick(e);
                  closeOnClick && closeMenu && closeMenu();
                },
                className: styles.topStripeMenuDropdownElementContainer
              }, {
                children: [child.props.icon ? jsxRuntime.jsx(Icon, {
                  iconName: child.props.icon || undefined,
                  "aria-hidden": true,
                  className: styles.topStripeMenuDropdownElementIcon
                }, void 0) : '', /*#__PURE__*/React__namespace.cloneElement(child, {
                  role: 'menuitem',
                  'aria-current': child.props.icon ? 'true' : undefined,
                  icon: undefined,
                  onClick: undefined,
                  className: classnames__default['default'](child.props.className, styles.topStripeMenuDropdownElement)
                })]
              }), void 0);
            } else {
              return jsxRuntime.jsx("li", tslib.__assign({
                className: styles.topStripeMenuDropdownElement
              }, {
                children: children
              }), void 0);
            }
          }), jsxRuntime.jsx("li", {
            children: jsxRuntime.jsx(ActionButton, {
              className: styles.topStripeMenuDropdownCloseButton,
              icon: 'ChevronUp',
              onClick: function onClick() {
                return setOpen(index);
              },
              ariaLabel: closeMenuAriaLabel
            }, void 0)
          }, void 0)]
        }), void 0)]
      }, void 0);
    };

    var TopStripeLink = function TopStripeLink(props) {
      var _a = props.showOnMobile,
          showOnMobile = _a === void 0 ? false : _a,
          rest = tslib.__rest(props, ["showOnMobile"]);

      var screenSize = UseScreen();

      if (screenSize.sm && !showOnMobile) {
        return null;
      }

      return jsxRuntime.jsx(Link, tslib.__assign({}, rest), void 0);
    };

    var img$2 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3csvg viewBox='-0.001 0 22 16' height='14' width='21' xmlns='http://www.w3.org/2000/svg'%3e %3cg transform='matrix(0.439991%2c 0%2c 0%2c 0.533332%2c -0.000565%2c -0.000001)'%3e %3crect x='9.8296e-6' y='-1.8681e-6' width='50' height='30' fill='white' style='paint-order:markers fill stroke'/%3e %3cpath d='m-7e-6 -5e-7v2.3321l12.779 7.6678 3.8871-1e-4zm22 0v11.999h-22v5.9961h22v12.005h5.9998v-12.005h22v-5.9961h-22v-11.999zm24.112 0-16.113 9.6675v0.33232h3.3336l16.666-9.9998zm-29.488 20-16.625 10h3.8873l16.112-9.668v-0.33203zm16.709 0 16.666 10v-2.3323l-12.777-7.6677z' fill='%23c8102e' style='paint-order:markers fill stroke'/%3e %3cpath d='m5.85-5e-7 14.15 8.5002v-8.5002zm24.15 0v8.5016l14.17-8.5016zm-30 3.4985v6.5006l10.836 7.55e-4zm50 2.1e-4 -10.835 6.5011h10.835zm-50 16.501v6.5021l10.835-6.5021zm39.169 0 10.831 6.576v-6.576zm-9.1689 1.4986v8.5014h14.17zm-10 3.99e-4 -14.169 8.501h14.169z' fill='%23012169' style='paint-order:markers fill stroke'/%3e %3c/g%3e%3c/svg%3e";

    var img$1 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg xmlns='http://www.w3.org/2000/svg' height='14' width='21' version='1.1' viewBox='0 0 22 16'%3e %3crect width='22' height='16' fill='%23C8102E'/%3e %3cg fill='white'%3e %3crect width='4' height='16' x='6'/%3e %3crect width='22' height='4' y='6'/%3e %3c/g%3e %3cg fill='%2300205B'%3e %3crect width='2' height='16' x='7'/%3e %3crect width='22' height='2' y='7'/%3e %3c/g%3e%3c/svg%3e";

    var img = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3csvg viewBox='0 36 18 14' height='14' width='21' xmlns='http://www.w3.org/2000/svg'%3e %3cg transform='matrix(1%2c 0%2c 0%2c 1%2c -1%2c -15)'%3e %3cpath fill='%23D81E05' d='M1 51h6v14H1z'/%3e %3cpath fill='%23007A3D' d='M7 51h1v14H7z'/%3e %3cpath fill='%23FCD116' d='M8 51h1v14H8z'/%3e %3cpath fill='%230038A8' d='M9 51h10v14H9z'/%3e %3cpath fill='none' stroke='%230038A8' stroke-width='.8' d='M8 62a4 4 0 010-8'/%3e %3cpath fill='none' stroke='%23D81E05' stroke-width='.8' d='M8 54a4 4 0 010 8'/%3e %3c/g%3e%3c/svg%3e";

    var getClassNames$3 = function getClassNames() {
      var _a, _b, _c, _d;

      return mergeStyleSets({
        languageButton: {
          paddingLeft: '2.25rem !important',
          width: '100%',
          selectors: (_a = {}, _a["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            paddingLeft: designtokenSpacing['ske-spacing-xl'] + " !important"
          }, _a)
        },
        languageButtonContent: {
          fontSize: designtokenFontSizes['ske-font-size-l'],
          selectors: (_b = {}, _b["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            fontSize: "" + designtokenFontSizes['ske-font-size-s']
          }, _b)
        },
        languageButtonIsNotSelected: {
          fontWeight: " " + designtokenFontSizes['ske-font-weight-bold'],
          selectors: (_c = {}, _c["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            fontWeight: "" + designtokenFontSizes['ske-font-weight-regular']
          }, _c)
        },
        checkIcon: {
          left: '0',
          width: '0.875rem',
          margin: "0 " + designtokenSpacing['ske-spacing-md'],
          fontSize: designtokenFontSizes['ske-font-size-xl'],
          display: 'inline',
          position: 'absolute',
          selectors: (_d = {}, _d["@media (min-width: " + designtokenBreakpoints['ske-breakpoint-sm'] + ")"] = {
            fontSize: designtokenFontSizes['ske-font-size-m'],
            padding: "0 " + designtokenSpacing['ske-spacing-sm'],
            left: 'auto',
            width: 'auto',
            marginLeft: '-1.5rem'
          }, _d)
        },
        languageButtonFlag: {
          marginRight: designtokenSpacing['ske-spacing-sm'],
          verticalAlign: 'middle'
        },
        languageButtonText: {
          marginLeft: designtokenSpacing['ske-spacing-sm']
        }
      });
    };

    var LanguageEnum;

    (function (LanguageEnum) {
      LanguageEnum["BOKMAAL"] = "nb";
      LanguageEnum["NYNORSK"] = "nn";
      LanguageEnum["ENGLISH"] = "en";
      LanguageEnum["SAMI"] = "se";
    })(LanguageEnum || (LanguageEnum = {}));

    var generateLanguagePickerText = function generateLanguagePickerText(language) {
      switch (language) {
        case LanguageEnum.BOKMAAL:
          return 'Bokmål';

        case LanguageEnum.NYNORSK:
          return 'Nynorsk';

        case LanguageEnum.ENGLISH:
          return 'English';

        case LanguageEnum.SAMI:
          return 'Sámegiella';
      }
    };

    var displayFlag = function displayFlag(language) {
      switch (language) {
        case LanguageEnum.BOKMAAL:
          return jsxRuntime.jsx("img", {
            src: img$1,
            alt: ''
          }, void 0);

        case LanguageEnum.NYNORSK:
          return jsxRuntime.jsx("img", {
            src: img$1,
            alt: ''
          }, void 0);

        case LanguageEnum.ENGLISH:
          return jsxRuntime.jsx("img", {
            src: img$2,
            alt: ''
          }, void 0);

        case LanguageEnum.SAMI:
          return jsxRuntime.jsx("img", {
            src: img,
            alt: ''
          }, void 0);
      }
    };

    var generateLanguagePickerTitle = function generateLanguagePickerTitle(language) {
      var styles = getClassNames$3();
      return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [jsxRuntime.jsx("span", tslib.__assign({
          className: styles.languageButtonFlag
        }, {
          children: displayFlag(language)
        }), void 0), generateLanguagePickerText(language)]
      }, void 0);
    };

    var LanguagePickerButton = function LanguagePickerButton(_a) {
      var _b;

      var buttonLanguage = _a.buttonLanguage,
          selectedLanguage = _a.selectedLanguage,
          setLanguage = _a.setLanguage,
          showOnMobile = _a.showOnMobile;
      var styles = getClassNames$3();
      var isSelectedLanguage = buttonLanguage === selectedLanguage;
      return jsxRuntime.jsxs(TopStripeButton, tslib.__assign({
        onClick: function onClick() {
          return setLanguage(buttonLanguage);
        },
        showOnMobile: showOnMobile,
        className: styles.languageButton,
        role: 'menuitem',
        "aria-current": isSelectedLanguage
      }, {
        children: [isSelectedLanguage && jsxRuntime.jsx(Icon, {
          iconName: 'Check',
          className: styles.checkIcon
        }, void 0), jsxRuntime.jsx("span", tslib.__assign({
          className: classnames__default['default'](styles.languageButtonContent, styles.languageButtonFlag)
        }, {
          children: displayFlag(buttonLanguage)
        }), void 0), jsxRuntime.jsx("span", tslib.__assign({
          className: classnames__default['default'](styles.languageButtonContent, styles.languageButtonText, (_b = {}, _b[styles.languageButtonIsNotSelected] = !isSelectedLanguage, _b))
        }, {
          children: generateLanguagePickerText(buttonLanguage)
        }), void 0)]
      }), void 0);
    };

    var LanguagePicker = function LanguagePicker(props) {
      var className = props.className,
          selectedLanguage = props.selectedLanguage,
          setLanguage = props.setLanguage,
          _a = props.showOnMobile,
          showOnMobile = _a === void 0 ? true : _a,
          _b = props.showSami,
          showSami = _b === void 0 ? false : _b;

      var _c = React__namespace.useState([]),
          languages = _c[0],
          setLanguages = _c[1];

      React.useEffect(function () {
        showSami ? setLanguages([LanguageEnum.BOKMAAL, LanguageEnum.NYNORSK, LanguageEnum.ENGLISH, LanguageEnum.SAMI]) : setLanguages([LanguageEnum.BOKMAAL, LanguageEnum.NYNORSK, LanguageEnum.ENGLISH]);
      }, [showSami]);
      React.useEffect(function () {
        document.documentElement.lang = selectedLanguage;
      }, [selectedLanguage]);
      var screenSize = UseScreen();

      if (screenSize.sm && !showOnMobile) {
        return null;
      }

      return jsxRuntime.jsx(TopStripeMenu, tslib.__assign({
        "data-testid": 'language-picker',
        showOnMobile: showOnMobile,
        title: generateLanguagePickerTitle(selectedLanguage),
        className: className
      }, {
        children: languages.map(function (language) {
          return jsxRuntime.jsx(LanguagePickerButton, {
            buttonLanguage: language,
            selectedLanguage: selectedLanguage,
            setLanguage: setLanguage,
            showOnMobile: showOnMobile
          }, language);
        })
      }), void 0);
    };

    var TopStripeUser = function TopStripeUser(props) {
      var styles = getClassNames$6();
      var name = props.name,
          _a = props.showOnMobile,
          showOnMobile = _a === void 0 ? true : _a,
          className = props.className;
      var screenSize = UseScreen();

      if (screenSize.sm && !showOnMobile) {
        return null;
      }

      return jsxRuntime.jsxs("div", tslib.__assign({
        "data-testid": 'topstripe-user',
        className: classnames__default['default'](styles.topStripeUser, className)
      }, {
        children: [jsxRuntime.jsx(Icon, {
          iconName: "person"
        }, void 0), jsxRuntime.jsx("div", {
          children: name
        }, void 0)]
      }), void 0);
    };

    var TopStripeContext = /*#__PURE__*/React__namespace.createContext({
      open: -1
    });
    /*
     * visibleName TopStripe (Toppstripe)
     */

    var TopStripe = function TopStripe(props) {
      var topStripeElements = [TopStripeMenu, TopStripeButton, TopStripeLink, TopStripeUser, LanguagePicker];
      var notOpenIndex = -1;
      var topRef = /*#__PURE__*/React__namespace.createRef();

      var _a = React__namespace.useState(notOpenIndex),
          openIndex = _a[0],
          setOpenIndex = _a[1];

      var setOpen = function setOpen(index) {
        if (openIndex === index) {
          setOpenIndex(notOpenIndex);
        } else {
          setOpenIndex(index);
        }
      };

      var children = props.children,
          className = props.className,
          contentWidth = props.contentWidth,
          rest = tslib.__rest(props, ["children", "className", "contentWidth"]);

      var styles = getClassNames$6(contentWidth);
      var showOverlay = openIndex !== notOpenIndex ? styles.overlayShow : '';

      var handleClickOutside = function handleClickOutside(e) {
        var eventPaths = e.composedPath ? e.composedPath() : [];
        var target = eventPaths.length > 0 ? eventPaths[0] : e.target;
        var node = topRef.current;

        if (node && node.contains(target)) {
          // inside click
          return;
        } // outside click


        setOpen(notOpenIndex);
      };

      var handleEscape = function handleEscape(e) {
        // Match escape key
        if (e.keyCode === 27) {
          setOpen(notOpenIndex);
        }
      };

      React__namespace.useEffect(function () {
        document.addEventListener('mousedown', handleClickOutside);
        document.addEventListener('keydown', handleEscape);
        return function () {
          document.removeEventListener('mousedown', handleClickOutside);
          document.removeEventListener('keydown', handleEscape);
        };
      });
      return jsxRuntime.jsxs("div", tslib.__assign({
        className: styles.topStripe
      }, {
        children: [jsxRuntime.jsx("div", {
          className: classnames__default['default'](styles.overlay, showOverlay)
        }, void 0), jsxRuntime.jsx("div", tslib.__assign({
          className: styles.background
        }, {
          children: jsxRuntime.jsx(TopStripeContext.Provider, tslib.__assign({
            value: {
              open: openIndex,
              setOpen: setOpen,
              closeMenu: function closeMenu() {
                return setOpenIndex(notOpenIndex);
              }
            }
          }, {
            children: jsxRuntime.jsx("ul", tslib.__assign({
              ref: topRef,
              className: classnames__default['default'](styles.topStripeContainer, className)
            }, rest, {
              children: React__namespace.Children.map(children, function (child, index) {
                var _a;

                return child ? jsxRuntime.jsx("li", tslib.__assign({
                  className: classnames__default['default'](styles.topStripeElement, (_a = {}, _a[styles.loggedInUser] = child.type === TopStripeUser, _a[styles.hideOnMobile] = topStripeElements.includes(child.type) && !child.props.showOnMobile, _a))
                }, {
                  children: /*#__PURE__*/React__namespace.cloneElement(child, {
                    index: index
                  })
                }), void 0) : null;
              })
            }), void 0)
          }), void 0)
        }), void 0)]
      }), void 0);
    };

    var defaultMargin = '16px 0 4px 0';

    function containsTag(tag, tags) {
      if (Array.isArray(tags) && tags !== undefined) {
        return tags.indexOf(tag) > -1;
      }

      return false;
    }

    var getTagStyle = function getTagStyle(tag, _a) {
      var noMargin = _a.noMargin,
          noColor = _a.noColor,
          noSize = _a.noSize,
          noBorder = _a.noBorder;
      return {
        showMargin: !containsTag(tag, noMargin),
        showColor: !containsTag(tag, noColor),
        showSize: !containsTag(tag, noSize),
        showBorder: !containsTag(tag, noBorder)
      };
    };

    var getH1Style = function getH1Style(options, palette) {
      var _a = getTagStyle('h1', options),
          showSize = _a.showSize,
          showMargin = _a.showMargin,
          showColor = _a.showColor;

      return {
        fontSize: takeIf(showSize, exports.FontSizes.superLarge),
        lineHeight: '48px',
        fontWeight: exports.FontWeights.bold,
        margin: takeIf(showMargin, '40px 0 8px 0'),
        color: takeIf(showColor, palette.skeColor.blackAlt),
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.xxLarge),
            margin: takeIf(showMargin, '32px 0 4px 0'),
            lineHeight: '40px'
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.xLarge),
            margin: takeIf(showMargin, '32px 0 4px 0'),
            lineHeight: '40px'
          }
        }
      };
    };

    var getH2Style = function getH2Style(options, palette) {
      var _a = getTagStyle('h2', options),
          showColor = _a.showColor,
          showMargin = _a.showMargin,
          showSize = _a.showSize;

      return {
        fontSize: takeIf(showSize, exports.FontSizes.xxLarge),
        lineHeight: '32px',
        fontWeight: exports.FontWeights.bold,
        margin: takeIf(showMargin, '32px 0 8px 0'),
        color: takeIf(showColor, palette.skeColor.blackAlt),
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.xLarge),
            margin: takeIf(showMargin, defaultMargin),
            lineHeight: '28px'
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.large),
            margin: takeIf(showMargin, defaultMargin),
            lineHeight: '28px'
          }
        }
      };
    };

    var getH3Style = function getH3Style(options, palette) {
      var _a = getTagStyle('h3', options),
          showSize = _a.showSize,
          showMargin = _a.showMargin,
          showColor = _a.showColor;

      return {
        fontSize: takeIf(showSize, exports.FontSizes.xLarge),
        fontWeight: exports.FontWeights.bold,
        margin: takeIf(showMargin, '24px 0 8px 0'),
        color: takeIf(showColor, palette.skeColor.blackAlt),
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.largePlus),
            margin: takeIf(showMargin, defaultMargin)
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.large),
            margin: takeIf(showMargin, defaultMargin)
          }
        }
      };
    };

    var getH4Style = function getH4Style(options, palette) {
      var _a = getTagStyle('h4', options),
          showSize = _a.showSize,
          showMargin = _a.showMargin,
          showColor = _a.showColor;

      return {
        fontSize: takeIf(showSize, exports.FontSizes.large),
        fontWeight: exports.FontWeights.bold,
        margin: takeIf(showMargin, '16px 0 0 0'),
        color: takeIf(showColor, palette.skeColor.blackAlt),
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.mediumPlus),
            margin: takeIf(showMargin, '8px 0 0 0')
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.medium),
            margin: takeIf(showMargin, '8px 0 0 0')
          }
        }
      };
    };

    var getPStyle = function getPStyle(options, palette) {
      var _a = getTagStyle('p', options),
          showSize = _a.showSize,
          showMargin = _a.showMargin,
          showColor = _a.showColor;

      return {
        fontSize: takeIf(showSize, exports.FontSizes.medium),
        fontWeight: exports.FontWeights.regular,
        lineHeight: '23px',
        margin: takeIf(showMargin, '14px 0 0 0'),
        color: takeIf(showColor, palette.skeColor.blackAlt),
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.smallPlus),
            lineHeight: '22px'
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.small),
            lineHeight: '22px'
          }
        }
      };
    };

    var getUlStyle = function getUlStyle(options, palette) {
      var _a = getTagStyle('ul', options),
          showSize = _a.showSize,
          showMargin = _a.showMargin,
          showColor = _a.showColor;

      return {
        listStyleType: 'square',
        fontSize: takeIf(showSize, exports.FontSizes.medium),
        margin: takeIf(showMargin, '16px 0 16px 0'),
        lineHeight: '22px',
        color: takeIf(showColor, palette.skeColor.blackAlt),
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.smallPlus),
            lineHeight: '22px'
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.small),
            lineHeight: '22px'
          }
        }
      };
    };

    var getOlStyle = function getOlStyle(options, palette) {
      var _a = getTagStyle('ol', options),
          showSize = _a.showSize,
          showMargin = _a.showMargin,
          showColor = _a.showColor;

      return {
        fontSize: takeIf(showSize, exports.FontSizes.medium),
        margin: takeIf(showMargin, '16px 0 16px 0'),
        lineHeight: '24px',
        color: takeIf(showColor, palette.skeColor.blackAlt),
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.smallPlus),
            lineHeight: '22px'
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.small),
            lineHeight: '22px'
          }
        }
      };
    };

    var getBlockqouteStyle = function getBlockqouteStyle(options, palette) {
      var _a = getTagStyle('blockquote', options),
          showSize = _a.showSize,
          showMargin = _a.showMargin,
          showColor = _a.showColor;

      return {
        fontSize: takeIf(showSize, exports.FontSizes.medium),
        fontWeight: exports.FontWeights.regular,
        lineHeight: '22px',
        margin: takeIf(showMargin, '16px 24px'),
        padding: '8px 24px',
        color: takeIf(showColor, palette.skeColor.blackAlt),
        borderLeft: "4px solid " + palette.skeColor.brown,
        selectors: {
          '@media (max-width: 640px)': {
            fontSize: takeIf(showSize, exports.FontSizes.smallPlus),
            lineHeight: '22px'
          },
          '@media (max-width: 480px)': {
            fontSize: takeIf(showSize, exports.FontSizes.small),
            lineHeight: '22px'
          }
        }
      };
    };

    var getAStyle = function getAStyle(options, palette) {
      var _a = getTagStyle('a', options),
          showColor = _a.showColor,
          showBorder = _a.showBorder;

      return {
        color: takeIf(showColor, palette.skeColor.blue),
        textDecoration: 'none',
        paddingBottom: '1px',
        borderBottom: takeIf(showBorder, "1px solid " + palette.skeColor.blue),
        selectors: {
          ':hover': {
            color: palette.skeColor.darkBlue,
            borderBottom: '2px solid ' + palette.skeColor.darkBlue
          },
          ':focus': {
            color: palette.skeColor.darkBlue,
            borderBottom: '2px solid ' + palette.skeColor.darkBlue,
            backgroundColor: palette.skeColor.lightBlue,
            outline: 'none'
          }
        }
      };
    };

    var getClassNames$2 = function getClassNames(props) {
      var palette = getTheme().palette;
      return mergeStyles([{
        displayName: 'SkeTypography',
        fontFamily: "'Helvetica Neue', Helvetica , Arial, 'Liberation Sans', 'Nimbus Sans L', sans-serif",
        selectors: {
          h1: getH1Style(props, palette),
          h2: getH2Style(props, palette),
          h3: getH3Style(props, palette),
          h4: getH4Style(props, palette),
          p: getPStyle(props, palette),
          ul: getUlStyle(props, palette),
          ol: getOlStyle(props, palette),
          blockquote: getBlockqouteStyle(props, palette),
          a: getAStyle(props, palette)
        }
      }]);
    };

    /*
     * visibleName Typography (Typografi)
     */

    var Typography = function Typography(props) {
      var children = props.children,
          className = props.className;
      return jsxRuntime.jsx("div", tslib.__assign({
        className: classnames__default['default'](getClassNames$2(props), className)
      }, {
        children: children
      }), void 0);
    };
    Typography.defaultProps = {
      className: undefined,
      noBorder: undefined,
      noColor: undefined,
      noMargin: undefined,
      noSize: undefined
    };

    var Layout = function Layout(_a) {
      var children = _a.children;
      return jsxRuntime.jsx(Grid, tslib.__assign({
        tag: "div"
      }, {
        children: children
      }), void 0);
    };

    //   sm?: number,
    //   lg?: number,
    //   xl?: number,
    //   xxl?: number,
    //   xxxl?: number,
    //   smPush?: number,
    //   lgPush?: number,
    //   xlPush?: number,
    //   xxlPush?: number,
    //   xxxlPush?: number,
    //   smPull?: number,
    //   lgPull?: number,
    //   xlPull?: number,
    //   xxlPull?: number,
    //   xxxlPull?: number

    var Article =
    /** @class */
    function (_super) {
      tslib.__extends(Article, _super);

      function Article() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Article.prototype.render = function () {
        return _super.prototype.render.call(this);
      };

      Article.displayName = 'Article';
      Article.propTypes = {
        tag: PropTypes__default['default'].string,
        sm: PropTypes__default['default'].number,
        lg: PropTypes__default['default'].number,
        xl: PropTypes__default['default'].number,
        xxl: PropTypes__default['default'].number,
        xxxl: PropTypes__default['default'].number,
        smPush: PropTypes__default['default'].number,
        lgPush: PropTypes__default['default'].number,
        xlPush: PropTypes__default['default'].number,
        xxlPush: PropTypes__default['default'].number,
        xxxlPush: PropTypes__default['default'].number,
        smPull: PropTypes__default['default'].number,
        lgPull: PropTypes__default['default'].number,
        xlPull: PropTypes__default['default'].number,
        xxlPull: PropTypes__default['default'].number,
        xxxlPull: PropTypes__default['default'].number
      };
      Article.defaultProps = {
        tag: 'article',
        lg: 10,
        xl: 8 //lgPush: 2,
        //xlPush: 2

      };
      return Article;
    }(Grid.Col);

    var Aside =
    /** @class */
    function (_super) {
      tslib.__extends(Aside, _super);

      function Aside() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Aside.prototype.render = function () {
        return _super.prototype.render.call(this);
      };

      Aside.displayName = 'Aside';
      Aside.propTypes = {
        tag: PropTypes__default['default'].string,
        sm: PropTypes__default['default'].number,
        lg: PropTypes__default['default'].number,
        xl: PropTypes__default['default'].number,
        xxl: PropTypes__default['default'].number,
        xxxl: PropTypes__default['default'].number,
        smPush: PropTypes__default['default'].number,
        lgPush: PropTypes__default['default'].number,
        xlPush: PropTypes__default['default'].number,
        xxlPush: PropTypes__default['default'].number,
        xxxlPush: PropTypes__default['default'].number,
        smPull: PropTypes__default['default'].number,
        lgPull: PropTypes__default['default'].number,
        xlPull: PropTypes__default['default'].number,
        xxlPull: PropTypes__default['default'].number,
        xxxlPull: PropTypes__default['default'].number
      };
      Aside.defaultProps = {
        tag: 'aside',
        lg: 12,
        xl: 2
      };
      return Aside;
    }(Grid.Col);

    var getClassNames$1 = function getClassNames() {
      return mergeStyles({
        displayName: 'SkeFooter',
        paddingLeft: '0',
        paddingRight: '0',
        marginTop: '16px'
      });
    };

    var Footer =
    /** @class */
    function (_super) {
      tslib.__extends(Footer, _super);

      function Footer() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Footer.prototype.render = function () {
        // @ts-ignore TODO
        var _a = this.props,
            tag = _a.tag,
            _b = _a.className,
            className = _b === void 0 ? '' : _b,
            children = _a.children,
            props = tslib.__rest(_a, ["tag", "className", "children"]); // @ts-ignore TODO


        var classNames = getClassNames$1(this.props);
        return jsxRuntime.jsx(Grid.Row, {
          children: jsxRuntime.jsx(Grid.Col, tslib.__assign({
            tag: tag,
            className: classNames + " " + className
          }, props, {
            children: children
          }), void 0)
        }, void 0);
      };

      Footer.displayName = 'Footer';
      Footer.defaultProps = {
        tag: 'footer'
      };
      return Footer;
    }(React__default['default'].Component);

    var getClassNames = function getClassNames() {
      return mergeStyles({
        displayName: 'SkeHeader',
        marginBottom: '16px'
      });
    };

    var Header =
    /** @class */
    function (_super) {
      tslib.__extends(Header, _super);

      function Header() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Header.prototype.render = function () {
        var _a = this.props,
            // @ts-ignore TODO
        tag = _a.tag;
            // @ts-ignore TODO
        _a.responsiveMode;
            var // @ts-ignore TODO
        _b = _a.className,
            // @ts-ignore TODO
        className = _b === void 0 ? '' : _b,
            children = _a.children,
            props = tslib.__rest(_a, ["tag", "responsiveMode", "className", "children"]); // @ts-ignore TODO


        var classNames = getClassNames(this.props);
        return jsxRuntime.jsx(Grid.Row, tslib.__assign({
          rowSpacing: Grid.SPACE_NONE
        }, {
          children: jsxRuntime.jsx(Grid.Col, tslib.__assign({
            noSpacing: true,
            tag: tag,
            className: classNames + " " + className
          }, props, {
            children: children
          }), void 0)
        }), void 0);
      };

      Header.displayName = 'Header';
      Header.defaultProps = {
        tag: 'header',
        responsiveMode: ResponsiveMode.large
      };
      return Header;
    }(React__default['default'].Component);

    var Main =
    /** @class */
    function (_super) {
      tslib.__extends(Main, _super);

      function Main() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Main.prototype.render = function () {
        return _super.prototype.render.call(this);
      };

      Main.displayName = 'Main';
      Main.defaultProps = {
        tag: 'main',
        rowSpacing: Grid.SPACE_MEDIUM
      };
      return Main;
    }(Grid.Row);

    var Nav =
    /** @class */
    function (_super) {
      tslib.__extends(Nav, _super);

      function Nav() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      Nav.prototype.render = function () {
        return _super.prototype.render.call(this);
      };

      Nav.displayName = 'Nav';
      Nav.propTypes = {
        tag: PropTypes__default['default'].string,
        sm: PropTypes__default['default'].number,
        lg: PropTypes__default['default'].number,
        xl: PropTypes__default['default'].number,
        xxl: PropTypes__default['default'].number,
        xxxl: PropTypes__default['default'].number,
        smPush: PropTypes__default['default'].number,
        lgPush: PropTypes__default['default'].number,
        xlPush: PropTypes__default['default'].number,
        xxlPush: PropTypes__default['default'].number,
        xxxlPush: PropTypes__default['default'].number,
        smPull: PropTypes__default['default'].number,
        lgPull: PropTypes__default['default'].number,
        xlPull: PropTypes__default['default'].number,
        xxlPull: PropTypes__default['default'].number,
        xxxlPull: PropTypes__default['default'].number
      };
      Nav.defaultProps = {
        tag: 'nav',
        lg: 2,
        xl: 2 //lgPull: 10,
        //xlPull: 8

      };
      return Nav;
    }(Grid.Col);

    exports.Accordion = Accordion;
    exports.AccordionItem = AccordionItem;
    exports.AccordionMenu = AccordionMenu;
    exports.AccordionMenuItem = AccordionMenuItem;
    exports.ActionButton = ActionButton;
    exports.Animation = Animation;
    exports.Article = Article;
    exports.Aside = Aside;
    exports.Button = Button;
    exports.ButtonLink = ButtonLink;
    exports.Callout = Callout;
    exports.Card = Card;
    exports.CheckBox = CheckBox;
    exports.Chip = Chip;
    exports.Col = Col;
    exports.ComboBox = ComboBox;
    exports.DatePicker = DatePicker;
    exports.DetailsList = DetailsList;
    exports.DetailsRow = DetailsRow;
    exports.Dialog = Dialog;
    exports.Dropdown = Dropdown;
    exports.ErrorMessage = ErrorMessage;
    exports.ErrorSummary = ErrorSummary;
    exports.ExternalHeader = ExternalHeader;
    exports.FileUploader = FileUploader;
    exports.Fonts = Fonts;
    exports.Footer = Footer;
    exports.FooterContent = FooterContent;
    exports.Grid = Grid;
    exports.Header = Header;
    exports.Heading = Heading;
    exports.Icon = Icon;
    exports.IconButton = IconButton;
    exports.Image = Image;
    exports.LabelWithCallout = LabelWithCallout;
    exports.LanguagePicker = LanguagePicker;
    exports.Layout = Layout;
    exports.Link = Link;
    exports.LinkGroup = LinkGroup;
    exports.Main = Main;
    exports.MessageBar = MessageBar;
    exports.Nav = Nav;
    exports.NavigationContent = NavigationContent;
    exports.NavigationTile = NavigationTile;
    exports.NextPage = NextPage;
    exports.OpenClose = OpenClose;
    exports.Page = Page;
    exports.Pages = Pages;
    exports.Pagination = Pagination;
    exports.Palette = DefaultPalette$1;
    exports.PreviousLink = PreviousLink;
    exports.ProgressBar = ProgressBar;
    exports.RadioButtonGroup = RadioButtonGroup;
    exports.Row = Row;
    exports.ScrollToTopButton = ScrollToTopButton;
    exports.SearchField = SearchField;
    exports.SkeBasis = SkeBasis;
    exports.SkeIcons = SkeIcons;
    exports.Spinner = Spinner;
    exports.Step = Step;
    exports.StepList = StepList;
    exports.TabItem = TabItem;
    exports.Table = Table;
    exports.TableRow = TableRow;
    exports.Tabs = Tabs;
    exports.TextField = TextField;
    exports.TopBanner = TopBanner;
    exports.TopStripe = TopStripe;
    exports.TopStripeButton = TopStripeButton;
    exports.TopStripeContext = TopStripeContext;
    exports.TopStripeMenu = TopStripeMenu;
    exports.Typography = Typography;
    exports.UseScreen = UseScreen;
    exports.createFont = createFont;
    exports.generateId = generateId;
    exports.getFocusStyle = getFocusStyle$1;
    exports.getSlidingWindowEdges = getSlidingWindowEdges;
    exports.getSrOnlyStyle = getSrOnlyStyle;
    exports.languages = languages$1;
    exports.omstrukturerFlatJSON = omstrukturerFlatJSON;
    exports.skeColor = skeColor;
    exports.skePalette = skePalette;
    exports.t = t;
    exports.takeIf = takeIf;
    exports.useHotkeys = useHotkeys;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.development.js.map
