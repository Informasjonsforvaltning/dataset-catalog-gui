function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classnames from 'classnames';
import { Checkbox as FabricCheckBox } from '@fluentui/react';
import * as React from 'react';
import { getClassNames } from './CheckBox.classNames';

/*
 * visibleName CheckBox (Avkrysningsboks)
 */
export class CheckBox extends React.PureComponent {
  render() {
    const _this$props = this.props,
          {
      checked,
      defaultChecked,
      className,
      inputProps
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["checked", "defaultChecked", "className", "inputProps"]);

    const checkedProps = defaultChecked ? {
      defaultChecked
    } : {
      checked
    };

    const inputPropsWithRole = _objectSpread(_objectSpread({}, inputProps), {}, {
      role: 'checkbox'
    });

    return /*#__PURE__*/React.createElement(FabricCheckBox, _extends({}, props, {
      className: classnames(getClassNames(this.props.error), className),
      inputProps: inputPropsWithRole
    }, checkedProps));
  }

}

_defineProperty(CheckBox, "defaultProps", {
  boxSide: 'end'
});