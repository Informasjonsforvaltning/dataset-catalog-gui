function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { getClassNames } from './Chip.classNames';
import classnames from 'classnames';
import { ChipType } from './Chip.types';
/*
 * visibleName Chip (Emneknagg)
 */

export class Chip extends React.PureComponent {
  render() {
    const _this$props = this.props,
          {
      children,
      className,
      ariaLabel
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children", "className", "ariaLabel"]);

    const styles = getClassNames(this.props);
    return /*#__PURE__*/React.createElement("div", _extends({
      className: classnames(styles, className),
      "aria-label": ariaLabel
    }, props), children);
  }

}

_defineProperty(Chip, "WARNING", ChipType.WARNING);

_defineProperty(Chip, "OK", ChipType.OK);

_defineProperty(Chip, "NEUTRAL", ChipType.NEUTRAL);

_defineProperty(Chip, "defaultProps", {
  size: 'standard',
  type: Chip.NEUTRAL
});