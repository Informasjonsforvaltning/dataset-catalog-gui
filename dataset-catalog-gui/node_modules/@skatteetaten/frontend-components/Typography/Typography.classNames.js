import { mergeStyles } from '@fluentui/merge-styles';
import { getTheme } from '@fluentui/react';
import { FontSizes, FontWeights, takeIf } from '../utils';
/**
 * Each property contains a list of tags which should have their
 * corresponding css style (margin, color, size, border) removed.
 */

const defaultMargin = '16px 0 4px 0';

function containsTag(tag, tags) {
  if (Array.isArray(tags) && tags !== undefined) {
    return tags.indexOf(tag) > -1;
  }

  return false;
}

const getTagStyle = (tag, {
  noMargin,
  noColor,
  noSize,
  noBorder
}) => ({
  showMargin: !containsTag(tag, noMargin),
  showColor: !containsTag(tag, noColor),
  showSize: !containsTag(tag, noSize),
  showBorder: !containsTag(tag, noBorder)
});

const getH1Style = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('h1', options);
  return {
    fontSize: takeIf(showSize, FontSizes.superLarge),
    lineHeight: '48px',
    fontWeight: FontWeights.bold,
    margin: takeIf(showMargin, '40px 0 8px 0'),
    color: takeIf(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.xxLarge),
        margin: takeIf(showMargin, '32px 0 4px 0'),
        lineHeight: '40px'
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.xLarge),
        margin: takeIf(showMargin, '32px 0 4px 0'),
        lineHeight: '40px'
      }
    }
  };
};

const getH2Style = (options, palette) => {
  const {
    showColor,
    showMargin,
    showSize
  } = getTagStyle('h2', options);
  return {
    fontSize: takeIf(showSize, FontSizes.xxLarge),
    lineHeight: '32px',
    fontWeight: FontWeights.bold,
    margin: takeIf(showMargin, '32px 0 8px 0'),
    color: takeIf(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.xLarge),
        margin: takeIf(showMargin, defaultMargin),
        lineHeight: '28px'
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.large),
        margin: takeIf(showMargin, defaultMargin),
        lineHeight: '28px'
      }
    }
  };
};

const getH3Style = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('h3', options);
  return {
    fontSize: takeIf(showSize, FontSizes.xLarge),
    fontWeight: FontWeights.bold,
    margin: takeIf(showMargin, '24px 0 8px 0'),
    color: takeIf(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.largePlus),
        margin: takeIf(showMargin, defaultMargin)
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.large),
        margin: takeIf(showMargin, defaultMargin)
      }
    }
  };
};

const getH4Style = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('h4', options);
  return {
    fontSize: takeIf(showSize, FontSizes.large),
    fontWeight: FontWeights.bold,
    margin: takeIf(showMargin, '16px 0 0 0'),
    color: takeIf(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.mediumPlus),
        margin: takeIf(showMargin, '8px 0 0 0')
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.medium),
        margin: takeIf(showMargin, '8px 0 0 0')
      }
    }
  };
};

const getPStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('p', options);
  return {
    fontSize: takeIf(showSize, FontSizes.medium),
    fontWeight: FontWeights.regular,
    lineHeight: '23px',
    margin: takeIf(showMargin, '14px 0 0 0'),
    color: takeIf(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getUlStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('ul', options);
  return {
    listStyleType: 'square',
    fontSize: takeIf(showSize, FontSizes.medium),
    margin: takeIf(showMargin, '16px 0 16px 0'),
    lineHeight: '22px',
    color: takeIf(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getOlStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('ol', options);
  return {
    fontSize: takeIf(showSize, FontSizes.medium),
    margin: takeIf(showMargin, '16px 0 16px 0'),
    lineHeight: '24px',
    color: takeIf(showColor, palette.skeColor.blackAlt),
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getBlockqouteStyle = (options, palette) => {
  const {
    showSize,
    showMargin,
    showColor
  } = getTagStyle('blockquote', options);
  return {
    fontSize: takeIf(showSize, FontSizes.medium),
    fontWeight: FontWeights.regular,
    lineHeight: '22px',
    margin: takeIf(showMargin, '16px 24px'),
    padding: '8px 24px',
    color: takeIf(showColor, palette.skeColor.blackAlt),
    borderLeft: `4px solid ${palette.skeColor.brown}`,
    selectors: {
      '@media (max-width: 640px)': {
        fontSize: takeIf(showSize, FontSizes.smallPlus),
        lineHeight: '22px'
      },
      '@media (max-width: 480px)': {
        fontSize: takeIf(showSize, FontSizes.small),
        lineHeight: '22px'
      }
    }
  };
};

const getAStyle = (options, palette) => {
  const {
    showColor,
    showBorder
  } = getTagStyle('a', options);
  return {
    color: takeIf(showColor, palette.skeColor.blue),
    textDecoration: 'none',
    paddingBottom: '1px',
    borderBottom: takeIf(showBorder, `1px solid ${palette.skeColor.blue}`),
    selectors: {
      ':hover': {
        color: palette.skeColor.darkBlue,
        borderBottom: '2px solid ' + palette.skeColor.darkBlue
      },
      ':focus': {
        color: palette.skeColor.darkBlue,
        borderBottom: '2px solid ' + palette.skeColor.darkBlue,
        backgroundColor: palette.skeColor.lightBlue,
        outline: 'none'
      }
    }
  };
};

export const getClassNames = function getClassNames(props) {
  const palette = getTheme().palette;
  return mergeStyles([{
    displayName: 'SkeTypography',
    fontFamily: "'Helvetica Neue', Helvetica , Arial, 'Liberation Sans', 'Nimbus Sans L', sans-serif",
    selectors: {
      h1: getH1Style(props, palette),
      h2: getH2Style(props, palette),
      h3: getH3Style(props, palette),
      h4: getH4Style(props, palette),
      p: getPStyle(props, palette),
      ul: getUlStyle(props, palette),
      ol: getOlStyle(props, palette),
      blockquote: getBlockqouteStyle(props, palette),
      a: getAStyle(props, palette)
    }
  }]);
};