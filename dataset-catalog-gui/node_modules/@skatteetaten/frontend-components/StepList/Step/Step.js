function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import classnames from 'classnames';
import { UseScreen } from '../../utils';
import { ActionButton } from '../../ActionButton';
import { Grid } from '../../Grid';
import { Icon } from '../../Icon';
import { getClassNames } from '../StepList.classNames';
import { Heading } from '../../utils';

const NumberIcon = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: props.styles.numberWrapper
  }, /*#__PURE__*/React.createElement("div", {
    className: props.styles.stepNumber
  }, /*#__PURE__*/React.createElement("span", null, props.stepType === 'result' ? /*#__PURE__*/React.createElement(Icon, {
    iconName: props.resultIcon,
    style: {
      fontSize: '24px'
    }
  }) : '')));
};
/*
 * visibleName Step (Enkeltsteg)
 */


export const Step = props => {
  const {
    stepTitle,
    stepNumber,
    children,
    stepId,
    resultIcon,
    className,
    stepType,
    actionBtn,
    gridSpacing,
    headingLevel = 2
  } = props;
  const [styles, setStyles] = React.useState(getClassNames(props));
  const size = UseScreen();
  const headingId = stepId ? stepId + '-heading' : undefined;
  React.useEffect(() => {
    setStyles(getClassNames(_objectSpread(_objectSpread({}, props), {}, {
      showStep: typeof props.showStep === 'boolean' ? props.showStep : true,
      stepType: props.stepType || 'passive'
    })));
  }, [props]);
  return /*#__PURE__*/React.createElement("div", {
    key: stepNumber,
    className: classnames(styles.wrapperStep, className)
  }, /*#__PURE__*/React.createElement(Grid.Row, {
    rowSpacing: Grid.SPACE_NONE
  }, /*#__PURE__*/React.createElement(Grid.Col, {
    noSpacing: true
  }, /*#__PURE__*/React.createElement(Grid.Row, {
    rowSpacing: Grid.SPACE_NONE
  }, gridSpacing && /*#__PURE__*/React.createElement(Grid.Col, {
    noSpacing: true,
    sm: 0,
    lg: 1,
    xxxl: 2
  }), /*#__PURE__*/React.createElement(Grid.Col, {
    sm: 12,
    lg: gridSpacing ? 10 : undefined,
    xxxl: gridSpacing ? 8 : undefined
  }, stepNumber && stepNumber > 1 && /*#__PURE__*/React.createElement("span", {
    className: classnames(styles.stepLineTop)
  }), /*#__PURE__*/React.createElement("span", {
    className: classnames(styles.stepLine)
  }), /*#__PURE__*/React.createElement("span", {
    className: classnames({
      [styles.arrowLine]: stepType === 'next'
    })
  }), stepType !== 'next' && /*#__PURE__*/React.createElement(NumberIcon, {
    styles: styles,
    resultIcon: resultIcon,
    stepType: stepType
  }), stepType !== 'result' && /*#__PURE__*/React.createElement("hr", {
    className: classnames(styles.divider)
  }), /*#__PURE__*/React.createElement("div", {
    id: stepId
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.stepContent
  }, stepTitle && /*#__PURE__*/React.createElement(Heading, {
    id: headingId,
    text: stepTitle,
    level: headingLevel,
    tabIndex: stepId ? -1 : undefined,
    className: styles.title
  }, !size.gt.sm && stepType !== 'next' && /*#__PURE__*/React.createElement(NumberIcon, {
    styles: styles,
    resultIcon: resultIcon,
    stepType: stepType
  }), /*#__PURE__*/React.createElement("span", {
    className: classnames(styles.titleText)
  }, stepTitle)), /*#__PURE__*/React.createElement("div", {
    className: styles.stepContentInner
  }, children, actionBtn && /*#__PURE__*/React.createElement(ActionButton, {
    icon: actionBtn.icon,
    className: styles.stepAction,
    onClick: actionBtn.event,
    ariaLabel: actionBtn.ariaLabel
  }, actionBtn.text))))), gridSpacing && /*#__PURE__*/React.createElement(Grid.Col, {
    noSpacing: true,
    sm: 0,
    lg: 1,
    xxxl: 2
  })))));
};