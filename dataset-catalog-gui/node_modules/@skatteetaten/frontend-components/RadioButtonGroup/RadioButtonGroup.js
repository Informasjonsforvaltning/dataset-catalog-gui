function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import classnames from 'classnames';
import { ChoiceGroup as FabricChoiceGroup } from '@fluentui/react';
import * as React from 'react';
import { getClassNames } from './RadioButtonGroup.classNames';
import { generateId } from '../utils';
import { LabelWithCallout } from '../LabelWithCallout';
import { ErrorMessage } from '../ErrorMessage';

/*
 * visibleName RadioButtonGroup (Radioknapper)
 */
export const RadioButtonGroup = props => {
  const {
    calloutFloating,
    children,
    className,
    errorMessage,
    help,
    warning,
    id,
    required = false,
    label,
    labelSize,
    labelButtonAriaLabel,
    labelWithCalloutProps,
    onCalloutToggle,
    options,
    requiredWithMark = false
  } = props,
        rest = _objectWithoutProperties(props, ["calloutFloating", "children", "className", "errorMessage", "help", "warning", "id", "required", "label", "labelSize", "labelButtonAriaLabel", "labelWithCalloutProps", "onCalloutToggle", "options", "requiredWithMark"]);

  let tempOptions = options;

  if (options) {
    options.forEach(option => {
      if (option.description) {
        option.onRenderLabel = DescriptionRender(option.description);
      }
    });
    tempOptions = options;
  }

  const styles = getClassNames(_objectSpread({}, props));
  const generatedId = generateId();
  const mainId = id ? id : 'radiogroup-' + generatedId;
  const groupId = mainId + '-group';
  const labelId = mainId + '-label';
  return /*#__PURE__*/React.createElement("fieldset", {
    id: mainId,
    className: styles.fieldset
  }, /*#__PURE__*/React.createElement(LabelWithCallout, _extends({
    id: labelId,
    label: label,
    buttonAriaLabel: labelButtonAriaLabel,
    requiredMark: requiredWithMark,
    help: help,
    inputSize: labelSize,
    warning: warning,
    inFieldset: true,
    calloutFloating: calloutFloating,
    onCalloutToggle: onCalloutToggle
  }, labelWithCalloutProps)), /*#__PURE__*/React.createElement(FabricChoiceGroup, _extends({
    id: groupId,
    options: tempOptions
  }, rest, {
    className: classnames(styles.radioButtons, className),
    ariaLabelledBy: labelId,
    "aria-invalid": errorMessage ? true : false,
    required: required || requiredWithMark
  }), children), errorMessage && /*#__PURE__*/React.createElement(ErrorMessage, null, errorMessage));
};

const DescriptionRender = description => p => {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column'
    }
  }, /*#__PURE__*/React.createElement("span", {
    id: p.labelId,
    className: "ms-ChoiceFieldLabel"
  }, ' ', p.text, ' '), /*#__PURE__*/React.createElement("span", {
    className: 'descriptionLabel ms-ChoiceFieldLabel'
  }, ' ', description, ' '));
};